{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Redis \u76f8\u5173\u6587\u6863","title":"Redis \u76f8\u5173\u6587\u6863"},{"location":"#redis","text":"","title":"Redis \u76f8\u5173\u6587\u6863"},{"location":"blog/","text":"\u535a\u5ba2","title":"\u535a\u5ba2"},{"location":"blog/#_1","text":"","title":"\u535a\u5ba2"},{"location":"blog/news/_index/","text":"","title":"news"},{"location":"blog/news/lua/1993-1999/","text":"1999 20 Dec 1999 Added page with user quotes. 25 Nov 1999 Lua 3.2.1 released. This is a bug-fix release. 09 Nov 1999 Added summary page in Portuguese. 08 Jul 1999 Lua 3.2 released. Check out its features. 26 Apr 1999 Lua 3.2 (beta) released. 18 Mar 1999 Mailing list archive available at eGroups.com. (no longer exists) 18 Feb 1999 New mirror in Germany, courtesy of GWDG. (no longer active) 18 Feb 1999 New mirror in the US, courtesy of cdrom.com. (no longer exists) 1998 15 Sep 1998 Mailing list archive available at ftp sites. (no longer active) 11 Jul 1998 Lua 3.1 released. Check out its features. Introduced a new official logo. 1997 06 Nov 1997 Launched new web site. Read the announcement. 05 Nov 1997 Journal paper on Lua awarded the first prize (technological category) in the II Compaq Award for Research and Development in Computer Science. This award is a joint venture of Compaq Computer in Brazil, the Brazilian Ministry of Science and Technology, and the Brazilian Academy of Sciences. 01 Jul 1997 Lua 3.0 released. Check out its features. 20 Feb 1997 Created mailing list. 1996 01 Dec 1996 Article on Lua published in Dr. Dobb's Journal. 19 Nov 1996 Lua 2.5 released. Check out its features. 01 Jun 1996 Paper on Lua published in Software: Practice & Experience. 14 May 1996 Lua 2.4 released. Check out its features. 1995 28 Nov 1995 Lua 2.2 released. Check out its features. 07 Feb 1995 Lua 2.1 released. Check out its features. Created home page. 1994 01 Aug 1994 First paper describing Lua presented at the XXI Brazilian Seminar on Software and Hardware. 08 Jul 1994 Lua 1.1 released. This is the first public release of Lua. Check out its features. 1993 29 Oct 1993 First public talk about Lua given at the VII Brazilian Symposium on Software Engineering. 28 Jul 1993 Lua 1.0 was up and running. This is the earliest implementation of Lua that we have found to date.","title":"1993-1999 Lua News"},{"location":"blog/news/lua/1993-1999/#1999","text":"20 Dec 1999 Added page with user quotes. 25 Nov 1999 Lua 3.2.1 released. This is a bug-fix release. 09 Nov 1999 Added summary page in Portuguese. 08 Jul 1999 Lua 3.2 released. Check out its features. 26 Apr 1999 Lua 3.2 (beta) released. 18 Mar 1999 Mailing list archive available at eGroups.com. (no longer exists) 18 Feb 1999 New mirror in Germany, courtesy of GWDG. (no longer active) 18 Feb 1999 New mirror in the US, courtesy of cdrom.com. (no longer exists)","title":"1999"},{"location":"blog/news/lua/1993-1999/#1998","text":"15 Sep 1998 Mailing list archive available at ftp sites. (no longer active) 11 Jul 1998 Lua 3.1 released. Check out its features. Introduced a new official logo.","title":"1998"},{"location":"blog/news/lua/1993-1999/#1997","text":"06 Nov 1997 Launched new web site. Read the announcement. 05 Nov 1997 Journal paper on Lua awarded the first prize (technological category) in the II Compaq Award for Research and Development in Computer Science. This award is a joint venture of Compaq Computer in Brazil, the Brazilian Ministry of Science and Technology, and the Brazilian Academy of Sciences. 01 Jul 1997 Lua 3.0 released. Check out its features. 20 Feb 1997 Created mailing list.","title":"1997"},{"location":"blog/news/lua/1993-1999/#1996","text":"01 Dec 1996 Article on Lua published in Dr. Dobb's Journal. 19 Nov 1996 Lua 2.5 released. Check out its features. 01 Jun 1996 Paper on Lua published in Software: Practice & Experience. 14 May 1996 Lua 2.4 released. Check out its features.","title":"1996"},{"location":"blog/news/lua/1993-1999/#1995","text":"28 Nov 1995 Lua 2.2 released. Check out its features. 07 Feb 1995 Lua 2.1 released. Check out its features. Created home page.","title":"1995"},{"location":"blog/news/lua/1993-1999/#1994","text":"01 Aug 1994 First paper describing Lua presented at the XXI Brazilian Seminar on Software and Hardware. 08 Jul 1994 Lua 1.1 released. This is the first public release of Lua. Check out its features.","title":"1994"},{"location":"blog/news/lua/1993-1999/#1993","text":"29 Oct 1993 First public talk about Lua given at the VII Brazilian Symposium on Software Engineering. 28 Jul 1993 Lua 1.0 was up and running. This is the earliest implementation of Lua that we have found to date.","title":"1993"},{"location":"blog/news/lua/2000-2009/","text":"2009 17 Dec 2009 A full-day tutorial on Lua scripting in game production will be given at GDC 2010. 28 Oct 2009 Lua store opens at Zazzle. Use Lua, wear Lua! 06\u201307 Oct 2009 Lua Workshop 2009 held in Rio de Janeiro. 21 Aug 2009 Roberto gives an introductory Lua course at SBLP 2009. 12 Aug 2009 Created Lua BR, a vers\u00e3o brasileira da lista de Lua. LatinoWare 2009 promotes an Ecological Games Contest in which entries using Lua will get a bonus. 20\u201321 Jul 2009 Roberto gives an introductory Lua course at JAI 2009. 23 Jun 2009 Ansca announces the Corona SDK for writing native iPhone applications in Lua. Read the announcement. 08 Jun 2009 Google introduces the Android Scripting Environment with support for Lua. 28 May 2009 Lua Workshop 2009 to be held in Rio de Janeiro. 18 May 2009 The book Concepts of Programming Languages includes sections on Lua and a brief interview with Roberto. 15 Apr 2009 Short scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 27 Mar 2009 Interview with the Lua team to appear in the book Masterminds of Programming. 12 Jan 2009 Reference manual available in Hungarian. (no longer exists) 2008 01 Dec 2008 Lua Programming Gems published. Read the announcement. 19 Sep 2008 Roberto talks about Lua at PyConBrasil 2008. See the slides. 11 Sep 2008 Roberto interviewed for Computerworld's The A-Z of Programming Languages. 22 Aug 2008 Lua 5.1.4 released. This is a bug-fix release. 14\u201315 Jul 2008 Lua Workshop 2008 held at George Washington University in Washington, D.C.. 01 Jul 2008 TYPO3 (AOE media) joins our corporate sponsorship program. (no longer active) 06 Jun 2008 Announced corporate sponsorship program: Oc\u00e9 is our first corporate sponsor. (no longer active) 30 May 2008 Roberto talks about Lua at JAOO 2008, in Brisbane and Sydney. 13 May 2008 Chinese translation of Programming in Lua published. 07 May 2008 Patch for Lua 5.1.3 released. (superseded by Lua 5.1.4) 13 Mar 2008 Reference manual available in Russian. (no longer exists) 21 Feb 2008 Live Lua demo available. 25 Jan 2008 Lua 5.1.3 released. This is a bug-fix release. 24 Jan 2008 \"Introductory Lua programming\" by Yutaka Ueno published (in Japanese). 2007 20 Dec 2007 Launched campaign to Write \"Lua\" Right! 18 Dec 2007 Reference manual available in Spanish. 09 Dec 2007 Lua Workshop 2008 to be held at George Washington University in Washington, D.C., courtesy of Matthew Burke. Read the preliminary announcement. 10 Sep 2007 Reference manual available in Portuguese. 28 Aug 2007 Article on LuaView appears in LabVIEW World (in Italian). 23 Aug 2007 Article \"Traveling light, the Lua way\" by Ashwin Hirschi appears in IEEE Software. Read a review. 05 Aug 2007 Lua climbs to position 15 in the TIOBE Programming Community Index. 17 Jul 2007 Workshop on LuaTeX held at TUG 2007. Watch the videos of the talks. 08 Jul 2007 Lua climbs to position 18 in the TIOBE Programming Community Index. 25 Jun 2007 Korean translation of Programming in Lua published. 09 Jun 2007 Paper on the evolution of Lua presented at the Third ACM SIGPLAN History of Programming Languages Conference (HOPL III), a part of FCRC 2007. See the slides and the video. 09 May 2007 Article on Lua to appear in Linux Journal. 28\u201329 Apr 2007 Scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 02 Apr 2007 Lua 5.1.2 released. This is a bug-fix release. 06 Mar 2007 Lua climbs to position 25 in the TIOBE Programming Community Index. 20 Feb 2007 Mailing list turns 10. Read the announcement. 01 Feb 2007 43 abstracts selected for Lua Programming Gems. 2006 24 Nov 2006 Released call for contributions to Lua Programming Gems. 06 Oct 2006 German translation of Programming in Lua published. 05 Oct 2006 Lua entered the top 50 in the TIOBE Programming Community Index. 04\u201305 Sep 2006 Lua Workshop 2006 held at Oc\u00e9. See photos and videos. 17 Aug 2006 Reference manual available as a book. Buy a copy and help to support the Lua project. 06 Jul 2006 Created official page for the Lua Workshop 2006. 30 Jun 2006 A poll at GameDev.net shows Lua as the favorite embeddable scripting language. 26 Jun 2006 Lua 5.0.3 released. This is a bug-fix release. 09 Jun 2006 Lua 5.1.1 released. This is a bug-fix release. 03 Jun 2006 Lua elected for DistroWatch May 2006 donation. 23 Mar 2006 Second edition of Programming in Lua published. 21 Feb 2006 Lua 5.1 released. Check out its features. 15 Feb 2006 Lua Workshop 2006 to be held at the Oc\u00e9 R&D site in Venlo (NL), courtesy of Wim Couwenberg. Read the announcement. 23 Jan 2006 Some audio recordings from the Lua Workshop 2005 available, courtesy of Shannon Bailey. Read the original announcement (but note that the URL has changed). 2005 18 Nov 2005 Lua 5.1 (beta) released. 16 Nov 2005 Started plans for the Lua Workshop 2006. Read the announcement. 04 Nov 2005 Lua In Games Roundtable to be held in GDC 2006. 29 Sep 2005 Game Development with Lua published. 09 Sep 2005 Lua 5.1 (alpha) released. 01 Sep 2005 Paper on the evolution of Lua submitted to ACM HOPL III. 11 Aug 2005 Roberto presents a Lua case study at Computa\u00e7\u00e3o & Mercado 2005. 03 Aug 2005 Mailing list reaches 1000 subscribers, another all-time record. 27\u201328 Jul 2005 Lua Workshop 2005 held at Adobe. Slides for most of the talks are available. Also some photos. 20 Jun 2005 Roberto talks about Lua at the Politecnico di Milano. The audio is available (also here). 20 Jun 2005 First Lua certification exam announced. (no longer exists) 23 May 2005 Paper on the implementation of Lua 5.0 presented at the IX Brazilian Symposium on Programming Languages. 18 May 2005 Lua 5.1 (work6) released. 16 Mar 2005 Roberto talks about Lua at the 1a Semana de Software Livre da PUC-Rio. 04 Mar 2005 Lua 5.1 (work5) released. 03 Mar 2005 Lua Workshop 2005 to be held at Adobe, courtesy of Mark Hamburg. Read the announcement. 23 Feb 2005 Paper on the implementation of Lua 5.0 submitted to IX Brazilian Symposium on Programming Languages. 22 Jan 2005 New Lua forum in Portuguese. (no longer exists) 11 Jan 2005 Mailing list reaches 800 subscribers, an all-time record. 2004 30 Dec 2004 Lua 5.1 (work4) released. 06 Dec 2004 Lua 5.1 (work3) released. 27 Nov 2004 Why Lua is not BASIC by Gavin Wraith appears in Frobnicate 22 (autumn 2004 issue). 21 Oct 2004 Tutorial on Lua given at WJogos 2004. Read the notes and the slides (in Portuguese). 04 Oct 2004 lua.org hosted by Pepperfish, courtesy of Daniel Silverstone. 20 Sep 2004 Lua 5.1 (work2) released. 01 Sep 2004 Lua 5.1 (work1) released. 23 Jul 2004 Article on Lua to appear in Linux Magazine. 05 Jul 2004 The book Programming in Lua is online. Lua web forums recreated at Icy North Technologies, courtesy of Brett Kapilik. (moved to LuaHUB) 23 Jun 2004 LuaForge opens. Read the announcement. 01 May 2004 LabLua founded. 28 Apr 2004 Added page for receiving donations to help support Lua. 24 Mar 2004 Roundtable about Lua in the gaming industry held at Game Developers Conference 2004. Read the report. 23 Mar 2004 Lua 5.1 (work0) released. 17 Mar 2004 Lua 5.0.2 released. This is a bug-fix release. 2003 15 Dec 2003 The book Programming in Lua by Roberto Ierusalimschy is published. 27 Nov 2003 Added page listing individuals and institutions that have supported Lua. 25 Nov 2003 Lua 5.0.1 released. This is a bug-fix release. 08 Nov 2003 Roberto gives a talk about the innards of Lua at Lightweight Languages 2003. See the slides. 29 Sep 2003 A poll at GameDev.net shows Lua as the most popular language for game scripting. 16 Jun 2003 Added page listing all known bugs in Lua since Lua 4.0. 07 Jun 2003 Roberto gives an invited talk on Lua at the IV Forum Internacional Software Livre. See the slides. 19 May 2003 Mirror of mailing list at Yahoo! Groups closed down. 14 May 2003 Mailing list has a new home, courtesy of Conectiva and Gustavo Niemeyer. (moved to lists.lua.org) 06 May 2003 Added a version history page listing the main features in each version. 11 Apr 2003 Lua 5.0 released. Check out its features. 10 Mar 2003 Yet another web interface for the mailing list archive, courtesy of David Jeske. (no longer active) 11 Feb 2003 Added page listing recent changes in the site and an RSS feed. 05 Feb 2003 Lua web forums created at Icy North Technologies, courtesy of Brett Kapilik. (moved to LuaHUB) 14 Jan 2003 The Year in Scripting Languages released. It contains a review of what happened to Lua in 2002. 2002 17 Dec 2002 Lua 5.0 (beta) released. 29 Aug 2002 Started page with papers and theses on Lua. 22 Aug 2002 Added pages with web traffic statistics and mailing list traffic statistics. (web traffic statistics no longer available) 15 Aug 2002 Lua 5.0 (alpha) released. Check out the commemorative logo. 18 Jul 2002 Source code available for browsing. 10 Jul 2002 Newsgroup interface to the mailing list available at Gmane. (no longer active) 04 Jul 2002 Lua 4.0.1 released. This is a bug-fix release. 25 May 2002 New web interface for the mailing list archive, courtesy of John Belmonte. 21 May 2002 Future versions of Lua will be released under the MIT license. See the new license page. 13 Mar 2002 Updated mirrors page: mirrors at Waterloo, Universit\u00e4t Trier, and freesoftware.com no longer exist. 21 Feb 2002 Added search page. 19 Feb 2002 Lua Library Design Workshop held at Harvard University. 30 Jan 2002 New mirror in Denmark, courtesy of SunSITE.dk. (no longer active) 28 Jan 2002 Moved links page to http://lua-users.org/wiki/LuaLinks. 14 Jan 2002 Moved tools page to http://lua-users.org/wiki/LuaAddons. 07 Jan 2002 Added user survey to help us know our community better. Please take a few minutes to answer it. 2001 03 Dec 2001 Lua IRC channel #lua created at Open Projects Network (now freenode). 20 Aug 2001 lua-users.org, a meeting place for Lua users, is online, courtesy of John Belmonte. 25 Jul 2001 Lua 4.1 (alpha) released. (removed; the next version will be 5.0) 29 May 2001 Lua store opens at CafePress. Use Lua, wear Lua! (no longer exists) 24 May 2001 Roberto gives an invited talk on the history of Lua at the V Brazilian Symposium on Programming Languages. 08 May 2001 New mirror in Russia, courtesy of the Chernogolovka Science Center. (no longer active) 19 Mar 2001 lua.org is online, courtesy of Jim Mathies and Soho One. 2000 06 Nov 2000 Lua 4.0 released. Check out its features. 23 Oct 2000 Added press releases in English and Portuguese. (no longer available) 03 Oct 2000 Added page with press clippings. 21 Sep 2000 Lua 4.0 (beta) released. 23 Aug 2000 Mailing list is back. 20 Aug 2000 Article on Lua appeared in the Adventurer Paradise (in Portuguese). (no longer exists) 24 Apr 2000 Lua 4.0 (alpha) released. 19 Apr 2000 New mirror in Denmark, courtesy of uCore Technology. (no longer active) 29 Mar 2000 New mirror in Japan, courtesy of the University of Aizu. (no longer active) Added page listing all mirror sites. 15 Mar 2000 Mirror in the US moved to ftp://ftp.freesoftware.com/pub/languages/lua/. (no longer exists) 22 Feb 2000 Lua 3.2.2 released. This is a bug-fix release. 16 Feb 2000 Launched Lua Technical Notes. (no longer active) 01 Feb 2000 Lua 3.2 included in Dr. Dobb's Alternative Programming Languages Release 3 CD-ROM.","title":"2000-2009 Lua News"},{"location":"blog/news/lua/2000-2009/#2009","text":"17 Dec 2009 A full-day tutorial on Lua scripting in game production will be given at GDC 2010. 28 Oct 2009 Lua store opens at Zazzle. Use Lua, wear Lua! 06\u201307 Oct 2009 Lua Workshop 2009 held in Rio de Janeiro. 21 Aug 2009 Roberto gives an introductory Lua course at SBLP 2009. 12 Aug 2009 Created Lua BR, a vers\u00e3o brasileira da lista de Lua. LatinoWare 2009 promotes an Ecological Games Contest in which entries using Lua will get a bonus. 20\u201321 Jul 2009 Roberto gives an introductory Lua course at JAI 2009. 23 Jun 2009 Ansca announces the Corona SDK for writing native iPhone applications in Lua. Read the announcement. 08 Jun 2009 Google introduces the Android Scripting Environment with support for Lua. 28 May 2009 Lua Workshop 2009 to be held in Rio de Janeiro. 18 May 2009 The book Concepts of Programming Languages includes sections on Lua and a brief interview with Roberto. 15 Apr 2009 Short scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 27 Mar 2009 Interview with the Lua team to appear in the book Masterminds of Programming. 12 Jan 2009 Reference manual available in Hungarian. (no longer exists)","title":"2009"},{"location":"blog/news/lua/2000-2009/#2008","text":"01 Dec 2008 Lua Programming Gems published. Read the announcement. 19 Sep 2008 Roberto talks about Lua at PyConBrasil 2008. See the slides. 11 Sep 2008 Roberto interviewed for Computerworld's The A-Z of Programming Languages. 22 Aug 2008 Lua 5.1.4 released. This is a bug-fix release. 14\u201315 Jul 2008 Lua Workshop 2008 held at George Washington University in Washington, D.C.. 01 Jul 2008 TYPO3 (AOE media) joins our corporate sponsorship program. (no longer active) 06 Jun 2008 Announced corporate sponsorship program: Oc\u00e9 is our first corporate sponsor. (no longer active) 30 May 2008 Roberto talks about Lua at JAOO 2008, in Brisbane and Sydney. 13 May 2008 Chinese translation of Programming in Lua published. 07 May 2008 Patch for Lua 5.1.3 released. (superseded by Lua 5.1.4) 13 Mar 2008 Reference manual available in Russian. (no longer exists) 21 Feb 2008 Live Lua demo available. 25 Jan 2008 Lua 5.1.3 released. This is a bug-fix release. 24 Jan 2008 \"Introductory Lua programming\" by Yutaka Ueno published (in Japanese).","title":"2008"},{"location":"blog/news/lua/2000-2009/#2007","text":"20 Dec 2007 Launched campaign to Write \"Lua\" Right! 18 Dec 2007 Reference manual available in Spanish. 09 Dec 2007 Lua Workshop 2008 to be held at George Washington University in Washington, D.C., courtesy of Matthew Burke. Read the preliminary announcement. 10 Sep 2007 Reference manual available in Portuguese. 28 Aug 2007 Article on LuaView appears in LabVIEW World (in Italian). 23 Aug 2007 Article \"Traveling light, the Lua way\" by Ashwin Hirschi appears in IEEE Software. Read a review. 05 Aug 2007 Lua climbs to position 15 in the TIOBE Programming Community Index. 17 Jul 2007 Workshop on LuaTeX held at TUG 2007. Watch the videos of the talks. 08 Jul 2007 Lua climbs to position 18 in the TIOBE Programming Community Index. 25 Jun 2007 Korean translation of Programming in Lua published. 09 Jun 2007 Paper on the evolution of Lua presented at the Third ACM SIGPLAN History of Programming Languages Conference (HOPL III), a part of FCRC 2007. See the slides and the video. 09 May 2007 Article on Lua to appear in Linux Journal. 28\u201329 Apr 2007 Scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 02 Apr 2007 Lua 5.1.2 released. This is a bug-fix release. 06 Mar 2007 Lua climbs to position 25 in the TIOBE Programming Community Index. 20 Feb 2007 Mailing list turns 10. Read the announcement. 01 Feb 2007 43 abstracts selected for Lua Programming Gems.","title":"2007"},{"location":"blog/news/lua/2000-2009/#2006","text":"24 Nov 2006 Released call for contributions to Lua Programming Gems. 06 Oct 2006 German translation of Programming in Lua published. 05 Oct 2006 Lua entered the top 50 in the TIOBE Programming Community Index. 04\u201305 Sep 2006 Lua Workshop 2006 held at Oc\u00e9. See photos and videos. 17 Aug 2006 Reference manual available as a book. Buy a copy and help to support the Lua project. 06 Jul 2006 Created official page for the Lua Workshop 2006. 30 Jun 2006 A poll at GameDev.net shows Lua as the favorite embeddable scripting language. 26 Jun 2006 Lua 5.0.3 released. This is a bug-fix release. 09 Jun 2006 Lua 5.1.1 released. This is a bug-fix release. 03 Jun 2006 Lua elected for DistroWatch May 2006 donation. 23 Mar 2006 Second edition of Programming in Lua published. 21 Feb 2006 Lua 5.1 released. Check out its features. 15 Feb 2006 Lua Workshop 2006 to be held at the Oc\u00e9 R&D site in Venlo (NL), courtesy of Wim Couwenberg. Read the announcement. 23 Jan 2006 Some audio recordings from the Lua Workshop 2005 available, courtesy of Shannon Bailey. Read the original announcement (but note that the URL has changed).","title":"2006"},{"location":"blog/news/lua/2000-2009/#2005","text":"18 Nov 2005 Lua 5.1 (beta) released. 16 Nov 2005 Started plans for the Lua Workshop 2006. Read the announcement. 04 Nov 2005 Lua In Games Roundtable to be held in GDC 2006. 29 Sep 2005 Game Development with Lua published. 09 Sep 2005 Lua 5.1 (alpha) released. 01 Sep 2005 Paper on the evolution of Lua submitted to ACM HOPL III. 11 Aug 2005 Roberto presents a Lua case study at Computa\u00e7\u00e3o & Mercado 2005. 03 Aug 2005 Mailing list reaches 1000 subscribers, another all-time record. 27\u201328 Jul 2005 Lua Workshop 2005 held at Adobe. Slides for most of the talks are available. Also some photos. 20 Jun 2005 Roberto talks about Lua at the Politecnico di Milano. The audio is available (also here). 20 Jun 2005 First Lua certification exam announced. (no longer exists) 23 May 2005 Paper on the implementation of Lua 5.0 presented at the IX Brazilian Symposium on Programming Languages. 18 May 2005 Lua 5.1 (work6) released. 16 Mar 2005 Roberto talks about Lua at the 1a Semana de Software Livre da PUC-Rio. 04 Mar 2005 Lua 5.1 (work5) released. 03 Mar 2005 Lua Workshop 2005 to be held at Adobe, courtesy of Mark Hamburg. Read the announcement. 23 Feb 2005 Paper on the implementation of Lua 5.0 submitted to IX Brazilian Symposium on Programming Languages. 22 Jan 2005 New Lua forum in Portuguese. (no longer exists) 11 Jan 2005 Mailing list reaches 800 subscribers, an all-time record.","title":"2005"},{"location":"blog/news/lua/2000-2009/#2004","text":"30 Dec 2004 Lua 5.1 (work4) released. 06 Dec 2004 Lua 5.1 (work3) released. 27 Nov 2004 Why Lua is not BASIC by Gavin Wraith appears in Frobnicate 22 (autumn 2004 issue). 21 Oct 2004 Tutorial on Lua given at WJogos 2004. Read the notes and the slides (in Portuguese). 04 Oct 2004 lua.org hosted by Pepperfish, courtesy of Daniel Silverstone. 20 Sep 2004 Lua 5.1 (work2) released. 01 Sep 2004 Lua 5.1 (work1) released. 23 Jul 2004 Article on Lua to appear in Linux Magazine. 05 Jul 2004 The book Programming in Lua is online. Lua web forums recreated at Icy North Technologies, courtesy of Brett Kapilik. (moved to LuaHUB) 23 Jun 2004 LuaForge opens. Read the announcement. 01 May 2004 LabLua founded. 28 Apr 2004 Added page for receiving donations to help support Lua. 24 Mar 2004 Roundtable about Lua in the gaming industry held at Game Developers Conference 2004. Read the report. 23 Mar 2004 Lua 5.1 (work0) released. 17 Mar 2004 Lua 5.0.2 released. This is a bug-fix release.","title":"2004"},{"location":"blog/news/lua/2000-2009/#2003","text":"15 Dec 2003 The book Programming in Lua by Roberto Ierusalimschy is published. 27 Nov 2003 Added page listing individuals and institutions that have supported Lua. 25 Nov 2003 Lua 5.0.1 released. This is a bug-fix release. 08 Nov 2003 Roberto gives a talk about the innards of Lua at Lightweight Languages 2003. See the slides. 29 Sep 2003 A poll at GameDev.net shows Lua as the most popular language for game scripting. 16 Jun 2003 Added page listing all known bugs in Lua since Lua 4.0. 07 Jun 2003 Roberto gives an invited talk on Lua at the IV Forum Internacional Software Livre. See the slides. 19 May 2003 Mirror of mailing list at Yahoo! Groups closed down. 14 May 2003 Mailing list has a new home, courtesy of Conectiva and Gustavo Niemeyer. (moved to lists.lua.org) 06 May 2003 Added a version history page listing the main features in each version. 11 Apr 2003 Lua 5.0 released. Check out its features. 10 Mar 2003 Yet another web interface for the mailing list archive, courtesy of David Jeske. (no longer active) 11 Feb 2003 Added page listing recent changes in the site and an RSS feed. 05 Feb 2003 Lua web forums created at Icy North Technologies, courtesy of Brett Kapilik. (moved to LuaHUB) 14 Jan 2003 The Year in Scripting Languages released. It contains a review of what happened to Lua in 2002.","title":"2003"},{"location":"blog/news/lua/2000-2009/#2002","text":"17 Dec 2002 Lua 5.0 (beta) released. 29 Aug 2002 Started page with papers and theses on Lua. 22 Aug 2002 Added pages with web traffic statistics and mailing list traffic statistics. (web traffic statistics no longer available) 15 Aug 2002 Lua 5.0 (alpha) released. Check out the commemorative logo. 18 Jul 2002 Source code available for browsing. 10 Jul 2002 Newsgroup interface to the mailing list available at Gmane. (no longer active) 04 Jul 2002 Lua 4.0.1 released. This is a bug-fix release. 25 May 2002 New web interface for the mailing list archive, courtesy of John Belmonte. 21 May 2002 Future versions of Lua will be released under the MIT license. See the new license page. 13 Mar 2002 Updated mirrors page: mirrors at Waterloo, Universit\u00e4t Trier, and freesoftware.com no longer exist. 21 Feb 2002 Added search page. 19 Feb 2002 Lua Library Design Workshop held at Harvard University. 30 Jan 2002 New mirror in Denmark, courtesy of SunSITE.dk. (no longer active) 28 Jan 2002 Moved links page to http://lua-users.org/wiki/LuaLinks. 14 Jan 2002 Moved tools page to http://lua-users.org/wiki/LuaAddons. 07 Jan 2002 Added user survey to help us know our community better. Please take a few minutes to answer it.","title":"2002"},{"location":"blog/news/lua/2000-2009/#2001","text":"03 Dec 2001 Lua IRC channel #lua created at Open Projects Network (now freenode). 20 Aug 2001 lua-users.org, a meeting place for Lua users, is online, courtesy of John Belmonte. 25 Jul 2001 Lua 4.1 (alpha) released. (removed; the next version will be 5.0) 29 May 2001 Lua store opens at CafePress. Use Lua, wear Lua! (no longer exists) 24 May 2001 Roberto gives an invited talk on the history of Lua at the V Brazilian Symposium on Programming Languages. 08 May 2001 New mirror in Russia, courtesy of the Chernogolovka Science Center. (no longer active) 19 Mar 2001 lua.org is online, courtesy of Jim Mathies and Soho One.","title":"2001"},{"location":"blog/news/lua/2000-2009/#2000","text":"06 Nov 2000 Lua 4.0 released. Check out its features. 23 Oct 2000 Added press releases in English and Portuguese. (no longer available) 03 Oct 2000 Added page with press clippings. 21 Sep 2000 Lua 4.0 (beta) released. 23 Aug 2000 Mailing list is back. 20 Aug 2000 Article on Lua appeared in the Adventurer Paradise (in Portuguese). (no longer exists) 24 Apr 2000 Lua 4.0 (alpha) released. 19 Apr 2000 New mirror in Denmark, courtesy of uCore Technology. (no longer active) 29 Mar 2000 New mirror in Japan, courtesy of the University of Aizu. (no longer active) Added page listing all mirror sites. 15 Mar 2000 Mirror in the US moved to ftp://ftp.freesoftware.com/pub/languages/lua/. (no longer exists) 22 Feb 2000 Lua 3.2.2 released. This is a bug-fix release. 16 Feb 2000 Launched Lua Technical Notes. (no longer active) 01 Feb 2000 Lua 3.2 included in Dr. Dobb's Alternative Programming Languages Release 3 CD-ROM.","title":"2000"},{"location":"blog/news/lua/2010-2019/","text":"2019 16 Oct 2019 Lua 5.4.0 (beta) released. 13 Jun 2019 Lua 5.4.0 (alpha) released. 03 Mar 2019 Lua in Moscow Conference 2019 held in Moscow. 2018 26 Oct 2018 \"A look at the design of Lua\" published in Communications of the ACM. Watch the video. 06\u201307 Sep 2018 Lua Workshop 2018 held in Kaunas, Lithuania. 20\u201322 Jul 2018 TUG 2018 held in Rio de Janeiro. The Lua team are special guests. 10 Jul 2018 Lua 5.3.5 released. This is a bug-fix release. See the diffs. 07 Jul 2018 Lua Workshop 2018 to be held in Kaunas, Lithuania, cortesy of CUJO. 18 Jun 2018 Lua 5.4.0 (work2) released. 13 Mar 2018 Lua 5.4.0 (work1) released. 01 Jan 2018 Happy New Year! We commemorate 25 years of Lua in 2018. 2017 16\u201317 Oct 2017Lua Workshop 2017 held in San Francisco. 16 Aug 2017 Roberto participates in Semin\u00e1rio Inovan\u00e7as at the Museum of Tomorrow in Rio. 24 Jul 2017 Lua Workshop 2017 to be held in San Francisco, CA, courtesy of Kong. 05 Jul 2017 Added showcase page. 20 Jun 2017 Roberto gives a keynote at Curry On 2017. Watch the video. 03 Jun 2017 LuaConf 2017 held in Rio de Janeiro. 25 Apr 2017 Fourth edition of Programming in Lua available as e-book. 25 Apr 2017 Lua features in the \"Inovan\u00e7as \u2013 Creations Brazilian style\" exhibition at the Museum of Tomorrow in Rio. Watch the welcome video and read the catalog. Watch the video about Lua. 23 Mar 2017 Roberto will give a keynote at Curry On 2017 in June. 05 Mar 2017 Lua in Moscow Conference 2017 held in Moscow. 20 Feb 2017 Mailing list turns 20. Read the announcement. 30 Jan 2017 Lua 5.3.4 released. This is a bug-fix release. See the diffs. 08 Jan 2017 LuaConf 2017 to be held in June. Read the announcement. 2016 13\u201314 Oct 2016 Lua Workshop 2016 held in San Francisco. 01 Aug 2016 Fourth edition of Programming in Lua published. 09 Jul 2016 LuaConf 2016 held in Rio de Janeiro. 06 Jun 2016 Lua 5.3.3 released. This is a bug-fix release. See the diffs. 06 May 2016 Get 20% off when you buy Programando em Lua through lua.org 15 Mar 2016 lua.org now accepts https connections, courtesy of Pepperfish. 09 Mar 2016 LuaConf 2016 to be held in Rio de Janeiro, courtesy of Etiene Dalcol and Evandro Gon\u00e7alves. 04 Feb 2016 Lua Workshop 2016 to be held in San Francisco, CA, courtesy of Mashape. 2015 30 Nov 2015 Lua 5.3.2 released. This is a bug-fix release. See the diffs. 15\u201316 Oct 2015 Lua Workshop 2015 held in Stockholm. 26 Jun 2015 Programando em Lua published. It's a Portuguese translation of the third edition of Programming in Lua. 17 Jun 2015 Lua 5.3.1 released. This is a bug-fix release. See the diffs. 09 Apr 2015 Lua Workshop 2015 to be held in Stockholm, Sweden, courtesy of King. 07 Mar 2015 Lua 5.2.4 released. This is a bug-fix release. See the diffs. 12 Jan 2015 Lua 5.3.0 released. Check out its features. 2014 11 Dec 2014 Lua 5.3.0 entered final release-candidate cycle. 23 Oct 2014 Lua 5.3.0 (beta) released. 13\u201314 Sep 2014 Lua Workshop 2014 held in Moscow. 31 Jul 2014 Lua 5.3.0 (alpha) released. 19 Jun 2014 Lua 5.3.0 (work3) released. 15 Apr 2014 Lua Workshop 2014 to be held in Moscow, Russia, courtesy of Alexander Gladysh. 21 Mar 2014 Lua 5.3.0 (work2) released. 28 Jan 2014 Reference manual available in Portuguese. 2013 07 Dec 2013 Lua 5.2.3 released. This is a bug-fix release. 23\u201324 Nov 2013 Lua Workshop 2013 held in Toulouse. 02 Oct 2013 CBSoft 2013 celebrates 20 years of Lua. See the slides. 28 Jul 2013 We commemorate 20 years of the first version of Lua today. Read the announcement. 23 Jul 2013 Roberto receives the Scientific Merit Award of the Brazilian Computer Society for his work on Lua. 22 Jul 2003 Added page on getting started with Lua. 12 Jul 2013 Lua Workshop 2013 to be held in Toulouse, France, courtesy of Benjamin Cab\u00e9 and K\u00e9vin Kin-foo. 06 Jul 2013 Lua 5.3.0 (work1) released. 15 May 2013 Roberto gives an invited talk at WWW 2013. See the slides. 14 May 2013 Third edition of Programming in Lua available as e-book. 27 Mar 2013 Lua 5.2.2 released. This is a bug-fix release. 03 Jan 2013 Third edition of Programming in Lua published. 2012 10 Dec 2012 Donations to the Lua project via PayPal are again available. 29\u201330 Nov 2012 Lua Workshop 2012 held at Verisign. 02\u201308 Sep 2012 Roberto gives a course on Real Scripting with Lua at the LASER Summer School on Innovative Languages for Software Engineering. 14 Jun 2012 Lua 5.2.1 released. This is a bug-fix release. 21 May 2012 Lua Workshop 2012 to be held at Verisign, courtesy of John Rodriguez. 04 May 2012 LuaJIT gets a dedicated mailing list. Read the announcement. 17 Apr 2012 Lua store opens at Fibers. Use Lua, wear Lua! (no longer active) 02 Apr 2012 Started plans for the Lua Workshop 2012. 20 Feb 2012 Mailing list turns 15. Read the announcement. 17 Feb 2012 Lua 5.1.5 released. This is a bug-fix release. 30 Jan 2012 Wikipedia chooses Lua as its new template language. Read the announcement. 13 Jan 2012 Lua wins the Front Line Award 2011 from Game Developers Magazine in the category Programming Tools. 09 Jan 2012 Roberto visits Stanford University for three months on a Tinker Professorship. 2011 16 Dec 2011 Lua 5.2.0 released. Check out its features. 23 Oct 2011 Codea launched, an app to create games and simulations using Lua on the iPad. (formerly known as Codify) 08\u201309 Sep 2011 Lua Workshop 2011 held in Switzerland. 13 Jul 2011 Lua 5.2 (beta) released. 06 Jun 2011 Lua enters the top 10 languages of the TIOBE Programming Community Index. 12 May 2011 \"Passing a language through the eye of a needle\" published in ACM Queue. Later also published in Communications of the ACM. 26 Apr 2011 Lua Workshop 2011 to be held in Switzerland, courtesy of Marc Balmer. 03 Apr 2011 Lua approaches the top 10 languages of the TIOBE Programming Community Index. 15 Mar 2011 Reference manual available in German. 12 Feb 2011 Started plans for the Lua Workshop 2011. 2010 23 Nov 2010 Lua 5.2 (alpha) released. 30 Oct 2010 Lua 5.2 (work5) released. 01 Oct 2010 SocialMediaPress joins our corporate sponsorship program. (no longer active) 28 Aug 2010 Mailing list has a new home at Pepperfish. 19 Aug 2010 Short scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 31 Jul 2010 Lua 5.2 (work4) released. 18 May 2010 Lua 5.2 (work3) released. 10 May 2010 The Czechoslovak TeX Users Group joins our corporate sponsorship program. (no longer active) 23 Mar 2010 Lua Programming Gems available as e-book. 10 Mar 2010 Roberto talks at the Stanford EE Computer Systems Colloquium on the design of Lua. Watch the video. See the slides. 09 Mar 2010 Tutorial on Lua scripting in game production given at GDC 2010. See the slides. 01 Mar 2010 Adobe joins our corporate sponsorship program. (no longer active) 20 Jan 2010 Lua forums relocated to LuaHUB, courtesy of Stefan Peters and Brett Kapilik. (no longer exists) 18 Jan 2010 Second edition of Programming in Lua available as e-book. (now the third edition) 13 Jan 2010 Lua 5.2 (work2) released. 08 Jan 2010 Lua 5.2 (work1) released.","title":"2010-2019 Lua News"},{"location":"blog/news/lua/2010-2019/#2019","text":"16 Oct 2019 Lua 5.4.0 (beta) released. 13 Jun 2019 Lua 5.4.0 (alpha) released. 03 Mar 2019 Lua in Moscow Conference 2019 held in Moscow.","title":"2019"},{"location":"blog/news/lua/2010-2019/#2018","text":"26 Oct 2018 \"A look at the design of Lua\" published in Communications of the ACM. Watch the video. 06\u201307 Sep 2018 Lua Workshop 2018 held in Kaunas, Lithuania. 20\u201322 Jul 2018 TUG 2018 held in Rio de Janeiro. The Lua team are special guests. 10 Jul 2018 Lua 5.3.5 released. This is a bug-fix release. See the diffs. 07 Jul 2018 Lua Workshop 2018 to be held in Kaunas, Lithuania, cortesy of CUJO. 18 Jun 2018 Lua 5.4.0 (work2) released. 13 Mar 2018 Lua 5.4.0 (work1) released. 01 Jan 2018 Happy New Year! We commemorate 25 years of Lua in 2018.","title":"2018"},{"location":"blog/news/lua/2010-2019/#2017","text":"16\u201317 Oct 2017Lua Workshop 2017 held in San Francisco. 16 Aug 2017 Roberto participates in Semin\u00e1rio Inovan\u00e7as at the Museum of Tomorrow in Rio. 24 Jul 2017 Lua Workshop 2017 to be held in San Francisco, CA, courtesy of Kong. 05 Jul 2017 Added showcase page. 20 Jun 2017 Roberto gives a keynote at Curry On 2017. Watch the video. 03 Jun 2017 LuaConf 2017 held in Rio de Janeiro. 25 Apr 2017 Fourth edition of Programming in Lua available as e-book. 25 Apr 2017 Lua features in the \"Inovan\u00e7as \u2013 Creations Brazilian style\" exhibition at the Museum of Tomorrow in Rio. Watch the welcome video and read the catalog. Watch the video about Lua. 23 Mar 2017 Roberto will give a keynote at Curry On 2017 in June. 05 Mar 2017 Lua in Moscow Conference 2017 held in Moscow. 20 Feb 2017 Mailing list turns 20. Read the announcement. 30 Jan 2017 Lua 5.3.4 released. This is a bug-fix release. See the diffs. 08 Jan 2017 LuaConf 2017 to be held in June. Read the announcement.","title":"2017"},{"location":"blog/news/lua/2010-2019/#2016","text":"13\u201314 Oct 2016 Lua Workshop 2016 held in San Francisco. 01 Aug 2016 Fourth edition of Programming in Lua published. 09 Jul 2016 LuaConf 2016 held in Rio de Janeiro. 06 Jun 2016 Lua 5.3.3 released. This is a bug-fix release. See the diffs. 06 May 2016 Get 20% off when you buy Programando em Lua through lua.org 15 Mar 2016 lua.org now accepts https connections, courtesy of Pepperfish. 09 Mar 2016 LuaConf 2016 to be held in Rio de Janeiro, courtesy of Etiene Dalcol and Evandro Gon\u00e7alves. 04 Feb 2016 Lua Workshop 2016 to be held in San Francisco, CA, courtesy of Mashape.","title":"2016"},{"location":"blog/news/lua/2010-2019/#2015","text":"30 Nov 2015 Lua 5.3.2 released. This is a bug-fix release. See the diffs. 15\u201316 Oct 2015 Lua Workshop 2015 held in Stockholm. 26 Jun 2015 Programando em Lua published. It's a Portuguese translation of the third edition of Programming in Lua. 17 Jun 2015 Lua 5.3.1 released. This is a bug-fix release. See the diffs. 09 Apr 2015 Lua Workshop 2015 to be held in Stockholm, Sweden, courtesy of King. 07 Mar 2015 Lua 5.2.4 released. This is a bug-fix release. See the diffs. 12 Jan 2015 Lua 5.3.0 released. Check out its features.","title":"2015"},{"location":"blog/news/lua/2010-2019/#2014","text":"11 Dec 2014 Lua 5.3.0 entered final release-candidate cycle. 23 Oct 2014 Lua 5.3.0 (beta) released. 13\u201314 Sep 2014 Lua Workshop 2014 held in Moscow. 31 Jul 2014 Lua 5.3.0 (alpha) released. 19 Jun 2014 Lua 5.3.0 (work3) released. 15 Apr 2014 Lua Workshop 2014 to be held in Moscow, Russia, courtesy of Alexander Gladysh. 21 Mar 2014 Lua 5.3.0 (work2) released. 28 Jan 2014 Reference manual available in Portuguese.","title":"2014"},{"location":"blog/news/lua/2010-2019/#2013","text":"07 Dec 2013 Lua 5.2.3 released. This is a bug-fix release. 23\u201324 Nov 2013 Lua Workshop 2013 held in Toulouse. 02 Oct 2013 CBSoft 2013 celebrates 20 years of Lua. See the slides. 28 Jul 2013 We commemorate 20 years of the first version of Lua today. Read the announcement. 23 Jul 2013 Roberto receives the Scientific Merit Award of the Brazilian Computer Society for his work on Lua. 22 Jul 2003 Added page on getting started with Lua. 12 Jul 2013 Lua Workshop 2013 to be held in Toulouse, France, courtesy of Benjamin Cab\u00e9 and K\u00e9vin Kin-foo. 06 Jul 2013 Lua 5.3.0 (work1) released. 15 May 2013 Roberto gives an invited talk at WWW 2013. See the slides. 14 May 2013 Third edition of Programming in Lua available as e-book. 27 Mar 2013 Lua 5.2.2 released. This is a bug-fix release. 03 Jan 2013 Third edition of Programming in Lua published.","title":"2013"},{"location":"blog/news/lua/2010-2019/#2012","text":"10 Dec 2012 Donations to the Lua project via PayPal are again available. 29\u201330 Nov 2012 Lua Workshop 2012 held at Verisign. 02\u201308 Sep 2012 Roberto gives a course on Real Scripting with Lua at the LASER Summer School on Innovative Languages for Software Engineering. 14 Jun 2012 Lua 5.2.1 released. This is a bug-fix release. 21 May 2012 Lua Workshop 2012 to be held at Verisign, courtesy of John Rodriguez. 04 May 2012 LuaJIT gets a dedicated mailing list. Read the announcement. 17 Apr 2012 Lua store opens at Fibers. Use Lua, wear Lua! (no longer active) 02 Apr 2012 Started plans for the Lua Workshop 2012. 20 Feb 2012 Mailing list turns 15. Read the announcement. 17 Feb 2012 Lua 5.1.5 released. This is a bug-fix release. 30 Jan 2012 Wikipedia chooses Lua as its new template language. Read the announcement. 13 Jan 2012 Lua wins the Front Line Award 2011 from Game Developers Magazine in the category Programming Tools. 09 Jan 2012 Roberto visits Stanford University for three months on a Tinker Professorship.","title":"2012"},{"location":"blog/news/lua/2010-2019/#2011","text":"16 Dec 2011 Lua 5.2.0 released. Check out its features. 23 Oct 2011 Codea launched, an app to create games and simulations using Lua on the iPad. (formerly known as Codify) 08\u201309 Sep 2011 Lua Workshop 2011 held in Switzerland. 13 Jul 2011 Lua 5.2 (beta) released. 06 Jun 2011 Lua enters the top 10 languages of the TIOBE Programming Community Index. 12 May 2011 \"Passing a language through the eye of a needle\" published in ACM Queue. Later also published in Communications of the ACM. 26 Apr 2011 Lua Workshop 2011 to be held in Switzerland, courtesy of Marc Balmer. 03 Apr 2011 Lua approaches the top 10 languages of the TIOBE Programming Community Index. 15 Mar 2011 Reference manual available in German. 12 Feb 2011 Started plans for the Lua Workshop 2011.","title":"2011"},{"location":"blog/news/lua/2010-2019/#2010","text":"23 Nov 2010 Lua 5.2 (alpha) released. 30 Oct 2010 Lua 5.2 (work5) released. 01 Oct 2010 SocialMediaPress joins our corporate sponsorship program. (no longer active) 28 Aug 2010 Mailing list has a new home at Pepperfish. 19 Aug 2010 Short scheduled maintenance at lua.org. Mirror site at PUC-Rio activated during downtime. 31 Jul 2010 Lua 5.2 (work4) released. 18 May 2010 Lua 5.2 (work3) released. 10 May 2010 The Czechoslovak TeX Users Group joins our corporate sponsorship program. (no longer active) 23 Mar 2010 Lua Programming Gems available as e-book. 10 Mar 2010 Roberto talks at the Stanford EE Computer Systems Colloquium on the design of Lua. Watch the video. See the slides. 09 Mar 2010 Tutorial on Lua scripting in game production given at GDC 2010. See the slides. 01 Mar 2010 Adobe joins our corporate sponsorship program. (no longer active) 20 Jan 2010 Lua forums relocated to LuaHUB, courtesy of Stefan Peters and Brett Kapilik. (no longer exists) 18 Jan 2010 Second edition of Programming in Lua available as e-book. (now the third edition) 13 Jan 2010 Lua 5.2 (work2) released. 08 Jan 2010 Lua 5.2 (work1) released.","title":"2010"},{"location":"blog/news/lua/2020-2021/","text":"2021 09 Aug 2021 Roberto talks about Lua at the SIGGRAPH 2021 Retrospective. 16 Jul 2021 Video about Lua and Roblox published by TV PUC-Rio. 29 Mar 2021 Lua 5.4.3 released. This is a bug-fix release. See the diffs. 15 Jan 2021 \"Lua, a misunderstood language\", a blog post by Andre Alves Garzia. 2020 03 Dec 2020 Lua 5.4.2 released. This is a bug-fix release. See the diffs. 29 Oct 2020 Roberto talks live about Lua. See the announcement. (in Portuguese) 09 Oct 2020 Lua 5.4.1 released. This is a bug-fix release. See the diffs. 25 Sep 2020 Lua 5.3.6 released. This is a bug-fix release. See the diffs. 29 Jun 2020 Lua 5.4.0 released. Check out its features. 10 Jun 2020 Lua Workshop 2021 to be held in Freiburg, Germany. (postponed to 2022) 06 Feb 2020 Lua Workshop 2020 to be held in Freiburg, Germany. Read the announcement. (postponed to 2021)","title":"2020-2021 Lua News"},{"location":"blog/news/lua/2020-2021/#2021","text":"09 Aug 2021 Roberto talks about Lua at the SIGGRAPH 2021 Retrospective. 16 Jul 2021 Video about Lua and Roblox published by TV PUC-Rio. 29 Mar 2021 Lua 5.4.3 released. This is a bug-fix release. See the diffs. 15 Jan 2021 \"Lua, a misunderstood language\", a blog post by Andre Alves Garzia.","title":"2021"},{"location":"blog/news/lua/2020-2021/#2020","text":"03 Dec 2020 Lua 5.4.2 released. This is a bug-fix release. See the diffs. 29 Oct 2020 Roberto talks live about Lua. See the announcement. (in Portuguese) 09 Oct 2020 Lua 5.4.1 released. This is a bug-fix release. See the diffs. 25 Sep 2020 Lua 5.3.6 released. This is a bug-fix release. See the diffs. 29 Jun 2020 Lua 5.4.0 released. Check out its features. 10 Jun 2020 Lua Workshop 2021 to be held in Freiburg, Germany. (postponed to 2022) 06 Feb 2020 Lua Workshop 2020 to be held in Freiburg, Germany. Read the announcement. (postponed to 2021)","title":"2020"},{"location":"blog/news/lua/_index/","text":"2021 \u00b7 2020 \u00b7 2019 \u00b7 2018 \u00b7 2017 \u00b7 2016 \u00b7 2015 \u00b7 2014 \u00b7 2013 \u00b7 2012 \u00b7 2011 \u00b7 2010 \u00b7 2009 \u00b7 2008 \u00b7 2007 \u00b7 2006 \u00b7 2005 \u00b7 2004 \u00b7 2003 \u00b7 2002 \u00b7 2001 \u00b7 2000 \u00b7 1999 \u00b7 1998 \u00b7 1997 \u00b7 1996 \u00b7 1995 \u00b7 1994 \u00b7 1993 Here is a summary of the main events around and about Lua. [RSS] Check also the announcements in the mailing list, the recent changes in the site, and our RSS feeds.","title":"Lua News"},{"location":"blog/seckill/_index/","text":"","title":"\u79d2\u6740"},{"location":"blog/seckill/aliyun/","text":"https://help.aliyun.com/document_detail/63920.html \u79d2\u6740\u6d3b\u52a8\u662f\u7edd\u5927\u90e8\u5206\u7535\u5546\u9009\u62e9\u7684\u4f4e\u4ef7\u4fc3\u9500\u3001\u63a8\u5e7f\u54c1\u724c\u7684\u65b9\u5f0f\u3002\u4e0d\u4ec5\u53ef\u4ee5\u7ed9\u5e73\u53f0\u5e26\u6765\u7528\u6237\u91cf\uff0c\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u5e73\u53f0\u77e5\u540d\u5ea6\u3002\u4e00\u4e2a\u597d\u7684\u79d2\u6740\u7cfb\u7edf\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5e73\u53f0\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u516c\u5e73\u6027\uff0c\u83b7\u5f97\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u63d0\u5347\u5e73\u53f0\u7684\u53e3\u7891\uff0c\u4ece\u800c\u63d0\u5347\u79d2\u6740\u6d3b\u52a8\u7684\u6700\u5927\u4ef7\u503c\u3002\u672c\u6587\u8ba8\u8bba\u4e91\u6570\u636e\u5e93 Redis \u7248\u7f13\u5b58\u8bbe\u8ba1\u9ad8\u5e76\u53d1\u7684\u79d2\u6740\u7cfb\u7edf\u3002 \u79d2\u6740\u7684\u7279\u5f81 \u79d2\u6740\u6d3b\u52a8\u5bf9\u7a00\u7f3a\u6216\u8005\u7279\u4ef7\u7684\u5546\u54c1\u8fdb\u884c\u5b9a\u65f6\u5b9a\u91cf\u552e\u5356\uff0c\u5438\u5f15\u6210\u5927\u91cf\u7684\u6d88\u8d39\u8005\u8fdb\u884c\u62a2\u8d2d\uff0c\u4f46\u53c8\u53ea\u6709\u5c11\u90e8\u5206\u6d88\u8d39\u8005\u53ef\u4ee5\u4e0b\u5355\u6210\u529f\u3002 \u56e0\u6b64\uff0c\u79d2\u6740\u6d3b\u52a8\u5c06\u5728\u8f83\u77ed\u65f6\u95f4\u5185\u4ea7\u751f\u6bd4\u5e73\u65f6\u5927\u6570\u5341\u500d\uff0c\u4e0a\u767e\u500d\u7684\u9875\u9762\u8bbf\u95ee\u6d41\u91cf\u548c\u4e0b\u5355\u8bf7\u6c42\u6d41\u91cf\u3002 \u79d2\u6740\u6d3b\u52a8\u53ef\u4ee5\u5206\u4e3a 3 \u4e2a\u9636\u6bb5\uff1a \u79d2\u6740\u524d\uff1a\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\uff0c\u9875\u9762\u8bf7\u6c42\u8fbe\u5230\u77ac\u65f6\u5cf0\u503c\u3002 \u79d2\u6740\u5f00\u59cb\uff1a\u7528\u6237\u70b9\u51fb\u79d2\u6740\u6309\u94ae\uff0c\u4e0b\u5355\u8bf7\u6c42\u8fbe\u5230\u77ac\u65f6\u5cf0\u503c\u3002 \u79d2\u6740\u540e\uff1a\u4e00\u90e8\u5206\u6210\u529f\u4e0b\u5355\u7684\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u8ba2\u5355\u6216\u8005\u4ea7\u751f\u9000\u5355\u64cd\u4f5c\uff0c\u5927\u90e8\u5206\u7528\u6237\u7ee7\u7eed\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\u7b49\u5f85\u9000\u5355\u673a\u4f1a\u3002 \u6d88\u8d39\u8005\u63d0\u4ea4\u8ba2\u5355\uff0c\u4e00\u822c\u505a\u6cd5\u662f\u5229\u7528\u6570\u636e\u5e93\u7684\u884c\u7ea7\u9501\uff0c\u53ea\u6709\u62a2\u5230\u9501\u7684\u8bf7\u6c42\u53ef\u4ee5\u8fdb\u884c\u5e93\u5b58\u67e5\u8be2\u548c\u4e0b\u5355\u64cd\u4f5c\u3002 \u4f46\u662f\u5728\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u65e0\u6cd5\u627f\u62c5\u5982\u6b64\u5927\u7684\u8bf7\u6c42\uff0c\u5f80\u5f80\u4f1a\u4f7f\u6574\u4e2a\u670d\u52a1 blocked\uff0c\u5728\u6d88\u8d39\u8005\u770b\u6765\u5c31\u662f\u670d\u52a1\u5668\u5b95\u673a\u3002 \u79d2\u6740\u7cfb\u7edf \u79d2\u6740\u7cfb\u7edf\u7684\u6d41\u91cf\u867d\u7136\u5f88\u9ad8\uff0c\u4f46\u662f\u5b9e\u9645\u6709\u6548\u6d41\u91cf\u662f\u5341\u5206\u6709\u9650\u7684\u3002\u5229\u7528\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u5728\u6bcf\u4e2a\u9636\u6bb5\u63d0\u524d\u6821\u9a8c\uff0c\u62e6\u622a\u65e0\u6548\u6d41\u91cf\uff0c\u53ef\u4ee5\u51cf\u5c11\u5927\u91cf\u65e0\u6548\u7684\u6d41\u91cf\u6d8c\u5165\u6570\u636e\u5e93\u3002 \u5229\u7528\u6d4f\u89c8\u5668\u7f13\u5b58\u548c CDN \u6297\u538b\u9759\u6001\u9875\u9762\u6d41\u91cf \u79d2\u6740\u524d\uff0c\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\uff0c\u9020\u6210\u5927\u91cf\u7684\u9875\u9762\u8bf7\u6c42\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u628a\u79d2\u6740\u5546\u54c1\u8be6\u60c5\u9875\u4e0e\u666e\u901a\u7684\u5546\u54c1\u8be6\u60c5\u9875\u5206\u5f00\u3002 \u5bf9\u4e8e\u79d2\u6740\u5546\u54c1\u8be6\u60c5\u9875\u5c3d\u91cf\u5c06\u80fd\u9759\u6001\u5316\u7684\u5143\u7d20\u9759\u6001\u5316\u5904\u7406\uff0c\u9664\u4e86\u79d2\u6740\u6309\u94ae\u9700\u8981\u670d\u52a1\u7aef\u8fdb\u884c\u52a8\u6001\u5224\u65ad\uff0c\u5176\u4ed6\u7684\u9759\u6001\u6570\u636e\u53ef\u4ee5\u7f13\u5b58\u5728\u6d4f\u89c8\u5668\u548c CDN \u4e0a\u3002 \u8fd9\u6837\uff0c\u79d2\u6740\u524d\u5237\u65b0\u9875\u9762\u5bfc\u81f4\u7684\u6d41\u91cf\u8fdb\u5165\u670d\u52a1\u7aef\u7684\u6d41\u91cf\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\u3002 \u5229\u7528\u8bfb\u5199\u5206\u79bb Redis \u7f13\u5b58\u62e6\u622a\u6d41\u91cf CDN \u662f\u7b2c\u4e00\u7ea7\u6d41\u91cf\u62e6\u622a\uff0c\u7b2c\u4e8c\u7ea7\u6d41\u91cf\u62e6\u622a\u6211\u4eec\u4f7f\u7528\u652f\u6301\u8bfb\u5199\u5206\u79bb\u7684 Redis\u3002 \u5728\u8fd9\u4e00\u9636\u6bb5\u6211\u4eec\u4e3b\u8981\u8bfb\u53d6\u6570\u636e\uff0c\u8bfb\u5199\u5206\u79bb Redis \u80fd\u652f\u6301\u9ad8\u8fbe 60 \u4e07\u4ee5\u4e0a qps\uff0c\u5b8c\u5168\u53ef\u4ee5\u652f\u6301\u9700\u6c42\u3002 \u9996\u5148\u901a\u8fc7\u6570\u636e\u63a7\u5236\u6a21\u5757\uff0c\u63d0\u524d\u5c06\u79d2\u6740\u5546\u54c1\u7f13\u5b58\u5230\u8bfb\u5199\u5206\u79bb Redis\uff0c\u5e76\u8bbe\u7f6e\u79d2\u6740\u5f00\u59cb\u6807\u8bb0\u5982\u4e0b\uff1a Text Only \"goodsId_count\": 100 //\u603b\u6570 \"goodsId_start\": 0 //\u5f00\u59cb\u6807\u8bb0 \"goodsId_access\": 0 //\u63a5\u53d7\u4e0b\u5355\u6570 \u79d2\u6740\u5f00\u59cb\u524d\uff0c\u670d\u52a1\u96c6\u7fa4\u8bfb\u53d6 goodsId_Start \u4e3a 0\uff0c\u76f4\u63a5\u8fd4\u56de\u672a\u5f00\u59cb\u3002 \u6570\u636e\u63a7\u5236\u6a21\u5757\u5c06 goodsId_start \u6539\u4e3a 1\uff0c\u6807\u5fd7\u79d2\u6740\u5f00\u59cb\u3002 \u670d\u52a1\u96c6\u7fa4\u7f13\u5b58\u5f00\u59cb\u6807\u8bb0\u4f4d\u5e76\u5f00\u59cb\u63a5\u53d7\u8bf7\u6c42\uff0c\u5e76\u8bb0\u5f55\u5230 Redis \u4e2d goodsId_access\uff0c\u5546\u54c1\u5269\u4f59\u6570\u91cf\u4e3a\uff08goodsId_count - goodsId_access\uff09\u3002 \u5f53\u63a5\u53d7\u4e0b\u5355\u6570\u8fbe\u5230 goodsId_count \u540e\uff0c\u7ee7\u7eed\u62e6\u622a\u6240\u6709\u8bf7\u6c42\uff0c\u5546\u54c1\u5269\u4f59\u6570\u91cf\u4e3a 0\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u540e\u6210\u529f\u53c2\u4e0e\u4e0b\u5355\u7684\u8bf7\u6c42\u53ea\u6709\u5c11\u90e8\u5206\u53ef\u4ee5\u88ab\u63a5\u53d7\u3002\u5728\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u5141\u8bb8\u7a0d\u5fae\u591a\u7684\u6d41\u91cf\u8fdb\u5165\u3002\u56e0\u6b64\u53ef\u4ee5\u63a7\u5236\u63a5\u53d7\u4e0b\u5355\u6570\u7684\u6bd4\u4f8b\u3002 \u5229\u7528\u4e3b\u4ece\u7248 Redis \u7f13\u5b58\u52a0\u901f\u5e93\u5b58\u6263\u91cf \u6210\u529f\u53c2\u4e0e\u4e0b\u5355\u540e\uff0c\u8fdb\u5165\u4e0b\u5c42\u670d\u52a1\uff0c\u5f00\u59cb\u8fdb\u884c\u8ba2\u5355\u4fe1\u606f\u6821\u9a8c\uff0c\u5e93\u5b58\u6263\u91cf\u3002 \u4e3a\u4e86\u907f\u514d\u76f4\u63a5\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6211\u4eec\u4f7f\u7528\u4e3b\u4ece\u7248 Redis \u6765\u8fdb\u884c\u5e93\u5b58\u6263\u91cf\uff0c\u4e3b\u4ece\u7248 Redis \u63d0\u4f9b 10 \u4e07\u7ea7\u522b\u7684 QPS\u3002 \u4f7f\u7528 Redis \u6765\u4f18\u5316\u5e93\u5b58\u67e5\u8be2\uff0c\u63d0\u524d\u62e6\u622a\u79d2\u6740\u5931\u8d25\u7684\u8bf7\u6c42\uff0c\u5c06\u5927\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684\u6574\u4f53\u541e\u5410\u91cf\u3002 \u901a\u8fc7\u6570\u636e\u63a7\u5236\u6a21\u5757\u63d0\u524d\u5c06\u5e93\u5b58\u5b58\u5165 Redis\uff0c\u5c06\u6bcf\u4e2a\u79d2\u6740\u5546\u54c1\u5728 Redis \u4e2d\u7528\u4e00\u4e2a hash \u7ed3\u6784\u8868\u793a\u3002 Text Only \"goodsId\" : { \"Total\": 100 \"Booked\": 0 } \u8bf4\u660e goodsId \u8868\u793a\u5546\u54c1 ID\uff0cTotal \u8868\u793a\u8be5\u5546\u54c1\u7684\u5e93\u5b58\u6570\u91cf\uff0cBooked \u8868\u793a\u8be5\u5546\u54c1\u5df2\u88ab\u8ba2\u8d2d\u7684\u6570\u91cf\u3002 \u6263\u91cf\u65f6\uff0c\u670d\u52a1\u5668\u901a\u8fc7\u8bf7\u6c42 Redis \u83b7\u53d6\u4e0b\u5355\u8d44\u683c\uff0c\u901a\u8fc7\u4ee5\u4e0b lua \u811a\u672c\u5b9e\u73b0\uff0c\u7531\u4e8e Redis \u662f\u5355\u7ebf\u7a0b\u6a21\u578b\uff0clua \u53ef\u4ee5\u4fdd\u8bc1\u591a\u4e2a\u547d\u4ee4\u7684 \u539f\u5b50\u6027 \u3002 Lua local n = tonumber ( ARGV [ 1 ]) if not n or n == 0 then return 0 end local vals = redis . call ( \"HMGET\" , KEYS [ 1 ], \"Total\" , \"Booked\" ); local total = tonumber ( vals [ 1 ]) local blocked = tonumber ( vals [ 2 ]) if not total or not blocked then return 0 end if blocked + n <= total then redis . call ( \"HINCRBY\" , KEYS [ 1 ], \"Booked\" , n ) return n ; end return 0 \u5148\u4f7f\u7528 SCRIPT LOAD \u5c06 lua \u811a\u672c\u63d0\u524d\u7f13\u5b58\u5728 Redis\uff0c\u7136\u540e\u8c03\u7528 EVALSHA \u8c03\u7528\u811a\u672c\uff0c\u6bd4\u76f4\u63a5\u8c03\u7528 EVAL \u8282\u7701\u7f51\u7edc\u5e26\u5bbd\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7f13\u5b58 lua \u811a\u672c\u81f3 Redis\u3002 Bash SCRIPT LOAD \"lua code\" \u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a Bash \"438dd755f3fe0d32771753eb57f075b18fed7716\" \u8c03\u7528\u8be5 lua \u811a\u672c\u3002 Bash EVALSHA 438dd755f3fe0d32771753eb57f075b18fed7716 1 goodsId 1 \u8fd4\u56de\u7ed3\u679c\u5982\u4e0b\uff0c\u8868\u793a\u6263\u51cf\u4e86 1 \u4e2a\u5e93\u5b58\uff1a Bash ( integer ) 1 \u8bf4\u660e \u6b64\u65f6\uff0c\u6267\u884c HGET goodsId Booked \u547d\u4ee4\uff0c\u53ef\u67e5\u770b\u5230\u8fd4\u56de\u7684\u503c\u4e3a\"1\"\uff0c\u5373\u8be5\u5546\u54c1\u5df2\u88ab\u8ba2\u8d2d\u7684\u6570\u91cf\u4e3a 1\u3002 \u79d2\u6740\u670d\u52a1\u53ef\u901a\u8fc7\u5224\u65ad Redis \u662f\u5426\u8fd4\u56de\u62a2\u8d2d\u4e2a\u6570 n\uff0c\u5373\u53ef\u77e5\u9053\u6b64\u6b21\u8bf7\u6c42\u662f\u5426\u6263\u91cf\u6210\u529f\u3002 \u4f7f\u7528\u4e3b\u4ece\u7248 Redis \u5b9e\u73b0\u7b80\u5355\u7684\u6d88\u606f\u961f\u5217\u5f02\u6b65\u4e0b\u5355\u5165\u5e93 \u6263\u91cf\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u8ba2\u5355\u5165\u5e93\u3002\u5982\u679c\u5546\u54c1\u6570\u91cf\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u5e93\u5373\u53ef\u3002\u5982\u679c\u79d2\u6740\u7684\u5546\u54c1\u662f 1 \u4e07\uff0c\u751a\u81f3 10 \u4e07\u7ea7\u522b\uff0c\u90a3\u6570\u636e\u5e93\u9501\u51b2\u7a81\u5c06\u5e26\u6765\u5f88\u5927\u7684\u6027\u80fd\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u5229\u7528\u6d88\u606f\u961f\u5217\u7ec4\u4ef6\uff0c\u5f53\u79d2\u6740\u670d\u52a1\u5c06\u8ba2\u5355\u4fe1\u606f\u5199\u5165\u6d88\u606f\u961f\u5217\u540e\uff0c\u5373\u53ef\u8ba4\u4e3a\u4e0b\u5355\u5b8c\u6210\uff0c\u907f\u514d\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6d88\u606f\u961f\u5217\u7ec4\u4ef6\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 Redis \u5b9e\u73b0\uff0c\u5728 R2 \u4e2d\u7528 list \u6570\u636e\u7ed3\u6784\u8868\u793a\u3002 Text Only orderList { [0] = {\u8ba2\u5355\u5185\u5bb9} [1] = {\u8ba2\u5355\u5185\u5bb9} [2] = {\u8ba2\u5355\u5185\u5bb9} ... } \u5c06\u8ba2\u5355\u5185\u5bb9\u5199\u5165 Redis\uff1a Bash LPUSH orderList { \u8ba2\u5355\u5185\u5bb9 } \u5f02\u6b65\u4e0b\u5355\u6a21\u5757\u4ece Redis \u4e2d\u987a\u5e8f\u83b7\u53d6\u8ba2\u5355\u4fe1\u606f\uff0c\u5e76\u5c06\u8ba2\u5355\u5199\u5165\u6570\u636e\u5e93\u3002 Bash BRPOP orderList 0 \u901a\u8fc7\u4f7f\u7528 Redis \u4f5c\u4e3a\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u5904\u7406\u8ba2\u5355\u5165\u5e93\uff0c\u6709\u6548\u7684\u63d0\u9ad8\u4e86\u7528\u6237\u7684\u4e0b\u5355\u5b8c\u6210\u901f\u5ea6\u3002 \u6570\u636e\u63a7\u5236\u6a21\u5757\u7ba1\u7406\u79d2\u6740\u6570\u636e\u540c\u6b65 \u6700\u5f00\u59cb\uff0c\u5229\u7528\u8bfb\u5199\u5206\u79bb Redis \u8fdb\u884c\u6d41\u91cf\u9650\u5236\uff0c\u53ea\u8ba9\u90e8\u5206\u6d41\u91cf\u8fdb\u5165\u4e0b\u5355\u3002 \u5bf9\u4e8e\u4e0b\u5355\u68c0\u9a8c\u5931\u8d25\u548c\u9000\u5355\u7b49\u60c5\u51b5\uff0c\u9700\u8981\u8ba9\u66f4\u591a\u7684\u6d41\u91cf\u8fdb\u6765\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u63a7\u5236\u6a21\u5757\u9700\u8981\u5b9a\u65f6\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4e00\u5b9a\u7684\u8ba1\u7b97\uff0c\u540c\u6b65\u5230\u4e3b\u4ece\u7248 Redis\uff0c\u540c\u65f6\u518d\u540c\u6b65\u5230\u8bfb\u5199\u5206\u79bb\u7684 Redis\uff0c\u8ba9\u66f4\u591a\u7684\u6d41\u91cf\u8fdb\u6765\u3002","title":"\u4f7f\u7528  \u642d\u5efa\u7535\u5546\u79d2\u6740\u7cfb\u7edf"},{"location":"blog/seckill/aliyun/#_1","text":"\u79d2\u6740\u6d3b\u52a8\u5bf9\u7a00\u7f3a\u6216\u8005\u7279\u4ef7\u7684\u5546\u54c1\u8fdb\u884c\u5b9a\u65f6\u5b9a\u91cf\u552e\u5356\uff0c\u5438\u5f15\u6210\u5927\u91cf\u7684\u6d88\u8d39\u8005\u8fdb\u884c\u62a2\u8d2d\uff0c\u4f46\u53c8\u53ea\u6709\u5c11\u90e8\u5206\u6d88\u8d39\u8005\u53ef\u4ee5\u4e0b\u5355\u6210\u529f\u3002 \u56e0\u6b64\uff0c\u79d2\u6740\u6d3b\u52a8\u5c06\u5728\u8f83\u77ed\u65f6\u95f4\u5185\u4ea7\u751f\u6bd4\u5e73\u65f6\u5927\u6570\u5341\u500d\uff0c\u4e0a\u767e\u500d\u7684\u9875\u9762\u8bbf\u95ee\u6d41\u91cf\u548c\u4e0b\u5355\u8bf7\u6c42\u6d41\u91cf\u3002 \u79d2\u6740\u6d3b\u52a8\u53ef\u4ee5\u5206\u4e3a 3 \u4e2a\u9636\u6bb5\uff1a \u79d2\u6740\u524d\uff1a\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\uff0c\u9875\u9762\u8bf7\u6c42\u8fbe\u5230\u77ac\u65f6\u5cf0\u503c\u3002 \u79d2\u6740\u5f00\u59cb\uff1a\u7528\u6237\u70b9\u51fb\u79d2\u6740\u6309\u94ae\uff0c\u4e0b\u5355\u8bf7\u6c42\u8fbe\u5230\u77ac\u65f6\u5cf0\u503c\u3002 \u79d2\u6740\u540e\uff1a\u4e00\u90e8\u5206\u6210\u529f\u4e0b\u5355\u7684\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u8ba2\u5355\u6216\u8005\u4ea7\u751f\u9000\u5355\u64cd\u4f5c\uff0c\u5927\u90e8\u5206\u7528\u6237\u7ee7\u7eed\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\u7b49\u5f85\u9000\u5355\u673a\u4f1a\u3002 \u6d88\u8d39\u8005\u63d0\u4ea4\u8ba2\u5355\uff0c\u4e00\u822c\u505a\u6cd5\u662f\u5229\u7528\u6570\u636e\u5e93\u7684\u884c\u7ea7\u9501\uff0c\u53ea\u6709\u62a2\u5230\u9501\u7684\u8bf7\u6c42\u53ef\u4ee5\u8fdb\u884c\u5e93\u5b58\u67e5\u8be2\u548c\u4e0b\u5355\u64cd\u4f5c\u3002 \u4f46\u662f\u5728\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u5e93\u65e0\u6cd5\u627f\u62c5\u5982\u6b64\u5927\u7684\u8bf7\u6c42\uff0c\u5f80\u5f80\u4f1a\u4f7f\u6574\u4e2a\u670d\u52a1 blocked\uff0c\u5728\u6d88\u8d39\u8005\u770b\u6765\u5c31\u662f\u670d\u52a1\u5668\u5b95\u673a\u3002","title":"\u79d2\u6740\u7684\u7279\u5f81"},{"location":"blog/seckill/aliyun/#_2","text":"\u79d2\u6740\u7cfb\u7edf\u7684\u6d41\u91cf\u867d\u7136\u5f88\u9ad8\uff0c\u4f46\u662f\u5b9e\u9645\u6709\u6548\u6d41\u91cf\u662f\u5341\u5206\u6709\u9650\u7684\u3002\u5229\u7528\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u5728\u6bcf\u4e2a\u9636\u6bb5\u63d0\u524d\u6821\u9a8c\uff0c\u62e6\u622a\u65e0\u6548\u6d41\u91cf\uff0c\u53ef\u4ee5\u51cf\u5c11\u5927\u91cf\u65e0\u6548\u7684\u6d41\u91cf\u6d8c\u5165\u6570\u636e\u5e93\u3002","title":"\u79d2\u6740\u7cfb\u7edf"},{"location":"blog/seckill/aliyun/#cdn","text":"\u79d2\u6740\u524d\uff0c\u7528\u6237\u4e0d\u65ad\u5237\u65b0\u5546\u54c1\u8be6\u60c5\u9875\uff0c\u9020\u6210\u5927\u91cf\u7684\u9875\u9762\u8bf7\u6c42\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u628a\u79d2\u6740\u5546\u54c1\u8be6\u60c5\u9875\u4e0e\u666e\u901a\u7684\u5546\u54c1\u8be6\u60c5\u9875\u5206\u5f00\u3002 \u5bf9\u4e8e\u79d2\u6740\u5546\u54c1\u8be6\u60c5\u9875\u5c3d\u91cf\u5c06\u80fd\u9759\u6001\u5316\u7684\u5143\u7d20\u9759\u6001\u5316\u5904\u7406\uff0c\u9664\u4e86\u79d2\u6740\u6309\u94ae\u9700\u8981\u670d\u52a1\u7aef\u8fdb\u884c\u52a8\u6001\u5224\u65ad\uff0c\u5176\u4ed6\u7684\u9759\u6001\u6570\u636e\u53ef\u4ee5\u7f13\u5b58\u5728\u6d4f\u89c8\u5668\u548c CDN \u4e0a\u3002 \u8fd9\u6837\uff0c\u79d2\u6740\u524d\u5237\u65b0\u9875\u9762\u5bfc\u81f4\u7684\u6d41\u91cf\u8fdb\u5165\u670d\u52a1\u7aef\u7684\u6d41\u91cf\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\u3002","title":"\u5229\u7528\u6d4f\u89c8\u5668\u7f13\u5b58\u548c CDN \u6297\u538b\u9759\u6001\u9875\u9762\u6d41\u91cf"},{"location":"blog/seckill/aliyun/#redis","text":"CDN \u662f\u7b2c\u4e00\u7ea7\u6d41\u91cf\u62e6\u622a\uff0c\u7b2c\u4e8c\u7ea7\u6d41\u91cf\u62e6\u622a\u6211\u4eec\u4f7f\u7528\u652f\u6301\u8bfb\u5199\u5206\u79bb\u7684 Redis\u3002 \u5728\u8fd9\u4e00\u9636\u6bb5\u6211\u4eec\u4e3b\u8981\u8bfb\u53d6\u6570\u636e\uff0c\u8bfb\u5199\u5206\u79bb Redis \u80fd\u652f\u6301\u9ad8\u8fbe 60 \u4e07\u4ee5\u4e0a qps\uff0c\u5b8c\u5168\u53ef\u4ee5\u652f\u6301\u9700\u6c42\u3002 \u9996\u5148\u901a\u8fc7\u6570\u636e\u63a7\u5236\u6a21\u5757\uff0c\u63d0\u524d\u5c06\u79d2\u6740\u5546\u54c1\u7f13\u5b58\u5230\u8bfb\u5199\u5206\u79bb Redis\uff0c\u5e76\u8bbe\u7f6e\u79d2\u6740\u5f00\u59cb\u6807\u8bb0\u5982\u4e0b\uff1a Text Only \"goodsId_count\": 100 //\u603b\u6570 \"goodsId_start\": 0 //\u5f00\u59cb\u6807\u8bb0 \"goodsId_access\": 0 //\u63a5\u53d7\u4e0b\u5355\u6570 \u79d2\u6740\u5f00\u59cb\u524d\uff0c\u670d\u52a1\u96c6\u7fa4\u8bfb\u53d6 goodsId_Start \u4e3a 0\uff0c\u76f4\u63a5\u8fd4\u56de\u672a\u5f00\u59cb\u3002 \u6570\u636e\u63a7\u5236\u6a21\u5757\u5c06 goodsId_start \u6539\u4e3a 1\uff0c\u6807\u5fd7\u79d2\u6740\u5f00\u59cb\u3002 \u670d\u52a1\u96c6\u7fa4\u7f13\u5b58\u5f00\u59cb\u6807\u8bb0\u4f4d\u5e76\u5f00\u59cb\u63a5\u53d7\u8bf7\u6c42\uff0c\u5e76\u8bb0\u5f55\u5230 Redis \u4e2d goodsId_access\uff0c\u5546\u54c1\u5269\u4f59\u6570\u91cf\u4e3a\uff08goodsId_count - goodsId_access\uff09\u3002 \u5f53\u63a5\u53d7\u4e0b\u5355\u6570\u8fbe\u5230 goodsId_count \u540e\uff0c\u7ee7\u7eed\u62e6\u622a\u6240\u6709\u8bf7\u6c42\uff0c\u5546\u54c1\u5269\u4f59\u6570\u91cf\u4e3a 0\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u540e\u6210\u529f\u53c2\u4e0e\u4e0b\u5355\u7684\u8bf7\u6c42\u53ea\u6709\u5c11\u90e8\u5206\u53ef\u4ee5\u88ab\u63a5\u53d7\u3002\u5728\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\uff0c\u5141\u8bb8\u7a0d\u5fae\u591a\u7684\u6d41\u91cf\u8fdb\u5165\u3002\u56e0\u6b64\u53ef\u4ee5\u63a7\u5236\u63a5\u53d7\u4e0b\u5355\u6570\u7684\u6bd4\u4f8b\u3002 \u5229\u7528\u4e3b\u4ece\u7248 Redis \u7f13\u5b58\u52a0\u901f\u5e93\u5b58\u6263\u91cf \u6210\u529f\u53c2\u4e0e\u4e0b\u5355\u540e\uff0c\u8fdb\u5165\u4e0b\u5c42\u670d\u52a1\uff0c\u5f00\u59cb\u8fdb\u884c\u8ba2\u5355\u4fe1\u606f\u6821\u9a8c\uff0c\u5e93\u5b58\u6263\u91cf\u3002 \u4e3a\u4e86\u907f\u514d\u76f4\u63a5\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6211\u4eec\u4f7f\u7528\u4e3b\u4ece\u7248 Redis \u6765\u8fdb\u884c\u5e93\u5b58\u6263\u91cf\uff0c\u4e3b\u4ece\u7248 Redis \u63d0\u4f9b 10 \u4e07\u7ea7\u522b\u7684 QPS\u3002 \u4f7f\u7528 Redis \u6765\u4f18\u5316\u5e93\u5b58\u67e5\u8be2\uff0c\u63d0\u524d\u62e6\u622a\u79d2\u6740\u5931\u8d25\u7684\u8bf7\u6c42\uff0c\u5c06\u5927\u5927\u63d0\u9ad8\u7cfb\u7edf\u7684\u6574\u4f53\u541e\u5410\u91cf\u3002 \u901a\u8fc7\u6570\u636e\u63a7\u5236\u6a21\u5757\u63d0\u524d\u5c06\u5e93\u5b58\u5b58\u5165 Redis\uff0c\u5c06\u6bcf\u4e2a\u79d2\u6740\u5546\u54c1\u5728 Redis \u4e2d\u7528\u4e00\u4e2a hash \u7ed3\u6784\u8868\u793a\u3002 Text Only \"goodsId\" : { \"Total\": 100 \"Booked\": 0 } \u8bf4\u660e goodsId \u8868\u793a\u5546\u54c1 ID\uff0cTotal \u8868\u793a\u8be5\u5546\u54c1\u7684\u5e93\u5b58\u6570\u91cf\uff0cBooked \u8868\u793a\u8be5\u5546\u54c1\u5df2\u88ab\u8ba2\u8d2d\u7684\u6570\u91cf\u3002 \u6263\u91cf\u65f6\uff0c\u670d\u52a1\u5668\u901a\u8fc7\u8bf7\u6c42 Redis \u83b7\u53d6\u4e0b\u5355\u8d44\u683c\uff0c\u901a\u8fc7\u4ee5\u4e0b lua \u811a\u672c\u5b9e\u73b0\uff0c\u7531\u4e8e Redis \u662f\u5355\u7ebf\u7a0b\u6a21\u578b\uff0clua \u53ef\u4ee5\u4fdd\u8bc1\u591a\u4e2a\u547d\u4ee4\u7684 \u539f\u5b50\u6027 \u3002 Lua local n = tonumber ( ARGV [ 1 ]) if not n or n == 0 then return 0 end local vals = redis . call ( \"HMGET\" , KEYS [ 1 ], \"Total\" , \"Booked\" ); local total = tonumber ( vals [ 1 ]) local blocked = tonumber ( vals [ 2 ]) if not total or not blocked then return 0 end if blocked + n <= total then redis . call ( \"HINCRBY\" , KEYS [ 1 ], \"Booked\" , n ) return n ; end return 0 \u5148\u4f7f\u7528 SCRIPT LOAD \u5c06 lua \u811a\u672c\u63d0\u524d\u7f13\u5b58\u5728 Redis\uff0c\u7136\u540e\u8c03\u7528 EVALSHA \u8c03\u7528\u811a\u672c\uff0c\u6bd4\u76f4\u63a5\u8c03\u7528 EVAL \u8282\u7701\u7f51\u7edc\u5e26\u5bbd\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u7f13\u5b58 lua \u811a\u672c\u81f3 Redis\u3002 Bash SCRIPT LOAD \"lua code\" \u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a Bash \"438dd755f3fe0d32771753eb57f075b18fed7716\" \u8c03\u7528\u8be5 lua \u811a\u672c\u3002 Bash EVALSHA 438dd755f3fe0d32771753eb57f075b18fed7716 1 goodsId 1 \u8fd4\u56de\u7ed3\u679c\u5982\u4e0b\uff0c\u8868\u793a\u6263\u51cf\u4e86 1 \u4e2a\u5e93\u5b58\uff1a Bash ( integer ) 1 \u8bf4\u660e \u6b64\u65f6\uff0c\u6267\u884c HGET goodsId Booked \u547d\u4ee4\uff0c\u53ef\u67e5\u770b\u5230\u8fd4\u56de\u7684\u503c\u4e3a\"1\"\uff0c\u5373\u8be5\u5546\u54c1\u5df2\u88ab\u8ba2\u8d2d\u7684\u6570\u91cf\u4e3a 1\u3002 \u79d2\u6740\u670d\u52a1\u53ef\u901a\u8fc7\u5224\u65ad Redis \u662f\u5426\u8fd4\u56de\u62a2\u8d2d\u4e2a\u6570 n\uff0c\u5373\u53ef\u77e5\u9053\u6b64\u6b21\u8bf7\u6c42\u662f\u5426\u6263\u91cf\u6210\u529f\u3002","title":"\u5229\u7528\u8bfb\u5199\u5206\u79bb Redis \u7f13\u5b58\u62e6\u622a\u6d41\u91cf"},{"location":"blog/seckill/aliyun/#redis_1","text":"\u6263\u91cf\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u8ba2\u5355\u5165\u5e93\u3002\u5982\u679c\u5546\u54c1\u6570\u91cf\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u5e93\u5373\u53ef\u3002\u5982\u679c\u79d2\u6740\u7684\u5546\u54c1\u662f 1 \u4e07\uff0c\u751a\u81f3 10 \u4e07\u7ea7\u522b\uff0c\u90a3\u6570\u636e\u5e93\u9501\u51b2\u7a81\u5c06\u5e26\u6765\u5f88\u5927\u7684\u6027\u80fd\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u5229\u7528\u6d88\u606f\u961f\u5217\u7ec4\u4ef6\uff0c\u5f53\u79d2\u6740\u670d\u52a1\u5c06\u8ba2\u5355\u4fe1\u606f\u5199\u5165\u6d88\u606f\u961f\u5217\u540e\uff0c\u5373\u53ef\u8ba4\u4e3a\u4e0b\u5355\u5b8c\u6210\uff0c\u907f\u514d\u76f4\u63a5\u64cd\u4f5c\u6570\u636e\u5e93\u3002 \u6d88\u606f\u961f\u5217\u7ec4\u4ef6\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528 Redis \u5b9e\u73b0\uff0c\u5728 R2 \u4e2d\u7528 list \u6570\u636e\u7ed3\u6784\u8868\u793a\u3002 Text Only orderList { [0] = {\u8ba2\u5355\u5185\u5bb9} [1] = {\u8ba2\u5355\u5185\u5bb9} [2] = {\u8ba2\u5355\u5185\u5bb9} ... } \u5c06\u8ba2\u5355\u5185\u5bb9\u5199\u5165 Redis\uff1a Bash LPUSH orderList { \u8ba2\u5355\u5185\u5bb9 } \u5f02\u6b65\u4e0b\u5355\u6a21\u5757\u4ece Redis \u4e2d\u987a\u5e8f\u83b7\u53d6\u8ba2\u5355\u4fe1\u606f\uff0c\u5e76\u5c06\u8ba2\u5355\u5199\u5165\u6570\u636e\u5e93\u3002 Bash BRPOP orderList 0 \u901a\u8fc7\u4f7f\u7528 Redis \u4f5c\u4e3a\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u5904\u7406\u8ba2\u5355\u5165\u5e93\uff0c\u6709\u6548\u7684\u63d0\u9ad8\u4e86\u7528\u6237\u7684\u4e0b\u5355\u5b8c\u6210\u901f\u5ea6\u3002 \u6570\u636e\u63a7\u5236\u6a21\u5757\u7ba1\u7406\u79d2\u6740\u6570\u636e\u540c\u6b65 \u6700\u5f00\u59cb\uff0c\u5229\u7528\u8bfb\u5199\u5206\u79bb Redis \u8fdb\u884c\u6d41\u91cf\u9650\u5236\uff0c\u53ea\u8ba9\u90e8\u5206\u6d41\u91cf\u8fdb\u5165\u4e0b\u5355\u3002 \u5bf9\u4e8e\u4e0b\u5355\u68c0\u9a8c\u5931\u8d25\u548c\u9000\u5355\u7b49\u60c5\u51b5\uff0c\u9700\u8981\u8ba9\u66f4\u591a\u7684\u6d41\u91cf\u8fdb\u6765\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u63a7\u5236\u6a21\u5757\u9700\u8981\u5b9a\u65f6\u5c06\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u4e00\u5b9a\u7684\u8ba1\u7b97\uff0c\u540c\u6b65\u5230\u4e3b\u4ece\u7248 Redis\uff0c\u540c\u65f6\u518d\u540c\u6b65\u5230\u8bfb\u5199\u5206\u79bb\u7684 Redis\uff0c\u8ba9\u66f4\u591a\u7684\u6d41\u91cf\u8fdb\u6765\u3002","title":"\u4f7f\u7528\u4e3b\u4ece\u7248 Redis \u5b9e\u73b0\u7b80\u5355\u7684\u6d88\u606f\u961f\u5217\u5f02\u6b65\u4e0b\u5355\u5165\u5e93"},{"location":"blog/seckill/distlock-cn/","text":"http://www.redis.cn/topics/distlock.html \u5206\u5e03\u5f0f\u9501\u5728\u5f88\u591a\u573a\u666f\u4e2d\u662f\u975e\u5e38\u6709\u7528\u7684\u539f\u8bed\uff0c \u4e0d\u540c\u7684\u8fdb\u7a0b\u5fc5\u987b\u4ee5\u72ec\u5360\u8d44\u6e90\u7684\u65b9\u5f0f\u5b9e\u73b0\u8d44\u6e90\u5171\u4eab\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u6709\u5f88\u591a\u5206\u5e03\u5f0f\u9501\u7684\u5e93\u548c\u63cf\u8ff0\u600e\u4e48\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668\uff08DLM)\u7684\u535a\u5ba2,\u4f46\u662f\u6bcf\u4e2a\u5e93\u7684\u5b9e\u73b0\u65b9\u5f0f\u90fd\u4e0d\u592a\u4e00\u6837\uff0c\u5f88\u591a\u5e93\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e3a\u4e86\u7b80\u5355\u964d\u4f4e\u4e86\u53ef\u9760\u6027\uff0c\u800c\u6709\u7684\u4f7f\u7528\u4e86\u7a0d\u5fae\u590d\u6742\u7684\u8bbe\u8ba1\u3002 \u8fd9\u4e2a\u9875\u9762\u8bd5\u56fe\u63d0\u4f9b\u4e00\u4e2a\u4f7f\u7528 Redis \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u89c4\u8303\u7b97\u6cd5\u3002\u6211\u4eec\u63d0\u51fa\u4e00\u79cd\u7b97\u6cd5\uff0c\u53eb Redlock,\u6211\u4eec\u8ba4\u4e3a\u8fd9\u79cd\u5b9e\u73b0\u6bd4\u666e\u901a\u7684\u5355\u5b9e\u4f8b\u5b9e\u73b0\u66f4\u5b89\u5168,\u6211\u4eec\u5e0c\u671b redis \u793e\u533a\u80fd\u5e2e\u52a9\u5206\u6790\u4e00\u4e0b\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5e76\u7ed9\u6211\u4eec\u63d0\u4f9b\u53cd\u9988\u3002 \u5b9e\u73b0\u7ec6\u8282 \u5728\u6211\u4eec\u5f00\u59cb\u63cf\u8ff0\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e9b\u53ef\u4f9b\u53c2\u8003\u7684\u5b9e\u73b0\u5e93. Redlock-rb (Ruby \u7248). There is also a fork of Redlock-rb that adds a gem for easy distribution and perhaps more. Redlock-py (Python \u7248). Aioredlock (Asyncio Python \u7248). Redlock-php (PHP \u7248). PHPRedisMutex (further PHP \u7248) cheprasov/php-redis-lock (PHP library for locks) Redsync.go (Go \u7248). Redisson (Java \u7248). Redis-DistLock (Perl \u7248). Redlock-cpp (C++ \u7248). Redlock-cs (C#/.NET \u7248). RedLock.net (C#/.NET \u7248). Includes async and lock extension support. ScarletLock (C# .NET \u7248 with configurable datastore) node-redlock (NodeJS \u7248). Includes support for lock extension. \u5b89\u5168\u548c\u6d3b\u6027\u5931\u6548\u4fdd\u969c \u6309\u7167\u6211\u4eec\u7684\u601d\u8def\u548c\u8bbe\u8ba1\u65b9\u6848\uff0c\u7b97\u6cd5\u53ea\u9700\u5177\u5907 3 \u4e2a\u7279\u6027\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6700\u4f4e\u4fdd\u969c\u7684\u5206\u5e03\u5f0f\u9501\u3002 \u5b89\u5168\u5c5e\u6027\uff08Safety property\uff09: \u72ec\u4eab\uff08\u76f8\u4e92\u6392\u65a5\uff09\u3002\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u9501\u3002 \u6d3b\u6027 A(Liveness property A): \u65e0\u6b7b\u9501\u3002\u5373\u4fbf\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u5d29\u6e83\uff08crashed)\u6216\u8005\u7f51\u7edc\u88ab\u5206\u88c2\uff08gets partitioned)\uff0c\u9501\u4ecd\u7136\u53ef\u4ee5\u88ab\u83b7\u53d6\u3002 \u6d3b\u6027 B(Liveness property B): \u5bb9\u9519\u3002 \u53ea\u8981\u5927\u90e8\u5206 Redis \u8282\u70b9\u90fd\u6d3b\u7740\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u83b7\u53d6\u548c\u91ca\u653e\u9501. \u4e3a\u4ec0\u4e48\u57fa\u4e8e\u6545\u969c\u8f6c\u79fb\u7684\u5b9e\u73b0\u8fd8\u4e0d\u591f \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u6211\u4eec\u60f3\u8981\u6539\u8fdb\u7684\u65b9\u9762\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u5f53\u524d\u5927\u591a\u6570\u57fa\u4e8e Redis \u7684\u5206\u5e03\u5f0f\u9501\u73b0\u72b6\u548c\u5b9e\u73b0\u65b9\u6cd5. \u5b9e\u73b0 Redis \u5206\u5e03\u5f0f\u9501\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5728 Redis \u4e2d\u521b\u5efa\u4e00\u4e2a key\uff0c\u8fd9\u4e2a key \u6709\u4e00\u4e2a\u5931\u6548\u65f6\u95f4\uff08TTL)\uff0c\u4ee5\u4fdd\u8bc1\u9501\u6700\u7ec8\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u6389\uff08\u8fd9\u4e2a\u5bf9\u5e94\u7279\u6027 2\uff09\u3002\u5f53\u5ba2\u6237\u7aef\u91ca\u653e\u8d44\u6e90(\u89e3\u9501\uff09\u7684\u65f6\u5019\uff0c\u4f1a\u5220\u9664\u6389\u8fd9\u4e2a key\u3002 \u4ece\u8868\u9762\u4e0a\u770b\uff0c\u4f3c\u4e4e\u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u67b6\u6784\u4e2d\u5b58\u5728\u4e00\u4e2a\u4e25\u91cd\u7684\u5355\u70b9\u5931\u8d25\u95ee\u9898\u3002\u5982\u679c Redis \u6302\u4e86\u600e\u4e48\u529e\uff1f\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u4e2a slave \u8282\u70b9\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u8fd9\u901a\u5e38\u662f\u884c\u4e0d\u901a\u7684\u3002\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u4e0d\u80fd\u5b9e\u73b0\u8d44\u6e90\u7684\u72ec\u4eab,\u56e0\u4e3a Redis \u7684\u4e3b\u4ece\u540c\u6b65\u901a\u5e38\u662f\u5f02\u6b65\u7684\u3002 \u5728\u8fd9\u79cd\u573a\u666f\uff08\u4e3b\u4ece\u7ed3\u6784\uff09\u4e2d\u5b58\u5728\u660e\u663e\u7684\u7ade\u6001: \u5ba2\u6237\u7aef A \u4ece master \u83b7\u53d6\u5230\u9501 \u5728 master \u5c06\u9501\u540c\u6b65\u5230 slave \u4e4b\u524d\uff0cmaster \u5b95\u6389\u4e86\u3002 slave \u8282\u70b9\u88ab\u664b\u7ea7\u4e3a master \u8282\u70b9 \u5ba2\u6237\u7aef B \u53d6\u5f97\u4e86\u540c\u4e00\u4e2a\u8d44\u6e90\u88ab\u5ba2\u6237\u7aef A \u5df2\u7ecf\u83b7\u53d6\u5230\u7684\u53e6\u5916\u4e00\u4e2a\u9501\u3002\u5b89\u5168\u5931\u6548\uff01 \u6709\u65f6\u5019\u7a0b\u5e8f\u5c31\u662f\u8fd9\u4e48\u5de7\uff0c\u6bd4\u5982\u8bf4\u6b63\u597d\u4e00\u4e2a\u8282\u70b9\u6302\u6389\u7684\u65f6\u5019\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u53d6\u5230\u4e86\u9501\u3002\u5982\u679c\u4f60\u53ef\u4ee5\u63a5\u53d7\u8fd9\u79cd\u5c0f\u6982\u7387\u9519\u8bef\uff0c\u90a3\u7528\u8fd9\u4e2a\u57fa\u4e8e\u590d\u5236\u7684\u65b9\u6848\u5c31\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u3002\u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5b9e\u73b0\u4e0b\u9762\u63cf\u8ff0\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5355 Redis \u5b9e\u4f8b\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u65b9\u6cd5 \u5728\u5c1d\u8bd5\u514b\u670d\u4e0a\u8ff0\u5355\u5b9e\u4f8b\u8bbe\u7f6e\u7684\u9650\u5236\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u8ba8\u8bba\u4e00\u4e0b\u5728\u8fd9\u79cd\u7b80\u5355\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u505a\u6cd5\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\uff0c\u5c3d\u7ba1\u5b58\u5728\u7ade\u6001\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u53e6\u5916\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\u5355\u5b9e\u4f8b\u52a0\u9501\u65b9\u6cd5\u4e5f\u662f\u5206\u5e03\u5f0f\u52a0\u9501\u7b97\u6cd5\u7684\u57fa\u7840\u3002 \u83b7\u53d6\u9501\u4f7f\u7528\u547d\u4ee4: Bash SET resource_name my_random_value NX PX 30000 \u8fd9\u4e2a\u547d\u4ee4\u4ec5\u5728\u4e0d\u5b58\u5728 key \u7684\u65f6\u5019\u624d\u80fd\u88ab\u6267\u884c\u6210\u529f\uff08NX \u9009\u9879\uff09\uff0c\u5e76\u4e14\u8fd9\u4e2a key \u6709\u4e00\u4e2a 30 \u79d2\u7684\u81ea\u52a8\u5931\u6548\u65f6\u95f4\uff08PX \u5c5e\u6027\uff09\u3002\u8fd9\u4e2a key \u7684\u503c\u662f\u201cmy_random_value\u201d(\u4e00\u4e2a\u968f\u673a\u503c\uff09\uff0c\u8fd9\u4e2a\u503c\u5728\u6240\u6709\u7684\u5ba2\u6237\u7aef\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u6240\u6709\u540c\u4e00 key \u7684\u83b7\u53d6\u8005\uff08\u7ade\u4e89\u8005\uff09\u8fd9\u4e2a\u503c\u90fd\u4e0d\u80fd\u4e00\u6837\u3002 value \u7684\u503c\u5fc5\u987b\u662f\u968f\u673a\u6570\u4e3b\u8981\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\u7684\u91ca\u653e\u9501\uff0c\u91ca\u653e\u9501\u7684\u65f6\u5019\u4f7f\u7528\u811a\u672c\u544a\u8bc9 Redis:\u53ea\u6709 key \u5b58\u5728\u5e76\u4e14\u5b58\u50a8\u7684\u503c\u548c\u6211\u6307\u5b9a\u7684\u503c\u4e00\u6837\u624d\u80fd\u544a\u8bc9\u6211\u5220\u9664\u6210\u529f\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b Lua \u811a\u672c\u5b9e\u73b0\uff1a Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u91ca\u653e\u9501\u53ef\u4ee5\u907f\u514d\u5220\u9664\u522b\u7684\u5ba2\u6237\u7aef\u83b7\u53d6\u6210\u529f\u7684\u9501\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5ba2\u6237\u7aef A \u53d6\u5f97\u8d44\u6e90\u9501\uff0c\u4f46\u662f\u7d27\u63a5\u7740\u88ab\u4e00\u4e2a\u5176\u4ed6\u64cd\u4f5c\u963b\u585e\u4e86\uff0c\u5f53\u5ba2\u6237\u7aef A \u8fd0\u884c\u5b8c\u6bd5\u5176\u4ed6\u64cd\u4f5c\u540e\u8981\u91ca\u653e\u9501\u65f6\uff0c\u539f\u6765\u7684\u9501\u65e9\u5df2\u8d85\u65f6\u5e76\u4e14\u88ab Redis \u81ea\u52a8\u91ca\u653e\uff0c\u5e76\u4e14\u5728\u8fd9\u671f\u95f4\u8d44\u6e90\u9501\u53c8\u88ab\u5ba2\u6237\u7aef B \u518d\u6b21\u83b7\u53d6\u5230\u3002\u5982\u679c\u4ec5\u4f7f\u7528 DEL \u547d\u4ee4\u5c06 key \u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u5c31\u4f1a\u628a\u5ba2\u6237\u7aef B \u7684\u9501\u7ed9\u5220\u9664\u6389\u3002\u4f7f\u7528 Lua \u811a\u672c\u5c31\u4e0d\u4f1a\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u811a\u672c\u4ec5\u4f1a\u5220\u9664 value \u7b49\u4e8e\u5ba2\u6237\u7aef A \u7684 value \u7684 key\uff08value \u76f8\u5f53\u4e8e\u5ba2\u6237\u7aef\u7684\u4e00\u4e2a\u7b7e\u540d\uff09\u3002 \u8fd9\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u5e94\u8be5\u600e\u4e48\u8bbe\u7f6e\uff1f\u6211\u8ba4\u4e3a\u5b83\u5e94\u8be5\u662f\u4ece/dev/urandom \u4ea7\u751f\u7684\u4e00\u4e2a 20 \u5b57\u8282\u968f\u673a\u6570\uff0c\u4f46\u662f\u6211\u60f3\u4f60\u53ef\u4ee5\u627e\u5230\u6bd4\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u4ef7\u66f4\u5c0f\u7684\u65b9\u6cd5\uff0c\u53ea\u8981\u8fd9\u4e2a\u6570\u5728\u4f60\u7684\u4efb\u52a1\u4e2d\u662f\u552f\u4e00\u7684\u5c31\u884c\u3002\u4f8b\u5982\u4e00\u79cd\u5b89\u5168\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528/dev/urandom \u4f5c\u4e3a RC4 \u7684\u79cd\u5b50\u548c\u6e90\u4ea7\u751f\u4e00\u4e2a\u4f2a\u968f\u673a\u6d41;\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684 unix \u65f6\u95f4\u548c\u5ba2\u6237\u7aef ID \u62fc\u63a5\u8d77\u6765\uff0c\u7406\u8bba\u4e0a\u4e0d\u662f\u5b8c\u5168\u5b89\u5168\uff0c\u4f46\u662f\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. key \u7684\u5931\u6548\u65f6\u95f4\uff0c\u88ab\u79f0\u4f5c\u201c\u9501\u5b9a\u6709\u6548\u671f\u201d\u3002\u5b83\u4e0d\u4ec5\u662f key \u81ea\u52a8\u5931\u6548\u65f6\u95f4\uff0c\u800c\u4e14\u8fd8\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u9501\u591a\u957f\u65f6\u95f4\u540e\u53ef\u4ee5\u88ab\u53e6\u5916\u4e00\u4e2a\u5ba2\u6237\u7aef\u91cd\u65b0\u83b7\u5f97\u3002 \u622a\u81f3\u5230\u76ee\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u65b9\u6cd5\u83b7\u53d6\u9501\u548c\u91ca\u653e\u9501\u3002\u57fa\u4e8e Redis \u5355\u5b9e\u4f8b\uff0c\u5047\u8bbe\u8fd9\u4e2a\u5355\u5b9e\u4f8b\u603b\u662f\u53ef\u7528\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5df2\u7ecf\u8db3\u591f\u5b89\u5168\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6269\u5c55\u4e00\u4e0b\uff0c\u5047\u8bbe Redis \u6ca1\u6709\u603b\u662f\u53ef\u7528\u7684\u4fdd\u969c\u3002 Redlock \u7b97\u6cd5 \u5728 Redis \u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6709 N \u4e2a Redis master\u3002\u8fd9\u4e9b\u8282\u70b9\u5b8c\u5168\u4e92\u76f8\u72ec\u7acb\uff0c\u4e0d\u5b58\u5728\u4e3b\u4ece\u590d\u5236\u6216\u8005\u5176\u4ed6\u96c6\u7fa4\u534f\u8c03\u673a\u5236\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u63cf\u8ff0\u4e86\u5728 Redis \u5355\u5b9e\u4f8b\u4e0b\u600e\u4e48\u5b89\u5168\u5730\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002\u6211\u4eec\u786e\u4fdd\u5c06\u5728\u6bcf\uff08N)\u4e2a\u5b9e\u4f8b\u4e0a\u4f7f\u7528\u6b64\u65b9\u6cd5\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6709 5 \u4e2a Redis master \u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u8bbe\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728 5 \u53f0\u673a\u5668\u4e0a\u9762\u6216\u8005 5 \u53f0\u865a\u62df\u673a\u4e0a\u9762\u8fd0\u884c\u8fd9\u4e9b\u5b9e\u4f8b\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4ed6\u4eec\u4e0d\u4f1a\u540c\u65f6\u90fd\u5b95\u6389\u3002 \u4e3a\u4e86\u53d6\u5230\u9501\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: \u83b7\u53d6\u5f53\u524d Unix \u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002 \u4f9d\u6b21\u5c1d\u8bd5\u4ece N \u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684 key \u548c\u968f\u673a\u503c\u83b7\u53d6\u9501\u3002\u5728\u6b65\u9aa4 2\uff0c\u5f53\u5411 Redis \u8bbe\u7f6e\u9501\u65f6,\u5ba2\u6237\u7aef\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u548c\u54cd\u5e94\u8d85\u65f6\u65f6\u95f4\uff0c\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u5c0f\u4e8e\u9501\u7684\u5931\u6548\u65f6\u95f4\u3002\u4f8b\u5982\u4f60\u7684\u9501\u81ea\u52a8\u5931\u6548\u65f6\u95f4\u4e3a 10 \u79d2\uff0c\u5219\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u5728 5-50 \u6beb\u79d2\u4e4b\u95f4\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u670d\u52a1\u5668\u7aef Redis \u5df2\u7ecf\u6302\u6389\u7684\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u8fd8\u5728\u6b7b\u6b7b\u5730\u7b49\u5f85\u54cd\u5e94\u7ed3\u679c\u3002\u5982\u679c\u670d\u52a1\u5668\u7aef\u6ca1\u6709\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u54cd\u5e94\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5c3d\u5feb\u5c1d\u8bd5\u53e6\u5916\u4e00\u4e2a Redis \u5b9e\u4f8b\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u51cf\u53bb\u5f00\u59cb\u83b7\u53d6\u9501\u65f6\u95f4\uff08\u6b65\u9aa4 1 \u8bb0\u5f55\u7684\u65f6\u95f4\uff09\u5c31\u5f97\u5230\u83b7\u53d6\u9501\u4f7f\u7528\u7684\u65f6\u95f4\u3002\u5f53\u4e14\u4ec5\u5f53\u4ece\u5927\u591a\u6570\uff08\u8fd9\u91cc\u662f 3 \u4e2a\u8282\u70b9\uff09\u7684 Redis \u8282\u70b9\u90fd\u53d6\u5230\u9501\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u65f6\u95f4\u5c0f\u4e8e\u9501\u5931\u6548\u65f6\u95f4\u65f6\uff0c\u9501\u624d\u7b97\u83b7\u53d6\u6210\u529f\u3002 \u5982\u679c\u53d6\u5230\u4e86\u9501\uff0ckey \u7684\u771f\u6b63\u6709\u6548\u65f6\u95f4\u7b49\u4e8e\u6709\u6548\u65f6\u95f4\u51cf\u53bb\u83b7\u53d6\u9501\u6240\u4f7f\u7528\u7684\u65f6\u95f4\uff08\u6b65\u9aa4 3 \u8ba1\u7b97\u7684\u7ed3\u679c\uff09\u3002 \u5982\u679c\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\uff0c\u83b7\u53d6\u9501\u5931\u8d25\uff08\u6ca1\u6709\u5728\u81f3\u5c11 N/2+1 \u4e2a Redis \u5b9e\u4f8b\u53d6\u5230\u9501\u6216\u8005\u53d6\u9501\u65f6\u95f4\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6709\u6548\u65f6\u95f4\uff09\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5728\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u4e0a\u8fdb\u884c\u89e3\u9501\uff08\u5373\u4fbf\u67d0\u4e9b Redis \u5b9e\u4f8b\u6839\u672c\u5c31\u6ca1\u6709\u52a0\u9501\u6210\u529f\uff09\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u662f\u5f02\u6b65\u7684\u4e48? \u7b97\u6cd5\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u5047\u8bbe\uff1a\u867d\u7136\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u6ca1\u6709\u65f6\u949f\u540c\u6b65\uff0c\u4f46\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4ee5\u76f8\u540c\u7684\u65f6\u949f\u9891\u7387\u524d\u8fdb\uff0c\u65f6\u95f4\u5dee\u76f8\u5bf9\u4e8e\u5931\u6548\u65f6\u95f4\u6765\u8bf4\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\u8fd9\u79cd\u5047\u8bbe\u548c\u6211\u4eec\u7684\u771f\u5b9e\u4e16\u754c\u975e\u5e38\u63a5\u8fd1\uff1a\u6bcf\u4e2a\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u672c\u5730\u65f6\u949f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bb9\u5fcd\u591a\u4e2a\u8ba1\u7b97\u673a\u4e4b\u95f4\u6709\u8f83\u5c0f\u7684\u65f6\u949f\u6f02\u79fb\u3002 \u4ece\u8fd9\u70b9\u6765\u8bf4\uff0c\u6211\u4eec\u5fc5\u987b\u518d\u6b21\u5f3a\u8c03\u6211\u4eec\u7684\u4e92\u76f8\u6392\u65a5\u89c4\u5219\uff1a\u53ea\u6709\u5728\u9501\u7684\u6709\u6548\u65f6\u95f4\uff08\u5728\u6b65\u9aa4 3 \u8ba1\u7b97\u7684\u7ed3\u679c\uff09\u8303\u56f4\u5185\u5ba2\u6237\u7aef\u80fd\u591f\u505a\u5b8c\u5b83\u7684\u5de5\u4f5c\uff0c\u9501\u7684\u5b89\u5168\u6027\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff08\u9501\u7684\u5b9e\u9645\u6709\u6548\u65f6\u95f4\u901a\u5e38\u8981\u6bd4\u8bbe\u7f6e\u7684\u77ed\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e4b\u95f4\u6709\u65f6\u949f\u6f02\u79fb\u7684\u73b0\u8c61\uff09\u3002. \u60f3\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u9700\u8981\u65f6\u949f\u6f02\u79fb\u95f4\u9699\u7684\u76f8\u4f3c\u7cfb\u7edf, \u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u53c2\u8003: Leases: an efficient fault-tolerant mechanism for distributed file cache consistency. \u5931\u8d25\u65f6\u91cd\u8bd5 \u5f53\u5ba2\u6237\u7aef\u65e0\u6cd5\u53d6\u5230\u9501\u65f6\uff0c\u5e94\u8be5\u5728\u4e00\u4e2a\u968f\u673a\u5ef6\u8fdf\u540e\u91cd\u8bd5,\u9632\u6b62\u591a\u4e2a\u5ba2\u6237\u7aef\u5728\u540c\u65f6\u62a2\u593a\u540c\u4e00\u8d44\u6e90\u7684\u9501\uff08\u8fd9\u6837\u4f1a\u5bfc\u81f4\u8111\u88c2\uff0c\u6ca1\u6709\u4eba\u4f1a\u53d6\u5230\u9501\uff09\u3002\u540c\u6837\uff0c\u5ba2\u6237\u7aef\u53d6\u5f97\u5927\u90e8\u5206 Redis \u5b9e\u4f8b\u9501\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u8d8a\u77ed\uff0c\u8111\u88c2\u51fa\u73b0\u7684\u6982\u7387\u5c31\u4f1a\u8d8a\u4f4e\uff08\u5fc5\u8981\u7684\u91cd\u8bd5\uff09\uff0c\u6240\u4ee5\uff0c\u7406\u60f3\u60c5\u51b5\u4e00\u4e0b\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u540c\u65f6\uff08\u5e76\u53d1\u5730\uff09\u5411\u6240\u6709 Redis \u53d1\u9001 SET \u547d\u4ee4\u3002 \u9700\u8981\u5f3a\u8c03\uff0c\u5f53\u5ba2\u6237\u7aef\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u83b7\u53d6\u9501\u5931\u8d25\u65f6\uff0c\u5e94\u8be5\u5c3d\u5feb\u5730\u91ca\u653e\uff08\u90e8\u5206\uff09\u5df2\u7ecf\u6210\u529f\u53d6\u5230\u7684\u9501\uff0c\u8fd9\u6837\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u5c31\u4e0d\u5fc5\u975e\u5f97\u7b49\u5230\u9501\u8fc7\u5b8c\u201c\u6709\u6548\u65f6\u95f4\u201d\u624d\u80fd\u53d6\u5230\uff08\u7136\u800c\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u7f51\u7edc\u5206\u88c2\uff0c\u5ba2\u6237\u7aef\u5df2\u7ecf\u65e0\u6cd5\u548c Redis \u5b9e\u4f8b\u901a\u4fe1\uff0c\u6b64\u65f6\u5c31\u53ea\u80fd\u7b49\u5f85 key \u7684\u81ea\u52a8\u91ca\u653e\u4e86\uff0c\u7b49\u4e8e\u88ab\u60e9\u7f5a\u4e86\uff09\u3002 \u91ca\u653e\u9501 \u91ca\u653e\u9501\u6bd4\u8f83\u7b80\u5355\uff0c\u5411\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u53d1\u9001\u91ca\u653e\u9501\u547d\u4ee4\u5373\u53ef\uff0c\u4e0d\u7528\u5173\u5fc3\u4e4b\u524d\u6709\u6ca1\u6709\u4ece Redis \u5b9e\u4f8b\u6210\u529f\u83b7\u53d6\u5230\u9501. \u5b89\u5168\u4e89\u8bae \u8fd9\u4e2a\u7b97\u6cd5\u5b89\u5168\u4e48\uff1f\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u573a\u666f\u8ba8\u8bba\u4e00\u4e0b\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u5ba2\u6237\u7aef\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u53d6\u5230\u4e86\u9501\u3002\u6240\u6709\u7684\u5b9e\u4f8b\u90fd\u5305\u542b\u540c\u6837\u7684 key\uff0c\u5e76\u4e14 key \u7684\u6709\u6548\u65f6\u95f4\u4e5f\u4e00\u6837\u3002\u7136\u800c\uff0ckey \u80af\u5b9a\u662f\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u88ab\u8bbe\u7f6e\u4e0a\u7684\uff0c\u6240\u4ee5 key \u7684\u5931\u6548\u65f6\u95f4\u4e5f\u4e0d\u662f\u7cbe\u786e\u7684\u76f8\u540c\u3002\u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u4e2a\u8bbe\u7f6e\u7684 key \u65f6\u95f4\u662f T1(\u5f00\u59cb\u5411\u7b2c\u4e00\u4e2a server \u53d1\u9001\u547d\u4ee4\u524d\u65f6\u95f4\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u8bbe\u7f6e\u7684 key \u65f6\u95f4\u662f T2(\u5f97\u5230\u6700\u540e\u4e00\u53f0 server \u7684\u7b54\u590d\u540e\u7684\u65f6\u95f4\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4\uff0c\u7b2c\u4e00\u4e2a server \u7684 key \u81f3\u5c11\u4f1a\u5b58\u6d3b MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT\u3002\u6240\u6709\u5176\u4ed6\u7684 key \u7684\u5b58\u6d3b\u65f6\u95f4\uff0c\u90fd\u4f1a\u6bd4\u8fd9\u4e2a key \u65f6\u95f4\u665a\uff0c\u6240\u4ee5\u53ef\u4ee5\u80af\u5b9a\uff0c\u6240\u6709 key \u7684\u5931\u6548\u65f6\u95f4\u81f3\u5c11\u662f MIN_VALIDITY\u3002 \u5f53\u5927\u90e8\u5206\u5b9e\u4f8b\u7684 key \u88ab\u8bbe\u7f6e\u540e\uff0c\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u5c06\u4e0d\u80fd\u518d\u53d6\u5230\u9501\uff0c\u56e0\u4e3a\u81f3\u5c11 N/2+1 \u4e2a\u5b9e\u4f8b\u5df2\u7ecf\u5b58\u5728 key\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4e00\u4e2a\u9501\u88ab\uff08\u5ba2\u6237\u7aef\uff09\u83b7\u53d6\u540e\uff0c\u5ba2\u6237\u7aef\u81ea\u5df1\u4e5f\u4e0d\u80fd\u518d\u6b21\u7533\u8bf7\u5230\u9501(\u8fdd\u53cd\u4e92\u76f8\u6392\u65a5\u5c5e\u6027\uff09\u3002 \u7136\u800c\u6211\u4eec\u4e5f\u60f3\u786e\u4fdd\uff0c\u5f53\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u62a2\u593a\u4e00\u4e2a\u9501\u65f6\u4e0d\u80fd\u4e24\u4e2a\u90fd\u6210\u529f\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u5728\u83b7\u53d6\u5230\u5927\u591a\u6570 redis \u5b9e\u4f8b\u9501\uff0c\u4f7f\u7528\u7684\u65f6\u95f4\u63a5\u8fd1\u6216\u8005\u5df2\u7ecf\u5927\u4e8e\u5931\u6548\u65f6\u95f4\uff0c\u5ba2\u6237\u7aef\u5c06\u8ba4\u4e3a\u9501\u662f\u5931\u6548\u7684\u9501\uff0c\u5e76\u4e14\u5c06\u91ca\u653e\u6389\u5df2\u7ecf\u83b7\u53d6\u5230\u7684\u9501\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6709\u6548\u65f6\u95f4\u8303\u56f4\u5185\u83b7\u53d6\u5230\u5927\u90e8\u5206\u9501\u8fd9\u79cd\u60c5\u51b5\u3002\u5728\u4e0a\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u6709\u4e89\u8bae\u7684\u5730\u65b9\uff0c\u5728 MIN_VALIDITY \u65f6\u95f4\u5185\uff0c\u5c06\u6ca1\u6709\u5ba2\u6237\u7aef\u518d\u6b21\u53d6\u5f97\u9501\u3002\u6240\u4ee5\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u4f1a\u5728\u76f8\u540c\u65f6\u95f4\u53d6\u5f97 N/2+1 \u5b9e\u4f8b\u7684\u9501\uff0c\u90a3\u5c31\u662f\u53d6\u5f97\u9501\u7684\u65f6\u95f4\u5927\u4e8e\u5931\u6548\u65f6\u95f4\uff08TTL time)\uff0c\u8fd9\u6837\u53d6\u5230\u7684\u9501\u4e5f\u662f\u65e0\u6548\u7684. \u5982\u679c\u4f60\u80fd\u63d0\u4f9b\u5173\u4e8e\u73b0\u6709\u7684\u7c7b\u4f3c\u7b97\u6cd5\u7684\u4e00\u4e2a\u6b63\u5f0f\u8bc1\u660e\uff08\u6307\u51fa\u6b63\u786e\u6027\uff09\uff0c\u6216\u8005\u662f\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u7684 bug\uff1f \u6211\u4eec\u5c06\u975e\u5e38\u611f\u6fc0. \u6d3b\u6027\u4e89\u8bae \u7cfb\u7edf\u7684\u6d3b\u6027\u5b89\u5168\u57fa\u4e8e\u4e09\u4e2a\u4e3b\u8981\u7279\u6027: \u9501\u7684\u81ea\u52a8\u91ca\u653e\uff08\u56e0\u4e3a key \u5931\u6548\u4e86\uff09\uff1a\u6700\u7ec8\u9501\u53ef\u4ee5\u518d\u6b21\u88ab\u4f7f\u7528. \u5ba2\u6237\u7aef\u901a\u5e38\u4f1a\u5c06\u6ca1\u6709\u83b7\u53d6\u5230\u7684\u9501\u5220\u9664\uff0c\u6216\u8005\u9501\u88ab\u53d6\u5230\u540e\uff0c\u4f7f\u7528\u5b8c\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\uff08\u63d0\u524d\uff09\u91ca\u653e\u9501\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u9501\u5931\u6548\u53e6\u5916\u7684\u5ba2\u6237\u7aef\u624d\u80fd\u53d6\u5230\u9501\u3002. \u5f53\u5ba2\u6237\u7aef\u91cd\u8bd5\u83b7\u53d6\u9501\u65f6\uff0c\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5fc5\u987b\u5927\u4e8e\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u6210\u529f\u83b7\u53d6\u9501\u4f7f\u7528\u7684\u65f6\u95f4\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u907f\u514d\u8111\u88c2\u3002. \u7136\u800c\uff0c\u5f53\u7f51\u7edc\u51fa\u73b0\u95ee\u9898\u65f6\u7cfb\u7edf\u5728\u5931\u6548\u65f6\u95f4(TTL)\u5185\u5c31\u65e0\u6cd5\u670d\u52a1\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u7684\u7a0b\u5e8f\u5c31\u4f1a\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\u3002\u5982\u679c\u7f51\u7edc\u6301\u7eed\u7684\u6709\u95ee\u9898\uff0c\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\u4e86\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u5f53\u5ba2\u6237\u7aef\u521a\u53d6\u5230\u4e00\u4e2a\u9501\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u91ca\u653e\u9501\u5c31\u88ab\u7f51\u7edc\u9694\u79bb. \u5982\u679c\u7f51\u7edc\u4e00\u76f4\u6ca1\u6709\u6062\u590d\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u53ef\u7528. \u6027\u80fd\uff0c\u5d29\u6e83\u6062\u590d\u548c Redis \u540c\u6b65 \u5f88\u591a\u7528\u6237\u628a Redis \u5f53\u505a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u5668\uff0c\u4f7f\u7528\u83b7\u53d6\u9501\u548c\u91ca\u653e\u9501\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u6bcf\u79d2\u949f\u53ef\u7528\u6267\u884c\u591a\u5c11\u6b21 acquire / release \u64cd\u4f5c\u4f5c\u4e3a\u6027\u80fd\u6307\u6807\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u8981\u6c42\uff0c\u589e\u52a0 Redis \u5b9e\u4f8b\u5f53\u7136\u53ef\u7528\u964d\u4f4e\u54cd\u5e94\u5ef6\u8fdf\uff08\u6ca1\u6709\u94b1\u4e70\u786c\u4ef6\u7684\u201d\u7a77\u4eba\u201d,\u4e5f\u53ef\u4ee5\u5728\u7f51\u7edc\u65b9\u9762\u505a\u4f18\u5316\uff0c\u4f7f\u7528\u975e\u963b\u585e\u6a21\u578b\uff0c\u4e00\u6b21\u53d1\u9001\u6240\u6709\u7684\u547d\u4ee4\uff0c\u7136\u540e\u5f02\u6b65\u7684\u8bfb\u53d6\u54cd\u5e94\u7ed3\u679c\uff0c\u5047\u8bbe\u5ba2\u6237\u7aef\u548c redis \u670d\u52a1\u5668\u4e4b\u95f4\u7684 RTT \u90fd\u5dee\u4e0d\u591a\u3002 \u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4f7f\u7528\u53ef\u4ee5\u4ece\u5907\u4efd\u4e2d\u6062\u590d\u7684 redis \u6a21\u5f0f\uff0c\u6709\u53e6\u5916\u4e00\u79cd\u6301\u4e45\u5316\u60c5\u51b5\u4f60\u9700\u8981\u8003\u8651\uff0c. \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u573a\u666f\uff0c\u5047\u8bbe\u6211\u4eec\u7684 redis \u6ca1\u7528\u4f7f\u7528\u5907\u4efd\u3002\u4e00\u4e2a\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u4e86 3 \u4e2a\u5b9e\u4f8b\u7684\u9501\u3002\u6b64\u65f6\uff0c\u5176\u4e2d\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5ba2\u6237\u7aef\u53d6\u5230\u9501\u7684 redis \u5b9e\u4f8b\u88ab\u91cd\u542f\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u5c31\u53ef\u80fd\u51fa\u73b0 3 \u4e2a\u8282\u70b9\u6ca1\u6709\u8bbe\u7f6e\u9501\uff0c\u6b64\u65f6\u5982\u679c\u6709\u53e6\u5916\u4e00\u4e2a\u5ba2\u6237\u7aef\u6765\u8bbe\u7f6e\u9501\uff0c\u9501\u5c31\u53ef\u80fd\u88ab\u518d\u6b21\u83b7\u53d6\u5230\uff0c\u8fd9\u6837\u9501\u7684\u4e92\u76f8\u6392\u65a5\u7684\u7279\u6027\u5c31\u88ab\u7834\u574f\u6389\u4e86\u3002 \u5982\u679c\u6211\u4eec\u542f\u7528\u4e86 AOF \u6301\u4e45\u5316\uff0c\u60c5\u51b5\u4f1a\u597d\u5f88\u591a\u3002\u6211\u4eec\u53ef\u7528\u4f7f\u7528 SHUTDOWN \u547d\u4ee4\u5173\u95ed\u7136\u540e\u518d\u6b21\u91cd\u542f\u3002\u56e0\u4e3a Redis \u5230\u671f\u662f\u8bed\u4e49\u4e0a\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5f53\u670d\u52a1\u5668\u5173\u95ed\u65f6\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u7ecf\u8fc7\u4e86\u65f6\u95f4\uff0c\u6240\u6709\uff08\u4fdd\u6301\u9501\uff09\u9700\u8981\u7684\u6761\u4ef6\u90fd\u6ca1\u6709\u53d7\u5230\u5f71\u54cd. \u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u7684\u524d\u63d0\u662f redis \u4f18\u96c5\u7684\u5173\u95ed\u3002\u505c\u7535\u4e86\u600e\u4e48\u529e\uff1f\u5982\u679c redis \u662f\u6bcf\u79d2\u6267\u884c\u4e00\u6b21 fsync\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u5728 redis \u91cd\u542f\u4e4b\u540e\uff0ckey \u5df2\u7ecf\u4e22\u5f03\u3002\u7406\u8bba\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 Redis \u91cd\u542f\u5730\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4fdd\u8bc1\u9501\u7684\u5b89\u5168\uff0c\u6211\u4eec\u5fc5\u987b\u5f00\u542f fsync=always \u7684\u914d\u7f6e\u3002\u8fd9\u53cd\u8fc7\u6765\u5c06\u5b8c\u5168\u7834\u574f\u4e0e\u4f20\u7edf\u4e0a\u7528\u4e8e\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u540c\u4e00\u7ea7\u522b\u7684 CP \u7cfb\u7edf\u7684\u6027\u80fd. \u7136\u800c\u60c5\u51b5\u603b\u6bd4\u4e00\u5f00\u59cb\u60f3\u8c61\u7684\u597d\u4e00\u4e9b\u3002\u5f53\u4e00\u4e2a redis \u8282\u70b9\u91cd\u542f\u540e\uff0c\u53ea\u8981\u5b83\u4e0d\u53c2\u4e0e\u5230\u4efb\u610f\u5f53\u524d\u6d3b\u52a8\u7684\u9501\uff0c\u6ca1\u6709\u88ab\u5f53\u505a\u201c\u5f53\u524d\u5b58\u6d3b\u201d\u8282\u70b9\u88ab\u5ba2\u6237\u7aef\u91cd\u65b0\u83b7\u53d6\u5230,\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u4ecd\u7136\u662f\u6709\u4fdd\u969c\u7684\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u65b0\u7684 redis \u5b9e\u4f8b\uff0c\u5728\u4e00\u4e2a TTL \u65f6\u95f4\u5185\uff0c\u5bf9\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528\u5373\u53ef\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\uff0c\u6240\u6709\u5ba2\u6237\u7aef\u9501\u5c06\u88ab\u5931\u6548\u6216\u8005\u81ea\u52a8\u91ca\u653e. \u4f7f\u7528\u5ef6\u8fdf\u91cd\u542f\u53ef\u4ee5\u5728\u4e0d\u91c7\u7528\u6301\u4e45\u5316\u7b56\u7565\u7684\u60c5\u51b5\u4e0b\u8fbe\u5230\u540c\u6837\u7684\u5b89\u5168\uff0c\u7136\u800c\u8fd9\u6837\u505a\u6709\u65f6\u4f1a\u8ba9\u7cfb\u7edf\u8f6c\u5316\u4e3a\u5f7b\u5e95\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u5927\u90e8\u5206\u7684 redis \u5b9e\u4f8b\u90fd\u5d29\u6e83\u4e86\uff0c\u7cfb\u7edf\u5728 TTL \u65f6\u95f4\u5185\u4efb\u4f55\u9501\u90fd\u5c06\u65e0\u6cd5\u52a0\u9501\u6210\u529f\u3002 \u4f7f\u7b97\u6cd5\u66f4\u52a0\u53ef\u9760\uff1a\u9501\u7684\u6269\u5c55 \u5982\u679c\u4f60\u7684\u5de5\u4f5c\u53ef\u4ee5\u62c6\u5206\u4e3a\u8bb8\u591a\u5c0f\u6b65\u9aa4\uff0c\u53ef\u4ee5\u5c06\u6709\u6548\u65f6\u95f4\u8bbe\u7f6e\u7684\u5c0f\u4e00\u4e9b\uff0c\u4f7f\u7528\u9501\u7684\u4e00\u4e9b\u6269\u5c55\u673a\u5236\u3002\u5728\u5de5\u4f5c\u8fdb\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u53d1\u73b0\u9501\u5269\u4e0b\u7684\u6709\u6548\u65f6\u95f4\u5f88\u77ed\u65f6\uff0c\u53ef\u4ee5\u518d\u6b21\u5411 redis \u7684\u6240\u6709\u5b9e\u4f8b\u53d1\u9001\u4e00\u4e2a Lua \u811a\u672c\uff0c\u8ba9 key \u7684\u6709\u6548\u65f6\u95f4\u5ef6\u957f\u4e00\u70b9\uff08\u524d\u63d0\u8fd8\u662f key \u5b58\u5728\u5e76\u4e14 value \u662f\u4e4b\u524d\u8bbe\u7f6e\u7684 value)\u3002 \u5ba2\u6237\u7aef\u6269\u5c55 TTL \u65f6\u5fc5\u987b\u50cf\u9996\u6b21\u53d6\u5f97\u9501\u4e00\u6837\u5728\u5927\u591a\u6570\u5b9e\u4f8b\u4e0a\u6269\u5c55\u6210\u529f\u624d\u7b97\u518d\u6b21\u53d6\u5230\u9501\uff0c\u5e76\u4e14\u662f\u5728\u6709\u6548\u65f6\u95f4\u5185\u518d\u6b21\u53d6\u5230\u9501\uff08\u7b97\u6cd5\u548c\u83b7\u53d6\u9501\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff09\u3002 \u8fd9\u6837\u505a\u4ece\u6280\u672f\u4e0a\u5c06\u5e76\u4e0d\u4f1a\u6539\u53d8\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u6240\u4ee5\u6269\u5c55\u9501\u7684\u8fc7\u7a0b\u4e2d\u4ecd\u7136\u9700\u8981\u8fbe\u5230\u83b7\u53d6\u5230 N/2+1 \u4e2a\u5b9e\u4f8b\u8fd9\u4e2a\u8981\u6c42\uff0c\u5426\u5219\u6d3b\u6027\u7279\u6027\u4e4b\u4e00\u5c31\u4f1a\u5931\u6548\u3002 \u60f3\u8981\u5f97\u5230\u5e2e\u52a9? \u5982\u679c\u4f60\u6b63\u5728\u505a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u4f60\u7684\u610f\u89c1\u548c\u5206\u6790\u975e\u5e38\u91cd\u8981\u3002\u5176\u4ed6\u8bed\u8a00\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u7b97\u6cd5\u540c\u6837\u975e\u5e38\u5b9d\u8d35\u3002 \u63d0\u524d\u611f\u8c22\u5404\u4f4d! Redlock \u5206\u6790 Martin Kleppmann \u5728\u8fd9\u513f\u5206\u6790\u4e86 Redlock . \u6211\u4e0d\u8d5e\u540c\u4ed6\u7684\u8bf4\u6cd5\uff0c\u5e76\u4e14\u5bf9\u4ed6\u505a\u51fa\u4e86\u56de\u590d \u6211\u7684\u56de\u590d\u5728\u8fd9\u513f .","title":"Redis\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/distlock-cn/#_1","text":"\u5728\u6211\u4eec\u5f00\u59cb\u63cf\u8ff0\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e9b\u53ef\u4f9b\u53c2\u8003\u7684\u5b9e\u73b0\u5e93. Redlock-rb (Ruby \u7248). There is also a fork of Redlock-rb that adds a gem for easy distribution and perhaps more. Redlock-py (Python \u7248). Aioredlock (Asyncio Python \u7248). Redlock-php (PHP \u7248). PHPRedisMutex (further PHP \u7248) cheprasov/php-redis-lock (PHP library for locks) Redsync.go (Go \u7248). Redisson (Java \u7248). Redis-DistLock (Perl \u7248). Redlock-cpp (C++ \u7248). Redlock-cs (C#/.NET \u7248). RedLock.net (C#/.NET \u7248). Includes async and lock extension support. ScarletLock (C# .NET \u7248 with configurable datastore) node-redlock (NodeJS \u7248). Includes support for lock extension.","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"blog/seckill/distlock-cn/#_2","text":"\u6309\u7167\u6211\u4eec\u7684\u601d\u8def\u548c\u8bbe\u8ba1\u65b9\u6848\uff0c\u7b97\u6cd5\u53ea\u9700\u5177\u5907 3 \u4e2a\u7279\u6027\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6700\u4f4e\u4fdd\u969c\u7684\u5206\u5e03\u5f0f\u9501\u3002 \u5b89\u5168\u5c5e\u6027\uff08Safety property\uff09: \u72ec\u4eab\uff08\u76f8\u4e92\u6392\u65a5\uff09\u3002\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u9501\u3002 \u6d3b\u6027 A(Liveness property A): \u65e0\u6b7b\u9501\u3002\u5373\u4fbf\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u5d29\u6e83\uff08crashed)\u6216\u8005\u7f51\u7edc\u88ab\u5206\u88c2\uff08gets partitioned)\uff0c\u9501\u4ecd\u7136\u53ef\u4ee5\u88ab\u83b7\u53d6\u3002 \u6d3b\u6027 B(Liveness property B): \u5bb9\u9519\u3002 \u53ea\u8981\u5927\u90e8\u5206 Redis \u8282\u70b9\u90fd\u6d3b\u7740\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u83b7\u53d6\u548c\u91ca\u653e\u9501.","title":"\u5b89\u5168\u548c\u6d3b\u6027\u5931\u6548\u4fdd\u969c"},{"location":"blog/seckill/distlock-cn/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u6211\u4eec\u60f3\u8981\u6539\u8fdb\u7684\u65b9\u9762\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u5f53\u524d\u5927\u591a\u6570\u57fa\u4e8e Redis \u7684\u5206\u5e03\u5f0f\u9501\u73b0\u72b6\u548c\u5b9e\u73b0\u65b9\u6cd5. \u5b9e\u73b0 Redis \u5206\u5e03\u5f0f\u9501\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5728 Redis \u4e2d\u521b\u5efa\u4e00\u4e2a key\uff0c\u8fd9\u4e2a key \u6709\u4e00\u4e2a\u5931\u6548\u65f6\u95f4\uff08TTL)\uff0c\u4ee5\u4fdd\u8bc1\u9501\u6700\u7ec8\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u6389\uff08\u8fd9\u4e2a\u5bf9\u5e94\u7279\u6027 2\uff09\u3002\u5f53\u5ba2\u6237\u7aef\u91ca\u653e\u8d44\u6e90(\u89e3\u9501\uff09\u7684\u65f6\u5019\uff0c\u4f1a\u5220\u9664\u6389\u8fd9\u4e2a key\u3002 \u4ece\u8868\u9762\u4e0a\u770b\uff0c\u4f3c\u4e4e\u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u67b6\u6784\u4e2d\u5b58\u5728\u4e00\u4e2a\u4e25\u91cd\u7684\u5355\u70b9\u5931\u8d25\u95ee\u9898\u3002\u5982\u679c Redis \u6302\u4e86\u600e\u4e48\u529e\uff1f\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4e00\u4e2a slave \u8282\u70b9\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u8fd9\u901a\u5e38\u662f\u884c\u4e0d\u901a\u7684\u3002\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u4e0d\u80fd\u5b9e\u73b0\u8d44\u6e90\u7684\u72ec\u4eab,\u56e0\u4e3a Redis \u7684\u4e3b\u4ece\u540c\u6b65\u901a\u5e38\u662f\u5f02\u6b65\u7684\u3002 \u5728\u8fd9\u79cd\u573a\u666f\uff08\u4e3b\u4ece\u7ed3\u6784\uff09\u4e2d\u5b58\u5728\u660e\u663e\u7684\u7ade\u6001: \u5ba2\u6237\u7aef A \u4ece master \u83b7\u53d6\u5230\u9501 \u5728 master \u5c06\u9501\u540c\u6b65\u5230 slave \u4e4b\u524d\uff0cmaster \u5b95\u6389\u4e86\u3002 slave \u8282\u70b9\u88ab\u664b\u7ea7\u4e3a master \u8282\u70b9 \u5ba2\u6237\u7aef B \u53d6\u5f97\u4e86\u540c\u4e00\u4e2a\u8d44\u6e90\u88ab\u5ba2\u6237\u7aef A \u5df2\u7ecf\u83b7\u53d6\u5230\u7684\u53e6\u5916\u4e00\u4e2a\u9501\u3002\u5b89\u5168\u5931\u6548\uff01 \u6709\u65f6\u5019\u7a0b\u5e8f\u5c31\u662f\u8fd9\u4e48\u5de7\uff0c\u6bd4\u5982\u8bf4\u6b63\u597d\u4e00\u4e2a\u8282\u70b9\u6302\u6389\u7684\u65f6\u5019\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u53d6\u5230\u4e86\u9501\u3002\u5982\u679c\u4f60\u53ef\u4ee5\u63a5\u53d7\u8fd9\u79cd\u5c0f\u6982\u7387\u9519\u8bef\uff0c\u90a3\u7528\u8fd9\u4e2a\u57fa\u4e8e\u590d\u5236\u7684\u65b9\u6848\u5c31\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u3002\u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5b9e\u73b0\u4e0b\u9762\u63cf\u8ff0\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u4e3a\u4ec0\u4e48\u57fa\u4e8e\u6545\u969c\u8f6c\u79fb\u7684\u5b9e\u73b0\u8fd8\u4e0d\u591f"},{"location":"blog/seckill/distlock-cn/#redis","text":"\u5728\u5c1d\u8bd5\u514b\u670d\u4e0a\u8ff0\u5355\u5b9e\u4f8b\u8bbe\u7f6e\u7684\u9650\u5236\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u8ba8\u8bba\u4e00\u4e0b\u5728\u8fd9\u79cd\u7b80\u5355\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u505a\u6cd5\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\uff0c\u5c3d\u7ba1\u5b58\u5728\u7ade\u6001\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u53e6\u5916\uff0c\u8fd9\u91cc\u8ba8\u8bba\u7684\u5355\u5b9e\u4f8b\u52a0\u9501\u65b9\u6cd5\u4e5f\u662f\u5206\u5e03\u5f0f\u52a0\u9501\u7b97\u6cd5\u7684\u57fa\u7840\u3002 \u83b7\u53d6\u9501\u4f7f\u7528\u547d\u4ee4: Bash SET resource_name my_random_value NX PX 30000 \u8fd9\u4e2a\u547d\u4ee4\u4ec5\u5728\u4e0d\u5b58\u5728 key \u7684\u65f6\u5019\u624d\u80fd\u88ab\u6267\u884c\u6210\u529f\uff08NX \u9009\u9879\uff09\uff0c\u5e76\u4e14\u8fd9\u4e2a key \u6709\u4e00\u4e2a 30 \u79d2\u7684\u81ea\u52a8\u5931\u6548\u65f6\u95f4\uff08PX \u5c5e\u6027\uff09\u3002\u8fd9\u4e2a key \u7684\u503c\u662f\u201cmy_random_value\u201d(\u4e00\u4e2a\u968f\u673a\u503c\uff09\uff0c\u8fd9\u4e2a\u503c\u5728\u6240\u6709\u7684\u5ba2\u6237\u7aef\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u6240\u6709\u540c\u4e00 key \u7684\u83b7\u53d6\u8005\uff08\u7ade\u4e89\u8005\uff09\u8fd9\u4e2a\u503c\u90fd\u4e0d\u80fd\u4e00\u6837\u3002 value \u7684\u503c\u5fc5\u987b\u662f\u968f\u673a\u6570\u4e3b\u8981\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\u7684\u91ca\u653e\u9501\uff0c\u91ca\u653e\u9501\u7684\u65f6\u5019\u4f7f\u7528\u811a\u672c\u544a\u8bc9 Redis:\u53ea\u6709 key \u5b58\u5728\u5e76\u4e14\u5b58\u50a8\u7684\u503c\u548c\u6211\u6307\u5b9a\u7684\u503c\u4e00\u6837\u624d\u80fd\u544a\u8bc9\u6211\u5220\u9664\u6210\u529f\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b Lua \u811a\u672c\u5b9e\u73b0\uff1a Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u91ca\u653e\u9501\u53ef\u4ee5\u907f\u514d\u5220\u9664\u522b\u7684\u5ba2\u6237\u7aef\u83b7\u53d6\u6210\u529f\u7684\u9501\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5ba2\u6237\u7aef A \u53d6\u5f97\u8d44\u6e90\u9501\uff0c\u4f46\u662f\u7d27\u63a5\u7740\u88ab\u4e00\u4e2a\u5176\u4ed6\u64cd\u4f5c\u963b\u585e\u4e86\uff0c\u5f53\u5ba2\u6237\u7aef A \u8fd0\u884c\u5b8c\u6bd5\u5176\u4ed6\u64cd\u4f5c\u540e\u8981\u91ca\u653e\u9501\u65f6\uff0c\u539f\u6765\u7684\u9501\u65e9\u5df2\u8d85\u65f6\u5e76\u4e14\u88ab Redis \u81ea\u52a8\u91ca\u653e\uff0c\u5e76\u4e14\u5728\u8fd9\u671f\u95f4\u8d44\u6e90\u9501\u53c8\u88ab\u5ba2\u6237\u7aef B \u518d\u6b21\u83b7\u53d6\u5230\u3002\u5982\u679c\u4ec5\u4f7f\u7528 DEL \u547d\u4ee4\u5c06 key \u5220\u9664\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u5c31\u4f1a\u628a\u5ba2\u6237\u7aef B \u7684\u9501\u7ed9\u5220\u9664\u6389\u3002\u4f7f\u7528 Lua \u811a\u672c\u5c31\u4e0d\u4f1a\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u811a\u672c\u4ec5\u4f1a\u5220\u9664 value \u7b49\u4e8e\u5ba2\u6237\u7aef A \u7684 value \u7684 key\uff08value \u76f8\u5f53\u4e8e\u5ba2\u6237\u7aef\u7684\u4e00\u4e2a\u7b7e\u540d\uff09\u3002 \u8fd9\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u5e94\u8be5\u600e\u4e48\u8bbe\u7f6e\uff1f\u6211\u8ba4\u4e3a\u5b83\u5e94\u8be5\u662f\u4ece/dev/urandom \u4ea7\u751f\u7684\u4e00\u4e2a 20 \u5b57\u8282\u968f\u673a\u6570\uff0c\u4f46\u662f\u6211\u60f3\u4f60\u53ef\u4ee5\u627e\u5230\u6bd4\u8fd9\u79cd\u65b9\u6cd5\u4ee3\u4ef7\u66f4\u5c0f\u7684\u65b9\u6cd5\uff0c\u53ea\u8981\u8fd9\u4e2a\u6570\u5728\u4f60\u7684\u4efb\u52a1\u4e2d\u662f\u552f\u4e00\u7684\u5c31\u884c\u3002\u4f8b\u5982\u4e00\u79cd\u5b89\u5168\u53ef\u884c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528/dev/urandom \u4f5c\u4e3a RC4 \u7684\u79cd\u5b50\u548c\u6e90\u4ea7\u751f\u4e00\u4e2a\u4f2a\u968f\u673a\u6d41;\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684 unix \u65f6\u95f4\u548c\u5ba2\u6237\u7aef ID \u62fc\u63a5\u8d77\u6765\uff0c\u7406\u8bba\u4e0a\u4e0d\u662f\u5b8c\u5168\u5b89\u5168\uff0c\u4f46\u662f\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42. key \u7684\u5931\u6548\u65f6\u95f4\uff0c\u88ab\u79f0\u4f5c\u201c\u9501\u5b9a\u6709\u6548\u671f\u201d\u3002\u5b83\u4e0d\u4ec5\u662f key \u81ea\u52a8\u5931\u6548\u65f6\u95f4\uff0c\u800c\u4e14\u8fd8\u662f\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u9501\u591a\u957f\u65f6\u95f4\u540e\u53ef\u4ee5\u88ab\u53e6\u5916\u4e00\u4e2a\u5ba2\u6237\u7aef\u91cd\u65b0\u83b7\u5f97\u3002 \u622a\u81f3\u5230\u76ee\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u65b9\u6cd5\u83b7\u53d6\u9501\u548c\u91ca\u653e\u9501\u3002\u57fa\u4e8e Redis \u5355\u5b9e\u4f8b\uff0c\u5047\u8bbe\u8fd9\u4e2a\u5355\u5b9e\u4f8b\u603b\u662f\u53ef\u7528\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5df2\u7ecf\u8db3\u591f\u5b89\u5168\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6269\u5c55\u4e00\u4e0b\uff0c\u5047\u8bbe Redis \u6ca1\u6709\u603b\u662f\u53ef\u7528\u7684\u4fdd\u969c\u3002","title":"\u5355 Redis \u5b9e\u4f8b\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u65b9\u6cd5"},{"location":"blog/seckill/distlock-cn/#redlock","text":"\u5728 Redis \u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6709 N \u4e2a Redis master\u3002\u8fd9\u4e9b\u8282\u70b9\u5b8c\u5168\u4e92\u76f8\u72ec\u7acb\uff0c\u4e0d\u5b58\u5728\u4e3b\u4ece\u590d\u5236\u6216\u8005\u5176\u4ed6\u96c6\u7fa4\u534f\u8c03\u673a\u5236\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u63cf\u8ff0\u4e86\u5728 Redis \u5355\u5b9e\u4f8b\u4e0b\u600e\u4e48\u5b89\u5168\u5730\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002\u6211\u4eec\u786e\u4fdd\u5c06\u5728\u6bcf\uff08N)\u4e2a\u5b9e\u4f8b\u4e0a\u4f7f\u7528\u6b64\u65b9\u6cd5\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002\u5728\u8fd9\u4e2a\u6837\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6709 5 \u4e2a Redis master \u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u8bbe\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728 5 \u53f0\u673a\u5668\u4e0a\u9762\u6216\u8005 5 \u53f0\u865a\u62df\u673a\u4e0a\u9762\u8fd0\u884c\u8fd9\u4e9b\u5b9e\u4f8b\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4ed6\u4eec\u4e0d\u4f1a\u540c\u65f6\u90fd\u5b95\u6389\u3002 \u4e3a\u4e86\u53d6\u5230\u9501\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: \u83b7\u53d6\u5f53\u524d Unix \u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u3002 \u4f9d\u6b21\u5c1d\u8bd5\u4ece N \u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684 key \u548c\u968f\u673a\u503c\u83b7\u53d6\u9501\u3002\u5728\u6b65\u9aa4 2\uff0c\u5f53\u5411 Redis \u8bbe\u7f6e\u9501\u65f6,\u5ba2\u6237\u7aef\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u548c\u54cd\u5e94\u8d85\u65f6\u65f6\u95f4\uff0c\u8fd9\u4e2a\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u5c0f\u4e8e\u9501\u7684\u5931\u6548\u65f6\u95f4\u3002\u4f8b\u5982\u4f60\u7684\u9501\u81ea\u52a8\u5931\u6548\u65f6\u95f4\u4e3a 10 \u79d2\uff0c\u5219\u8d85\u65f6\u65f6\u95f4\u5e94\u8be5\u5728 5-50 \u6beb\u79d2\u4e4b\u95f4\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u670d\u52a1\u5668\u7aef Redis \u5df2\u7ecf\u6302\u6389\u7684\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u8fd8\u5728\u6b7b\u6b7b\u5730\u7b49\u5f85\u54cd\u5e94\u7ed3\u679c\u3002\u5982\u679c\u670d\u52a1\u5668\u7aef\u6ca1\u6709\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u54cd\u5e94\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5c3d\u5feb\u5c1d\u8bd5\u53e6\u5916\u4e00\u4e2a Redis \u5b9e\u4f8b\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u51cf\u53bb\u5f00\u59cb\u83b7\u53d6\u9501\u65f6\u95f4\uff08\u6b65\u9aa4 1 \u8bb0\u5f55\u7684\u65f6\u95f4\uff09\u5c31\u5f97\u5230\u83b7\u53d6\u9501\u4f7f\u7528\u7684\u65f6\u95f4\u3002\u5f53\u4e14\u4ec5\u5f53\u4ece\u5927\u591a\u6570\uff08\u8fd9\u91cc\u662f 3 \u4e2a\u8282\u70b9\uff09\u7684 Redis \u8282\u70b9\u90fd\u53d6\u5230\u9501\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u65f6\u95f4\u5c0f\u4e8e\u9501\u5931\u6548\u65f6\u95f4\u65f6\uff0c\u9501\u624d\u7b97\u83b7\u53d6\u6210\u529f\u3002 \u5982\u679c\u53d6\u5230\u4e86\u9501\uff0ckey \u7684\u771f\u6b63\u6709\u6548\u65f6\u95f4\u7b49\u4e8e\u6709\u6548\u65f6\u95f4\u51cf\u53bb\u83b7\u53d6\u9501\u6240\u4f7f\u7528\u7684\u65f6\u95f4\uff08\u6b65\u9aa4 3 \u8ba1\u7b97\u7684\u7ed3\u679c\uff09\u3002 \u5982\u679c\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\uff0c\u83b7\u53d6\u9501\u5931\u8d25\uff08\u6ca1\u6709\u5728\u81f3\u5c11 N/2+1 \u4e2a Redis \u5b9e\u4f8b\u53d6\u5230\u9501\u6216\u8005\u53d6\u9501\u65f6\u95f4\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6709\u6548\u65f6\u95f4\uff09\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5728\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u4e0a\u8fdb\u884c\u89e3\u9501\uff08\u5373\u4fbf\u67d0\u4e9b Redis \u5b9e\u4f8b\u6839\u672c\u5c31\u6ca1\u6709\u52a0\u9501\u6210\u529f\uff09\u3002","title":"Redlock \u7b97\u6cd5"},{"location":"blog/seckill/distlock-cn/#_4","text":"\u7b97\u6cd5\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u5047\u8bbe\uff1a\u867d\u7136\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u6ca1\u6709\u65f6\u949f\u540c\u6b65\uff0c\u4f46\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4ee5\u76f8\u540c\u7684\u65f6\u949f\u9891\u7387\u524d\u8fdb\uff0c\u65f6\u95f4\u5dee\u76f8\u5bf9\u4e8e\u5931\u6548\u65f6\u95f4\u6765\u8bf4\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\u8fd9\u79cd\u5047\u8bbe\u548c\u6211\u4eec\u7684\u771f\u5b9e\u4e16\u754c\u975e\u5e38\u63a5\u8fd1\uff1a\u6bcf\u4e2a\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u672c\u5730\u65f6\u949f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bb9\u5fcd\u591a\u4e2a\u8ba1\u7b97\u673a\u4e4b\u95f4\u6709\u8f83\u5c0f\u7684\u65f6\u949f\u6f02\u79fb\u3002 \u4ece\u8fd9\u70b9\u6765\u8bf4\uff0c\u6211\u4eec\u5fc5\u987b\u518d\u6b21\u5f3a\u8c03\u6211\u4eec\u7684\u4e92\u76f8\u6392\u65a5\u89c4\u5219\uff1a\u53ea\u6709\u5728\u9501\u7684\u6709\u6548\u65f6\u95f4\uff08\u5728\u6b65\u9aa4 3 \u8ba1\u7b97\u7684\u7ed3\u679c\uff09\u8303\u56f4\u5185\u5ba2\u6237\u7aef\u80fd\u591f\u505a\u5b8c\u5b83\u7684\u5de5\u4f5c\uff0c\u9501\u7684\u5b89\u5168\u6027\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff08\u9501\u7684\u5b9e\u9645\u6709\u6548\u65f6\u95f4\u901a\u5e38\u8981\u6bd4\u8bbe\u7f6e\u7684\u77ed\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e4b\u95f4\u6709\u65f6\u949f\u6f02\u79fb\u7684\u73b0\u8c61\uff09\u3002. \u60f3\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u9700\u8981\u65f6\u949f\u6f02\u79fb\u95f4\u9699\u7684\u76f8\u4f3c\u7cfb\u7edf, \u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u53c2\u8003: Leases: an efficient fault-tolerant mechanism for distributed file cache consistency.","title":"\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5f02\u6b65\u7684\u4e48?"},{"location":"blog/seckill/distlock-cn/#_5","text":"\u5f53\u5ba2\u6237\u7aef\u65e0\u6cd5\u53d6\u5230\u9501\u65f6\uff0c\u5e94\u8be5\u5728\u4e00\u4e2a\u968f\u673a\u5ef6\u8fdf\u540e\u91cd\u8bd5,\u9632\u6b62\u591a\u4e2a\u5ba2\u6237\u7aef\u5728\u540c\u65f6\u62a2\u593a\u540c\u4e00\u8d44\u6e90\u7684\u9501\uff08\u8fd9\u6837\u4f1a\u5bfc\u81f4\u8111\u88c2\uff0c\u6ca1\u6709\u4eba\u4f1a\u53d6\u5230\u9501\uff09\u3002\u540c\u6837\uff0c\u5ba2\u6237\u7aef\u53d6\u5f97\u5927\u90e8\u5206 Redis \u5b9e\u4f8b\u9501\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u8d8a\u77ed\uff0c\u8111\u88c2\u51fa\u73b0\u7684\u6982\u7387\u5c31\u4f1a\u8d8a\u4f4e\uff08\u5fc5\u8981\u7684\u91cd\u8bd5\uff09\uff0c\u6240\u4ee5\uff0c\u7406\u60f3\u60c5\u51b5\u4e00\u4e0b\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u540c\u65f6\uff08\u5e76\u53d1\u5730\uff09\u5411\u6240\u6709 Redis \u53d1\u9001 SET \u547d\u4ee4\u3002 \u9700\u8981\u5f3a\u8c03\uff0c\u5f53\u5ba2\u6237\u7aef\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u83b7\u53d6\u9501\u5931\u8d25\u65f6\uff0c\u5e94\u8be5\u5c3d\u5feb\u5730\u91ca\u653e\uff08\u90e8\u5206\uff09\u5df2\u7ecf\u6210\u529f\u53d6\u5230\u7684\u9501\uff0c\u8fd9\u6837\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u5c31\u4e0d\u5fc5\u975e\u5f97\u7b49\u5230\u9501\u8fc7\u5b8c\u201c\u6709\u6548\u65f6\u95f4\u201d\u624d\u80fd\u53d6\u5230\uff08\u7136\u800c\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u7f51\u7edc\u5206\u88c2\uff0c\u5ba2\u6237\u7aef\u5df2\u7ecf\u65e0\u6cd5\u548c Redis \u5b9e\u4f8b\u901a\u4fe1\uff0c\u6b64\u65f6\u5c31\u53ea\u80fd\u7b49\u5f85 key \u7684\u81ea\u52a8\u91ca\u653e\u4e86\uff0c\u7b49\u4e8e\u88ab\u60e9\u7f5a\u4e86\uff09\u3002","title":"\u5931\u8d25\u65f6\u91cd\u8bd5"},{"location":"blog/seckill/distlock-cn/#_6","text":"\u91ca\u653e\u9501\u6bd4\u8f83\u7b80\u5355\uff0c\u5411\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u53d1\u9001\u91ca\u653e\u9501\u547d\u4ee4\u5373\u53ef\uff0c\u4e0d\u7528\u5173\u5fc3\u4e4b\u524d\u6709\u6ca1\u6709\u4ece Redis \u5b9e\u4f8b\u6210\u529f\u83b7\u53d6\u5230\u9501.","title":"\u91ca\u653e\u9501"},{"location":"blog/seckill/distlock-cn/#_7","text":"\u8fd9\u4e2a\u7b97\u6cd5\u5b89\u5168\u4e48\uff1f\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u573a\u666f\u8ba8\u8bba\u4e00\u4e0b\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u5ba2\u6237\u7aef\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u53d6\u5230\u4e86\u9501\u3002\u6240\u6709\u7684\u5b9e\u4f8b\u90fd\u5305\u542b\u540c\u6837\u7684 key\uff0c\u5e76\u4e14 key \u7684\u6709\u6548\u65f6\u95f4\u4e5f\u4e00\u6837\u3002\u7136\u800c\uff0ckey \u80af\u5b9a\u662f\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u88ab\u8bbe\u7f6e\u4e0a\u7684\uff0c\u6240\u4ee5 key \u7684\u5931\u6548\u65f6\u95f4\u4e5f\u4e0d\u662f\u7cbe\u786e\u7684\u76f8\u540c\u3002\u6211\u4eec\u5047\u8bbe\u7b2c\u4e00\u4e2a\u8bbe\u7f6e\u7684 key \u65f6\u95f4\u662f T1(\u5f00\u59cb\u5411\u7b2c\u4e00\u4e2a server \u53d1\u9001\u547d\u4ee4\u524d\u65f6\u95f4\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u8bbe\u7f6e\u7684 key \u65f6\u95f4\u662f T2(\u5f97\u5230\u6700\u540e\u4e00\u53f0 server \u7684\u7b54\u590d\u540e\u7684\u65f6\u95f4\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4\uff0c\u7b2c\u4e00\u4e2a server \u7684 key \u81f3\u5c11\u4f1a\u5b58\u6d3b MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT\u3002\u6240\u6709\u5176\u4ed6\u7684 key \u7684\u5b58\u6d3b\u65f6\u95f4\uff0c\u90fd\u4f1a\u6bd4\u8fd9\u4e2a key \u65f6\u95f4\u665a\uff0c\u6240\u4ee5\u53ef\u4ee5\u80af\u5b9a\uff0c\u6240\u6709 key \u7684\u5931\u6548\u65f6\u95f4\u81f3\u5c11\u662f MIN_VALIDITY\u3002 \u5f53\u5927\u90e8\u5206\u5b9e\u4f8b\u7684 key \u88ab\u8bbe\u7f6e\u540e\uff0c\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u5c06\u4e0d\u80fd\u518d\u53d6\u5230\u9501\uff0c\u56e0\u4e3a\u81f3\u5c11 N/2+1 \u4e2a\u5b9e\u4f8b\u5df2\u7ecf\u5b58\u5728 key\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4e00\u4e2a\u9501\u88ab\uff08\u5ba2\u6237\u7aef\uff09\u83b7\u53d6\u540e\uff0c\u5ba2\u6237\u7aef\u81ea\u5df1\u4e5f\u4e0d\u80fd\u518d\u6b21\u7533\u8bf7\u5230\u9501(\u8fdd\u53cd\u4e92\u76f8\u6392\u65a5\u5c5e\u6027\uff09\u3002 \u7136\u800c\u6211\u4eec\u4e5f\u60f3\u786e\u4fdd\uff0c\u5f53\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u62a2\u593a\u4e00\u4e2a\u9501\u65f6\u4e0d\u80fd\u4e24\u4e2a\u90fd\u6210\u529f\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u5728\u83b7\u53d6\u5230\u5927\u591a\u6570 redis \u5b9e\u4f8b\u9501\uff0c\u4f7f\u7528\u7684\u65f6\u95f4\u63a5\u8fd1\u6216\u8005\u5df2\u7ecf\u5927\u4e8e\u5931\u6548\u65f6\u95f4\uff0c\u5ba2\u6237\u7aef\u5c06\u8ba4\u4e3a\u9501\u662f\u5931\u6548\u7684\u9501\uff0c\u5e76\u4e14\u5c06\u91ca\u653e\u6389\u5df2\u7ecf\u83b7\u53d6\u5230\u7684\u9501\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u6709\u6548\u65f6\u95f4\u8303\u56f4\u5185\u83b7\u53d6\u5230\u5927\u90e8\u5206\u9501\u8fd9\u79cd\u60c5\u51b5\u3002\u5728\u4e0a\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u6709\u4e89\u8bae\u7684\u5730\u65b9\uff0c\u5728 MIN_VALIDITY \u65f6\u95f4\u5185\uff0c\u5c06\u6ca1\u6709\u5ba2\u6237\u7aef\u518d\u6b21\u53d6\u5f97\u9501\u3002\u6240\u4ee5\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u4f1a\u5728\u76f8\u540c\u65f6\u95f4\u53d6\u5f97 N/2+1 \u5b9e\u4f8b\u7684\u9501\uff0c\u90a3\u5c31\u662f\u53d6\u5f97\u9501\u7684\u65f6\u95f4\u5927\u4e8e\u5931\u6548\u65f6\u95f4\uff08TTL time)\uff0c\u8fd9\u6837\u53d6\u5230\u7684\u9501\u4e5f\u662f\u65e0\u6548\u7684. \u5982\u679c\u4f60\u80fd\u63d0\u4f9b\u5173\u4e8e\u73b0\u6709\u7684\u7c7b\u4f3c\u7b97\u6cd5\u7684\u4e00\u4e2a\u6b63\u5f0f\u8bc1\u660e\uff08\u6307\u51fa\u6b63\u786e\u6027\uff09\uff0c\u6216\u8005\u662f\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u7684 bug\uff1f \u6211\u4eec\u5c06\u975e\u5e38\u611f\u6fc0.","title":"\u5b89\u5168\u4e89\u8bae"},{"location":"blog/seckill/distlock-cn/#_8","text":"\u7cfb\u7edf\u7684\u6d3b\u6027\u5b89\u5168\u57fa\u4e8e\u4e09\u4e2a\u4e3b\u8981\u7279\u6027: \u9501\u7684\u81ea\u52a8\u91ca\u653e\uff08\u56e0\u4e3a key \u5931\u6548\u4e86\uff09\uff1a\u6700\u7ec8\u9501\u53ef\u4ee5\u518d\u6b21\u88ab\u4f7f\u7528. \u5ba2\u6237\u7aef\u901a\u5e38\u4f1a\u5c06\u6ca1\u6709\u83b7\u53d6\u5230\u7684\u9501\u5220\u9664\uff0c\u6216\u8005\u9501\u88ab\u53d6\u5230\u540e\uff0c\u4f7f\u7528\u5b8c\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u4e3b\u52a8\uff08\u63d0\u524d\uff09\u91ca\u653e\u9501\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u9501\u5931\u6548\u53e6\u5916\u7684\u5ba2\u6237\u7aef\u624d\u80fd\u53d6\u5230\u9501\u3002. \u5f53\u5ba2\u6237\u7aef\u91cd\u8bd5\u83b7\u53d6\u9501\u65f6\uff0c\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u5fc5\u987b\u5927\u4e8e\u4ece\u5927\u591a\u6570 Redis \u5b9e\u4f8b\u6210\u529f\u83b7\u53d6\u9501\u4f7f\u7528\u7684\u65f6\u95f4\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u907f\u514d\u8111\u88c2\u3002. \u7136\u800c\uff0c\u5f53\u7f51\u7edc\u51fa\u73b0\u95ee\u9898\u65f6\u7cfb\u7edf\u5728\u5931\u6548\u65f6\u95f4(TTL)\u5185\u5c31\u65e0\u6cd5\u670d\u52a1\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u7684\u7a0b\u5e8f\u5c31\u4f1a\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\u3002\u5982\u679c\u7f51\u7edc\u6301\u7eed\u7684\u6709\u95ee\u9898\uff0c\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\u4e86\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u5f53\u5ba2\u6237\u7aef\u521a\u53d6\u5230\u4e00\u4e2a\u9501\u8fd8\u6ca1\u6709\u6765\u5f97\u53ca\u91ca\u653e\u9501\u5c31\u88ab\u7f51\u7edc\u9694\u79bb. \u5982\u679c\u7f51\u7edc\u4e00\u76f4\u6ca1\u6709\u6062\u590d\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u53ef\u7528.","title":"\u6d3b\u6027\u4e89\u8bae"},{"location":"blog/seckill/distlock-cn/#redis_1","text":"\u5f88\u591a\u7528\u6237\u628a Redis \u5f53\u505a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u5668\uff0c\u4f7f\u7528\u83b7\u53d6\u9501\u548c\u91ca\u653e\u9501\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u6bcf\u79d2\u949f\u53ef\u7528\u6267\u884c\u591a\u5c11\u6b21 acquire / release \u64cd\u4f5c\u4f5c\u4e3a\u6027\u80fd\u6307\u6807\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u8981\u6c42\uff0c\u589e\u52a0 Redis \u5b9e\u4f8b\u5f53\u7136\u53ef\u7528\u964d\u4f4e\u54cd\u5e94\u5ef6\u8fdf\uff08\u6ca1\u6709\u94b1\u4e70\u786c\u4ef6\u7684\u201d\u7a77\u4eba\u201d,\u4e5f\u53ef\u4ee5\u5728\u7f51\u7edc\u65b9\u9762\u505a\u4f18\u5316\uff0c\u4f7f\u7528\u975e\u963b\u585e\u6a21\u578b\uff0c\u4e00\u6b21\u53d1\u9001\u6240\u6709\u7684\u547d\u4ee4\uff0c\u7136\u540e\u5f02\u6b65\u7684\u8bfb\u53d6\u54cd\u5e94\u7ed3\u679c\uff0c\u5047\u8bbe\u5ba2\u6237\u7aef\u548c redis \u670d\u52a1\u5668\u4e4b\u95f4\u7684 RTT \u90fd\u5dee\u4e0d\u591a\u3002 \u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4f7f\u7528\u53ef\u4ee5\u4ece\u5907\u4efd\u4e2d\u6062\u590d\u7684 redis \u6a21\u5f0f\uff0c\u6709\u53e6\u5916\u4e00\u79cd\u6301\u4e45\u5316\u60c5\u51b5\u4f60\u9700\u8981\u8003\u8651\uff0c. \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u573a\u666f\uff0c\u5047\u8bbe\u6211\u4eec\u7684 redis \u6ca1\u7528\u4f7f\u7528\u5907\u4efd\u3002\u4e00\u4e2a\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u4e86 3 \u4e2a\u5b9e\u4f8b\u7684\u9501\u3002\u6b64\u65f6\uff0c\u5176\u4e2d\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5ba2\u6237\u7aef\u53d6\u5230\u9501\u7684 redis \u5b9e\u4f8b\u88ab\u91cd\u542f\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u5c31\u53ef\u80fd\u51fa\u73b0 3 \u4e2a\u8282\u70b9\u6ca1\u6709\u8bbe\u7f6e\u9501\uff0c\u6b64\u65f6\u5982\u679c\u6709\u53e6\u5916\u4e00\u4e2a\u5ba2\u6237\u7aef\u6765\u8bbe\u7f6e\u9501\uff0c\u9501\u5c31\u53ef\u80fd\u88ab\u518d\u6b21\u83b7\u53d6\u5230\uff0c\u8fd9\u6837\u9501\u7684\u4e92\u76f8\u6392\u65a5\u7684\u7279\u6027\u5c31\u88ab\u7834\u574f\u6389\u4e86\u3002 \u5982\u679c\u6211\u4eec\u542f\u7528\u4e86 AOF \u6301\u4e45\u5316\uff0c\u60c5\u51b5\u4f1a\u597d\u5f88\u591a\u3002\u6211\u4eec\u53ef\u7528\u4f7f\u7528 SHUTDOWN \u547d\u4ee4\u5173\u95ed\u7136\u540e\u518d\u6b21\u91cd\u542f\u3002\u56e0\u4e3a Redis \u5230\u671f\u662f\u8bed\u4e49\u4e0a\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u5f53\u670d\u52a1\u5668\u5173\u95ed\u65f6\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u7ecf\u8fc7\u4e86\u65f6\u95f4\uff0c\u6240\u6709\uff08\u4fdd\u6301\u9501\uff09\u9700\u8981\u7684\u6761\u4ef6\u90fd\u6ca1\u6709\u53d7\u5230\u5f71\u54cd. \u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u7684\u524d\u63d0\u662f redis \u4f18\u96c5\u7684\u5173\u95ed\u3002\u505c\u7535\u4e86\u600e\u4e48\u529e\uff1f\u5982\u679c redis \u662f\u6bcf\u79d2\u6267\u884c\u4e00\u6b21 fsync\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u5728 redis \u91cd\u542f\u4e4b\u540e\uff0ckey \u5df2\u7ecf\u4e22\u5f03\u3002\u7406\u8bba\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 Redis \u91cd\u542f\u5730\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u4fdd\u8bc1\u9501\u7684\u5b89\u5168\uff0c\u6211\u4eec\u5fc5\u987b\u5f00\u542f fsync=always \u7684\u914d\u7f6e\u3002\u8fd9\u53cd\u8fc7\u6765\u5c06\u5b8c\u5168\u7834\u574f\u4e0e\u4f20\u7edf\u4e0a\u7528\u4e8e\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u540c\u4e00\u7ea7\u522b\u7684 CP \u7cfb\u7edf\u7684\u6027\u80fd. \u7136\u800c\u60c5\u51b5\u603b\u6bd4\u4e00\u5f00\u59cb\u60f3\u8c61\u7684\u597d\u4e00\u4e9b\u3002\u5f53\u4e00\u4e2a redis \u8282\u70b9\u91cd\u542f\u540e\uff0c\u53ea\u8981\u5b83\u4e0d\u53c2\u4e0e\u5230\u4efb\u610f\u5f53\u524d\u6d3b\u52a8\u7684\u9501\uff0c\u6ca1\u6709\u88ab\u5f53\u505a\u201c\u5f53\u524d\u5b58\u6d3b\u201d\u8282\u70b9\u88ab\u5ba2\u6237\u7aef\u91cd\u65b0\u83b7\u53d6\u5230,\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u4ecd\u7136\u662f\u6709\u4fdd\u969c\u7684\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u65b0\u7684 redis \u5b9e\u4f8b\uff0c\u5728\u4e00\u4e2a TTL \u65f6\u95f4\u5185\uff0c\u5bf9\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528\u5373\u53ef\uff0c\u5728\u8fd9\u4e2a\u65f6\u95f4\u5185\uff0c\u6240\u6709\u5ba2\u6237\u7aef\u9501\u5c06\u88ab\u5931\u6548\u6216\u8005\u81ea\u52a8\u91ca\u653e. \u4f7f\u7528\u5ef6\u8fdf\u91cd\u542f\u53ef\u4ee5\u5728\u4e0d\u91c7\u7528\u6301\u4e45\u5316\u7b56\u7565\u7684\u60c5\u51b5\u4e0b\u8fbe\u5230\u540c\u6837\u7684\u5b89\u5168\uff0c\u7136\u800c\u8fd9\u6837\u505a\u6709\u65f6\u4f1a\u8ba9\u7cfb\u7edf\u8f6c\u5316\u4e3a\u5f7b\u5e95\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u5927\u90e8\u5206\u7684 redis \u5b9e\u4f8b\u90fd\u5d29\u6e83\u4e86\uff0c\u7cfb\u7edf\u5728 TTL \u65f6\u95f4\u5185\u4efb\u4f55\u9501\u90fd\u5c06\u65e0\u6cd5\u52a0\u9501\u6210\u529f\u3002","title":"\u6027\u80fd\uff0c\u5d29\u6e83\u6062\u590d\u548c Redis \u540c\u6b65"},{"location":"blog/seckill/distlock-cn/#_9","text":"\u5982\u679c\u4f60\u7684\u5de5\u4f5c\u53ef\u4ee5\u62c6\u5206\u4e3a\u8bb8\u591a\u5c0f\u6b65\u9aa4\uff0c\u53ef\u4ee5\u5c06\u6709\u6548\u65f6\u95f4\u8bbe\u7f6e\u7684\u5c0f\u4e00\u4e9b\uff0c\u4f7f\u7528\u9501\u7684\u4e00\u4e9b\u6269\u5c55\u673a\u5236\u3002\u5728\u5de5\u4f5c\u8fdb\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u53d1\u73b0\u9501\u5269\u4e0b\u7684\u6709\u6548\u65f6\u95f4\u5f88\u77ed\u65f6\uff0c\u53ef\u4ee5\u518d\u6b21\u5411 redis \u7684\u6240\u6709\u5b9e\u4f8b\u53d1\u9001\u4e00\u4e2a Lua \u811a\u672c\uff0c\u8ba9 key \u7684\u6709\u6548\u65f6\u95f4\u5ef6\u957f\u4e00\u70b9\uff08\u524d\u63d0\u8fd8\u662f key \u5b58\u5728\u5e76\u4e14 value \u662f\u4e4b\u524d\u8bbe\u7f6e\u7684 value)\u3002 \u5ba2\u6237\u7aef\u6269\u5c55 TTL \u65f6\u5fc5\u987b\u50cf\u9996\u6b21\u53d6\u5f97\u9501\u4e00\u6837\u5728\u5927\u591a\u6570\u5b9e\u4f8b\u4e0a\u6269\u5c55\u6210\u529f\u624d\u7b97\u518d\u6b21\u53d6\u5230\u9501\uff0c\u5e76\u4e14\u662f\u5728\u6709\u6548\u65f6\u95f4\u5185\u518d\u6b21\u53d6\u5230\u9501\uff08\u7b97\u6cd5\u548c\u83b7\u53d6\u9501\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff09\u3002 \u8fd9\u6837\u505a\u4ece\u6280\u672f\u4e0a\u5c06\u5e76\u4e0d\u4f1a\u6539\u53d8\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u6240\u4ee5\u6269\u5c55\u9501\u7684\u8fc7\u7a0b\u4e2d\u4ecd\u7136\u9700\u8981\u8fbe\u5230\u83b7\u53d6\u5230 N/2+1 \u4e2a\u5b9e\u4f8b\u8fd9\u4e2a\u8981\u6c42\uff0c\u5426\u5219\u6d3b\u6027\u7279\u6027\u4e4b\u4e00\u5c31\u4f1a\u5931\u6548\u3002","title":"\u4f7f\u7b97\u6cd5\u66f4\u52a0\u53ef\u9760\uff1a\u9501\u7684\u6269\u5c55"},{"location":"blog/seckill/distlock-cn/#_10","text":"\u5982\u679c\u4f60\u6b63\u5728\u505a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u4f60\u7684\u610f\u89c1\u548c\u5206\u6790\u975e\u5e38\u91cd\u8981\u3002\u5176\u4ed6\u8bed\u8a00\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u7b97\u6cd5\u540c\u6837\u975e\u5e38\u5b9d\u8d35\u3002 \u63d0\u524d\u611f\u8c22\u5404\u4f4d!","title":"\u60f3\u8981\u5f97\u5230\u5e2e\u52a9?"},{"location":"blog/seckill/distlock-cn/#redlock_1","text":"Martin Kleppmann \u5728\u8fd9\u513f\u5206\u6790\u4e86 Redlock . \u6211\u4e0d\u8d5e\u540c\u4ed6\u7684\u8bf4\u6cd5\uff0c\u5e76\u4e14\u5bf9\u4ed6\u505a\u51fa\u4e86\u56de\u590d \u6211\u7684\u56de\u590d\u5728\u8fd9\u513f .","title":"Redlock \u5206\u6790"},{"location":"blog/seckill/distlock/","text":"http://redis.io/topics/distlock Distributed locks are a very useful primitive in many environments where different processes must operate with shared resources in a mutually exclusive way. There are a number of libraries and blog posts describing how to implement a DLM (Distributed Lock Manager) with Redis, but every library uses a different approach, and many use a simple approach with lower guarantees compared to what can be achieved with slightly more complex designs. This page is an attempt to provide a more canonical algorithm to implement distributed locks with Redis. We propose an algorithm, called Redlock, which implements a DLM which we believe to be safer than the vanilla single instance approach. We hope that the community will analyze it, provide feedback, and use it as a starting point for the implementations or more complex or alternative designs. \u5b9e\u73b0 Before describing the algorithm, here are a few links to implementations already available that can be used for reference. Redlock-rb (Ruby implementation). There is also a fork of Redlock-rb that adds a gem for easy distribution and perhaps more. Redlock-py (Python implementation). Pottery (Python implementation). Aioredlock (Asyncio Python implementation). Redlock-php (PHP implementation). PHPRedisMutex (further PHP implementation) cheprasov/php-redis-lock (PHP library for locks) rtckit/react-redlock (Async PHP implementation) Redsync (Go implementation). Redisson (Java implementation). Redis::DistLock (Perl implementation). Redlock-cpp (C++ implementation). Redlock-cs (C#/.NET implementation). RedLock.net (C#/.NET implementation). Includes async and lock extension support. ScarletLock (C# .NET implementation with configurable datastore) Redlock4Net (C# .NET implementation) node-redlock (NodeJS implementation). Includes support for lock extension. \u5b89\u5168\u3001\u6d3b\u529b\u4fdd\u8bc1 We are going to model our design with just three properties that, from our point of view, are the minimum guarantees needed to use distributed locks in an effective way. Safety property: Mutual exclusion. At any given moment, only one client can hold a lock. Liveness property A: Deadlock free. Eventually it is always possible to acquire a lock, even if the client that locked a resource crashes or gets partitioned. Liveness property B: Fault tolerance. As long as the majority of Redis nodes are up, clients are able to acquire and release locks. \u4e3a\u4ec0\u4e48\u57fa\u4e8e\u6545\u969c\u8f6c\u79fb\u7684\u5b9e\u73b0\u8fd8\u4e0d\u591f To understand what we want to improve, let\u2019s analyze the current state of affairs with most Redis-based distributed lock libraries. The simplest way to use Redis to lock a resource is to create a key in an instance. The key is usually created with a limited time to live, using the Redis expires feature, so that eventually it will get released (property 2 in our list). When the client needs to release the resource, it deletes the key. Superficially this works well, but there is a problem: this is a single point of failure in our architecture. What happens if the Redis master goes down? Well, let\u2019s add a replica! And use it if the master is unavailable. This is unfortunately not viable. By doing so we can\u2019t implement our safety property of mutual exclusion, because Redis replication is asynchronous. There is an obvious race condition with this model: Client A acquires the lock in the master. The master crashes before the write to the key is transmitted to the replica. The replica gets promoted to master. Client B acquires the lock to the same resource A already holds a lock for. SAFETY VIOLATION! Sometimes it is perfectly fine that under special circumstances, like during a failure, multiple clients can hold the lock at the same time. If this is the case, you can use your replication based solution. Otherwise we suggest to implement the solution described in this document. \u4f7f\u7528\u5355\u4e2a\u5b9e\u4f8b\u7684\u6b63\u786e\u5b9e\u73b0 Before trying to overcome the limitation of the single instance setup described above, let\u2019s check how to do it correctly in this simple case, since this is actually a viable solution in applications where a race condition from time to time is acceptable, and because locking into a single instance is the foundation we\u2019ll use for the distributed algorithm described here. To acquire the lock, the way to go is the following: Bash SET resource_name my_random_value NX PX 30000 The command will set the key only if it does not already exist (NX option), with an expire of 30000 milliseconds (PX option). The key is set to a value \u201cmy_random_value\u201d. This value must be unique across all clients and all lock requests. Basically the random value is used in order to release the lock in a safe way, with a script that tells Redis: remove the key only if it exists and the value stored at the key is exactly the one I expect to be. This is accomplished by the following Lua script: Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end This is important in order to avoid removing a lock that was created by another client. For example a client may acquire the lock, get blocked in some operation for longer than the lock validity time (the time at which the key will expire), and later remove the lock, that was already acquired by some other client. Using just DEL is not safe as a client may remove the lock of another client. With the above script instead every lock is \u201csigned\u201d with a random string, so the lock will be removed only if it is still the one that was set by the client trying to remove it. What should this random string be? I assume it\u2019s 20 bytes from /dev/urandom, but you can find cheaper ways to make it unique enough for your tasks. For example a safe pick is to seed RC4 with /dev/urandom, and generate a pseudo random stream from that. A simpler solution is to use a combination of unix time with microseconds resolution, concatenating it with a client ID, it is not as safe, but probably up to the task in most environments. The time we use as the key time to live, is called the \u201clock validity time\u201d. It is both the auto release time, and the time the client has in order to perform the operation required before another client may be able to acquire the lock again, without technically violating the mutual exclusion guarantee, which is only limited to a given window of time from the moment the lock is acquired. So now we have a good way to acquire and release the lock. The system, reasoning about a non-distributed system composed of a single, always available, instance, is safe. Let\u2019s extend the concept to a distributed system where we don\u2019t have such guarantees. Redlock \u7b97\u6cd5 In the distributed version of the algorithm we assume we have N Redis masters. Those nodes are totally independent, so we don\u2019t use replication or any other implicit coordination system. We already described how to acquire and release the lock safely in a single instance. We take for granted that the algorithm will use this method to acquire and release the lock in a single instance. In our examples we set N=5, which is a reasonable value, so we need to run 5 Redis masters on different computers or virtual machines in order to ensure that they\u2019ll fail in a mostly independent way. In order to acquire the lock, the client performs the following operations: It gets the current time in milliseconds. It tries to acquire the lock in all the N instances sequentially, using the same key name and random value in all the instances. During step 2, when setting the lock in each instance, the client uses a timeout which is small compared to the total lock auto-release time in order to acquire it. For example if the auto-release time is 10 seconds, the timeout could be in the ~ 5-50 milliseconds range. This prevents the client from remaining blocked for a long time trying to talk with a Redis node which is down: if an instance is not available, we should try to talk with the next instance ASAP. The client computes how much time elapsed in order to acquire the lock, by subtracting from the current time the timestamp obtained in step 1. If and only if the client was able to acquire the lock in the majority of the instances (at least 3), and the total time elapsed to acquire the lock is less than lock validity time, the lock is considered to be acquired. If the lock was acquired, its validity time is considered to be the initial validity time minus the time elapsed, as computed in step 3. If the client failed to acquire the lock for some reason (either it was not able to lock N/2+1 instances or the validity time is negative), it will try to unlock all the instances (even the instances it believed it was not able to lock). Is the algorithm asynchronous? The algorithm relies on the assumption that while there is no synchronized clock across the processes, still the local time in every process flows approximately at the same rate, with an error which is small compared to the auto-release time of the lock. This assumption closely resembles a real-world computer: every computer has a local clock and we can usually rely on different computers to have a clock drift which is small. At this point we need to better specify our mutual exclusion rule: it is guaranteed only as long as the client holding the lock will terminate its work within the lock validity time (as obtained in step 3), minus some time (just a few milliseconds in order to compensate for clock drift between processes). For more information about similar systems requiring a bound clock drift, this paper is an interesting reference: Leases: an efficient fault-tolerant mechanism for distributed file cache consistency. \u91cd\u8bd5\u5931\u8d25 When a client is unable to acquire the lock, it should try again after a random delay in order to try to desynchronize multiple clients trying to acquire the lock for the same resource at the same time (this may result in a split brain condition where nobody wins). Also the faster a client tries to acquire the lock in the majority of Redis instances, the smaller the window for a split brain condition (and the need for a retry), so ideally the client should try to send the SET commands to the N instances at the same time using multiplexing. It is worth stressing how important it is for clients that fail to acquire the majority of locks, to release the (partially) acquired locks ASAP, so that there is no need to wait for key expiry in order for the lock to be acquired again (however if a network partition happens and the client is no longer able to communicate with the Redis instances, there is an availability penalty to pay as it waits for key expiration). \u91ca\u653e\u9501 Releasing the lock is simple and involves just releasing the lock in all instances, whether or not the client believes it was able to successfully lock a given instance. \u5b89\u5168\u53c2\u6570 Is the algorithm safe? We can try to understand what happens in different scenarios. To start let\u2019s assume that a client is able to acquire the lock in the majority of instances. All the instances will contain a key with the same time to live. However, the key was set at different times, so the keys will also expire at different times. But if the first key was set at worst at time T1 (the time we sample before contacting the first server) and the last key was set at worst at time T2 (the time we obtained the reply from the last server), we are sure that the first key to expire in the set will exist for at least MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT. All the other keys will expire later, so we are sure that the keys will be simultaneously set for at least this time. During the time that the majority of keys are set, another client will not be able to acquire the lock, since N/2+1 SET NX operations can\u2019t succeed if N/2+1 keys already exist. So if a lock was acquired, it is not possible to re-acquire it at the same time (violating the mutual exclusion property). However we want to also make sure that multiple clients trying to acquire the lock at the same time can\u2019t simultaneously succeed. If a client locked the majority of instances using a time near, or greater, than the lock maximum validity time (the TTL we use for SET basically), it will consider the lock invalid and will unlock the instances, so we only need to consider the case where a client was able to lock the majority of instances in a time which is less than the validity time. In this case for the argument already expressed above, for MIN_VALIDITY no client should be able to re-acquire the lock. So multiple clients will be able to lock N/2+1 instances at the same time (with \"time\" being the end of Step 2) only when the time to lock the majority was greater than the TTL time, making the lock invalid. Are you able to provide a formal proof of safety, point to existing algorithms that are similar, or find a bug? That would be greatly appreciated. \u6d3b\u6027\u53c2\u6570 The system liveness is based on three main features: The auto release of the lock (since keys expire): eventually keys are available again to be locked. The fact that clients, usually, will cooperate removing the locks when the lock was not acquired, or when the lock was acquired and the work terminated, making it likely that we don\u2019t have to wait for keys to expire to re-acquire the lock. The fact that when a client needs to retry a lock, it waits a time which is comparably greater than the time needed to acquire the majority of locks, in order to probabilistically make split brain conditions during resource contention unlikely. However, we pay an availability penalty equal to TTL time on network partitions, so if there are continuous partitions, we can pay this penalty indefinitely. This happens every time a client acquires a lock and gets partitioned away before being able to remove the lock. Basically if there are infinite continuous network partitions, the system may become not available for an infinite amount of time. \u6027\u80fd\uff0c\u5d29\u6e83\u6062\u590d\u548c fsync Many users using Redis as a lock server need high performance in terms of both latency to acquire and release a lock, and number of acquire / release operations that it is possible to perform per second. In order to meet this requirement, the strategy to talk with the N Redis servers to reduce latency is definitely multiplexing (or poor man's multiplexing, which is, putting the socket in non-blocking mode, send all the commands, and read all the commands later, assuming that the RTT between the client and each instance is similar). However there is another consideration to do about persistence if we want to target a crash-recovery system model. Basically to see the problem here, let\u2019s assume we configure Redis without persistence at all. A client acquires the lock in 3 of 5 instances. One of the instances where the client was able to acquire the lock is restarted, at this point there are again 3 instances that we can lock for the same resource, and another client can lock it again, violating the safety property of exclusivity of lock. If we enable AOF persistence, things will improve quite a bit. For example we can upgrade a server by sending SHUTDOWN and restarting it. Because Redis expires are semantically implemented so that virtually the time still elapses when the server is off, all our requirements are fine. However everything is fine as long as it is a clean shutdown. What about a power outage? If Redis is configured, as by default, to fsync on disk every second, it is possible that after a restart our key is missing. In theory, if we want to guarantee the lock safety in the face of any kind of instance restart, we need to enable fsync=always in the persistence setting. This in turn will totally ruin performances to the same level of CP systems that are traditionally used to implement distributed locks in a safe way. However things are better than what they look like at a first glance. Basically the algorithm safety is retained as long as when an instance restarts after a crash, it no longer participates to any currently active lock, so that the set of currently active locks when the instance restarts, were all obtained by locking instances other than the one which is rejoining the system. To guarantee this we just need to make an instance, after a crash, unavailable for at least a bit more than the max TTL we use, which is, the time needed for all the keys about the locks that existed when the instance crashed, to become invalid and be automatically released. Using delayed restarts it is basically possible to achieve safety even without any kind of Redis persistence available, however note that this may translate into an availability penalty. For example if a majority of instances crash, the system will become globally unavailable for TTL (here globally means that no resource at all will be lockable during this time). \u4f7f\u7b97\u6cd5\u66f4\u53ef\u9760:\u6269\u5c55\u9501 If the work performed by clients is composed of small steps, it is possible to use smaller lock validity times by default, and extend the algorithm implementing a lock extension mechanism. Basically the client, if in the middle of the computation while the lock validity is approaching a low value, may extend the lock by sending a Lua script to all the instances that extends the TTL of the key if the key exists and its value is still the random value the client assigned when the lock was acquired. The client should only consider the lock re-acquired if it was able to extend the lock into the majority of instances, and within the validity time (basically the algorithm to use is very similar to the one used when acquiring the lock). However this does not technically change the algorithm, so the maximum number of lock reacquisition attempts should be limited, otherwise one of the liveness properties is violated. \u60f3\u8981\u5e2e\u52a9\u5417? If you are into distributed systems, it would be great to have your opinion / analysis. Also reference implementations in other languages could be great. Thanks in advance! \u5206\u6790 Redlock Martin Kleppmann analyzed Redlock here . I disagree with the analysis and posted my reply to his analysis here .","title":"Redis\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/distlock/#_1","text":"Before describing the algorithm, here are a few links to implementations already available that can be used for reference. Redlock-rb (Ruby implementation). There is also a fork of Redlock-rb that adds a gem for easy distribution and perhaps more. Redlock-py (Python implementation). Pottery (Python implementation). Aioredlock (Asyncio Python implementation). Redlock-php (PHP implementation). PHPRedisMutex (further PHP implementation) cheprasov/php-redis-lock (PHP library for locks) rtckit/react-redlock (Async PHP implementation) Redsync (Go implementation). Redisson (Java implementation). Redis::DistLock (Perl implementation). Redlock-cpp (C++ implementation). Redlock-cs (C#/.NET implementation). RedLock.net (C#/.NET implementation). Includes async and lock extension support. ScarletLock (C# .NET implementation with configurable datastore) Redlock4Net (C# .NET implementation) node-redlock (NodeJS implementation). Includes support for lock extension.","title":"\u5b9e\u73b0"},{"location":"blog/seckill/distlock/#_2","text":"We are going to model our design with just three properties that, from our point of view, are the minimum guarantees needed to use distributed locks in an effective way. Safety property: Mutual exclusion. At any given moment, only one client can hold a lock. Liveness property A: Deadlock free. Eventually it is always possible to acquire a lock, even if the client that locked a resource crashes or gets partitioned. Liveness property B: Fault tolerance. As long as the majority of Redis nodes are up, clients are able to acquire and release locks.","title":"\u5b89\u5168\u3001\u6d3b\u529b\u4fdd\u8bc1"},{"location":"blog/seckill/distlock/#_3","text":"To understand what we want to improve, let\u2019s analyze the current state of affairs with most Redis-based distributed lock libraries. The simplest way to use Redis to lock a resource is to create a key in an instance. The key is usually created with a limited time to live, using the Redis expires feature, so that eventually it will get released (property 2 in our list). When the client needs to release the resource, it deletes the key. Superficially this works well, but there is a problem: this is a single point of failure in our architecture. What happens if the Redis master goes down? Well, let\u2019s add a replica! And use it if the master is unavailable. This is unfortunately not viable. By doing so we can\u2019t implement our safety property of mutual exclusion, because Redis replication is asynchronous. There is an obvious race condition with this model: Client A acquires the lock in the master. The master crashes before the write to the key is transmitted to the replica. The replica gets promoted to master. Client B acquires the lock to the same resource A already holds a lock for. SAFETY VIOLATION! Sometimes it is perfectly fine that under special circumstances, like during a failure, multiple clients can hold the lock at the same time. If this is the case, you can use your replication based solution. Otherwise we suggest to implement the solution described in this document.","title":"\u4e3a\u4ec0\u4e48\u57fa\u4e8e\u6545\u969c\u8f6c\u79fb\u7684\u5b9e\u73b0\u8fd8\u4e0d\u591f"},{"location":"blog/seckill/distlock/#_4","text":"Before trying to overcome the limitation of the single instance setup described above, let\u2019s check how to do it correctly in this simple case, since this is actually a viable solution in applications where a race condition from time to time is acceptable, and because locking into a single instance is the foundation we\u2019ll use for the distributed algorithm described here. To acquire the lock, the way to go is the following: Bash SET resource_name my_random_value NX PX 30000 The command will set the key only if it does not already exist (NX option), with an expire of 30000 milliseconds (PX option). The key is set to a value \u201cmy_random_value\u201d. This value must be unique across all clients and all lock requests. Basically the random value is used in order to release the lock in a safe way, with a script that tells Redis: remove the key only if it exists and the value stored at the key is exactly the one I expect to be. This is accomplished by the following Lua script: Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end This is important in order to avoid removing a lock that was created by another client. For example a client may acquire the lock, get blocked in some operation for longer than the lock validity time (the time at which the key will expire), and later remove the lock, that was already acquired by some other client. Using just DEL is not safe as a client may remove the lock of another client. With the above script instead every lock is \u201csigned\u201d with a random string, so the lock will be removed only if it is still the one that was set by the client trying to remove it. What should this random string be? I assume it\u2019s 20 bytes from /dev/urandom, but you can find cheaper ways to make it unique enough for your tasks. For example a safe pick is to seed RC4 with /dev/urandom, and generate a pseudo random stream from that. A simpler solution is to use a combination of unix time with microseconds resolution, concatenating it with a client ID, it is not as safe, but probably up to the task in most environments. The time we use as the key time to live, is called the \u201clock validity time\u201d. It is both the auto release time, and the time the client has in order to perform the operation required before another client may be able to acquire the lock again, without technically violating the mutual exclusion guarantee, which is only limited to a given window of time from the moment the lock is acquired. So now we have a good way to acquire and release the lock. The system, reasoning about a non-distributed system composed of a single, always available, instance, is safe. Let\u2019s extend the concept to a distributed system where we don\u2019t have such guarantees.","title":"\u4f7f\u7528\u5355\u4e2a\u5b9e\u4f8b\u7684\u6b63\u786e\u5b9e\u73b0"},{"location":"blog/seckill/distlock/#redlock","text":"In the distributed version of the algorithm we assume we have N Redis masters. Those nodes are totally independent, so we don\u2019t use replication or any other implicit coordination system. We already described how to acquire and release the lock safely in a single instance. We take for granted that the algorithm will use this method to acquire and release the lock in a single instance. In our examples we set N=5, which is a reasonable value, so we need to run 5 Redis masters on different computers or virtual machines in order to ensure that they\u2019ll fail in a mostly independent way. In order to acquire the lock, the client performs the following operations: It gets the current time in milliseconds. It tries to acquire the lock in all the N instances sequentially, using the same key name and random value in all the instances. During step 2, when setting the lock in each instance, the client uses a timeout which is small compared to the total lock auto-release time in order to acquire it. For example if the auto-release time is 10 seconds, the timeout could be in the ~ 5-50 milliseconds range. This prevents the client from remaining blocked for a long time trying to talk with a Redis node which is down: if an instance is not available, we should try to talk with the next instance ASAP. The client computes how much time elapsed in order to acquire the lock, by subtracting from the current time the timestamp obtained in step 1. If and only if the client was able to acquire the lock in the majority of the instances (at least 3), and the total time elapsed to acquire the lock is less than lock validity time, the lock is considered to be acquired. If the lock was acquired, its validity time is considered to be the initial validity time minus the time elapsed, as computed in step 3. If the client failed to acquire the lock for some reason (either it was not able to lock N/2+1 instances or the validity time is negative), it will try to unlock all the instances (even the instances it believed it was not able to lock). Is the algorithm asynchronous? The algorithm relies on the assumption that while there is no synchronized clock across the processes, still the local time in every process flows approximately at the same rate, with an error which is small compared to the auto-release time of the lock. This assumption closely resembles a real-world computer: every computer has a local clock and we can usually rely on different computers to have a clock drift which is small. At this point we need to better specify our mutual exclusion rule: it is guaranteed only as long as the client holding the lock will terminate its work within the lock validity time (as obtained in step 3), minus some time (just a few milliseconds in order to compensate for clock drift between processes). For more information about similar systems requiring a bound clock drift, this paper is an interesting reference: Leases: an efficient fault-tolerant mechanism for distributed file cache consistency.","title":"Redlock \u7b97\u6cd5"},{"location":"blog/seckill/distlock/#_5","text":"When a client is unable to acquire the lock, it should try again after a random delay in order to try to desynchronize multiple clients trying to acquire the lock for the same resource at the same time (this may result in a split brain condition where nobody wins). Also the faster a client tries to acquire the lock in the majority of Redis instances, the smaller the window for a split brain condition (and the need for a retry), so ideally the client should try to send the SET commands to the N instances at the same time using multiplexing. It is worth stressing how important it is for clients that fail to acquire the majority of locks, to release the (partially) acquired locks ASAP, so that there is no need to wait for key expiry in order for the lock to be acquired again (however if a network partition happens and the client is no longer able to communicate with the Redis instances, there is an availability penalty to pay as it waits for key expiration).","title":"\u91cd\u8bd5\u5931\u8d25"},{"location":"blog/seckill/distlock/#_6","text":"Releasing the lock is simple and involves just releasing the lock in all instances, whether or not the client believes it was able to successfully lock a given instance.","title":"\u91ca\u653e\u9501"},{"location":"blog/seckill/distlock/#_7","text":"Is the algorithm safe? We can try to understand what happens in different scenarios. To start let\u2019s assume that a client is able to acquire the lock in the majority of instances. All the instances will contain a key with the same time to live. However, the key was set at different times, so the keys will also expire at different times. But if the first key was set at worst at time T1 (the time we sample before contacting the first server) and the last key was set at worst at time T2 (the time we obtained the reply from the last server), we are sure that the first key to expire in the set will exist for at least MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT. All the other keys will expire later, so we are sure that the keys will be simultaneously set for at least this time. During the time that the majority of keys are set, another client will not be able to acquire the lock, since N/2+1 SET NX operations can\u2019t succeed if N/2+1 keys already exist. So if a lock was acquired, it is not possible to re-acquire it at the same time (violating the mutual exclusion property). However we want to also make sure that multiple clients trying to acquire the lock at the same time can\u2019t simultaneously succeed. If a client locked the majority of instances using a time near, or greater, than the lock maximum validity time (the TTL we use for SET basically), it will consider the lock invalid and will unlock the instances, so we only need to consider the case where a client was able to lock the majority of instances in a time which is less than the validity time. In this case for the argument already expressed above, for MIN_VALIDITY no client should be able to re-acquire the lock. So multiple clients will be able to lock N/2+1 instances at the same time (with \"time\" being the end of Step 2) only when the time to lock the majority was greater than the TTL time, making the lock invalid. Are you able to provide a formal proof of safety, point to existing algorithms that are similar, or find a bug? That would be greatly appreciated.","title":"\u5b89\u5168\u53c2\u6570"},{"location":"blog/seckill/distlock/#_8","text":"The system liveness is based on three main features: The auto release of the lock (since keys expire): eventually keys are available again to be locked. The fact that clients, usually, will cooperate removing the locks when the lock was not acquired, or when the lock was acquired and the work terminated, making it likely that we don\u2019t have to wait for keys to expire to re-acquire the lock. The fact that when a client needs to retry a lock, it waits a time which is comparably greater than the time needed to acquire the majority of locks, in order to probabilistically make split brain conditions during resource contention unlikely. However, we pay an availability penalty equal to TTL time on network partitions, so if there are continuous partitions, we can pay this penalty indefinitely. This happens every time a client acquires a lock and gets partitioned away before being able to remove the lock. Basically if there are infinite continuous network partitions, the system may become not available for an infinite amount of time.","title":"\u6d3b\u6027\u53c2\u6570"},{"location":"blog/seckill/distlock/#fsync","text":"Many users using Redis as a lock server need high performance in terms of both latency to acquire and release a lock, and number of acquire / release operations that it is possible to perform per second. In order to meet this requirement, the strategy to talk with the N Redis servers to reduce latency is definitely multiplexing (or poor man's multiplexing, which is, putting the socket in non-blocking mode, send all the commands, and read all the commands later, assuming that the RTT between the client and each instance is similar). However there is another consideration to do about persistence if we want to target a crash-recovery system model. Basically to see the problem here, let\u2019s assume we configure Redis without persistence at all. A client acquires the lock in 3 of 5 instances. One of the instances where the client was able to acquire the lock is restarted, at this point there are again 3 instances that we can lock for the same resource, and another client can lock it again, violating the safety property of exclusivity of lock. If we enable AOF persistence, things will improve quite a bit. For example we can upgrade a server by sending SHUTDOWN and restarting it. Because Redis expires are semantically implemented so that virtually the time still elapses when the server is off, all our requirements are fine. However everything is fine as long as it is a clean shutdown. What about a power outage? If Redis is configured, as by default, to fsync on disk every second, it is possible that after a restart our key is missing. In theory, if we want to guarantee the lock safety in the face of any kind of instance restart, we need to enable fsync=always in the persistence setting. This in turn will totally ruin performances to the same level of CP systems that are traditionally used to implement distributed locks in a safe way. However things are better than what they look like at a first glance. Basically the algorithm safety is retained as long as when an instance restarts after a crash, it no longer participates to any currently active lock, so that the set of currently active locks when the instance restarts, were all obtained by locking instances other than the one which is rejoining the system. To guarantee this we just need to make an instance, after a crash, unavailable for at least a bit more than the max TTL we use, which is, the time needed for all the keys about the locks that existed when the instance crashed, to become invalid and be automatically released. Using delayed restarts it is basically possible to achieve safety even without any kind of Redis persistence available, however note that this may translate into an availability penalty. For example if a majority of instances crash, the system will become globally unavailable for TTL (here globally means that no resource at all will be lockable during this time).","title":"\u6027\u80fd\uff0c\u5d29\u6e83\u6062\u590d\u548c fsync"},{"location":"blog/seckill/distlock/#_9","text":"If the work performed by clients is composed of small steps, it is possible to use smaller lock validity times by default, and extend the algorithm implementing a lock extension mechanism. Basically the client, if in the middle of the computation while the lock validity is approaching a low value, may extend the lock by sending a Lua script to all the instances that extends the TTL of the key if the key exists and its value is still the random value the client assigned when the lock was acquired. The client should only consider the lock re-acquired if it was able to extend the lock into the majority of instances, and within the validity time (basically the algorithm to use is very similar to the one used when acquiring the lock). However this does not technically change the algorithm, so the maximum number of lock reacquisition attempts should be limited, otherwise one of the liveness properties is violated.","title":"\u4f7f\u7b97\u6cd5\u66f4\u53ef\u9760:\u6269\u5c55\u9501"},{"location":"blog/seckill/distlock/#_10","text":"If you are into distributed systems, it would be great to have your opinion / analysis. Also reference implementations in other languages could be great. Thanks in advance!","title":"\u60f3\u8981\u5e2e\u52a9\u5417?"},{"location":"blog/seckill/distlock/#redlock_1","text":"Martin Kleppmann analyzed Redlock here . I disagree with the analysis and posted my reply to his analysis here .","title":"\u5206\u6790 Redlock"},{"location":"blog/seckill/example/","text":"https://www.robertobandini.it/2020/11/29/a-redlock-example-with-node-js-about-how-to-lock-a-key-pair-on-redis/ In the previous example we\u2019ve tested with ApacheBench an application deployed using Kubernetes and Docker, composed by a Node.js microservice to get and set key value pairs on Redis. We saw that if we have many concurrent requests from multiple clients we can\u2019t know before which will be the final value of the key on Redis. In this post we see an example about how we can lock a key value pair on Redis, so that another client has to wait before to set a new value. We will use the Node.js implementation of Redlock, the algorithm to have distributed locks with Redis. To try this example on your PC you only need to install Docker Desktop and Node.js then follow the described steps. Create a directory for this example and inside copy the two directories from the previous example, redis-server and webservice. Bash mkdir node-redis-example-5 cd node-redis-example-5 cp -r ../node-redis-example-4/redis-server/ . cp -r ../node-redis-example-4/webservice/ . Enter the redis-server directory and build our redis-server Docker image. If you didn\u2019t tried the previous example, read it to know about the Redis persistence directory and how to configure it on your PC. Bash cd redis-server docker build -t redis-server:1.0.0 -f Dockerfile . Rename the application to \u201cnode-redis-example-5\u201d inside the deloy.yml file and apply the redis-server Kubernetes deployment configuration. Bash kubectl apply -f ./deploy.yml Rename the application to \u201cnode-redis-example-5\u201d inside the service.yml file and apply the redis-server Kubernetes service configuration. Bash kubectl apply -f ./service.yml Go inside the webservice directory and install the redlock package and the log-timestamp package. Bash cd ../webservice npm i redlock log-timestamp Edit the index.js file to import these packages and add a new endpoint, called \u201clockAndSetValue\u201d. It will use redlock to lock a key on Redis and when the lock is acquired it will set the value. Then it will wait for 10 seconds, as if we are waiting an asyncornous job to complete. Thanks to the retryCount options set to -1, before the 10 seconds ends, the others clients will continue to try to acquire the lock on the key until the lock is released by the first client. After 10 seconds the lock is released so one another client can now do the same. JavaScript // Import packages. const express = require ( \"express\" ); const redis = require ( \"redis\" ); const Redlock = require ( \"redlock\" ); const { promisify } = require ( \"util\" ); require ( \"log-timestamp\" ); // Create and configure a webserver. const app = express (); app . use ( express . json ()); // Create and configure a Redis client. const redisClient = redis . createClient ( \"6379\" , process . env . REDIS_SERVER_IP ); redisClient . on ( \"error\" , ( error ) => console . error ( error )); const redisSet = promisify ( redisClient . set ). bind ( redisClient ); const redisGet = promisify ( redisClient . get ). bind ( redisClient ); const redlock = new Redlock ([ redisClient ], { driftFactor : 0.01 , retryCount : - 1 , retryDelay : 200 , retryJitter : 200 , }); redlock . on ( \"clientError\" , function ( err ) { console . error ( \"A redis error has occurred:\" , err ); }); // Adding a simple function to wait some time. const sleep = ( ms ) => new Promise (( resolve ) => setTimeout ( resolve , ms )); // Create and endpoint to lock a key value paire and set the value. app . post ( \"/lockAndSetValue\" , async ( req , res ) => { console . log ( \"Request received!\" ); if ( req . body . key && req . body . value ) { try { const resource = `locks: ${ req . body . key } ` ; const ttl = 20000 ; redlock . lock ( resource , ttl ). then ( async function ( lock ) { console . log ( \"Lock acquired!\" ); await redisSet ( req . body . key , req . body . value ); console . log ( `SET key= ${ req . body . key } value= ${ req . body . value } ` ); console . log ( \"Waiting some time...\" ); await sleep ( 10000 ); console . log ( \"Time finished, key unlocked!\" ); return lock . unlock (). catch ( function ( err ) { console . error ( err ); }); }); console . log ( \"Sending response!\" ); res . send (); } catch ( e ) { res . json ( e ); } } else { res . status ( 400 ). json ({ error : \"Wrong input.\" }); } }); // Create an endpoint to set a key value pair. app . post ( \"/setValue\" , async ( req , res ) => { if ( req . body . key && req . body . value ) { try { await redisSet ( req . body . key , req . body . value ); console . log ( `SET key= ${ req . body . key } value= ${ req . body . value } ` ); res . send (); } catch ( e ) { res . json ( e ); } } else { res . status ( 400 ). json ({ error : \"Wrong input.\" }); } }); // Create an endpoint to get a key value pair. app . get ( \"/getValue/:key\" , async ( req , res ) => { if ( ! req . params . key ) { return res . status ( 400 ). json ({ error : \"Wrong input.\" }); } try { const value = await redisGet ( req . params . key ); console . log ( `GET key= ${ req . params . key } value= ${ value } ` ); res . json ( value ); } catch ( e ) { res . json ( e ); } }); // Start the webserver. app . listen ( 3000 , () => { console . log ( \"Server is up on port 3000\" ); }); We can now build the new image of our webservice. Bash docker build -t webservice:1.0.0 -f Dockerfile . To have two identical clients on two differents ports, from the deploy.yml and service.yml files inside the webservice directory, we create two couple of files to have two differents deployments and services, always using the same webservice image. deploy-1.yml YAML apiVersion : apps/v1 kind : Deployment metadata : labels : application : node-redis-example-5 component : webservice-1 name : webservice-1 spec : replicas : 1 selector : matchLabels : application : node-redis-example-5 component : webservice-1 strategy : rollingUpdate : maxSurge : 2 maxUnavailable : 0 type : RollingUpdate template : metadata : labels : application : node-redis-example-5 component : webservice-1 redeploy : \"1\" spec : containers : - name : webservice-1 image : webservice:1.0.0 env : - name : REDIS_SERVER_IP value : \"redis-server\" ports : - name : webservice-1 containerPort : 3000 protocol : TCP deploy-2.yml Text Only apiVersion: apps/v1 kind: Deployment metadata: labels: application: node-redis-example-5 component: webservice-2 name: webservice-2 spec: replicas: 1 selector: matchLabels: application: node-redis-example-5 component: webservice-2 strategy: rollingUpdate: maxSurge: 2 maxUnavailable: 0 type: RollingUpdate template: metadata: labels: application: node-redis-example-5 component: webservice-2 redeploy: \"1\" spec: containers: - name: webservice-2 image: webservice:1.0.0 env: - name: REDIS_SERVER_IP value: \"redis-server\" ports: - name: webservice-2 containerPort: 3000 protocol: TCP service-1.yml Text Only apiVersion: v1 kind: Service metadata: name: webservice-1 labels: application: node-redis-example-5 component: webservice-1 spec: type: NodePort selector: application: node-redis-example-5 component: webservice-1 ports: - protocol: TCP port: 3000 targetPort: 3000 nodePort: 30001 service-2.yml Text Only apiVersion: v1 kind: Service metadata: name: webservice-2 labels: application: node-redis-example-5 component: webservice-2 spec: type: NodePort selector: application: node-redis-example-5 component: webservice-2 ports: - protocol: TCP port: 3000 targetPort: 3000 nodePort: 30002 Apply these configurations using kubectl. Bash kubectl apply -f ./deploy-1.yml kubectl apply -f ./deploy-2.yml kubectl apply -f ./service-1.yml kubectl apply -f ./service-2.yml Now we have the first microservice listening to the port 30001 and the second on port 30002. Docker Desktop Dashboard testing Node.js Redlock As in the previous example, we list the container\u2019s running. Bash docker ps -a Look for the two microservice\u2019s container ids, for example: Bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3346b3569723 bcbc46957b97 \"docker-entrypoint.s\u2026\" 9 seconds ago Up 8 seconds k8s_webservice-2_webservice-2-8d6cf6cc5-qg8qw_default_b624341c-313f-48fb-ab7b-caf819988b35_0 be8cb77ea5d0 bcbc46957b97 \"docker-entrypoint.s\u2026\" 12 seconds ago Up 11 seconds k8s_webservice-1_webservice-1-597f4dc574-mdfmj_default_1f715022-86ef-4c45-95a7-9c1b4566f95e_0 125eab4775e6 90b173f7b4bf \"sh -c /run.sh\" 3 minutes ago Up 3 minutes k8s_redis-server_redis-server-7f6bb59858-k5rsd_default_981ca607-112a-4778-a076-bbea7989964d_0 Open a second shell window to watch logs of the webservice-1 container. Bash docker logs -f be8cb77ea5d0 Open a third shell window to watch logs of the second container. Bash docker logs -f 3346b3569723 Use Postman to call the \u201clockAndSetValue\u201d on webservice-1, port 30001. Testing Node.js Redlock with Postman, first webservice And then, before 10 seconds pass, do the same with webservice-2, port 30002. Testing Node.js Redlock with Postman, second webservice You will able to check the entire sequence through the two containers logs. Node.js Redlock tests logs As you can see, the second client will wait until the first client will release the lock after the 10 seconds. You can find the source code on this GitHub repository: https://github.com/robertobandini/node-redis-example-5 It also includes the Postman collection used and a sw-version.txt file to specify the softwares used for this project and their versions.","title":"\u4e00\u4e2a\u4f7f\u7528 Node.js \u7684 Redlock \u793a\u4f8b\uff0c\u5173\u4e8e\u5982\u4f55\u9501\u5b9a\u4e00\u4e2aRedis\u4e0a\u7684\u5bc6\u94a5\u5bf9"},{"location":"blog/seckill/how-to-do-distributed-locking/","text":"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html https://martin.kleppmann.com/ As part of the research for my book, I came across an algorithm called Redlock on the Redis website. The algorithm claims to implement fault-tolerant distributed locks (or rather, leases [1]) on top of Redis, and the page asks for feedback from people who are into distributed systems. The algorithm instinctively set off some alarm bells in the back of my mind, so I spent a bit of time thinking about it and writing up these notes. Since there are already over 10 independent implementations of Redlock and we don\u2019t know who is already relying on this algorithm, I thought it would be worth sharing my notes publicly. I won\u2019t go into other aspects of Redis, some of which have already been critiqued elsewhere. Before I go into the details of Redlock, let me say that I quite like Redis, and I have successfully used it in production in the past. I think it\u2019s a good fit in situations where you want to share some transient, approximate, fast-changing data between servers, and where it\u2019s not a big deal if you occasionally lose that data for whatever reason. For example, a good use case is maintaining request counters per IP address (for rate limiting purposes) and sets of distinct IP addresses per user ID (for abuse detection). However, Redis has been gradually making inroads into areas of data management where there are stronger consistency and durability expectations \u2013 which worries me, because this is not what Redis is designed for. Arguably, distributed locking is one of those areas. Let\u2019s examine it in some more detail. What are you using that lock for? The purpose of a lock is to ensure that among several nodes that might try to do the same piece of work, only one actually does it (at least only one at a time). That work might be to write some data to a shared storage system, to perform some computation, to call some external API, or suchlike. At a high level, there are two reasons why you might want a lock in a distributed application: for efficiency or for correctness [2]. To distinguish these cases, you can ask what would happen if the lock failed: Efficiency: Taking a lock saves you from unnecessarily doing the same work twice (e.g. some expensive computation). If the lock fails and two nodes end up doing the same piece of work, the result is a minor increase in cost (you end up paying 5 cents more to AWS than you otherwise would have) or a minor inconvenience (e.g. a user ends up getting the same email notification twice). Correctness: Taking a lock prevents concurrent processes from stepping on each others\u2019 toes and messing up the state of your system. If the lock fails and two nodes concurrently work on the same piece of data, the result is a corrupted file, data loss, permanent inconsistency, the wrong dose of a drug administered to a patient, or some other serious problem. Both are valid cases for wanting a lock, but you need to be very clear about which one of the two you are dealing with. I will argue that if you are using locks merely for efficiency purposes, it is unnecessary to incur the cost and complexity of Redlock, running 5 Redis servers and checking for a majority to acquire your lock. You are better off just using a single Redis instance, perhaps with asynchronous replication to a secondary instance in case the primary crashes. If you use a single Redis instance, of course you will drop some locks if the power suddenly goes out on your Redis node, or something else goes wrong. But if you\u2019re only using the locks as an efficiency optimization, and the crashes don\u2019t happen too often, that\u2019s no big deal. This \u201cno big deal\u201d scenario is where Redis shines. At least if you\u2019re relying on a single Redis instance, it is clear to everyone who looks at the system that the locks are approximate, and only to be used for non-critical purposes. On the other hand, the Redlock algorithm, with its 5 replicas and majority voting, looks at first glance as though it is suitable for situations in which your locking is important for correctness. I will argue in the following sections that it is not suitable for that purpose. For the rest of this article we will assume that your locks are important for correctness, and that it is a serious bug if two different nodes concurrently believe that they are holding the same lock. Protecting a resource with a lock Let\u2019s leave the particulars of Redlock aside for a moment, and discuss how a distributed lock is used in general (independent of the particular locking algorithm used). It\u2019s important to remember that a lock in a distributed system is not like a mutex in a multi-threaded application. It\u2019s a more complicated beast, due to the problem that different nodes and the network can all fail independently in various ways. For example, say you have an application in which a client needs to update a file in shared storage (e.g. HDFS or S3). A client first acquires the lock, then reads the file, makes some changes, writes the modified file back, and finally releases the lock. The lock prevents two clients from performing this read-modify-write cycle concurrently, which would result in lost updates. The code might look something like this: JavaScript // THIS CODE IS BROKEN function writeData ( filename , data ) { var lock = lockService . acquireLock ( filename ); if ( ! lock ) { throw \"Failed to acquire lock\" ; } try { var file = storage . readFile ( filename ); var updated = updateContents ( file , data ); storage . writeFile ( filename , updated ); } finally { lock . release (); } } Unfortunately, even if you have a perfect lock service, the code above is broken. The following diagram shows how you can end up with corrupted data: Unsafe access to a resource protected by a distributed lock In this example, the client that acquired the lock is paused for an extended period of time while holding the lock \u2013 for example because the garbage collector (GC) kicked in. The lock has a timeout (i.e. it is a lease), which is always a good idea (otherwise a crashed client could end up holding a lock forever and never releasing it). However, if the GC pause lasts longer than the lease expiry period, and the client doesn\u2019t realise that it has expired, it may go ahead and make some unsafe change. This bug is not theoretical: HBase used to have this problem [3,4]. Normally, GC pauses are quite short, but \u201cstop-the-world\u201d GC pauses have sometimes been known to last for several minutes [5] \u2013 certainly long enough for a lease to expire. Even so-called \u201cconcurrent\u201d garbage collectors like the HotSpot JVM\u2019s CMS cannot fully run in parallel with the application code \u2013 even they need to stop the world from time to time [6]. You cannot fix this problem by inserting a check on the lock expiry just before writing back to storage. Remember that GC can pause a running thread at any point, including the point that is maximally inconvenient for you (between the last check and the write operation). And if you\u2019re feeling smug because your programming language runtime doesn\u2019t have long GC pauses, there are many other reasons why your process might get paused. Maybe your process tried to read an address that is not yet loaded into memory, so it gets a page fault and is paused until the page is loaded from disk. Maybe your disk is actually EBS, and so reading a variable unwittingly turned into a synchronous network request over Amazon\u2019s congested network. Maybe there are many other processes contending for CPU, and you hit a black node in your scheduler tree. Maybe someone accidentally sent SIGSTOP to the process. Whatever. Your processes will get paused. If you still don\u2019t believe me about process pauses, then consider instead that the file-writing request may get delayed in the network before reaching the storage service. Packet networks such as Ethernet and IP may delay packets arbitrarily, and they do [7]: in a famous incident at GitHub, packets were delayed in the network for approximately 90 seconds [8]. This means that an application process may send a write request, and it may reach the storage server a minute later when the lease has already expired. Even in well-managed networks, this kind of thing can happen. You simply cannot make any assumptions about timing, which is why the code above is fundamentally unsafe, no matter what lock service you use. Making the lock safe with fencing The fix for this problem is actually pretty simple: you need to include a fencing token with every write request to the storage service. In this context, a fencing token is simply a number that increases (e.g. incremented by the lock service) every time a client acquires the lock. This is illustrated in the following diagram: Using fencing tokens to make resource access safe Client 1 acquires the lease and gets a token of 33, but then it goes into a long pause and the lease expires. Client 2 acquires the lease, gets a token of 34 (the number always increases), and then sends its write to the storage service, including the token of 34. Later, client 1 comes back to life and sends its write to the storage service, including its token value 33. However, the storage server remembers that it has already processed a write with a higher token number (34), and so it rejects the request with token 33. Note this requires the storage server to take an active role in checking tokens, and rejecting any writes on which the token has gone backwards. But this is not particularly hard, once you know the trick. And provided that the lock service generates strictly monotonically increasing tokens, this makes the lock safe. For example, if you are using ZooKeeper as lock service, you can use the zxid or the znode version number as fencing token, and you\u2019re in good shape [3]. However, this leads us to the first big problem with Redlock: it does not have any facility for generating fencing tokens. The algorithm does not produce any number that is guaranteed to increase every time a client acquires a lock. This means that even if the algorithm were otherwise perfect, it would not be safe to use, because you cannot prevent the race condition between clients in the case where one client is paused or its packets are delayed. And it\u2019s not obvious to me how one would change the Redlock algorithm to start generating fencing tokens. The unique random value it uses does not provide the required monotonicity. Simply keeping a counter on one Redis node would not be sufficient, because that node may fail. Keeping counters on several nodes would mean they would go out of sync. It\u2019s likely that you would need a consensus algorithm just to generate the fencing tokens. (If only incrementing a counter was simple.) Using time to solve consensus The fact that Redlock fails to generate fencing tokens should already be sufficient reason not to use it in situations where correctness depends on the lock. But there are some further problems that are worth discussing. In the academic literature, the most practical system model for this kind of algorithm is the asynchronous model with unreliable failure detectors [9]. In plain English, this means that the algorithms make no assumptions about timing: processes may pause for arbitrary lengths of time, packets may be arbitrarily delayed in the network, and clocks may be arbitrarily wrong \u2013 and the algorithm is nevertheless expected to do the right thing. Given what we discussed above, these are very reasonable assumptions. The only purpose for which algorithms may use clocks is to generate timeouts, to avoid waiting forever if a node is down. But timeouts do not have to be accurate: just because a request times out, that doesn\u2019t mean that the other node is definitely down \u2013 it could just as well be that there is a large delay in the network, or that your local clock is wrong. When used as a failure detector, timeouts are just a guess that something is wrong. (If they could, distributed algorithms would do without clocks entirely, but then consensus becomes impossible [10]. Acquiring a lock is like a compare-and-set operation, which requires consensus [11].) Note that Redis uses gettimeofday, not a monotonic clock, to determine the expiry of keys. The man page for gettimeofday explicitly says that the time it returns is subject to discontinuous jumps in system time \u2013 that is, it might suddenly jump forwards by a few minutes, or even jump back in time (e.g. if the clock is stepped by NTP because it differs from a NTP server by too much, or if the clock is manually adjusted by an administrator). Thus, if the system clock is doing weird things, it could easily happen that the expiry of a key in Redis is much faster or much slower than expected. For algorithms in the asynchronous model this is not a big problem: these algorithms generally ensure that their safety properties always hold, without making any timing assumptions [12]. Only liveness properties depend on timeouts or some other failure detector. In plain English, this means that even if the timings in the system are all over the place (processes pausing, networks delaying, clocks jumping forwards and backwards), the performance of an algorithm might go to hell, but the algorithm will never make an incorrect decision. However, Redlock is not like this. Its safety depends on a lot of timing assumptions: it assumes that all Redis nodes hold keys for approximately the right length of time before expiring; that the network delay is small compared to the expiry duration; and that process pauses are much shorter than the expiry duration. Breaking Redlock with bad timings Let\u2019s look at some examples to demonstrate Redlock\u2019s reliance on timing assumptions. Say the system has five Redis nodes (A, B, C, D and E), and two clients (1 and 2). What happens if a clock on one of the Redis nodes jumps forward? Client 1 acquires lock on nodes A, B, C. Due to a network issue, D and E cannot be reached. The clock on node C jumps forward, causing the lock to expire. Client 2 acquires lock on nodes C, D, E. Due to a network issue, A and B cannot be reached. Clients 1 and 2 now both believe they hold the lock. A similar issue could happen if C crashes before persisting the lock to disk, and immediately restarts. For this reason, the Redlock documentation recommends delaying restarts of crashed nodes for at least the time-to-live of the longest-lived lock. But this restart delay again relies on a reasonably accurate measurement of time, and would fail if the clock jumps. Okay, so maybe you think that a clock jump is unrealistic, because you\u2019re very confident in having correctly configured NTP to only ever slew the clock. In that case, let\u2019s look at an example of how a process pause may cause the algorithm to fail: Client 1 requests lock on nodes A, B, C, D, E. While the responses to client 1 are in flight, client 1 goes into stop-the-world GC. Locks expire on all Redis nodes. Client 2 acquires lock on nodes A, B, C, D, E. Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully acquired the lock (they were held in client 1\u2019s kernel network buffers while the process was paused). Clients 1 and 2 now both believe they hold the lock. Note that even though Redis is written in C, and thus doesn\u2019t have GC, that doesn\u2019t help us here: any system in which the clients may experience a GC pause has this problem. You can only make this safe by preventing client 1 from performing any operations under the lock after client 2 has acquired the lock, for example using the fencing approach above. A long network delay can produce the same effect as the process pause. It perhaps depends on your TCP user timeout \u2013 if you make the timeout significantly shorter than the Redis TTL, perhaps the delayed network packets would be ignored, but we\u2019d have to look in detail at the TCP implementation to be sure. Also, with the timeout we\u2019re back down to accuracy of time measurement again! The synchrony assumptions of Redlock These examples show that Redlock works correctly only if you assume a synchronous system model \u2013 that is, a system with the following properties: bounded network delay (you can guarantee that packets always arrive within some guaranteed maximum delay), bounded process pauses (in other words, hard real-time constraints, which you typically only find in car airbag systems and suchlike), and bounded clock error (cross your fingers that you don\u2019t get your time from a bad NTP server). Note that a synchronous model does not mean exactly synchronised clocks: it means you are assuming a known, fixed upper bound on network delay, pauses and clock drift [12]. Redlock assumes that delays, pauses and drift are all small relative to the time-to-live of a lock; if the timing issues become as large as the time-to-live, the algorithm fails. In a reasonably well-behaved datacenter environment, the timing assumptions will be satisfied most of the time \u2013 this is known as a partially synchronous system [12]. But is that good enough? As soon as those timing assumptions are broken, Redlock may violate its safety properties, e.g. granting a lease to one client before another has expired. If you\u2019re depending on your lock for correctness, \u201cmost of the time\u201d is not enough \u2013 you need it to always be correct. There is plenty of evidence that it is not safe to assume a synchronous system model for most practical system environments [7,8]. Keep reminding yourself of the GitHub incident with the 90-second packet delay. It is unlikely that Redlock would survive a Jepsen test. On the other hand, a consensus algorithm designed for a partially synchronous system model (or asynchronous model with failure detector) actually has a chance of working. Raft, Viewstamped Replication, Zab and Paxos all fall in this category. Such an algorithm must let go of all timing assumptions. That\u2019s hard: it\u2019s so tempting to assume networks, processes and clocks are more reliable than they really are. But in the messy reality of distributed systems, you have to be very careful with your assumptions. Conclusion I think the Redlock algorithm is a poor choice because it is \u201cneither fish nor fowl\u201d: it is unnecessarily heavyweight and expensive for efficiency-optimization locks, but it is not sufficiently safe for situations in which correctness depends on the lock. In particular, the algorithm makes dangerous assumptions about timing and system clocks (essentially assuming a synchronous system with bounded network delay and bounded execution time for operations), and it violates safety properties if those assumptions are not met. Moreover, it lacks a facility for generating fencing tokens (which protect a system against long delays in the network or in paused processes). If you need locks only on a best-effort basis (as an efficiency optimization, not for correctness), I would recommend sticking with the straightforward single-node locking algorithm for Redis (conditional set-if-not-exists to obtain a lock, atomic delete-if-value-matches to release a lock), and documenting very clearly in your code that the locks are only approximate and may occasionally fail. Don\u2019t bother with setting up a cluster of five Redis nodes. On the other hand, if you need locks for correctness, please don\u2019t use Redlock. Instead, please use a proper consensus system such as ZooKeeper, probably via one of the Curator recipes that implements a lock. (At the very least, use a database with reasonable transactional guarantees.) And please enforce use of fencing tokens on all resource accesses under the lock. As I said at the beginning, Redis is an excellent tool if you use it correctly. None of the above diminishes the usefulness of Redis for its intended purposes. Salvatore has been very dedicated to the project for years, and its success is well deserved. But every tool has limitations, and it is important to know them and to plan accordingly. If you want to learn more, I explain this topic in greater detail in chapters 8 and 9 of my book, now available in Early Release from O\u2019Reilly. (The diagrams above are taken from my book.) For learning how to use ZooKeeper, I recommend Junqueira and Reed\u2019s book [3]. For a good introduction to the theory of distributed systems, I recommend Cachin, Guerraoui and Rodrigues\u2019 textbook [13]. Thank you to Kyle Kingsbury, Camille Fournier, Flavio Junqueira, and Salvatore Sanfilippo for reviewing a draft of this article. Any errors are mine, of course. Update 9 Feb 2016: Salvatore, the original author of Redlock, has posted a rebuttal to this article (see also HN discussion). He makes some good points, but I stand by my conclusions. I may elaborate in a follow-up post if I have time, but please form your own opinions \u2013 and please consult the references below, many of which have received rigorous academic peer review (unlike either of our blog posts). References [1] Cary G Gray and David R Cheriton: \u201cLeases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency,\u201d at 12th ACM Symposium on Operating Systems Principles (SOSP), December 1989. doi:10.1145/74850.74870 [2] Mike Burrows: \u201cThe Chubby lock service for loosely-coupled distributed systems,\u201d at 7th USENIX Symposium on Operating System Design and Implementation (OSDI), November 2006. [3] Flavio P Junqueira and Benjamin Reed: ZooKeeper: Distributed Process Coordination. O\u2019Reilly Media, November 2013. ISBN: 978-1-4493-6130-3 [4] Enis S\u00f6ztutar: \u201cHBase and HDFS: Understanding filesystem usage in HBase,\u201d at HBaseCon, June 2013. [5] Todd Lipcon: \u201cAvoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1,\u201d blog.cloudera.com, 24 February 2011. [6] Martin Thompson: \u201cJava Garbage Collection Distilled,\u201d mechanical-sympathy.blogspot.co.uk, 16 July 2013. [7] Peter Bailis and Kyle Kingsbury: \u201cThe Network is Reliable,\u201d ACM Queue, volume 12, number 7, July 2014. doi:10.1145/2639988.2639988 [8] Mark Imbriaco: \u201cDowntime last Saturday,\u201d github.com, 26 December 2012. [9] Tushar Deepak Chandra and Sam Toueg: \u201cUnreliable Failure Detectors for Reliable Distributed Systems,\u201d Journal of the ACM, volume 43, number 2, pages 225\u2013267, March 1996. doi:10.1145/226643.226647 [10] Michael J Fischer, Nancy Lynch, and Michael S Paterson: \u201cImpossibility of Distributed Consensus with One Faulty Process,\u201d Journal of the ACM, volume 32, number 2, pages 374\u2013382, April 1985. doi:10.1145/3149.214121 [11] Maurice P Herlihy: \u201cWait-Free Synchronization,\u201d ACM Transactions on Programming Languages and Systems, volume 13, number 1, pages 124\u2013149, January 1991. doi:10.1145/114005.102808 [12] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: \u201cConsensus in the Presence of Partial Synchrony,\u201d Journal of the ACM, volume 35, number 2, pages 288\u2013323, April 1988. doi:10.1145/42282.42283 [13] Christian Cachin, Rachid Guerraoui, and Lu\u00eds Rodrigues: Introduction to Reliable and Secure Distributed Programming, Second Edition. Springer, February 2011. ISBN: 978-3-642-15259-7, doi:10.1007/978-3-642-15260-3","title":"How to do distributed locking"},{"location":"blog/seckill/how-to-do-distributed-locking/#what-are-you-using-that-lock-for","text":"The purpose of a lock is to ensure that among several nodes that might try to do the same piece of work, only one actually does it (at least only one at a time). That work might be to write some data to a shared storage system, to perform some computation, to call some external API, or suchlike. At a high level, there are two reasons why you might want a lock in a distributed application: for efficiency or for correctness [2]. To distinguish these cases, you can ask what would happen if the lock failed: Efficiency: Taking a lock saves you from unnecessarily doing the same work twice (e.g. some expensive computation). If the lock fails and two nodes end up doing the same piece of work, the result is a minor increase in cost (you end up paying 5 cents more to AWS than you otherwise would have) or a minor inconvenience (e.g. a user ends up getting the same email notification twice). Correctness: Taking a lock prevents concurrent processes from stepping on each others\u2019 toes and messing up the state of your system. If the lock fails and two nodes concurrently work on the same piece of data, the result is a corrupted file, data loss, permanent inconsistency, the wrong dose of a drug administered to a patient, or some other serious problem. Both are valid cases for wanting a lock, but you need to be very clear about which one of the two you are dealing with. I will argue that if you are using locks merely for efficiency purposes, it is unnecessary to incur the cost and complexity of Redlock, running 5 Redis servers and checking for a majority to acquire your lock. You are better off just using a single Redis instance, perhaps with asynchronous replication to a secondary instance in case the primary crashes. If you use a single Redis instance, of course you will drop some locks if the power suddenly goes out on your Redis node, or something else goes wrong. But if you\u2019re only using the locks as an efficiency optimization, and the crashes don\u2019t happen too often, that\u2019s no big deal. This \u201cno big deal\u201d scenario is where Redis shines. At least if you\u2019re relying on a single Redis instance, it is clear to everyone who looks at the system that the locks are approximate, and only to be used for non-critical purposes. On the other hand, the Redlock algorithm, with its 5 replicas and majority voting, looks at first glance as though it is suitable for situations in which your locking is important for correctness. I will argue in the following sections that it is not suitable for that purpose. For the rest of this article we will assume that your locks are important for correctness, and that it is a serious bug if two different nodes concurrently believe that they are holding the same lock.","title":"What are you using that lock for?"},{"location":"blog/seckill/how-to-do-distributed-locking/#protecting-a-resource-with-a-lock","text":"Let\u2019s leave the particulars of Redlock aside for a moment, and discuss how a distributed lock is used in general (independent of the particular locking algorithm used). It\u2019s important to remember that a lock in a distributed system is not like a mutex in a multi-threaded application. It\u2019s a more complicated beast, due to the problem that different nodes and the network can all fail independently in various ways. For example, say you have an application in which a client needs to update a file in shared storage (e.g. HDFS or S3). A client first acquires the lock, then reads the file, makes some changes, writes the modified file back, and finally releases the lock. The lock prevents two clients from performing this read-modify-write cycle concurrently, which would result in lost updates. The code might look something like this: JavaScript // THIS CODE IS BROKEN function writeData ( filename , data ) { var lock = lockService . acquireLock ( filename ); if ( ! lock ) { throw \"Failed to acquire lock\" ; } try { var file = storage . readFile ( filename ); var updated = updateContents ( file , data ); storage . writeFile ( filename , updated ); } finally { lock . release (); } } Unfortunately, even if you have a perfect lock service, the code above is broken. The following diagram shows how you can end up with corrupted data: Unsafe access to a resource protected by a distributed lock In this example, the client that acquired the lock is paused for an extended period of time while holding the lock \u2013 for example because the garbage collector (GC) kicked in. The lock has a timeout (i.e. it is a lease), which is always a good idea (otherwise a crashed client could end up holding a lock forever and never releasing it). However, if the GC pause lasts longer than the lease expiry period, and the client doesn\u2019t realise that it has expired, it may go ahead and make some unsafe change. This bug is not theoretical: HBase used to have this problem [3,4]. Normally, GC pauses are quite short, but \u201cstop-the-world\u201d GC pauses have sometimes been known to last for several minutes [5] \u2013 certainly long enough for a lease to expire. Even so-called \u201cconcurrent\u201d garbage collectors like the HotSpot JVM\u2019s CMS cannot fully run in parallel with the application code \u2013 even they need to stop the world from time to time [6]. You cannot fix this problem by inserting a check on the lock expiry just before writing back to storage. Remember that GC can pause a running thread at any point, including the point that is maximally inconvenient for you (between the last check and the write operation). And if you\u2019re feeling smug because your programming language runtime doesn\u2019t have long GC pauses, there are many other reasons why your process might get paused. Maybe your process tried to read an address that is not yet loaded into memory, so it gets a page fault and is paused until the page is loaded from disk. Maybe your disk is actually EBS, and so reading a variable unwittingly turned into a synchronous network request over Amazon\u2019s congested network. Maybe there are many other processes contending for CPU, and you hit a black node in your scheduler tree. Maybe someone accidentally sent SIGSTOP to the process. Whatever. Your processes will get paused. If you still don\u2019t believe me about process pauses, then consider instead that the file-writing request may get delayed in the network before reaching the storage service. Packet networks such as Ethernet and IP may delay packets arbitrarily, and they do [7]: in a famous incident at GitHub, packets were delayed in the network for approximately 90 seconds [8]. This means that an application process may send a write request, and it may reach the storage server a minute later when the lease has already expired. Even in well-managed networks, this kind of thing can happen. You simply cannot make any assumptions about timing, which is why the code above is fundamentally unsafe, no matter what lock service you use.","title":"Protecting a resource with a lock"},{"location":"blog/seckill/how-to-do-distributed-locking/#making-the-lock-safe-with-fencing","text":"The fix for this problem is actually pretty simple: you need to include a fencing token with every write request to the storage service. In this context, a fencing token is simply a number that increases (e.g. incremented by the lock service) every time a client acquires the lock. This is illustrated in the following diagram: Using fencing tokens to make resource access safe Client 1 acquires the lease and gets a token of 33, but then it goes into a long pause and the lease expires. Client 2 acquires the lease, gets a token of 34 (the number always increases), and then sends its write to the storage service, including the token of 34. Later, client 1 comes back to life and sends its write to the storage service, including its token value 33. However, the storage server remembers that it has already processed a write with a higher token number (34), and so it rejects the request with token 33. Note this requires the storage server to take an active role in checking tokens, and rejecting any writes on which the token has gone backwards. But this is not particularly hard, once you know the trick. And provided that the lock service generates strictly monotonically increasing tokens, this makes the lock safe. For example, if you are using ZooKeeper as lock service, you can use the zxid or the znode version number as fencing token, and you\u2019re in good shape [3]. However, this leads us to the first big problem with Redlock: it does not have any facility for generating fencing tokens. The algorithm does not produce any number that is guaranteed to increase every time a client acquires a lock. This means that even if the algorithm were otherwise perfect, it would not be safe to use, because you cannot prevent the race condition between clients in the case where one client is paused or its packets are delayed. And it\u2019s not obvious to me how one would change the Redlock algorithm to start generating fencing tokens. The unique random value it uses does not provide the required monotonicity. Simply keeping a counter on one Redis node would not be sufficient, because that node may fail. Keeping counters on several nodes would mean they would go out of sync. It\u2019s likely that you would need a consensus algorithm just to generate the fencing tokens. (If only incrementing a counter was simple.) Using time to solve consensus The fact that Redlock fails to generate fencing tokens should already be sufficient reason not to use it in situations where correctness depends on the lock. But there are some further problems that are worth discussing. In the academic literature, the most practical system model for this kind of algorithm is the asynchronous model with unreliable failure detectors [9]. In plain English, this means that the algorithms make no assumptions about timing: processes may pause for arbitrary lengths of time, packets may be arbitrarily delayed in the network, and clocks may be arbitrarily wrong \u2013 and the algorithm is nevertheless expected to do the right thing. Given what we discussed above, these are very reasonable assumptions. The only purpose for which algorithms may use clocks is to generate timeouts, to avoid waiting forever if a node is down. But timeouts do not have to be accurate: just because a request times out, that doesn\u2019t mean that the other node is definitely down \u2013 it could just as well be that there is a large delay in the network, or that your local clock is wrong. When used as a failure detector, timeouts are just a guess that something is wrong. (If they could, distributed algorithms would do without clocks entirely, but then consensus becomes impossible [10]. Acquiring a lock is like a compare-and-set operation, which requires consensus [11].) Note that Redis uses gettimeofday, not a monotonic clock, to determine the expiry of keys. The man page for gettimeofday explicitly says that the time it returns is subject to discontinuous jumps in system time \u2013 that is, it might suddenly jump forwards by a few minutes, or even jump back in time (e.g. if the clock is stepped by NTP because it differs from a NTP server by too much, or if the clock is manually adjusted by an administrator). Thus, if the system clock is doing weird things, it could easily happen that the expiry of a key in Redis is much faster or much slower than expected. For algorithms in the asynchronous model this is not a big problem: these algorithms generally ensure that their safety properties always hold, without making any timing assumptions [12]. Only liveness properties depend on timeouts or some other failure detector. In plain English, this means that even if the timings in the system are all over the place (processes pausing, networks delaying, clocks jumping forwards and backwards), the performance of an algorithm might go to hell, but the algorithm will never make an incorrect decision. However, Redlock is not like this. Its safety depends on a lot of timing assumptions: it assumes that all Redis nodes hold keys for approximately the right length of time before expiring; that the network delay is small compared to the expiry duration; and that process pauses are much shorter than the expiry duration.","title":"Making the lock safe with fencing"},{"location":"blog/seckill/how-to-do-distributed-locking/#breaking-redlock-with-bad-timings","text":"Let\u2019s look at some examples to demonstrate Redlock\u2019s reliance on timing assumptions. Say the system has five Redis nodes (A, B, C, D and E), and two clients (1 and 2). What happens if a clock on one of the Redis nodes jumps forward? Client 1 acquires lock on nodes A, B, C. Due to a network issue, D and E cannot be reached. The clock on node C jumps forward, causing the lock to expire. Client 2 acquires lock on nodes C, D, E. Due to a network issue, A and B cannot be reached. Clients 1 and 2 now both believe they hold the lock. A similar issue could happen if C crashes before persisting the lock to disk, and immediately restarts. For this reason, the Redlock documentation recommends delaying restarts of crashed nodes for at least the time-to-live of the longest-lived lock. But this restart delay again relies on a reasonably accurate measurement of time, and would fail if the clock jumps. Okay, so maybe you think that a clock jump is unrealistic, because you\u2019re very confident in having correctly configured NTP to only ever slew the clock. In that case, let\u2019s look at an example of how a process pause may cause the algorithm to fail: Client 1 requests lock on nodes A, B, C, D, E. While the responses to client 1 are in flight, client 1 goes into stop-the-world GC. Locks expire on all Redis nodes. Client 2 acquires lock on nodes A, B, C, D, E. Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully acquired the lock (they were held in client 1\u2019s kernel network buffers while the process was paused). Clients 1 and 2 now both believe they hold the lock. Note that even though Redis is written in C, and thus doesn\u2019t have GC, that doesn\u2019t help us here: any system in which the clients may experience a GC pause has this problem. You can only make this safe by preventing client 1 from performing any operations under the lock after client 2 has acquired the lock, for example using the fencing approach above. A long network delay can produce the same effect as the process pause. It perhaps depends on your TCP user timeout \u2013 if you make the timeout significantly shorter than the Redis TTL, perhaps the delayed network packets would be ignored, but we\u2019d have to look in detail at the TCP implementation to be sure. Also, with the timeout we\u2019re back down to accuracy of time measurement again!","title":"Breaking Redlock with bad timings"},{"location":"blog/seckill/how-to-do-distributed-locking/#the-synchrony-assumptions-of-redlock","text":"These examples show that Redlock works correctly only if you assume a synchronous system model \u2013 that is, a system with the following properties: bounded network delay (you can guarantee that packets always arrive within some guaranteed maximum delay), bounded process pauses (in other words, hard real-time constraints, which you typically only find in car airbag systems and suchlike), and bounded clock error (cross your fingers that you don\u2019t get your time from a bad NTP server). Note that a synchronous model does not mean exactly synchronised clocks: it means you are assuming a known, fixed upper bound on network delay, pauses and clock drift [12]. Redlock assumes that delays, pauses and drift are all small relative to the time-to-live of a lock; if the timing issues become as large as the time-to-live, the algorithm fails. In a reasonably well-behaved datacenter environment, the timing assumptions will be satisfied most of the time \u2013 this is known as a partially synchronous system [12]. But is that good enough? As soon as those timing assumptions are broken, Redlock may violate its safety properties, e.g. granting a lease to one client before another has expired. If you\u2019re depending on your lock for correctness, \u201cmost of the time\u201d is not enough \u2013 you need it to always be correct. There is plenty of evidence that it is not safe to assume a synchronous system model for most practical system environments [7,8]. Keep reminding yourself of the GitHub incident with the 90-second packet delay. It is unlikely that Redlock would survive a Jepsen test. On the other hand, a consensus algorithm designed for a partially synchronous system model (or asynchronous model with failure detector) actually has a chance of working. Raft, Viewstamped Replication, Zab and Paxos all fall in this category. Such an algorithm must let go of all timing assumptions. That\u2019s hard: it\u2019s so tempting to assume networks, processes and clocks are more reliable than they really are. But in the messy reality of distributed systems, you have to be very careful with your assumptions.","title":"The synchrony assumptions of Redlock"},{"location":"blog/seckill/how-to-do-distributed-locking/#conclusion","text":"I think the Redlock algorithm is a poor choice because it is \u201cneither fish nor fowl\u201d: it is unnecessarily heavyweight and expensive for efficiency-optimization locks, but it is not sufficiently safe for situations in which correctness depends on the lock. In particular, the algorithm makes dangerous assumptions about timing and system clocks (essentially assuming a synchronous system with bounded network delay and bounded execution time for operations), and it violates safety properties if those assumptions are not met. Moreover, it lacks a facility for generating fencing tokens (which protect a system against long delays in the network or in paused processes). If you need locks only on a best-effort basis (as an efficiency optimization, not for correctness), I would recommend sticking with the straightforward single-node locking algorithm for Redis (conditional set-if-not-exists to obtain a lock, atomic delete-if-value-matches to release a lock), and documenting very clearly in your code that the locks are only approximate and may occasionally fail. Don\u2019t bother with setting up a cluster of five Redis nodes. On the other hand, if you need locks for correctness, please don\u2019t use Redlock. Instead, please use a proper consensus system such as ZooKeeper, probably via one of the Curator recipes that implements a lock. (At the very least, use a database with reasonable transactional guarantees.) And please enforce use of fencing tokens on all resource accesses under the lock. As I said at the beginning, Redis is an excellent tool if you use it correctly. None of the above diminishes the usefulness of Redis for its intended purposes. Salvatore has been very dedicated to the project for years, and its success is well deserved. But every tool has limitations, and it is important to know them and to plan accordingly. If you want to learn more, I explain this topic in greater detail in chapters 8 and 9 of my book, now available in Early Release from O\u2019Reilly. (The diagrams above are taken from my book.) For learning how to use ZooKeeper, I recommend Junqueira and Reed\u2019s book [3]. For a good introduction to the theory of distributed systems, I recommend Cachin, Guerraoui and Rodrigues\u2019 textbook [13]. Thank you to Kyle Kingsbury, Camille Fournier, Flavio Junqueira, and Salvatore Sanfilippo for reviewing a draft of this article. Any errors are mine, of course. Update 9 Feb 2016: Salvatore, the original author of Redlock, has posted a rebuttal to this article (see also HN discussion). He makes some good points, but I stand by my conclusions. I may elaborate in a follow-up post if I have time, but please form your own opinions \u2013 and please consult the references below, many of which have received rigorous academic peer review (unlike either of our blog posts).","title":"Conclusion"},{"location":"blog/seckill/how-to-do-distributed-locking/#references","text":"[1] Cary G Gray and David R Cheriton: \u201cLeases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency,\u201d at 12th ACM Symposium on Operating Systems Principles (SOSP), December 1989. doi:10.1145/74850.74870 [2] Mike Burrows: \u201cThe Chubby lock service for loosely-coupled distributed systems,\u201d at 7th USENIX Symposium on Operating System Design and Implementation (OSDI), November 2006. [3] Flavio P Junqueira and Benjamin Reed: ZooKeeper: Distributed Process Coordination. O\u2019Reilly Media, November 2013. ISBN: 978-1-4493-6130-3 [4] Enis S\u00f6ztutar: \u201cHBase and HDFS: Understanding filesystem usage in HBase,\u201d at HBaseCon, June 2013. [5] Todd Lipcon: \u201cAvoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1,\u201d blog.cloudera.com, 24 February 2011. [6] Martin Thompson: \u201cJava Garbage Collection Distilled,\u201d mechanical-sympathy.blogspot.co.uk, 16 July 2013. [7] Peter Bailis and Kyle Kingsbury: \u201cThe Network is Reliable,\u201d ACM Queue, volume 12, number 7, July 2014. doi:10.1145/2639988.2639988 [8] Mark Imbriaco: \u201cDowntime last Saturday,\u201d github.com, 26 December 2012. [9] Tushar Deepak Chandra and Sam Toueg: \u201cUnreliable Failure Detectors for Reliable Distributed Systems,\u201d Journal of the ACM, volume 43, number 2, pages 225\u2013267, March 1996. doi:10.1145/226643.226647 [10] Michael J Fischer, Nancy Lynch, and Michael S Paterson: \u201cImpossibility of Distributed Consensus with One Faulty Process,\u201d Journal of the ACM, volume 32, number 2, pages 374\u2013382, April 1985. doi:10.1145/3149.214121 [11] Maurice P Herlihy: \u201cWait-Free Synchronization,\u201d ACM Transactions on Programming Languages and Systems, volume 13, number 1, pages 124\u2013149, January 1991. doi:10.1145/114005.102808 [12] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: \u201cConsensus in the Presence of Partial Synchrony,\u201d Journal of the ACM, volume 35, number 2, pages 288\u2013323, April 1988. doi:10.1145/42282.42283 [13] Christian Cachin, Rachid Guerraoui, and Lu\u00eds Rodrigues: Introduction to Reliable and Secure Distributed Programming, Second Edition. Springer, February 2011. ISBN: 978-3-642-15259-7, doi:10.1007/978-3-642-15260-3","title":"References"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/","text":"https://developpaper.com/implementation-of-redis-distributed-lock/ Many novices will Distributed lock and Distributed transactionConfusion, personal understanding:lock It is used to solve the concurrent contention for a shared resource by multiple programs;affair It is used to ensure the consistency of a series of operations. I\u2019ve explained distributed transactions in several previous articles. I\u2019m going to talk about the implementation of 2pc, TCC and asynchronous assurance schemes. 1. \u5b9a\u4e49 In the traditional monomer architecture, the most common lock is JDK lock. Because the thread is the smallest unit that the operating system can run and schedule, in Java multithreading development, it is inevitable that different threads compete for resources in the same process. JDK library provides us with synchronized, lock and update java.util.concurrent . * etc. However, they all have unified restrictions. Threads competing for resources are all running in the same JVM process. In the distributed architecture, different JVM processes cannot use the lock. In order to prevent multiple processes from interfering with each other in a distributed system, we need a distributed coordination technology to schedule these processes. And the core of this distributed coordination technology is to achieve thisDistributed lock\u3002 Take a classic example of \u201coversold\u201d. In an e-commerce project, the logic of the interface can be simply divided into: Query whether the inventory is greater than zero; When the inventory is greater than zero, purchase the goods. When there is only one piece in stock, both user a and user B execute the first step at the same time, query that the inventory is one piece, and then both execute the purchase operation. When they finished the purchase,they found that the inventory was \u2013 1 piece. We can lock the operations of \u201cinventory query\u201d and \u201cinventory reduction\u201d in Java code to ensure that the requests of users a and B cannot be executed concurrently. But if our interface service is a cluster service, and the requests of user a and user B are respectively forwarded to different JVM processes by load balancing, it will not solve the problem. 2. \u5206\u5e03\u5f0f\u9501\u7684\u6bd4\u8f83 From the previous examples, we can see that the resource to coordinate and solve distributed locks must not be a resource at the level of the JVM process, but a shared external resource. Three ways of implementation There are three common ways to implement distributed lock: 1. Database lock; 2. Zookeeper based distributed lock; 3. Redis based distributed lock. Database lock : This way is easy to think of, put the competing resources into the database, and use the database lock to realize the resource competition. Please refer to the previous articleDatabase transactions and locks\u3002 For example: Pessimistic lock implementation: the \u201cfor update\u201d can be added to the SQL query of inventory goods to achieve exclusive lock, and the \u201cinventory query\u201d and \u201cinventory reduction\u201d can be packaged as a transaction commit. Before the completion of user a\u2019s query and purchase, user B\u2019s request will be blocked. Optimistic lock implementation: add the version number field in the inventory table to control. Or more simply, when the inventory is less than zero after each purchase, the transaction can be rolled back. Distributed lock of zookeeper : zookeeper is professional in implementing distributed locks. It is similar to a file system. It plays the role of distributed lock by competing for file resources on the file system. Specific implementation, please refer to the previous articleDevelopment and application of zookeeper\u3002 Distributed lock of redis : the previous article talked about the development, application and transaction of redis, but never about the distributed lock of redis, which is also the core content of this article. In short, throughsetnxThe value of the competing key. \u201cDatabase lock\u201d competes for table level resources or row level resources, \u201czookeeper lock\u201d competes for file resources, \u201credis lock\u201d competes for key value resources. They all implement distributed locks by competing for shared resources outside the program. \u5bf9\u6bd4 However, in the field of distributed locks, zookeeper is more professional. In essence, redis is also a database. All the other two schemes are \u201cpart-time\u201d to implement distributed locking, and the effect is not as good as zookeeper. Low performance consumption: when concurrent lock competition really occurs, the implementation of database or redis basically obtains locks by blocking or constantly retrying, which has a certain performance consumption. The zookeeper lock registers the listener. When a program releases the lock, the next program gets the lock after listening to the message. Perfect lock release mechanism: if the client from which redis obtains the lock is bugged or hung up, it can only release the lock after the timeout; while for ZK, because the temporary znode is created, as long as the client hangs up, the znode will be gone, and the lock will be released automatically. Strong consistency of cluster: as we all know, zookeeper is a typical case of implementing CP transaction, and the transaction request is always handled by the leader node in the cluster. Redis actually implements AP transactions. If the master node fails and the master-slave switch occurs, the lock may be lost. \u9501\u7684\u5fc5\u8981\u6761\u4ef6 In addition, in order to ensure the availability of distributed locks, we should at least ensure that the implementation of locks meets the following conditions at the same time: Mutual exclusion. At any time, only one client can hold the lock. There is no deadlock. Even if one client crashes while holding the lock and does not unlock it, it can ensure that other clients can lock. It is necessary to tie the bell. Locking and unlocking must be the same client. The client can\u2019t unlock the lock added by others. 3. Redis \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501 3.1. \u9501 Correct locking Java public class RedisTool { private static final String LOCK_SUCCESS = \"OK\" ; private static final String SET_IF_NOT_EXIST = \"NX\" ; private static final String SET_WITH_EXPIRE_TIME = \"PX\" ; /** *Attempt to acquire distributed lock *@ param jedis redis client *@ param lockkey lock *@ param requestid request ID *@ param expireTime *Is @ return successful */ public static boolean tryGetDistributedLock ( Jedis jedis , String lockKey , String requestId , int expireTime ) { String result = jedis . set ( lockKey , requestId , SET_IF_NOT_EXIST , SET_WITH_EXPIRE_TIME , expireTime ); if ( LOCK_SUCCESS . equals ( result )) { return true ; } return false ; } } To see, we lock a line of code:jedis.set(String key, String value, String nxxx, String expx, int time)This set () method has five formal parameters: key: we use the key as the lock, because the key is unique. value: we are passing a request ID. many children\u2019s shoes may not understand it. It\u2019s enough to have a key as a lock. Why use value? The reason is that when we talked about reliability above, the distributed lock needs to satisfy the fourth condition, and it needs to be released by the ringer. By assigning value to requestid, we can know which request the lock was added, and we can have a basis when unlocking. The requestid can be used UUID.randomUUID (). Tostring() method. Nxxx: for this parameter, we fill in NX, which means set if not exist. That is, when the key does not exist, we perform set operation; if the key already exists, we do not perform any operation; EXPX: this parameter is Px, which means that we need to add an expired setting to the key. The specific time is determined by the fifth parameter. time: corresponds to the fourth parameter, representing the expiration time of the key. In general, executing the above set () method will only result in two results: If there is no lock at present (the key does not exist), lock operation will be performed, and a validity period will be set for the lock. At the same time, value indicates the locked client. There is a lock, no operation. Not recommended locking method (not recommended!) I\u2019ve seen many blogs that use the following method to lock, that is, the combination of setnx and GetSet to manually maintain the key expiration time. Java public static boolean wrongGetLock2 ( Jedis jedis , String lockKey , int expireTime ) { long expires = System . currentTimeMillis () + expireTime ; String expiresStr = String . valueOf ( expires ); //If the current lock does not exist, return to lock success if ( jedis . setnx ( lockKey , expiresStr ) == 1 ) { return true ; } //If the lock exists, get the expiration time of the lock String currentValueStr = jedis . get ( lockKey ); if ( currentValueStr != null && Long . parseLong ( currentValueStr ) < System . currentTimeMillis ()) { //The lock has expired. Get the expiration time of the previous lock and set the expiration time of the current lock String oldValueStr = jedis . getSet ( lockKey , expiresStr ); if ( oldValueStr != null && oldValueStr . equals ( currentValueStr )) { //Considering the concurrency of multiple threads, only one thread has the right to lock if its setting value is the same as the current value return true ; } } //In other cases, the locking failure will be returned return false ; } On the surface, this code also implements distributed locking, and the code logic is similar to the above, but there are several problems: Since the expiration time is generated by the client itself, it is mandatory that the time of each client must be synchronized in the distributed environment. When the lock expires, if multiple clients execute it at the same time jedis.getSet () method, although only one client can lock, the expiration time of this client\u2019s lock may be covered by other clients. The lock does not have the owner ID, that is, any client can be unlocked. This kind of code on the Internet may be based on the earlier versions of jedis, which had great limitations at that time. Redis 2.6.12 and above adds optional parameters to the set instruction, as mentioned abovejedis.set(String key, String value, String nxxx, String expx, int time)API, you can put theSETNXandEXPIREPackage together to execute, and release the expired key to the redis server to manage. Therefore, the actual development process, we do not use this more primitive way of locking. 3.2. \u89e3\u9501 Correct locking Java public class RedisTool { private static final Long RELEASE_SUCCESS = 1L ; /** *Release distributed lock *@ param jedis redis client *@ param lockkey lock *@ param requestid request ID *@ return is released successfully */ public static boolean releaseDistributedLock ( Jedis jedis , String lockKey , String requestId ) { String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\" ; Object result = jedis . eval ( script , Collections . singletonList ( lockKey ), Collections . singletonList ( requestId )); if ( RELEASE_SUCCESS . equals ( result )) { return true ; } return false ; } } First, get the value value corresponding to the lock, check whether it is equal to the requestid, if it is equal, delete the lock (unlock). So why use Lua? Because to ensure that the operation is atomic. BeforeThread model and transaction of redisIn this paper, we ensure the atomicity of a series of operation instructions through transaction, and Lua script can also achieve similar effect. Why atomic? If a request obtains the value corresponding to the lock and verifies that the requestid is equal, it will issue a delete instruction. But because of the network and other reasons, the deletion instruction is blocked. At this time, the lock is automatically unlocked because of timeout, and B requests to acquire the lock and re lock it. At this time, a requests the deletion instruction to be executed. As a result, the lock obtained by B requests is deleted. 3.3. lua The computing power of redis command is not very powerful, and Lua language can make up for the deficiency of redis to a great extent. In redis, the execution of Lua language is atomic, that is to say, when redis executes Lua, it will not be interrupted and has atomicity. This feature helps redis to support the consistency of concurrent data. Redis supports two ways to run scripts, one is to input some Lua language program code directly, the other is to write Lua language into a file. In practical application, some simple scripts can take the first way, and generally use the second way for those with certain logic. For simple scripts, redis supports caching scripts, but it will use SHA-1 algorithm to sign the script, and then return the SHA-1 ID, as long as it runs through this ID. Executing Lua in redis Here is a brief introduction. The way to directly input some Lua program code can be performed in redis cli as follows: Lua eval lua - script key - num [ key1 key2 key3 ....] [ value1 value2 value3 ....] --Example 1 eval \"return 'Hello World'\" 0 --Example 2 eval \"redis.call('set',KEYS[1],ARGV[1])\" 1 lua - key lua - value evalRepresents the execution of Lua language commands. lua-scriptRepresents Lua language script. key-numIt indicates how many keys there are in the parameter. It should be noted that the key in redis starts from 1. If there is no key parameter, write 0. [key1 key2 key3\u2026]Key is passed to Lua as a parameter, which can be left blank, but it needs to be corresponding to the number of key num. [value1 value2 value3 \u2026]These parameters are passed to Lua language. They can be filled in or not. Calling redis in Lua Using in Lua redis.call Do the following: Lua redis . call ( command , key [ param1 , param2 \u2026 ]) --Example 1 eval \"return redis.call('set','foo','bar')\" 0 --Example 2 eval \"return redis.call('set',KEYS[1],'bar')\" 1 foo commandIs the command, including set, get, del and so on. keyIs the key to be operated. param1,param2\u2026Represents the parameter given to the key. For example, implement a Lua script for GetSet getset.lua Lua local key = KEYS [ 1 ] local newValue = ARGV [ 1 ] local oldValue = redis . call ( 'get' , key ) redis . call ( 'set' , key , newValue ) return oldValue 3.4. \u9650\u5236\u548c\u6539\u5584 As we said earlier, there are some limitations in the implementation of distributed lock in redis cluster. It is difficult to ensure consistency when the master and slave are replaced. phenomenon In the redis sentinel cluster, we have multiple redis, and there is a master-slave relationship between them, such as one master and two slaves. The data corresponding to our set command is written to the master library, and then synchronized to the slave library. When we apply for a lock, the corresponding command is setnx MyKey myvalue. In the redis sentinel cluster, this command first falls into the main library. Suppose that the master database is down and the data has not yet been synchronized to the slave database, sentinel will elect the master database from one of the slave databases. At this time, there is no MyKey data in our new main library. If another client executes setnx MyKey hisvalue, it will also succeed, that is, it will also get the lock. This means that two clients have acquired the lock. This is not what we want to see. Although the record of this situation is very small, it will only happen when the master-slave fails over. In most cases, most systems can tolerate this flaw, but not all systems can tolerate it. solve In order to solve the defect in the case of fail over, anterez inventedRedlock algorithm\u3002 Using redlock algorithm, multiple redis instances are needed. When locking, it will send setex MyKey myvalue command to most nodes, as long asIf more than half of the nodes are successful, then the locking is successful\u3002 This is very similar to the zookeeper implementation,When the leader of zookeeper cluster broadcasts the command, more than half of the followers must feed back ack to the leader before it takes effect\u3002 In practical work, we can choose the existing open source implementation, which is redlock py in Python and redlock py in JavaRedisson redlock\u3002 Redlock does solve the \u201cunreliable situation\u201d mentioned above. However, while it solves the problem, it also brings the cost. You need multiple redis instances, you need to introduce new libraries, you need to adjust the code, and the performance will be damaged. Therefore, it is true that there is no \u201cperfect solution\u201d. What we need more is to be able to solve the problem according to the actual situation and conditions. 4. \u201cOversold\u201d \u793a\u4f8b\u4ee3\u7801 We simulate a scene of goods rush buying: a commodity has 100 pieces in stock, and 200 people rush to buy at the same time. Compare the rush buying situation with lock and without lock. 4.1. \u4ee3\u7801 The following is the code of this demo. ORM uses JPA, so the code of Dao layer and POJO is not written in this article. There is only one interface in the controller layer, which selects whether to use the lock by passing parameters. Table structure Commodity listproduct SQL CREATE TABLE ` product ` ( ` id ` int NOT NULL AUTO_INCREMENT , ` name ` varchar ( 255 ) DEFAULT NULL , ` amount ` int DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) Purchase recordpurchase_history SQL CREATE TABLE ` purchase_history ` ( ` id ` int NOT NULL AUTO_INCREMENT , ` product_name ` varchar ( 255 ) DEFAULT NULL , ` purchaser ` varchar ( 255 ) DEFAULT NULL , ` purchase_time ` datetime DEFAULT NULL , ` amount ` int DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) pom.xml XML <dependencies> <!--web--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <!--redis--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <!--lombok--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <!--jpa--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-jpa </artifactId> </dependency> <!--mysql--> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <!-- test--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> </dependency> </dependencies> application.yml Text Only server: port: 8001 spring: redis: host: localhost port: 6379 datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/demo username: root password: password ProductController.java Java @RestController @RequestMapping ( \"/product\" ) public class ProductController { public final static String PRODUCT_APPLE = \"apple\" ; private final BuyService buyService ; public ProductController ( BuyService buyService ) { this . buyService = buyService ; } /** * Purchase goods Does @ param lock have a lock Y / N */ @GetMapping ( \"/buy\" ) public void buy ( @RequestParam ( value = \"lock\" , required = false ) String lock ) throws Exception { if ( \"Y\" . equals ( lock )) { buyService . buyProductWithLock ( PRODUCT_APPLE ); } else { buyService . buyProduct ( PRODUCT_APPLE ); } } } BuyService.java Java @Service public class BuyService { private final ProductDao productDao ; private final PurchaseHistoryDao purchaseHistoryDao ; private final LockService lockService ; public BuyService ( ProductDao productDao , PurchaseHistoryDao purchaseHistoryDao , LockService lockService ) { this . productDao = productDao ; this . purchaseHistoryDao = purchaseHistoryDao ; this . lockService = lockService ; } /** * Purchase: no lock * * @param productName */ public void buyProduct ( String productName ) { Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { // Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); // Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } } /** * Purchase: lock * * @param productName */ public void buyProductWithLock ( String productName ) throws Exception { String uuid = UUID . randomUUID (). toString (); // Lock while ( true ) { if ( lockService . lock ( productName , uuid )) { break ; } Thread . sleep ( 100 ); } Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { // Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); // Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } lockService . unlock ( productName , uuid ); } } LockService.java Java @Service public class LockService { private final StringRedisTemplate stringRedisTemplate ; public LockService ( StringRedisTemplate stringRedisTemplate ) { this . stringRedisTemplate = stringRedisTemplate ; } /** * Lock * * @param lockKey * @param requestId * @return */ public boolean lock ( String lockKey , String requestId ) { return stringRedisTemplate . opsForValue (). setIfAbsent ( lockKey , requestId , Duration . ofSeconds ( 3 )); } /** * Unlocking * * @param lockKey * @param requestId */ public void unlock ( String lockKey , String requestId ) { DefaultRedisScript < Long > script = new DefaultRedisScript <> (); script . setResultType ( Long . class ); script . setScriptText ( \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\" ); stringRedisTemplate . execute ( script , Collections . singletonList ( lockKey ), requestId ); } } 4.2. \u6d4b\u8bd5\u548c\u5206\u6790 In the test case, the initial inventory of the product is 100 copies, and 200 users are simulated to buy it. According to the principle, only 100 copies can be purchased in the end. If we want to simulate and test the difference between \u201clocked\u201d and \u201cunlocked\u201d, we must create the condition of \u201chigh parallelism\u201d. Here, we should remember that it is \u201chigh parallelism\u201d, not \u201chigh concurrency\u201d. Because the purchase interface here is fast in response to a single request, in order to simulate the situation that multiple users call the interface at the same time, we should use multithreading locally. I\u2019ve tried a lot to simulate highly parallel environments. The first time is to write JUnit test cases, starting 200 threads to call the interface. The result is that the service will hang up as soon as there are many threads. Although the reason is not clear, JUnit should not use it in this way. The second time is to use postman to do concurrent interface test, but it is found that whether postman is a fake concurrent test or a single thread calls the interface 200 times in turn, there is no implementation of multithreading. Finally, JMeter was installed, which met my expectations. When we start 200 threads to call the lock free and lock interface respectively, the test results are as follows: contrast No lock It\u2019s locked Surplus stock 68 0 Purchase records 200 100 As you can see, there will be oversold in the case of no lock. Let\u2019s take a look at the purchase code of no lock. Java /** *Purchase: no lock * @param productName */ public synchronized void buyProduct ( String productName ) { Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { //Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); //Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } } When multiple requests are called at the same timeproductDao.findOneByName(productName); The result is the same. They all think that there is still inventory. If they go to buy, the problem of oversold will appear. To solve this problem, if it is a single process, through thesynchronized And so on. If it is distributed multi node, we can consider the way of this paper and use redis distributed lock implementation.","title":"Implementation of redis distributed lock"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#1","text":"In the traditional monomer architecture, the most common lock is JDK lock. Because the thread is the smallest unit that the operating system can run and schedule, in Java multithreading development, it is inevitable that different threads compete for resources in the same process. JDK library provides us with synchronized, lock and update java.util.concurrent . * etc. However, they all have unified restrictions. Threads competing for resources are all running in the same JVM process. In the distributed architecture, different JVM processes cannot use the lock. In order to prevent multiple processes from interfering with each other in a distributed system, we need a distributed coordination technology to schedule these processes. And the core of this distributed coordination technology is to achieve thisDistributed lock\u3002 Take a classic example of \u201coversold\u201d. In an e-commerce project, the logic of the interface can be simply divided into: Query whether the inventory is greater than zero; When the inventory is greater than zero, purchase the goods. When there is only one piece in stock, both user a and user B execute the first step at the same time, query that the inventory is one piece, and then both execute the purchase operation. When they finished the purchase,they found that the inventory was \u2013 1 piece. We can lock the operations of \u201cinventory query\u201d and \u201cinventory reduction\u201d in Java code to ensure that the requests of users a and B cannot be executed concurrently. But if our interface service is a cluster service, and the requests of user a and user B are respectively forwarded to different JVM processes by load balancing, it will not solve the problem.","title":"1. \u5b9a\u4e49"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#2","text":"From the previous examples, we can see that the resource to coordinate and solve distributed locks must not be a resource at the level of the JVM process, but a shared external resource. Three ways of implementation There are three common ways to implement distributed lock: 1. Database lock; 2. Zookeeper based distributed lock; 3. Redis based distributed lock. Database lock : This way is easy to think of, put the competing resources into the database, and use the database lock to realize the resource competition. Please refer to the previous articleDatabase transactions and locks\u3002 For example: Pessimistic lock implementation: the \u201cfor update\u201d can be added to the SQL query of inventory goods to achieve exclusive lock, and the \u201cinventory query\u201d and \u201cinventory reduction\u201d can be packaged as a transaction commit. Before the completion of user a\u2019s query and purchase, user B\u2019s request will be blocked. Optimistic lock implementation: add the version number field in the inventory table to control. Or more simply, when the inventory is less than zero after each purchase, the transaction can be rolled back. Distributed lock of zookeeper : zookeeper is professional in implementing distributed locks. It is similar to a file system. It plays the role of distributed lock by competing for file resources on the file system. Specific implementation, please refer to the previous articleDevelopment and application of zookeeper\u3002 Distributed lock of redis : the previous article talked about the development, application and transaction of redis, but never about the distributed lock of redis, which is also the core content of this article. In short, throughsetnxThe value of the competing key. \u201cDatabase lock\u201d competes for table level resources or row level resources, \u201czookeeper lock\u201d competes for file resources, \u201credis lock\u201d competes for key value resources. They all implement distributed locks by competing for shared resources outside the program.","title":"2. \u5206\u5e03\u5f0f\u9501\u7684\u6bd4\u8f83"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#_1","text":"However, in the field of distributed locks, zookeeper is more professional. In essence, redis is also a database. All the other two schemes are \u201cpart-time\u201d to implement distributed locking, and the effect is not as good as zookeeper. Low performance consumption: when concurrent lock competition really occurs, the implementation of database or redis basically obtains locks by blocking or constantly retrying, which has a certain performance consumption. The zookeeper lock registers the listener. When a program releases the lock, the next program gets the lock after listening to the message. Perfect lock release mechanism: if the client from which redis obtains the lock is bugged or hung up, it can only release the lock after the timeout; while for ZK, because the temporary znode is created, as long as the client hangs up, the znode will be gone, and the lock will be released automatically. Strong consistency of cluster: as we all know, zookeeper is a typical case of implementing CP transaction, and the transaction request is always handled by the leader node in the cluster. Redis actually implements AP transactions. If the master node fails and the master-slave switch occurs, the lock may be lost.","title":"\u5bf9\u6bd4"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#_2","text":"In addition, in order to ensure the availability of distributed locks, we should at least ensure that the implementation of locks meets the following conditions at the same time: Mutual exclusion. At any time, only one client can hold the lock. There is no deadlock. Even if one client crashes while holding the lock and does not unlock it, it can ensure that other clients can lock. It is necessary to tie the bell. Locking and unlocking must be the same client. The client can\u2019t unlock the lock added by others.","title":"\u9501\u7684\u5fc5\u8981\u6761\u4ef6"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#3-redis","text":"","title":"3. Redis \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#31","text":"Correct locking Java public class RedisTool { private static final String LOCK_SUCCESS = \"OK\" ; private static final String SET_IF_NOT_EXIST = \"NX\" ; private static final String SET_WITH_EXPIRE_TIME = \"PX\" ; /** *Attempt to acquire distributed lock *@ param jedis redis client *@ param lockkey lock *@ param requestid request ID *@ param expireTime *Is @ return successful */ public static boolean tryGetDistributedLock ( Jedis jedis , String lockKey , String requestId , int expireTime ) { String result = jedis . set ( lockKey , requestId , SET_IF_NOT_EXIST , SET_WITH_EXPIRE_TIME , expireTime ); if ( LOCK_SUCCESS . equals ( result )) { return true ; } return false ; } } To see, we lock a line of code:jedis.set(String key, String value, String nxxx, String expx, int time)This set () method has five formal parameters: key: we use the key as the lock, because the key is unique. value: we are passing a request ID. many children\u2019s shoes may not understand it. It\u2019s enough to have a key as a lock. Why use value? The reason is that when we talked about reliability above, the distributed lock needs to satisfy the fourth condition, and it needs to be released by the ringer. By assigning value to requestid, we can know which request the lock was added, and we can have a basis when unlocking. The requestid can be used UUID.randomUUID (). Tostring() method. Nxxx: for this parameter, we fill in NX, which means set if not exist. That is, when the key does not exist, we perform set operation; if the key already exists, we do not perform any operation; EXPX: this parameter is Px, which means that we need to add an expired setting to the key. The specific time is determined by the fifth parameter. time: corresponds to the fourth parameter, representing the expiration time of the key. In general, executing the above set () method will only result in two results: If there is no lock at present (the key does not exist), lock operation will be performed, and a validity period will be set for the lock. At the same time, value indicates the locked client. There is a lock, no operation. Not recommended locking method (not recommended!) I\u2019ve seen many blogs that use the following method to lock, that is, the combination of setnx and GetSet to manually maintain the key expiration time. Java public static boolean wrongGetLock2 ( Jedis jedis , String lockKey , int expireTime ) { long expires = System . currentTimeMillis () + expireTime ; String expiresStr = String . valueOf ( expires ); //If the current lock does not exist, return to lock success if ( jedis . setnx ( lockKey , expiresStr ) == 1 ) { return true ; } //If the lock exists, get the expiration time of the lock String currentValueStr = jedis . get ( lockKey ); if ( currentValueStr != null && Long . parseLong ( currentValueStr ) < System . currentTimeMillis ()) { //The lock has expired. Get the expiration time of the previous lock and set the expiration time of the current lock String oldValueStr = jedis . getSet ( lockKey , expiresStr ); if ( oldValueStr != null && oldValueStr . equals ( currentValueStr )) { //Considering the concurrency of multiple threads, only one thread has the right to lock if its setting value is the same as the current value return true ; } } //In other cases, the locking failure will be returned return false ; } On the surface, this code also implements distributed locking, and the code logic is similar to the above, but there are several problems: Since the expiration time is generated by the client itself, it is mandatory that the time of each client must be synchronized in the distributed environment. When the lock expires, if multiple clients execute it at the same time jedis.getSet () method, although only one client can lock, the expiration time of this client\u2019s lock may be covered by other clients. The lock does not have the owner ID, that is, any client can be unlocked. This kind of code on the Internet may be based on the earlier versions of jedis, which had great limitations at that time. Redis 2.6.12 and above adds optional parameters to the set instruction, as mentioned abovejedis.set(String key, String value, String nxxx, String expx, int time)API, you can put theSETNXandEXPIREPackage together to execute, and release the expired key to the redis server to manage. Therefore, the actual development process, we do not use this more primitive way of locking.","title":"3.1. \u9501"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#32","text":"Correct locking Java public class RedisTool { private static final Long RELEASE_SUCCESS = 1L ; /** *Release distributed lock *@ param jedis redis client *@ param lockkey lock *@ param requestid request ID *@ return is released successfully */ public static boolean releaseDistributedLock ( Jedis jedis , String lockKey , String requestId ) { String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\" ; Object result = jedis . eval ( script , Collections . singletonList ( lockKey ), Collections . singletonList ( requestId )); if ( RELEASE_SUCCESS . equals ( result )) { return true ; } return false ; } } First, get the value value corresponding to the lock, check whether it is equal to the requestid, if it is equal, delete the lock (unlock). So why use Lua? Because to ensure that the operation is atomic. BeforeThread model and transaction of redisIn this paper, we ensure the atomicity of a series of operation instructions through transaction, and Lua script can also achieve similar effect. Why atomic? If a request obtains the value corresponding to the lock and verifies that the requestid is equal, it will issue a delete instruction. But because of the network and other reasons, the deletion instruction is blocked. At this time, the lock is automatically unlocked because of timeout, and B requests to acquire the lock and re lock it. At this time, a requests the deletion instruction to be executed. As a result, the lock obtained by B requests is deleted.","title":"3.2. \u89e3\u9501"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#33-lua","text":"The computing power of redis command is not very powerful, and Lua language can make up for the deficiency of redis to a great extent. In redis, the execution of Lua language is atomic, that is to say, when redis executes Lua, it will not be interrupted and has atomicity. This feature helps redis to support the consistency of concurrent data. Redis supports two ways to run scripts, one is to input some Lua language program code directly, the other is to write Lua language into a file. In practical application, some simple scripts can take the first way, and generally use the second way for those with certain logic. For simple scripts, redis supports caching scripts, but it will use SHA-1 algorithm to sign the script, and then return the SHA-1 ID, as long as it runs through this ID.","title":"3.3. lua"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#executing-lua-in-redis","text":"Here is a brief introduction. The way to directly input some Lua program code can be performed in redis cli as follows: Lua eval lua - script key - num [ key1 key2 key3 ....] [ value1 value2 value3 ....] --Example 1 eval \"return 'Hello World'\" 0 --Example 2 eval \"redis.call('set',KEYS[1],ARGV[1])\" 1 lua - key lua - value evalRepresents the execution of Lua language commands. lua-scriptRepresents Lua language script. key-numIt indicates how many keys there are in the parameter. It should be noted that the key in redis starts from 1. If there is no key parameter, write 0. [key1 key2 key3\u2026]Key is passed to Lua as a parameter, which can be left blank, but it needs to be corresponding to the number of key num. [value1 value2 value3 \u2026]These parameters are passed to Lua language. They can be filled in or not.","title":"Executing Lua in redis"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#calling-redis-in-lua","text":"Using in Lua redis.call Do the following: Lua redis . call ( command , key [ param1 , param2 \u2026 ]) --Example 1 eval \"return redis.call('set','foo','bar')\" 0 --Example 2 eval \"return redis.call('set',KEYS[1],'bar')\" 1 foo commandIs the command, including set, get, del and so on. keyIs the key to be operated. param1,param2\u2026Represents the parameter given to the key. For example, implement a Lua script for GetSet getset.lua Lua local key = KEYS [ 1 ] local newValue = ARGV [ 1 ] local oldValue = redis . call ( 'get' , key ) redis . call ( 'set' , key , newValue ) return oldValue","title":"Calling redis in Lua"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#34","text":"As we said earlier, there are some limitations in the implementation of distributed lock in redis cluster. It is difficult to ensure consistency when the master and slave are replaced.","title":"3.4. \u9650\u5236\u548c\u6539\u5584"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#phenomenon","text":"In the redis sentinel cluster, we have multiple redis, and there is a master-slave relationship between them, such as one master and two slaves. The data corresponding to our set command is written to the master library, and then synchronized to the slave library. When we apply for a lock, the corresponding command is setnx MyKey myvalue. In the redis sentinel cluster, this command first falls into the main library. Suppose that the master database is down and the data has not yet been synchronized to the slave database, sentinel will elect the master database from one of the slave databases. At this time, there is no MyKey data in our new main library. If another client executes setnx MyKey hisvalue, it will also succeed, that is, it will also get the lock. This means that two clients have acquired the lock. This is not what we want to see. Although the record of this situation is very small, it will only happen when the master-slave fails over. In most cases, most systems can tolerate this flaw, but not all systems can tolerate it.","title":"phenomenon"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#solve","text":"In order to solve the defect in the case of fail over, anterez inventedRedlock algorithm\u3002 Using redlock algorithm, multiple redis instances are needed. When locking, it will send setex MyKey myvalue command to most nodes, as long asIf more than half of the nodes are successful, then the locking is successful\u3002 This is very similar to the zookeeper implementation,When the leader of zookeeper cluster broadcasts the command, more than half of the followers must feed back ack to the leader before it takes effect\u3002 In practical work, we can choose the existing open source implementation, which is redlock py in Python and redlock py in JavaRedisson redlock\u3002 Redlock does solve the \u201cunreliable situation\u201d mentioned above. However, while it solves the problem, it also brings the cost. You need multiple redis instances, you need to introduce new libraries, you need to adjust the code, and the performance will be damaged. Therefore, it is true that there is no \u201cperfect solution\u201d. What we need more is to be able to solve the problem according to the actual situation and conditions.","title":"solve"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#4-oversold","text":"We simulate a scene of goods rush buying: a commodity has 100 pieces in stock, and 200 people rush to buy at the same time. Compare the rush buying situation with lock and without lock.","title":"4. \u201cOversold\u201d \u793a\u4f8b\u4ee3\u7801"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#41","text":"The following is the code of this demo. ORM uses JPA, so the code of Dao layer and POJO is not written in this article. There is only one interface in the controller layer, which selects whether to use the lock by passing parameters.","title":"4.1. \u4ee3\u7801"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#table-structure","text":"Commodity listproduct SQL CREATE TABLE ` product ` ( ` id ` int NOT NULL AUTO_INCREMENT , ` name ` varchar ( 255 ) DEFAULT NULL , ` amount ` int DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) Purchase recordpurchase_history SQL CREATE TABLE ` purchase_history ` ( ` id ` int NOT NULL AUTO_INCREMENT , ` product_name ` varchar ( 255 ) DEFAULT NULL , ` purchaser ` varchar ( 255 ) DEFAULT NULL , ` purchase_time ` datetime DEFAULT NULL , ` amount ` int DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) pom.xml XML <dependencies> <!--web--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <!--redis--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <!--lombok--> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> </dependency> <!--jpa--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-jpa </artifactId> </dependency> <!--mysql--> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> </dependency> <!-- test--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-test </artifactId> <scope> test </scope> </dependency> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> </dependency> </dependencies> application.yml Text Only server: port: 8001 spring: redis: host: localhost port: 6379 datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/demo username: root password: password ProductController.java Java @RestController @RequestMapping ( \"/product\" ) public class ProductController { public final static String PRODUCT_APPLE = \"apple\" ; private final BuyService buyService ; public ProductController ( BuyService buyService ) { this . buyService = buyService ; } /** * Purchase goods Does @ param lock have a lock Y / N */ @GetMapping ( \"/buy\" ) public void buy ( @RequestParam ( value = \"lock\" , required = false ) String lock ) throws Exception { if ( \"Y\" . equals ( lock )) { buyService . buyProductWithLock ( PRODUCT_APPLE ); } else { buyService . buyProduct ( PRODUCT_APPLE ); } } } BuyService.java Java @Service public class BuyService { private final ProductDao productDao ; private final PurchaseHistoryDao purchaseHistoryDao ; private final LockService lockService ; public BuyService ( ProductDao productDao , PurchaseHistoryDao purchaseHistoryDao , LockService lockService ) { this . productDao = productDao ; this . purchaseHistoryDao = purchaseHistoryDao ; this . lockService = lockService ; } /** * Purchase: no lock * * @param productName */ public void buyProduct ( String productName ) { Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { // Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); // Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } } /** * Purchase: lock * * @param productName */ public void buyProductWithLock ( String productName ) throws Exception { String uuid = UUID . randomUUID (). toString (); // Lock while ( true ) { if ( lockService . lock ( productName , uuid )) { break ; } Thread . sleep ( 100 ); } Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { // Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); // Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } lockService . unlock ( productName , uuid ); } } LockService.java Java @Service public class LockService { private final StringRedisTemplate stringRedisTemplate ; public LockService ( StringRedisTemplate stringRedisTemplate ) { this . stringRedisTemplate = stringRedisTemplate ; } /** * Lock * * @param lockKey * @param requestId * @return */ public boolean lock ( String lockKey , String requestId ) { return stringRedisTemplate . opsForValue (). setIfAbsent ( lockKey , requestId , Duration . ofSeconds ( 3 )); } /** * Unlocking * * @param lockKey * @param requestId */ public void unlock ( String lockKey , String requestId ) { DefaultRedisScript < Long > script = new DefaultRedisScript <> (); script . setResultType ( Long . class ); script . setScriptText ( \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\" ); stringRedisTemplate . execute ( script , Collections . singletonList ( lockKey ), requestId ); } }","title":"Table structure"},{"location":"blog/seckill/implementation-of-redis-distributed-lock/#42","text":"In the test case, the initial inventory of the product is 100 copies, and 200 users are simulated to buy it. According to the principle, only 100 copies can be purchased in the end. If we want to simulate and test the difference between \u201clocked\u201d and \u201cunlocked\u201d, we must create the condition of \u201chigh parallelism\u201d. Here, we should remember that it is \u201chigh parallelism\u201d, not \u201chigh concurrency\u201d. Because the purchase interface here is fast in response to a single request, in order to simulate the situation that multiple users call the interface at the same time, we should use multithreading locally. I\u2019ve tried a lot to simulate highly parallel environments. The first time is to write JUnit test cases, starting 200 threads to call the interface. The result is that the service will hang up as soon as there are many threads. Although the reason is not clear, JUnit should not use it in this way. The second time is to use postman to do concurrent interface test, but it is found that whether postman is a fake concurrent test or a single thread calls the interface 200 times in turn, there is no implementation of multithreading. Finally, JMeter was installed, which met my expectations. When we start 200 threads to call the lock free and lock interface respectively, the test results are as follows: contrast No lock It\u2019s locked Surplus stock 68 0 Purchase records 200 100 As you can see, there will be oversold in the case of no lock. Let\u2019s take a look at the purchase code of no lock. Java /** *Purchase: no lock * @param productName */ public synchronized void buyProduct ( String productName ) { Product product = productDao . findOneByName ( productName ); if ( product . getAmount () > 0 ) { //Inventory minus 1 product . setAmount ( product . getAmount () - 1 ); productDao . save ( product ); //Log PurchaseHistory purchaseHistory = new PurchaseHistory (); purchaseHistory . setProductName ( productName ); purchaseHistory . setAmount ( 1 ); purchaseHistoryDao . save ( purchaseHistory ); } } When multiple requests are called at the same timeproductDao.findOneByName(productName); The result is the same. They all think that there is still inventory. If they go to buy, the problem of oversold will appear. To solve this problem, if it is a single process, through thesynchronized And so on. If it is distributed multi node, we can consider the way of this paper and use redis distributed lock implementation.","title":"4.2. \u6d4b\u8bd5\u548c\u5206\u6790"},{"location":"blog/seckill/is_redlock_safe/","text":"http://antirez.com/news/101 Martin Kleppmann, a distributed systems researcher, yesterday published an analysis of Redlock (http://redis.io/topics/distlock), that you can find here: http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html Redlock is a client side distributed locking algorithm I designed to be used with Redis, but the algorithm orchestrates, client side, a set of nodes that implement a data store with certain capabilities, in order to create a multi-master fault tolerant, and hopefully safe, distributed lock with auto release capabilities. You can implement Redlock using MySQL instead of Redis, for example. The algorithm's goal was to move away people that were using a single Redis instance, or a master-slave setup with failover, in order to implement distributed locks, to something much more reliable and safe, but having a very low complexity and good performance. Since I published Redlock people implemented it in multiple languages and used it for different purposes. Martin's analysis of the algorithm concludes that Redlock is not safe. It is great that Martin published an analysis, I asked for an analysis in the original Redlock specification here: http://redis.io/topics/distlock. So thank you Martin. However I don\u2019t agree with the analysis. The good thing is that distributed systems are, unlike other fields of programming, pretty mathematically exact, or they are not, so a given set of properties can be guaranteed by an algorithm or the algorithm may fail to guarantee them under certain assumptions. In this analysis I\u2019ll analyze Martin's analysis so that other experts in the field can check the two documents (the analysis and the counter-analysis), and eventually we can understand if Redlock can be considered safe or not. Why Martin thinks Redlock is unsafe The arguments in the analysis are mainly two: Distributed locks with an auto-release feature (the mutually exclusive lock property is only valid for a fixed amount of time after the lock is acquired) require a way to avoid issues when clients use a lock after the expire time, violating the mutual exclusion while accessing a shared resource. Martin says that Redlock does not have such a mechanism. Martin says the algorithm is, regardless of problem \u201c1\u201d, inherently unsafe since it makes assumptions about the system model that cannot be guaranteed in practical systems. I\u2019ll address the two concerns separately for clarity, starting with the first \u201c1\u201d. Distributed locks, auto release, and tokens A distributed lock without an auto release mechanism, where the lock owner will hold it indefinitely, is basically useless. If the client holding the lock crashes and does not recover with full state in a short amount of time, a deadlock is created where the shared resource that the distributed lock tried to protect remains forever unaccessible. This creates a liveness issue that is unacceptable in most situations, so a sane distributed lock must be able to auto release itself. So practical locks are provided to clients with a maximum time to live. After the expire time, the mutual exclusion guarantee, which is the main property of the lock, is gone: another client may already have the lock. What happens if two clients acquire the lock at two different times, but the first one is so slow, because of GC pauses or other scheduling issues, that will try to do work in the context of the shared resource at the same time with second client that acquired the lock? Martin says that this problem is avoided by having the distributed lock server to provide, with every lock, a token, which is, in his example, just a number that is guaranteed to always increment. The rationale for Martin's usage of a token, is that this way, when two different clients access the locked resource at the same time, we can use the token in the database write transaction (that is assumed to materialize the work the client does): only the client with the greatest lock number will be able to write to the database. In Martin's words: \u201cThe fix for this problem is actually pretty simple: you need to include a fencing token with every write request to the storage service. In this context, a fencing token is simply a number that increases (e.g. incremented by the lock service) every time a client acquires the lock\u201d \u2026 snip \u2026 \u201cNote this requires the storage server to take an active role in checking tokens, and rejecting any writes on which the token has gone backwards\u201d. I think this argument has a number of issues: Most of the times when you need a distributed lock system that can guarantee mutual exclusivity, when this property is violated you already lost. Distributed locks are very useful exactly when we have no other control in the shared resource. In his analysis, Martin assumes that you always have some other way to avoid race conditions when the mutual exclusivity of the lock is violated. I think this is a very strange way to reason about distributed locks with strong guarantees, it is not clear why you would use a lock with strong properties at all if you can resolve races in a different way. Yet I\u2019ll continue with the other points below just for the sake of showing that Redlock can work well in this, very artificial, context. If your data store can always accept the write only if your token is greater than all the past tokens, than it\u2019s a linearizable store. If you have a linearizable store, you can just generate an incremental ID for each Redlock acquired, so this would make Redlock equivalent to another distributed lock system that provides an incremental token ID with every new lock. However in the next point I\u2019ll show how this is not needed. However \u201c2\u201d is not a sensible choice anyway: most of the times the result of working to a shared resource is not writing to a linearizable store, so what to do? Each Redlock is associated with a large random token (which is generated in a way that collisions can be ignored. The Redlock specification assumes textually \u201c20 bytes from /dev/urandom\u201d). What do you do with a unique token? For example you can implement Check and Set. When starting to work with a shared resource, we set its state to \u201c <token> \u201d, then we operate the read-modify-write only if the token is still the same when we write. Note that in certain use cases, one could say, it\u2019s useful anyway to have ordered tokens. While it\u2019s hard to think at an use case, note that for the same GC pauses Martin mentions, the order in which the token was acquired, does not necessarily respects the order in which the clients will attempt to work on the shared resource, so the lock order may not be casually related to the effects of working to a shared resource. Most of the times, locks are used to access resources that are updated in a way that is non transactional. Sometimes we use distributed locks to move physical objects, for example. Or to interact with another external API, and so forth. I want to mention again that, what is strange about all this, is that it is assumed that you always must have a way to handle the fact that mutual exclusion is violated. Actually if you have such a system to avoid problems during race conditions, you probably don\u2019t need a distributed lock at all, or at least you don\u2019t need a lock with strong guarantees, but just a weak lock to avoid, most of the times, concurrent accesses for performances reasons. However even if you happen to agree with Martin about the fact the above is very useful, the bottom line is that a unique identifier for each lock can be used for the same goals, but is much more practical in terms of not requiring strong guarantees from the store. Let\u2019s talk about system models The above criticism is basically common to everything which is a distributed lock with auto release, not providing a monotonically increasing counter with each lock. However the other critique of Martin is specific to Redlock. Here Martin really analyzes the algorithm, concluding it is broken. Redlock assumes a semi synchronous system model where different processes can count time at more or less the same \u201cspeed\u201d. The different processes don\u2019t need in any way to have a bound error in the absolute time. What they need to do is just, for example, to be able to count 5 seconds with a maximum of 10% error. So one counts actual 4.5 seconds, another 5.5 seconds, and we are fine. Martin also states that Redlock requires bound messages maximum delays, which is not correct as far as I can tell (I\u2019ll explain later what\u2019s the problem with his reasoning). So let\u2019s start with the issue of different processes being unable to count time at the same rate. Martin says that the clock can randomly jump in a system because of two issues: The system administrator manually alters the clock. The ntpd daemon changes the clock a lot because it receives an update. The above two problems can be avoided by \u201c1\u201d not doing this (otherwise even corrupting a Raft log with \u201cecho foo > /my/raft/log.bin\u201d is a problem), and \u201c2\u201d using an ntpd that does not change the time by jumping directly, but by distributing the change over the course of a larger time span. However I think Martin is right that Redis and Redlock implementations should switch to the monotonic time API provided by most operating systems in order to make the above issues less of a problem. This was proposed several times in the past, adds a bit of complexity inside Redis, but is a good idea: I\u2019ll implement this in the next weeks. However while we\u2019ll switch to monotonic time API, because there are advantages, processes running in an operating system without a software (time server) or human (system administrator) elements altering the clock, can count relative time with a bound error even with gettimeofday(). Note that there are past attempts to implement distributed systems even assuming a bound absolute time error (by using GPS units). Redlock does not require anything like that, just the ability of different processes to count 10 seconds as 9.5 or 11.2 (+/- 2 seconds max in the example), for instance. So is Redlock safe or not? It depends on the above. Let\u2019s assume we use the monotonically increasing time API, for the sake of simplicity to rule out implementation details (system administrators with a love for POKE and time servers). Can a process count relative time with a fixed percentage of maximum error? I think this is a sounding YES, and is simpler to reply yes to this than to: \u201ccan a process write a log without corrupting it\u201d? Network delays & co Martin says that Redlock does not just depend on the fact that processes can count time at approximately the same time, he says: \u201cHowever, Redlock is not like this. Its safety depends on a lot of timing assumptions: it assumes that all Redis nodes hold keys for approximately the right length of time before expiring; that that the network delay is small compared to the expiry duration; and that process pauses are much shorter than the expiry duration.\u201d So let\u2019s split the above claims into different parts: Redis nodes hold keys for approximately the right length of time. Network delays are small compared to the expiry duration. Process pauses are much shorter than the expiry duration. All the time Martin says that \u201cthe system clock jumps\u201d I assume that we covered this by not poking with the system time in a way that is a problem for the algorithm, or for the sake of simplicity by using the monotonic time API. So: About claim 1: This is not an issue, we assumed that we can count time approximately at the same speed, unless there is any actual argument against it. About claim 2: Things are a bit more complex. Martin says: \u201cOkay, so maybe you think that a clock jump is unrealistic, because you\u2019re very confident in having correctly configured NTP to only ever slew the clock.\u201d (Yep we agree here ;-) he continues and says\u2026) \u201cIn that case, let\u2019s look at an example of how a process pause may cause the algorithm to fail: Client 1 requests lock on nodes A, B, C, D, E. While the responses to client 1 are in flight, client 1 goes into stop-the-world GC. Locks expire on all Redis nodes. Client 2 acquires lock on nodes A, B, C, D, E. Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully acquired the lock (they were held in client 1\u2019s kernel network buffers while the process was paused). Clients 1 and 2 now both believe they hold the lock.\u201d If you read the Redlock specification, that I hadn't touched for months, you can see the steps to acquire the lock are: Get the current time. \u2026 All the steps needed to acquire the lock \u2026 Get the current time, again. Check if we are already out of time, or if we acquired the lock fast enough. Do some work with your lock. Note steps 1 and 3. Whatever delay happens in the network or in the processes involved, after acquiring the majority we check again that we are not out of time. The delay can only happen after steps 3, resulting into the lock to be considered ok while actually expired, that is, we are back at the first problem Martin identified of distributed locks where the client fails to stop working to the shared resource before the lock validity expires. Let me tell again how this problem is common with all the distributed locks implementations , and how the token as a solution is both unrealistic and can be used with Redlock as well. Note that whatever happens between 1 and 3, you can add the network delays you want, the lock will always be considered not valid if too much time elapsed, so Redlock looks completely immune from messages that have unbound delays between processes. It was designed with this goal in mind, and I cannot see how the above race condition could happen. Yet Martin's blog post was also reviewed by multiple DS experts, so I\u2019m not sure if I\u2019m missing something here or simply the way Redlock works was overlooked simultaneously by many. I\u2019ll be happy to receive some clarification about this. The above also addresses \u201cprocess pauses\u201d concern number 3. Pauses during the process of acquiring the lock don\u2019t have effects on the algorithm's correctness. They can however, affect the ability of a client to make work within the specified lock time to live, as with any other distributed lock with auto release, as already covered above. Digression about network delays Just a quick note. In server-side implementations of a distributed lock with auto-release, the client may ask to acquire a lock, the server may allow the client to do so, but the process can stop into a GC pause or the network may be slow or whatever, so the client may receive the \"OK, the lock is your\" too late, when the lock is already expired. However you can do a lot to avoid your process sleeping for a long time, and you can't do much to avoid network delays, so the steps to check the time before/after the lock is acquired, to see how much time is left, should actually be common practice even when using other systems implementing locks with an expiry. Fsync or not? At some point Martin talks about the fact that Redlock uses delayed restarts of nodes. This requires, again, the ability to be able to wait more or less a specified amount of time, as covered above. Useless to repeat the same things again. However what is important about this is that, this step is optional. You could configure each Redis node to fsync at every operation, so that when the client receives the reply, it knows the lock was already persisted on disk. This is how most other systems providing strong guarantees work. The very interesting thing about Redlock is that you can opt-out any disk involvement at all by implementing delayed restarts. This means it\u2019s possible to process hundreds of thousands locks per second with a few Redis instances, which is something impossible to obtain with other systems. GPS units versus the local computer clock Returning to the system model, one thing that makes Redlock system model practical is that you can assume a process to never be partitioned with the system clock. Note that this is different compared to other semi synchronous models where GPS units are used, because there are two non obvious partitions that may happen in this case: The GPS is partitioned away from the GPS network, so it can\u2019t acquire a fix. The process and the GPS are not able to exchange messages or there are delays in the messages exchanged. The above problems may result into a liveness or safety violation depending on how the system is orchestrated (safety issues only happen if there is a design error, for example if the GPS updates the system time asynchronously so that, when the GPS does not work, the absolute time error may go over the maximum bound). The Redlock system model does not have these complexities nor requires additional hardware, just the computer clock, and even a very cheap clock with all the obvious biases due to the crystal temperature and other things influencing the precision. Conclusions I think Martin has a point about the monotonic API, Redis and Redlock implementations should use it to avoid issues due to the system clock being altered. However I can\u2019t identify other points of the analysis affecting Redlock safety, as explained above, nor do I find his final conclusions that people should not use Redlock when the mutual exclusion guarantee is needed, justified. It would be great to both receive more feedbacks from experts and to test the algorithm with Jepsen, or similar tools, to accumulate more data. A big thank you to the friends of mine that helped me to review this post. blog comments powered by Disqus","title":"Is Redlock safe?"},{"location":"blog/seckill/is_redlock_safe/#why-martin-thinks-redlock-is-unsafe","text":"The arguments in the analysis are mainly two: Distributed locks with an auto-release feature (the mutually exclusive lock property is only valid for a fixed amount of time after the lock is acquired) require a way to avoid issues when clients use a lock after the expire time, violating the mutual exclusion while accessing a shared resource. Martin says that Redlock does not have such a mechanism. Martin says the algorithm is, regardless of problem \u201c1\u201d, inherently unsafe since it makes assumptions about the system model that cannot be guaranteed in practical systems. I\u2019ll address the two concerns separately for clarity, starting with the first \u201c1\u201d.","title":"Why Martin thinks Redlock is unsafe"},{"location":"blog/seckill/is_redlock_safe/#distributed-locks-auto-release-and-tokens","text":"A distributed lock without an auto release mechanism, where the lock owner will hold it indefinitely, is basically useless. If the client holding the lock crashes and does not recover with full state in a short amount of time, a deadlock is created where the shared resource that the distributed lock tried to protect remains forever unaccessible. This creates a liveness issue that is unacceptable in most situations, so a sane distributed lock must be able to auto release itself. So practical locks are provided to clients with a maximum time to live. After the expire time, the mutual exclusion guarantee, which is the main property of the lock, is gone: another client may already have the lock. What happens if two clients acquire the lock at two different times, but the first one is so slow, because of GC pauses or other scheduling issues, that will try to do work in the context of the shared resource at the same time with second client that acquired the lock? Martin says that this problem is avoided by having the distributed lock server to provide, with every lock, a token, which is, in his example, just a number that is guaranteed to always increment. The rationale for Martin's usage of a token, is that this way, when two different clients access the locked resource at the same time, we can use the token in the database write transaction (that is assumed to materialize the work the client does): only the client with the greatest lock number will be able to write to the database. In Martin's words: \u201cThe fix for this problem is actually pretty simple: you need to include a fencing token with every write request to the storage service. In this context, a fencing token is simply a number that increases (e.g. incremented by the lock service) every time a client acquires the lock\u201d \u2026 snip \u2026 \u201cNote this requires the storage server to take an active role in checking tokens, and rejecting any writes on which the token has gone backwards\u201d. I think this argument has a number of issues: Most of the times when you need a distributed lock system that can guarantee mutual exclusivity, when this property is violated you already lost. Distributed locks are very useful exactly when we have no other control in the shared resource. In his analysis, Martin assumes that you always have some other way to avoid race conditions when the mutual exclusivity of the lock is violated. I think this is a very strange way to reason about distributed locks with strong guarantees, it is not clear why you would use a lock with strong properties at all if you can resolve races in a different way. Yet I\u2019ll continue with the other points below just for the sake of showing that Redlock can work well in this, very artificial, context. If your data store can always accept the write only if your token is greater than all the past tokens, than it\u2019s a linearizable store. If you have a linearizable store, you can just generate an incremental ID for each Redlock acquired, so this would make Redlock equivalent to another distributed lock system that provides an incremental token ID with every new lock. However in the next point I\u2019ll show how this is not needed. However \u201c2\u201d is not a sensible choice anyway: most of the times the result of working to a shared resource is not writing to a linearizable store, so what to do? Each Redlock is associated with a large random token (which is generated in a way that collisions can be ignored. The Redlock specification assumes textually \u201c20 bytes from /dev/urandom\u201d). What do you do with a unique token? For example you can implement Check and Set. When starting to work with a shared resource, we set its state to \u201c <token> \u201d, then we operate the read-modify-write only if the token is still the same when we write. Note that in certain use cases, one could say, it\u2019s useful anyway to have ordered tokens. While it\u2019s hard to think at an use case, note that for the same GC pauses Martin mentions, the order in which the token was acquired, does not necessarily respects the order in which the clients will attempt to work on the shared resource, so the lock order may not be casually related to the effects of working to a shared resource. Most of the times, locks are used to access resources that are updated in a way that is non transactional. Sometimes we use distributed locks to move physical objects, for example. Or to interact with another external API, and so forth. I want to mention again that, what is strange about all this, is that it is assumed that you always must have a way to handle the fact that mutual exclusion is violated. Actually if you have such a system to avoid problems during race conditions, you probably don\u2019t need a distributed lock at all, or at least you don\u2019t need a lock with strong guarantees, but just a weak lock to avoid, most of the times, concurrent accesses for performances reasons. However even if you happen to agree with Martin about the fact the above is very useful, the bottom line is that a unique identifier for each lock can be used for the same goals, but is much more practical in terms of not requiring strong guarantees from the store.","title":"Distributed locks, auto release, and tokens"},{"location":"blog/seckill/is_redlock_safe/#lets-talk-about-system-models","text":"The above criticism is basically common to everything which is a distributed lock with auto release, not providing a monotonically increasing counter with each lock. However the other critique of Martin is specific to Redlock. Here Martin really analyzes the algorithm, concluding it is broken. Redlock assumes a semi synchronous system model where different processes can count time at more or less the same \u201cspeed\u201d. The different processes don\u2019t need in any way to have a bound error in the absolute time. What they need to do is just, for example, to be able to count 5 seconds with a maximum of 10% error. So one counts actual 4.5 seconds, another 5.5 seconds, and we are fine. Martin also states that Redlock requires bound messages maximum delays, which is not correct as far as I can tell (I\u2019ll explain later what\u2019s the problem with his reasoning). So let\u2019s start with the issue of different processes being unable to count time at the same rate. Martin says that the clock can randomly jump in a system because of two issues: The system administrator manually alters the clock. The ntpd daemon changes the clock a lot because it receives an update. The above two problems can be avoided by \u201c1\u201d not doing this (otherwise even corrupting a Raft log with \u201cecho foo > /my/raft/log.bin\u201d is a problem), and \u201c2\u201d using an ntpd that does not change the time by jumping directly, but by distributing the change over the course of a larger time span. However I think Martin is right that Redis and Redlock implementations should switch to the monotonic time API provided by most operating systems in order to make the above issues less of a problem. This was proposed several times in the past, adds a bit of complexity inside Redis, but is a good idea: I\u2019ll implement this in the next weeks. However while we\u2019ll switch to monotonic time API, because there are advantages, processes running in an operating system without a software (time server) or human (system administrator) elements altering the clock, can count relative time with a bound error even with gettimeofday(). Note that there are past attempts to implement distributed systems even assuming a bound absolute time error (by using GPS units). Redlock does not require anything like that, just the ability of different processes to count 10 seconds as 9.5 or 11.2 (+/- 2 seconds max in the example), for instance. So is Redlock safe or not? It depends on the above. Let\u2019s assume we use the monotonically increasing time API, for the sake of simplicity to rule out implementation details (system administrators with a love for POKE and time servers). Can a process count relative time with a fixed percentage of maximum error? I think this is a sounding YES, and is simpler to reply yes to this than to: \u201ccan a process write a log without corrupting it\u201d?","title":"Let\u2019s talk about system models"},{"location":"blog/seckill/is_redlock_safe/#network-delays-co","text":"Martin says that Redlock does not just depend on the fact that processes can count time at approximately the same time, he says: \u201cHowever, Redlock is not like this. Its safety depends on a lot of timing assumptions: it assumes that all Redis nodes hold keys for approximately the right length of time before expiring; that that the network delay is small compared to the expiry duration; and that process pauses are much shorter than the expiry duration.\u201d So let\u2019s split the above claims into different parts: Redis nodes hold keys for approximately the right length of time. Network delays are small compared to the expiry duration. Process pauses are much shorter than the expiry duration. All the time Martin says that \u201cthe system clock jumps\u201d I assume that we covered this by not poking with the system time in a way that is a problem for the algorithm, or for the sake of simplicity by using the monotonic time API. So: About claim 1: This is not an issue, we assumed that we can count time approximately at the same speed, unless there is any actual argument against it. About claim 2: Things are a bit more complex. Martin says: \u201cOkay, so maybe you think that a clock jump is unrealistic, because you\u2019re very confident in having correctly configured NTP to only ever slew the clock.\u201d (Yep we agree here ;-) he continues and says\u2026) \u201cIn that case, let\u2019s look at an example of how a process pause may cause the algorithm to fail: Client 1 requests lock on nodes A, B, C, D, E. While the responses to client 1 are in flight, client 1 goes into stop-the-world GC. Locks expire on all Redis nodes. Client 2 acquires lock on nodes A, B, C, D, E. Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully acquired the lock (they were held in client 1\u2019s kernel network buffers while the process was paused). Clients 1 and 2 now both believe they hold the lock.\u201d If you read the Redlock specification, that I hadn't touched for months, you can see the steps to acquire the lock are: Get the current time. \u2026 All the steps needed to acquire the lock \u2026 Get the current time, again. Check if we are already out of time, or if we acquired the lock fast enough. Do some work with your lock. Note steps 1 and 3. Whatever delay happens in the network or in the processes involved, after acquiring the majority we check again that we are not out of time. The delay can only happen after steps 3, resulting into the lock to be considered ok while actually expired, that is, we are back at the first problem Martin identified of distributed locks where the client fails to stop working to the shared resource before the lock validity expires. Let me tell again how this problem is common with all the distributed locks implementations , and how the token as a solution is both unrealistic and can be used with Redlock as well. Note that whatever happens between 1 and 3, you can add the network delays you want, the lock will always be considered not valid if too much time elapsed, so Redlock looks completely immune from messages that have unbound delays between processes. It was designed with this goal in mind, and I cannot see how the above race condition could happen. Yet Martin's blog post was also reviewed by multiple DS experts, so I\u2019m not sure if I\u2019m missing something here or simply the way Redlock works was overlooked simultaneously by many. I\u2019ll be happy to receive some clarification about this. The above also addresses \u201cprocess pauses\u201d concern number 3. Pauses during the process of acquiring the lock don\u2019t have effects on the algorithm's correctness. They can however, affect the ability of a client to make work within the specified lock time to live, as with any other distributed lock with auto release, as already covered above.","title":"Network delays &amp; co"},{"location":"blog/seckill/is_redlock_safe/#digression-about-network-delays","text":"Just a quick note. In server-side implementations of a distributed lock with auto-release, the client may ask to acquire a lock, the server may allow the client to do so, but the process can stop into a GC pause or the network may be slow or whatever, so the client may receive the \"OK, the lock is your\" too late, when the lock is already expired. However you can do a lot to avoid your process sleeping for a long time, and you can't do much to avoid network delays, so the steps to check the time before/after the lock is acquired, to see how much time is left, should actually be common practice even when using other systems implementing locks with an expiry.","title":"Digression about network delays"},{"location":"blog/seckill/is_redlock_safe/#fsync-or-not","text":"At some point Martin talks about the fact that Redlock uses delayed restarts of nodes. This requires, again, the ability to be able to wait more or less a specified amount of time, as covered above. Useless to repeat the same things again. However what is important about this is that, this step is optional. You could configure each Redis node to fsync at every operation, so that when the client receives the reply, it knows the lock was already persisted on disk. This is how most other systems providing strong guarantees work. The very interesting thing about Redlock is that you can opt-out any disk involvement at all by implementing delayed restarts. This means it\u2019s possible to process hundreds of thousands locks per second with a few Redis instances, which is something impossible to obtain with other systems.","title":"Fsync or not?"},{"location":"blog/seckill/is_redlock_safe/#gps-units-versus-the-local-computer-clock","text":"Returning to the system model, one thing that makes Redlock system model practical is that you can assume a process to never be partitioned with the system clock. Note that this is different compared to other semi synchronous models where GPS units are used, because there are two non obvious partitions that may happen in this case: The GPS is partitioned away from the GPS network, so it can\u2019t acquire a fix. The process and the GPS are not able to exchange messages or there are delays in the messages exchanged. The above problems may result into a liveness or safety violation depending on how the system is orchestrated (safety issues only happen if there is a design error, for example if the GPS updates the system time asynchronously so that, when the GPS does not work, the absolute time error may go over the maximum bound). The Redlock system model does not have these complexities nor requires additional hardware, just the computer clock, and even a very cheap clock with all the obvious biases due to the crystal temperature and other things influencing the precision.","title":"GPS units versus the local computer clock"},{"location":"blog/seckill/is_redlock_safe/#conclusions","text":"I think Martin has a point about the monotonic API, Redis and Redlock implementations should use it to avoid issues due to the system clock being altered. However I can\u2019t identify other points of the analysis affecting Redlock safety, as explained above, nor do I find his final conclusions that people should not use Redlock when the mutual exclusion guarantee is needed, justified. It would be great to both receive more feedbacks from experts and to test the algorithm with Jepsen, or similar tools, to accumulate more data. A big thank you to the friends of mine that helped me to review this post. blog comments powered by Disqus","title":"Conclusions"},{"location":"blog/seckill/nodejs-case/","text":"\u5728\u4e00\u4e9b\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u3001\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b\u4e2d\uff0c\u5982\u679c\u5bf9\u540c\u4e00\u8d44\u6e90\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u907f\u514d\u4e0d\u4e86\u7684\u4e00\u4e2a\u5c31\u662f\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u901a\u8fc7\u5f15\u5165\u5206\u5e03\u5f0f\u9501\u8fd9\u4e00\u6982\u5ff5\uff0c\u53ef\u4ee5\u89e3\u51b3\u6570\u636e\u4e00\u81f4\u6027\u95ee\u9898\u3002 \u4f5c\u8005\u7b80\u4ecb\uff1a\u4e94\u6708\u541b\uff0cNodejs Developer\uff0c\u6155\u8bfe\u7f51\u8ba4\u8bc1\u4f5c\u8005\uff0c\u70ed\u7231\u6280\u672f\u3001\u559c\u6b22\u5206\u4eab\u7684 90 \u540e\u9752\u5e74\uff0c\u6b22\u8fce\u5173\u6ce8 Nodejs \u6280\u672f\u6808 \u548c Github \u5f00\u6e90\u9879\u76ee https://www.nodejs.red \u8ba4\u8bc6\u7ebf\u7a0b\u3001\u8fdb\u7a0b\u3001\u5206\u5e03\u5f0f\u9501 \u7ebf\u7a0b\u9501 \uff1a\u5355\u7ebf\u7a0b\u7f16\u7a0b\u6a21\u5f0f\u4e0b\u8bf7\u6c42\u662f\u987a\u5e8f\u7684\uff0c\u4e00\u4e2a\u597d\u5904\u662f\u4e0d\u9700\u8981\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u3001\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u56e0\u6b64\u5f53\u4f60\u8fdb\u884c Node.js \u7f16\u7a0b\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u53bb\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 \u90a3\u4e48\u591a\u7ebf\u7a0b\u7f16\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u4f8b\u5982 Java \u4f60\u53ef\u80fd\u5f88\u719f\u6089\u4e00\u4e2a\u8bcd synchronized\uff0c\u901a\u5e38\u4e5f\u662f Java \u4e2d\u89e3\u51b3\u5e76\u53d1\u7f16\u7a0b\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c synchronized \u53ef\u4ee5\u4fdd\u8bc1\u5728\u540c\u4e00\u65f6\u523b\u4ec5\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u67d0\u4e2a\u65b9\u6cd5\u6216\u67d0\u5757\u4ee3\u7801\u3002 \u8fdb\u7a0b\u9501 \uff1a\u4e00\u4e2a\u670d\u52a1\u90e8\u7f72\u4e8e\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u540c\u65f6\u5f00\u542f\u591a\u4e2a\u8fdb\u7a0b\uff0cNode.js \u7f16\u7a0b\u4e2d\u4e3a\u4e86\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\uff0c\u6839\u636e CPU \u7684\u6838\u5fc3\u6570\u53ef\u4ee5\u5f00\u542f\u591a\u8fdb\u7a0b\u6a21\u5f0f\uff0c \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u64cd\u4f5c\u8fd8\u662f\u4f1a\u9047\u5230\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u53e6\u5916\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5173\u4e8e\u8fdb\u7a0b\u9501\u901a\u8fc7 Java \u4e2d\u7684 synchronized \u4e5f\u5f88\u96be\u53bb\u89e3\u51b3\uff0csynchronized \u4ec5\u5c40\u9650\u4e8e\u5728\u540c\u4e00\u4e2a JVM \u4e2d\u6709\u6548\u3002 \u5206\u5e03\u5f0f\u9501 \uff1a\u4e00\u4e2a\u670d\u52a1\u65e0\u8bba\u662f\u5355\u7ebf\u7a0b\u8fd8\u662f\u591a\u8fdb\u7a0b\u6a21\u5f0f\uff0c\u5f53\u591a\u673a\u90e8\u7f72\u3001\u5904\u4e8e\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u5bf9\u540c\u4e00\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c\u8fd8\u662f\u4f1a\u9762\u4e34\u540c\u6837\u7684\u95ee\u9898\u3002 \u6b64\u65f6\u5c31\u8981\u53bb\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\u5206\u5e03\u5f0f\u9501\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7531\u4e8e\u5148\u8bfb\u6570\u636e\u5728\u901a\u8fc7\u4e1a\u52a1\u903b\u8f91\u4fee\u6539\u4e4b\u540e\u8fdb\u884c SET \u64cd\u4f5c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u5f53\u591a\u4e2a\u5ba2\u6237\u7aef\u5bf9\u540c\u4e00\u8d44\u6e90\u8fdb\u884c\u5148\u8bfb\u540e\u5199\u64cd\u4f5c\u5c31\u4f1a\u5f15\u53d1\u5e76\u53d1\u95ee\u9898\uff0c \u8fd9\u65f6\u5c31\u8981\u5f15\u5165\u5206\u5e03\u5f0f\u9501\u53bb\u89e3\u51b3\uff0c\u901a\u5e38\u4e5f\u662f\u4e00\u4e2a\u5f88\u5e7f\u6cdb\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u57fa\u4e8e Redis \u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\u601d\u8def \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff1a\u6570\u636e\u5e93\u3001Redis\u3001Zookeeper\u3002\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f\u901a\u8fc7 Redis \u6765\u5b9e\u73b0\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\uff0c\u81f3\u5c11\u8981\u4fdd\u8bc1\u4e09\u4e2a\u7279\u6027\uff1a\u5b89\u5168\u6027\u3001\u6b7b\u9501\u3001\u5bb9\u9519\u3002 \u5b89\u5168\u6027 \uff1a\u6240\u8c13\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff0c\u7b2c\u4e00\u70b9\u8981\u505a\u7684\u662f\u4e0a\u9501\uff0c\u5728\u4efb\u610f\u65f6\u523b\u8981\u4fdd\u8bc1\u4ec5\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u8be5\u9501\u3002 \u6b7b\u9501 \uff1a\u9020\u6210\u6b7b\u9501\u53ef\u80fd\u662f\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u672c\u8be5\u91ca\u653e\u7684\u9501\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u56e0\u6b64\u5728\u4e0a\u9501\u7684\u65f6\u5019\u53ef\u4ee5\u540c\u6b65\u7684\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c \u5982\u679c\u7531\u4e8e\u5ba2\u6237\u7aef\u81ea\u5df1\u7684\u539f\u56e0\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u4e5f\u8981\u4fdd\u8bc1\u9501\u80fd\u591f\u81ea\u52a8\u91ca\u653e\u3002 \u5bb9\u9519 \uff1a\u5bb9\u9519\u662f\u5728\u591a\u8282\u70b9\u7684\u6a21\u5f0f\u4e0b\u9700\u8981\u8003\u8651\u7684\uff0c\u53ea\u8981\u80fd\u4fdd\u8bc1 N/2+1 \u8282\u70b9\u53ef\u7528\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u6210\u529f\u83b7\u53d6\u3001\u91ca\u653e\u9501\u3002 Redis \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0 \u5728 Redis \u7684\u5355\u8282\u70b9\u5b9e\u4f8b\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u8fd9\u91cc\u4f1a\u501f\u52a9\u4e00\u4e9b\u7b80\u5355\u7684 Lua \u811a\u672c\u6765\u5b9e\u73b0\u539f\u5b50\u6027\uff0c \u4e0d\u4e86\u89e3\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u6587\u7ae0 Node.js \u4e2d\u5b9e\u8df5 Redis Lua \u811a\u672c \u4e0a\u9501 \u4e0a\u9501\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u5148\u901a\u8fc7 setnx \u547d\u4ee4\u5360\u5751\uff0c\u4e3a\u4e86\u9632\u6b62\u6b7b\u9501\uff0c\u901a\u5e38\u5728\u5360\u5751\u4e4b\u540e\u8fd8\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4 expire \uff0c\u5982\u4e0b\u6240\u793a\uff1a Bash setnx key value expire key seconds \u4ee5\u4e0a\u547d\u4ee4\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u6027\u64cd\u4f5c\uff0c\u6240\u8c13\u539f\u5b50\u6027\u64cd\u4f5c\u662f\u6307\u547d\u4ee4\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5e76\u4e0d\u4f1a\u88ab\u5176\u5b83\u7684\u7ebf\u7a0b\u6216\u8005\u8bf7\u6c42\u6253\u65ad\uff0c \u4ee5\u4e0a\u5982\u679c setnx \u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u51fa\u73b0\u7f51\u7edc\u95ea\u65ad expire \u547d\u4ee4\u4fbf\u4e0d\u4f1a\u5f97\u5230\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4\u6b7b\u9501\u51fa\u73b0\u3002 \u4e5f\u8bb8\u4f60\u4f1a\u60f3\u5230\u4f7f\u7528\u4e8b\u7269\u6765\u89e3\u51b3\uff0c\u4f46\u662f\u4e8b\u7269\u6709\u4e2a\u7279\u70b9\uff0c\u8981\u4e48\u6210\u529f\u8981\u4e48\u5931\u8d25\uff0c\u90fd\u662f\u4e00\u53e3\u6c14\u6267\u884c\u5b8c\u6210\u7684\uff0c \u5728\u6211\u4eec\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c expire \u662f\u9700\u8981\u5148\u6839\u636e setnx \u7684\u7ed3\u679c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e\uff0c \u663e\u7136\u4e8b\u7269\u5728\u8fd9\u91cc\u662f\u884c\u4e0d\u901a\u7684\uff0c\u793e\u533a\u4e5f\u6709\u5f88\u591a\u5e93\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c \u73b0\u5728 Redis \u5b98\u65b9 2.8 \u7248\u672c\u4e4b\u540e\u652f\u6301 set \u547d\u4ee4\u4f20\u5165 setnx \u3001 expire \u6269\u5c55\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u6761\u547d\u4ee4\u4e00\u53e3\u6c14\u6267\u884c\uff0c\u907f\u514d\u4e86\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5982\u4e0b\u6240\u793a\uff1a value \uff1a\u5efa\u8bae\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u5728\u91ca\u653e\u9501\u7684\u65f6\u5019\u4f1a\u8fdb\u4e00\u6b65\u8bb2\u89e3 EX seconds \uff1a\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4 PX milliseconds \uff1a\u4e5f\u662f\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u4e0d\u4e00\u6837 NX|XX \uff1aNX \u540c setnx \u6548\u679c\u662f\u4e00\u6837\u7684 Bash set key value [ EX seconds ] [ PX milliseconds ] [ NX | XX ] \u91ca\u653e\u9501 \u91ca\u653e\u9501\u7684\u8fc7\u7a0b\u5c31\u662f\u5c06\u539f\u672c\u5360\u6709\u7684\u5751\u7ed9\u5220\u9664\u6389\uff0c\u4f46\u662f\u4e5f\u5e76\u4e0d\u80fd\u4ec5\u4ec5\u4f7f\u7528 del key \u5220\u9664\u6389\u5c31\u4e07\u4e8b\u5927\u5409\u4e86\uff0c \u8fd9\u6837\u5f88\u5bb9\u6613\u5220\u9664\u6389\u522b\u4eba\u7684\u9501\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u5ba2\u6237\u7aef A \u83b7\u53d6\u5230\u4e00\u628a key = name1 \u7684\u9501\uff082 \u79d2\u4e2d\uff09\uff0c \u7d27\u63a5\u7740\u5904\u7406\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u4f46\u662f\u5728\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u8fd9\u5757\u963b\u585e\u4e86\u8017\u65f6\u8d85\u8fc7\u4e86\u9501\u7684\u65f6\u95f4\uff0c\u9501\u662f\u4f1a\u81ea\u52a8\u88ab\u91ca\u653e\u7684\uff0c \u8fd9\u671f\u95f4\u8be5\u8d44\u6e90\u53c8\u88ab\u5ba2\u6237\u7aef B \u83b7\u53d6\u4e86 key = name1 \u7684\u9501\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef A \u5728\u81ea\u5df1\u7684\u4e1a\u52a1\u5904\u7406\u7ed3\u675f\u4e4b\u540e\u76f4\u63a5\u4f7f\u7528 del key \u547d\u4ee4\u5220\u9664\u4f1a\u628a\u5ba2\u6237\u7aef B \u7684\u9501\u7ed9\u91ca\u653e\u6389\u4e86\uff0c \u6240\u4ee5\u91ca\u653e\u9501\u7684\u65f6\u5019\u8981\u505a\u5230\u4ec5\u91ca\u653e\u81ea\u5df1\u5360\u6709\u7684\u9501\u3002 \u52a0\u9501\u7684\u8fc7\u7a0b\u4e2d\u5efa\u8bae\u628a value \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\u7684\u91ca\u653e\u9501\uff0c\u5728 del key \u4e4b\u524d\u5148\u5224\u65ad\u8fd9\u4e2a key \u5b58\u5728\u4e14 value \u7b49\u4e8e\u81ea\u5df1\u6307\u5b9a\u7684\u503c\u624d\u6267\u884c\u5220\u9664\u64cd\u4f5c\u3002 \u5224\u65ad\u548c\u5220\u9664\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u6b64\u5904\u4ecd\u9700\u501f\u52a9 Lua \u811a\u672c\u5b9e\u73b0\u3002 Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end Node.js \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501\u5b9e\u8df5 Redis \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501 Node.js \u5b9e\u8df5 \u4f7f\u7528 Node.js \u7684 Redis \u5ba2\u6237\u7aef\u4e3a ioredis\uff0c npm install ioredis -S \u5148\u5b89\u88c5\u8be5\u5305\u3002 \u521d\u59cb\u5316\u81ea\u5b9a\u4e49 RedisLock JavaScript class RedisLock { /** * \u521d\u59cb\u5316 RedisLock * @param {*} client * @param {*} options */ constructor ( client , options = {}) { if ( ! client ) { throw new Error ( \"client \u4e0d\u5b58\u5728\" ); } if ( client . status !== \"connecting\" ) { throw new Error ( \"client \u672a\u6b63\u5e38\u94fe\u63a5\" ); } this . lockLeaseTime = options . lockLeaseTime || 2 ; // \u9ed8\u8ba4\u9501\u8fc7\u671f\u65f6\u95f4 2 \u79d2 this . lockTimeout = options . lockTimeout || 5 ; // \u9ed8\u8ba4\u9501\u8d85\u65f6\u65f6\u95f4 5 \u79d2 this . expiryMode = options . expiryMode || \"EX\" ; this . setMode = options . setMode || \"NX\" ; this . client = client ; } } \u4e0a\u9501 \u901a\u8fc7 set \u547d\u4ee4\u4f20\u5165 setnx\u3001expire \u6269\u5c55\u53c2\u6570\u5f00\u59cb\u4e0a\u9501\u5360\u5751\uff0c\u4e0a\u9501\u6210\u529f\u8fd4\u56de\uff0c\u4e0a\u9501\u5931\u8d25\u8fdb\u884c\u91cd\u8bd5\uff0c\u5728 lockTimeout \u6307\u5b9a\u65f6\u95f4\u5185\u4ecd\u672a\u83b7\u53d6\u5230\u9501\uff0c\u5219\u83b7\u53d6\u9501\u5931\u8d25\u3002 JavaScript class RedisLock { /** * \u4e0a\u9501 * @param {*} key * @param {*} val * @param {*} expire */ async lock ( key , val , expire ) { const start = Date . now (); const self = this ; return ( async function intranetLock () { try { const result = await self . client . set ( key , val , self . expiryMode , expire || self . lockLeaseTime , self . setMode ); // \u4e0a\u9501\u6210\u529f if ( result === \"OK\" ) { console . log ( ` ${ key } ${ val } \u4e0a\u9501\u6210\u529f` ); return true ; } // \u9501\u8d85\u65f6 if ( Math . floor (( Date . now () - start ) / 1000 ) > self . lockTimeout ) { console . log ( ` ${ key } ${ val } \u4e0a\u9501\u91cd\u8bd5\u8d85\u65f6\u7ed3\u675f` ); return false ; } // \u5faa\u73af\u7b49\u5f85\u91cd\u8bd5 console . log ( ` ${ key } ${ val } \u7b49\u5f85\u91cd\u8bd5` ); await sleep ( 3000 ); console . log ( ` ${ key } ${ val } \u5f00\u59cb\u91cd\u8bd5` ); return intranetLock (); } catch ( err ) { throw new Error ( err ); } })(); } } \u91ca\u653e\u9501 \u91ca\u653e\u9501\u901a\u8fc7 redis.eval(script) \u6267\u884c\u6211\u4eec\u5b9a\u4e49\u7684 redis lua \u811a\u672c\u3002 JavaScript class RedisLock { /** * \u91ca\u653e\u9501 * @param {*} key * @param {*} val */ async unLock ( key , val ) { const self = this ; const script = \"if redis.call('get',KEYS[1]) == ARGV[1] then\" + \" return redis.call('del',KEYS[1]) \" + \"else\" + \" return 0 \" + \"end\" ; try { const result = await self . client . eval ( script , 1 , key , val ); if ( result === 1 ) { return true ; } return false ; } catch ( err ) { throw new Error ( err ); } } } \u6d4b\u8bd5 \u8fd9\u91cc\u4f7f\u7528\u4e86 uuid \u6765\u751f\u6210\u552f\u4e00 ID\uff0c\u8fd9\u4e2a\u968f\u673a\u6570 id \u53ea\u8981\u4fdd\u8bc1\u552f\u4e00\u4e0d\u7ba1\u7528\u54ea\u79cd\u65b9\u5f0f\u90fd\u53ef\u3002 JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const uuidv1 = require ( \"uuid/v1\" ); const redisLock = new RedisLock ( redis ); function sleep ( time ) { return new Promise (( resolve ) => { setTimeout ( function () { resolve (); }, time || 1000 ); }); } async function test ( key ) { try { const id = uuidv1 (); await redisLock . lock ( key , id , 20 ); await sleep ( 3000 ); const unLock = await redisLock . unLock ( key , id ); console . log ( \"unLock: \" , key , id , unLock ); } catch ( err ) { console . log ( \"\u4e0a\u9501\u5931\u8d25\" , err ); } } test ( \"name1\" ); test ( \"name1\" ); \u540c\u65f6\u8c03\u7528\u4e86\u4e24\u6b21 test \u65b9\u6cd5\u8fdb\u884c\u4e0a\u9501\uff0c\u53ea\u6709\u7b2c\u4e00\u4e2a\u662f\u6210\u529f\u7684\uff0c \u7b2c\u4e8c\u4e2a name1 26e02970-0532-11ea-b978-2160dffafa30 \u4e0a\u9501\u7684\u65f6\u5019\u53d1\u73b0 key = name1 \u5df2\u88ab\u5360\u5751\uff0c \u5f00\u59cb\u91cd\u8bd5\uff0c\u7531\u4e8e\u4ee5\u4e0a\u6d4b\u8bd5\u4e2d\u8bbe\u7f6e\u4e86 3 \u79d2\u949f\u4e4b\u540e\u81ea\u52a8\u91ca\u653e\u9501\uff0cname1 26e02970-0532-11ea-b978-2160dffafa30 \u5728\u7ecf\u8fc7\u4e24\u6b21\u91cd\u8bd5\u4e4b\u540e\u4e0a\u9501\u6210\u529f\u3002 JavaScript name1 26e00260 - 0532 - 11 ea - b978 - 2160 dffafa30 \u4e0a\u9501\u6210\u529f name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u7b49\u5f85\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u5f00\u59cb\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u7b49\u5f85\u91cd\u8bd5 unLock : name1 26e00260 - 0532 - 11 ea - b978 - 2160 dffafa30 true name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u5f00\u59cb\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u4e0a\u9501\u6210\u529f unLock : name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 true \u6e90\u7801\u5730\u5740 https://github.com/Q-Angelo/project-training/tree/master/redis/lock/redislock.js Redlock \u7b97\u6cd5 \u4ee5\u4e0a\u662f\u4f7f\u7528 Node.js \u5bf9 Redis \u5206\u5e03\u5f0f\u9501\u7684\u4e00\u4e2a\u7b80\u5355\u5b9e\u73b0\uff0c\u5728\u5355\u5b9e\u4f8b\u4e2d\u662f\u53ef\u7528\u7684\uff0c\u5f53\u6211\u4eec\u5bf9 Redis \u8282\u70b9\u505a\u4e00\u4e2a\u6269\u5c55\uff0c\u5728 Sentinel\u3001Redis Cluster \u4e0b\u4f1a\u600e\u4e48\u6837\u5462\uff1f \u4ee5\u4e0b\u662f\u4e00\u4e2a Redis Sentinel \u7684\u6545\u969c\u81ea\u52a8\u8f6c\u79fb\u793a\u4f8b\u56fe\uff0c\u5047\u8bbe\u6211\u4eec\u5ba2\u6237\u7aef A \u5728\u4e3b\u8282\u70b9 192.168.6.128 \u83b7\u53d6\u5230\u9501\u4e4b\u540e\uff0c \u4e3b\u8282\u70b9\u8fd8\u672a\u6765\u5f97\u53ca\u540c\u6b65\u4fe1\u606f\u5230\u4ece\u8282\u70b9\u5c31\u6302\u6389\u4e86\uff0c\u8fd9\u65f6\u5019 Sentinel \u4f1a\u9009\u4e3e\u53e6\u5916\u4e00\u4e2a\u4ece\u8282\u70b9\u505a\u4e3a\u4e3b\u8282\u70b9\uff0c \u90a3\u4e48\u5ba2\u6237\u7aef B \u6b64\u65f6\u4e5f\u6765\u7533\u8bf7\u76f8\u540c\u7684\u9501\uff0c\u5c31\u4f1a\u51fa\u73b0\u540c\u6837\u4e00\u628a\u9501\u88ab\u591a\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\uff0c\u5bf9\u6570\u636e\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u6709\u5f88\u9ad8\u7684\u8981\u6c42\u8fd8\u662f\u4e0d\u884c\u7684\u3002 Redlock \u4ecb\u7ecd \u9274\u4e8e\u8fd9\u4e9b\u95ee\u9898\uff0cRedis \u5b98\u7f51 redis.io/topics/distlock \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528 Redis \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u89c4\u8303\u7b97\u6cd5 Redlock\uff0c \u4e2d\u6587\u7ffb\u8bd1\u7248\u53c2\u8003 http://redis.cn/topics/distlock.html Redlock \u5728\u4e0a\u8ff0\u6587\u6863\u4e5f\u6709\u63cf\u8ff0\uff0c\u8fd9\u91cc\u7b80\u5355\u505a\u4e2a\u603b\u7ed3\uff1aRedlock \u5728 Redis \u5355\u5b9e\u4f8b\u6216\u591a\u5b9e\u4f8b\u4e2d\u63d0\u4f9b\u4e86\u5f3a\u6709\u529b\u7684\u4fdd\u969c\uff0c \u672c\u8eab\u5177\u5907\u5bb9\u9519\u80fd\u529b\uff0c\u5b83\u4f1a\u4ece N \u4e2a\u5b9e\u4f8b\u4f7f\u7528\u76f8\u540c\u7684 key\u3001\u968f\u673a\u503c\u5c1d\u8bd5 set key value [EX seconds] [PX milliseconds] [NX|XX] \u547d\u4ee4\u53bb\u83b7\u53d6\u9501\uff0c \u5728\u6709\u6548\u65f6\u95f4\u5185\u81f3\u5c11 N/2+1 \u4e2a Redis \u5b9e\u4f8b\u53d6\u5230\u9501\uff0c\u6b64\u65f6\u5c31\u8ba4\u4e3a\u53d6\u9501\u6210\u529f\uff0c\u5426\u5219\u53d6\u9501\u5931\u8d25\uff0c\u5931\u8d25\u60c5\u51b5\u4e0b\u5ba2\u6237\u7aef\u5e94\u8be5\u5728\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u4e0a\u8fdb\u884c\u89e3\u9501\u3002 Node.js \u4e2d\u5e94\u7528 Redlock node-redlock \u662f Node.js \u7248\u7684 Redlock \u5b9e\u73b0\uff0c \u4f7f\u7528\u8d77\u6765\u4e5f\u5f88\u7b80\u5355\uff0c\u5f00\u59cb\u4e4b\u524d\u5148\u5b89\u88c5 ioredis\u3001redlock \u5305\u3002 Bash npm i ioredis -S npm i redlock -S \u7f16\u7801 JavaScript const Redis = require ( \"ioredis\" ); const client1 = new Redis ( 6379 , \"127.0.0.1\" ); const Redlock = require ( \"redlock\" ); const redlock = new Redlock ([ client1 ], { retryDelay : 200 , // time in ms retryCount : 5 , }); // \u591a\u4e2a Redis \u5b9e\u4f8b // const redlock = new Redlock( // [new Redis(6379, \"127.0.0.1\"), new Redis(6379, \"127.0.0.2\"), new Redis(6379, \"127.0.0.3\")], // ) async function test ( key , ttl , client ) { try { const lock = await redlock . lock ( key , ttl ); console . log ( client , lock . value ); // do something ... // return lock.unlock(); } catch ( err ) { console . error ( client , err ); } } test ( \"name1\" , 10000 , \"client1\" ); test ( \"name1\" , 10000 , \"client2\" ); \u6d4b\u8bd5 \u5bf9\u540c\u4e00\u4e2a key name1 \u4e24\u6b21\u4e0a\u9501\uff0c\u7531\u4e8e client1 \u5148\u53d6\u5230\u4e86\u9501\uff0cclient2 \u65e0\u6cd5\u83b7\u53d6\u9501\uff0c \u91cd\u8bd5 5 \u6b21\u4e4b\u540e\u62a5\u9519 LockError: Exceeded 5 attempts to lock the resource \"name1\".","title":"Node.js \u4e2d\u5b9e\u8df5\u57fa\u4e8e Redis \u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0"},{"location":"blog/seckill/nodejs-case/#_1","text":"\u7ebf\u7a0b\u9501 \uff1a\u5355\u7ebf\u7a0b\u7f16\u7a0b\u6a21\u5f0f\u4e0b\u8bf7\u6c42\u662f\u987a\u5e8f\u7684\uff0c\u4e00\u4e2a\u597d\u5904\u662f\u4e0d\u9700\u8981\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u3001\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u56e0\u6b64\u5f53\u4f60\u8fdb\u884c Node.js \u7f16\u7a0b\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u53bb\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 \u90a3\u4e48\u591a\u7ebf\u7a0b\u7f16\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u4f8b\u5982 Java \u4f60\u53ef\u80fd\u5f88\u719f\u6089\u4e00\u4e2a\u8bcd synchronized\uff0c\u901a\u5e38\u4e5f\u662f Java \u4e2d\u89e3\u51b3\u5e76\u53d1\u7f16\u7a0b\u6700\u7b80\u5355\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c synchronized \u53ef\u4ee5\u4fdd\u8bc1\u5728\u540c\u4e00\u65f6\u523b\u4ec5\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u67d0\u4e2a\u65b9\u6cd5\u6216\u67d0\u5757\u4ee3\u7801\u3002 \u8fdb\u7a0b\u9501 \uff1a\u4e00\u4e2a\u670d\u52a1\u90e8\u7f72\u4e8e\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u540c\u65f6\u5f00\u542f\u591a\u4e2a\u8fdb\u7a0b\uff0cNode.js \u7f16\u7a0b\u4e2d\u4e3a\u4e86\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\uff0c\u6839\u636e CPU \u7684\u6838\u5fc3\u6570\u53ef\u4ee5\u5f00\u542f\u591a\u8fdb\u7a0b\u6a21\u5f0f\uff0c \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u5bf9\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u64cd\u4f5c\u8fd8\u662f\u4f1a\u9047\u5230\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff0c\u53e6\u5916\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5173\u4e8e\u8fdb\u7a0b\u9501\u901a\u8fc7 Java \u4e2d\u7684 synchronized \u4e5f\u5f88\u96be\u53bb\u89e3\u51b3\uff0csynchronized \u4ec5\u5c40\u9650\u4e8e\u5728\u540c\u4e00\u4e2a JVM \u4e2d\u6709\u6548\u3002 \u5206\u5e03\u5f0f\u9501 \uff1a\u4e00\u4e2a\u670d\u52a1\u65e0\u8bba\u662f\u5355\u7ebf\u7a0b\u8fd8\u662f\u591a\u8fdb\u7a0b\u6a21\u5f0f\uff0c\u5f53\u591a\u673a\u90e8\u7f72\u3001\u5904\u4e8e\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u5bf9\u540c\u4e00\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c\u8fd8\u662f\u4f1a\u9762\u4e34\u540c\u6837\u7684\u95ee\u9898\u3002 \u6b64\u65f6\u5c31\u8981\u53bb\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\u5206\u5e03\u5f0f\u9501\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7531\u4e8e\u5148\u8bfb\u6570\u636e\u5728\u901a\u8fc7\u4e1a\u52a1\u903b\u8f91\u4fee\u6539\u4e4b\u540e\u8fdb\u884c SET \u64cd\u4f5c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\uff0c\u5f53\u591a\u4e2a\u5ba2\u6237\u7aef\u5bf9\u540c\u4e00\u8d44\u6e90\u8fdb\u884c\u5148\u8bfb\u540e\u5199\u64cd\u4f5c\u5c31\u4f1a\u5f15\u53d1\u5e76\u53d1\u95ee\u9898\uff0c \u8fd9\u65f6\u5c31\u8981\u5f15\u5165\u5206\u5e03\u5f0f\u9501\u53bb\u89e3\u51b3\uff0c\u901a\u5e38\u4e5f\u662f\u4e00\u4e2a\u5f88\u5e7f\u6cdb\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"\u8ba4\u8bc6\u7ebf\u7a0b\u3001\u8fdb\u7a0b\u3001\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/nodejs-case/#redis","text":"\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff1a\u6570\u636e\u5e93\u3001Redis\u3001Zookeeper\u3002\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f\u901a\u8fc7 Redis \u6765\u5b9e\u73b0\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\uff0c\u81f3\u5c11\u8981\u4fdd\u8bc1\u4e09\u4e2a\u7279\u6027\uff1a\u5b89\u5168\u6027\u3001\u6b7b\u9501\u3001\u5bb9\u9519\u3002 \u5b89\u5168\u6027 \uff1a\u6240\u8c13\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff0c\u7b2c\u4e00\u70b9\u8981\u505a\u7684\u662f\u4e0a\u9501\uff0c\u5728\u4efb\u610f\u65f6\u523b\u8981\u4fdd\u8bc1\u4ec5\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\u8be5\u9501\u3002 \u6b7b\u9501 \uff1a\u9020\u6210\u6b7b\u9501\u53ef\u80fd\u662f\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u672c\u8be5\u91ca\u653e\u7684\u9501\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u56e0\u6b64\u5728\u4e0a\u9501\u7684\u65f6\u5019\u53ef\u4ee5\u540c\u6b65\u7684\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c \u5982\u679c\u7531\u4e8e\u5ba2\u6237\u7aef\u81ea\u5df1\u7684\u539f\u56e0\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u4e5f\u8981\u4fdd\u8bc1\u9501\u80fd\u591f\u81ea\u52a8\u91ca\u653e\u3002 \u5bb9\u9519 \uff1a\u5bb9\u9519\u662f\u5728\u591a\u8282\u70b9\u7684\u6a21\u5f0f\u4e0b\u9700\u8981\u8003\u8651\u7684\uff0c\u53ea\u8981\u80fd\u4fdd\u8bc1 N/2+1 \u8282\u70b9\u53ef\u7528\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u6210\u529f\u83b7\u53d6\u3001\u91ca\u653e\u9501\u3002","title":"\u57fa\u4e8e Redis \u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\u601d\u8def"},{"location":"blog/seckill/nodejs-case/#redis_1","text":"\u5728 Redis \u7684\u5355\u8282\u70b9\u5b9e\u4f8b\u4e0b\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u8fd9\u91cc\u4f1a\u501f\u52a9\u4e00\u4e9b\u7b80\u5355\u7684 Lua \u811a\u672c\u6765\u5b9e\u73b0\u539f\u5b50\u6027\uff0c \u4e0d\u4e86\u89e3\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684\u6587\u7ae0 Node.js \u4e2d\u5b9e\u8df5 Redis Lua \u811a\u672c","title":"Redis \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0"},{"location":"blog/seckill/nodejs-case/#_2","text":"\u4e0a\u9501\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u5148\u901a\u8fc7 setnx \u547d\u4ee4\u5360\u5751\uff0c\u4e3a\u4e86\u9632\u6b62\u6b7b\u9501\uff0c\u901a\u5e38\u5728\u5360\u5751\u4e4b\u540e\u8fd8\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u8fc7\u671f\u65f6\u95f4 expire \uff0c\u5982\u4e0b\u6240\u793a\uff1a Bash setnx key value expire key seconds \u4ee5\u4e0a\u547d\u4ee4\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u6027\u64cd\u4f5c\uff0c\u6240\u8c13\u539f\u5b50\u6027\u64cd\u4f5c\u662f\u6307\u547d\u4ee4\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5e76\u4e0d\u4f1a\u88ab\u5176\u5b83\u7684\u7ebf\u7a0b\u6216\u8005\u8bf7\u6c42\u6253\u65ad\uff0c \u4ee5\u4e0a\u5982\u679c setnx \u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u51fa\u73b0\u7f51\u7edc\u95ea\u65ad expire \u547d\u4ee4\u4fbf\u4e0d\u4f1a\u5f97\u5230\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4\u6b7b\u9501\u51fa\u73b0\u3002 \u4e5f\u8bb8\u4f60\u4f1a\u60f3\u5230\u4f7f\u7528\u4e8b\u7269\u6765\u89e3\u51b3\uff0c\u4f46\u662f\u4e8b\u7269\u6709\u4e2a\u7279\u70b9\uff0c\u8981\u4e48\u6210\u529f\u8981\u4e48\u5931\u8d25\uff0c\u90fd\u662f\u4e00\u53e3\u6c14\u6267\u884c\u5b8c\u6210\u7684\uff0c \u5728\u6211\u4eec\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c expire \u662f\u9700\u8981\u5148\u6839\u636e setnx \u7684\u7ed3\u679c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e\uff0c \u663e\u7136\u4e8b\u7269\u5728\u8fd9\u91cc\u662f\u884c\u4e0d\u901a\u7684\uff0c\u793e\u533a\u4e5f\u6709\u5f88\u591a\u5e93\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c \u73b0\u5728 Redis \u5b98\u65b9 2.8 \u7248\u672c\u4e4b\u540e\u652f\u6301 set \u547d\u4ee4\u4f20\u5165 setnx \u3001 expire \u6269\u5c55\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u6761\u547d\u4ee4\u4e00\u53e3\u6c14\u6267\u884c\uff0c\u907f\u514d\u4e86\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5982\u4e0b\u6240\u793a\uff1a value \uff1a\u5efa\u8bae\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u5728\u91ca\u653e\u9501\u7684\u65f6\u5019\u4f1a\u8fdb\u4e00\u6b65\u8bb2\u89e3 EX seconds \uff1a\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4 PX milliseconds \uff1a\u4e5f\u662f\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u5355\u4f4d\u4e0d\u4e00\u6837 NX|XX \uff1aNX \u540c setnx \u6548\u679c\u662f\u4e00\u6837\u7684 Bash set key value [ EX seconds ] [ PX milliseconds ] [ NX | XX ]","title":"\u4e0a\u9501"},{"location":"blog/seckill/nodejs-case/#_3","text":"\u91ca\u653e\u9501\u7684\u8fc7\u7a0b\u5c31\u662f\u5c06\u539f\u672c\u5360\u6709\u7684\u5751\u7ed9\u5220\u9664\u6389\uff0c\u4f46\u662f\u4e5f\u5e76\u4e0d\u80fd\u4ec5\u4ec5\u4f7f\u7528 del key \u5220\u9664\u6389\u5c31\u4e07\u4e8b\u5927\u5409\u4e86\uff0c \u8fd9\u6837\u5f88\u5bb9\u6613\u5220\u9664\u6389\u522b\u4eba\u7684\u9501\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u5ba2\u6237\u7aef A \u83b7\u53d6\u5230\u4e00\u628a key = name1 \u7684\u9501\uff082 \u79d2\u4e2d\uff09\uff0c \u7d27\u63a5\u7740\u5904\u7406\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u4f46\u662f\u5728\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u8fd9\u5757\u963b\u585e\u4e86\u8017\u65f6\u8d85\u8fc7\u4e86\u9501\u7684\u65f6\u95f4\uff0c\u9501\u662f\u4f1a\u81ea\u52a8\u88ab\u91ca\u653e\u7684\uff0c \u8fd9\u671f\u95f4\u8be5\u8d44\u6e90\u53c8\u88ab\u5ba2\u6237\u7aef B \u83b7\u53d6\u4e86 key = name1 \u7684\u9501\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef A \u5728\u81ea\u5df1\u7684\u4e1a\u52a1\u5904\u7406\u7ed3\u675f\u4e4b\u540e\u76f4\u63a5\u4f7f\u7528 del key \u547d\u4ee4\u5220\u9664\u4f1a\u628a\u5ba2\u6237\u7aef B \u7684\u9501\u7ed9\u91ca\u653e\u6389\u4e86\uff0c \u6240\u4ee5\u91ca\u653e\u9501\u7684\u65f6\u5019\u8981\u505a\u5230\u4ec5\u91ca\u653e\u81ea\u5df1\u5360\u6709\u7684\u9501\u3002 \u52a0\u9501\u7684\u8fc7\u7a0b\u4e2d\u5efa\u8bae\u628a value \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\u7684\u91ca\u653e\u9501\uff0c\u5728 del key \u4e4b\u524d\u5148\u5224\u65ad\u8fd9\u4e2a key \u5b58\u5728\u4e14 value \u7b49\u4e8e\u81ea\u5df1\u6307\u5b9a\u7684\u503c\u624d\u6267\u884c\u5220\u9664\u64cd\u4f5c\u3002 \u5224\u65ad\u548c\u5220\u9664\u4e0d\u662f\u4e00\u4e2a\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u6b64\u5904\u4ecd\u9700\u501f\u52a9 Lua \u811a\u672c\u5b9e\u73b0\u3002 Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end","title":"\u91ca\u653e\u9501"},{"location":"blog/seckill/nodejs-case/#nodejs","text":"Redis \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501 Node.js \u5b9e\u8df5 \u4f7f\u7528 Node.js \u7684 Redis \u5ba2\u6237\u7aef\u4e3a ioredis\uff0c npm install ioredis -S \u5148\u5b89\u88c5\u8be5\u5305\u3002","title":"Node.js \u5355\u5b9e\u4f8b\u5206\u5e03\u5f0f\u9501\u5b9e\u8df5"},{"location":"blog/seckill/nodejs-case/#redislock","text":"JavaScript class RedisLock { /** * \u521d\u59cb\u5316 RedisLock * @param {*} client * @param {*} options */ constructor ( client , options = {}) { if ( ! client ) { throw new Error ( \"client \u4e0d\u5b58\u5728\" ); } if ( client . status !== \"connecting\" ) { throw new Error ( \"client \u672a\u6b63\u5e38\u94fe\u63a5\" ); } this . lockLeaseTime = options . lockLeaseTime || 2 ; // \u9ed8\u8ba4\u9501\u8fc7\u671f\u65f6\u95f4 2 \u79d2 this . lockTimeout = options . lockTimeout || 5 ; // \u9ed8\u8ba4\u9501\u8d85\u65f6\u65f6\u95f4 5 \u79d2 this . expiryMode = options . expiryMode || \"EX\" ; this . setMode = options . setMode || \"NX\" ; this . client = client ; } }","title":"\u521d\u59cb\u5316\u81ea\u5b9a\u4e49 RedisLock"},{"location":"blog/seckill/nodejs-case/#_4","text":"\u901a\u8fc7 set \u547d\u4ee4\u4f20\u5165 setnx\u3001expire \u6269\u5c55\u53c2\u6570\u5f00\u59cb\u4e0a\u9501\u5360\u5751\uff0c\u4e0a\u9501\u6210\u529f\u8fd4\u56de\uff0c\u4e0a\u9501\u5931\u8d25\u8fdb\u884c\u91cd\u8bd5\uff0c\u5728 lockTimeout \u6307\u5b9a\u65f6\u95f4\u5185\u4ecd\u672a\u83b7\u53d6\u5230\u9501\uff0c\u5219\u83b7\u53d6\u9501\u5931\u8d25\u3002 JavaScript class RedisLock { /** * \u4e0a\u9501 * @param {*} key * @param {*} val * @param {*} expire */ async lock ( key , val , expire ) { const start = Date . now (); const self = this ; return ( async function intranetLock () { try { const result = await self . client . set ( key , val , self . expiryMode , expire || self . lockLeaseTime , self . setMode ); // \u4e0a\u9501\u6210\u529f if ( result === \"OK\" ) { console . log ( ` ${ key } ${ val } \u4e0a\u9501\u6210\u529f` ); return true ; } // \u9501\u8d85\u65f6 if ( Math . floor (( Date . now () - start ) / 1000 ) > self . lockTimeout ) { console . log ( ` ${ key } ${ val } \u4e0a\u9501\u91cd\u8bd5\u8d85\u65f6\u7ed3\u675f` ); return false ; } // \u5faa\u73af\u7b49\u5f85\u91cd\u8bd5 console . log ( ` ${ key } ${ val } \u7b49\u5f85\u91cd\u8bd5` ); await sleep ( 3000 ); console . log ( ` ${ key } ${ val } \u5f00\u59cb\u91cd\u8bd5` ); return intranetLock (); } catch ( err ) { throw new Error ( err ); } })(); } }","title":"\u4e0a\u9501"},{"location":"blog/seckill/nodejs-case/#_5","text":"\u91ca\u653e\u9501\u901a\u8fc7 redis.eval(script) \u6267\u884c\u6211\u4eec\u5b9a\u4e49\u7684 redis lua \u811a\u672c\u3002 JavaScript class RedisLock { /** * \u91ca\u653e\u9501 * @param {*} key * @param {*} val */ async unLock ( key , val ) { const self = this ; const script = \"if redis.call('get',KEYS[1]) == ARGV[1] then\" + \" return redis.call('del',KEYS[1]) \" + \"else\" + \" return 0 \" + \"end\" ; try { const result = await self . client . eval ( script , 1 , key , val ); if ( result === 1 ) { return true ; } return false ; } catch ( err ) { throw new Error ( err ); } } }","title":"\u91ca\u653e\u9501"},{"location":"blog/seckill/nodejs-case/#_6","text":"\u8fd9\u91cc\u4f7f\u7528\u4e86 uuid \u6765\u751f\u6210\u552f\u4e00 ID\uff0c\u8fd9\u4e2a\u968f\u673a\u6570 id \u53ea\u8981\u4fdd\u8bc1\u552f\u4e00\u4e0d\u7ba1\u7528\u54ea\u79cd\u65b9\u5f0f\u90fd\u53ef\u3002 JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const uuidv1 = require ( \"uuid/v1\" ); const redisLock = new RedisLock ( redis ); function sleep ( time ) { return new Promise (( resolve ) => { setTimeout ( function () { resolve (); }, time || 1000 ); }); } async function test ( key ) { try { const id = uuidv1 (); await redisLock . lock ( key , id , 20 ); await sleep ( 3000 ); const unLock = await redisLock . unLock ( key , id ); console . log ( \"unLock: \" , key , id , unLock ); } catch ( err ) { console . log ( \"\u4e0a\u9501\u5931\u8d25\" , err ); } } test ( \"name1\" ); test ( \"name1\" ); \u540c\u65f6\u8c03\u7528\u4e86\u4e24\u6b21 test \u65b9\u6cd5\u8fdb\u884c\u4e0a\u9501\uff0c\u53ea\u6709\u7b2c\u4e00\u4e2a\u662f\u6210\u529f\u7684\uff0c \u7b2c\u4e8c\u4e2a name1 26e02970-0532-11ea-b978-2160dffafa30 \u4e0a\u9501\u7684\u65f6\u5019\u53d1\u73b0 key = name1 \u5df2\u88ab\u5360\u5751\uff0c \u5f00\u59cb\u91cd\u8bd5\uff0c\u7531\u4e8e\u4ee5\u4e0a\u6d4b\u8bd5\u4e2d\u8bbe\u7f6e\u4e86 3 \u79d2\u949f\u4e4b\u540e\u81ea\u52a8\u91ca\u653e\u9501\uff0cname1 26e02970-0532-11ea-b978-2160dffafa30 \u5728\u7ecf\u8fc7\u4e24\u6b21\u91cd\u8bd5\u4e4b\u540e\u4e0a\u9501\u6210\u529f\u3002 JavaScript name1 26e00260 - 0532 - 11 ea - b978 - 2160 dffafa30 \u4e0a\u9501\u6210\u529f name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u7b49\u5f85\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u5f00\u59cb\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u7b49\u5f85\u91cd\u8bd5 unLock : name1 26e00260 - 0532 - 11 ea - b978 - 2160 dffafa30 true name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u5f00\u59cb\u91cd\u8bd5 name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 \u4e0a\u9501\u6210\u529f unLock : name1 26e02970 - 0532 - 11 ea - b978 - 2160 dffafa30 true","title":"\u6d4b\u8bd5"},{"location":"blog/seckill/nodejs-case/#_7","text":"https://github.com/Q-Angelo/project-training/tree/master/redis/lock/redislock.js","title":"\u6e90\u7801\u5730\u5740"},{"location":"blog/seckill/nodejs-case/#redlock","text":"\u4ee5\u4e0a\u662f\u4f7f\u7528 Node.js \u5bf9 Redis \u5206\u5e03\u5f0f\u9501\u7684\u4e00\u4e2a\u7b80\u5355\u5b9e\u73b0\uff0c\u5728\u5355\u5b9e\u4f8b\u4e2d\u662f\u53ef\u7528\u7684\uff0c\u5f53\u6211\u4eec\u5bf9 Redis \u8282\u70b9\u505a\u4e00\u4e2a\u6269\u5c55\uff0c\u5728 Sentinel\u3001Redis Cluster \u4e0b\u4f1a\u600e\u4e48\u6837\u5462\uff1f \u4ee5\u4e0b\u662f\u4e00\u4e2a Redis Sentinel \u7684\u6545\u969c\u81ea\u52a8\u8f6c\u79fb\u793a\u4f8b\u56fe\uff0c\u5047\u8bbe\u6211\u4eec\u5ba2\u6237\u7aef A \u5728\u4e3b\u8282\u70b9 192.168.6.128 \u83b7\u53d6\u5230\u9501\u4e4b\u540e\uff0c \u4e3b\u8282\u70b9\u8fd8\u672a\u6765\u5f97\u53ca\u540c\u6b65\u4fe1\u606f\u5230\u4ece\u8282\u70b9\u5c31\u6302\u6389\u4e86\uff0c\u8fd9\u65f6\u5019 Sentinel \u4f1a\u9009\u4e3e\u53e6\u5916\u4e00\u4e2a\u4ece\u8282\u70b9\u505a\u4e3a\u4e3b\u8282\u70b9\uff0c \u90a3\u4e48\u5ba2\u6237\u7aef B \u6b64\u65f6\u4e5f\u6765\u7533\u8bf7\u76f8\u540c\u7684\u9501\uff0c\u5c31\u4f1a\u51fa\u73b0\u540c\u6837\u4e00\u628a\u9501\u88ab\u591a\u4e2a\u5ba2\u6237\u7aef\u6301\u6709\uff0c\u5bf9\u6570\u636e\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u6709\u5f88\u9ad8\u7684\u8981\u6c42\u8fd8\u662f\u4e0d\u884c\u7684\u3002","title":"Redlock \u7b97\u6cd5"},{"location":"blog/seckill/nodejs-case/#redlock_1","text":"\u9274\u4e8e\u8fd9\u4e9b\u95ee\u9898\uff0cRedis \u5b98\u7f51 redis.io/topics/distlock \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528 Redis \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u89c4\u8303\u7b97\u6cd5 Redlock\uff0c \u4e2d\u6587\u7ffb\u8bd1\u7248\u53c2\u8003 http://redis.cn/topics/distlock.html Redlock \u5728\u4e0a\u8ff0\u6587\u6863\u4e5f\u6709\u63cf\u8ff0\uff0c\u8fd9\u91cc\u7b80\u5355\u505a\u4e2a\u603b\u7ed3\uff1aRedlock \u5728 Redis \u5355\u5b9e\u4f8b\u6216\u591a\u5b9e\u4f8b\u4e2d\u63d0\u4f9b\u4e86\u5f3a\u6709\u529b\u7684\u4fdd\u969c\uff0c \u672c\u8eab\u5177\u5907\u5bb9\u9519\u80fd\u529b\uff0c\u5b83\u4f1a\u4ece N \u4e2a\u5b9e\u4f8b\u4f7f\u7528\u76f8\u540c\u7684 key\u3001\u968f\u673a\u503c\u5c1d\u8bd5 set key value [EX seconds] [PX milliseconds] [NX|XX] \u547d\u4ee4\u53bb\u83b7\u53d6\u9501\uff0c \u5728\u6709\u6548\u65f6\u95f4\u5185\u81f3\u5c11 N/2+1 \u4e2a Redis \u5b9e\u4f8b\u53d6\u5230\u9501\uff0c\u6b64\u65f6\u5c31\u8ba4\u4e3a\u53d6\u9501\u6210\u529f\uff0c\u5426\u5219\u53d6\u9501\u5931\u8d25\uff0c\u5931\u8d25\u60c5\u51b5\u4e0b\u5ba2\u6237\u7aef\u5e94\u8be5\u5728\u6240\u6709\u7684 Redis \u5b9e\u4f8b\u4e0a\u8fdb\u884c\u89e3\u9501\u3002","title":"Redlock \u4ecb\u7ecd"},{"location":"blog/seckill/nodejs-case/#nodejs-redlock","text":"node-redlock \u662f Node.js \u7248\u7684 Redlock \u5b9e\u73b0\uff0c \u4f7f\u7528\u8d77\u6765\u4e5f\u5f88\u7b80\u5355\uff0c\u5f00\u59cb\u4e4b\u524d\u5148\u5b89\u88c5 ioredis\u3001redlock \u5305\u3002 Bash npm i ioredis -S npm i redlock -S","title":"Node.js \u4e2d\u5e94\u7528 Redlock"},{"location":"blog/seckill/nodejs-case/#_8","text":"JavaScript const Redis = require ( \"ioredis\" ); const client1 = new Redis ( 6379 , \"127.0.0.1\" ); const Redlock = require ( \"redlock\" ); const redlock = new Redlock ([ client1 ], { retryDelay : 200 , // time in ms retryCount : 5 , }); // \u591a\u4e2a Redis \u5b9e\u4f8b // const redlock = new Redlock( // [new Redis(6379, \"127.0.0.1\"), new Redis(6379, \"127.0.0.2\"), new Redis(6379, \"127.0.0.3\")], // ) async function test ( key , ttl , client ) { try { const lock = await redlock . lock ( key , ttl ); console . log ( client , lock . value ); // do something ... // return lock.unlock(); } catch ( err ) { console . error ( client , err ); } } test ( \"name1\" , 10000 , \"client1\" ); test ( \"name1\" , 10000 , \"client2\" );","title":"\u7f16\u7801"},{"location":"blog/seckill/nodejs-case/#_9","text":"\u5bf9\u540c\u4e00\u4e2a key name1 \u4e24\u6b21\u4e0a\u9501\uff0c\u7531\u4e8e client1 \u5148\u53d6\u5230\u4e86\u9501\uff0cclient2 \u65e0\u6cd5\u83b7\u53d6\u9501\uff0c \u91cd\u8bd5 5 \u6b21\u4e4b\u540e\u62a5\u9519 LockError: Exceeded 5 attempts to lock the resource \"name1\".","title":"\u6d4b\u8bd5"},{"location":"blog/seckill/nodejs-redis-lua/","text":"https://cloud.tencent.com/developer/article/1536299 Lua \u662f\u4e00\u79cd\u8f7b\u91cf\u5c0f\u5de7\u7684\u811a\u672c\u8bed\u8a00\uff0c\u7528\u6807\u51c6 C \u8bed\u8a00\u7f16\u5199\u5e76\u4ee5\u6e90\u4ee3\u7801\u5f62\u5f0f\u5f00\u653e\uff0c\u5176\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u5d4c\u5165\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4ece\u800c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7075\u6d3b\u7684\u6269\u5c55\u548c\u5b9a\u5236\u529f\u80fd\u3002 \u7531\u4e8e Lua \u8bed\u8a00\u5177\u5907\u539f\u5b50\u6027\uff0c\u5176\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u88ab\u5176\u5b83\u7a0b\u5e8f\u6253\u65ad\uff0c\u5bf9\u4e8e\u5e76\u53d1\u4e0b\u6570\u636e\u7684\u4e00\u81f4\u6027\u662f\u6709\u5e2e\u52a9\u7684\u3002 Redis \u7684\u4e24\u79cd Lua \u811a\u672c Redis \u652f\u6301\u4e24\u79cd\u8fd0\u884c Lua \u811a\u672c\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u5728 Redis \u4e2d\u8f93\u5165 Lua \u4ee3\u7801\uff0c\u9002\u5408\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u811a\u672c\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u7f16\u5199 Lua \u811a\u672c\u6587\u4ef6\uff0c\u9002\u5408\u4e8e\u6709\u903b\u8f91\u8fd0\u7b97\u7684\u60c5\u51b5\uff0cRedis \u4f7f\u7528 SHA1 \u7b97\u6cd5\u652f\u6301\u5bf9\u811a\u672c\u7b7e\u540d\u548c Script Load \u9884\u5148\u7f13\u5b58\uff0c\u9700\u8981\u8fd0\u884c\u7684\u65f6\u5019\u901a\u8fc7\u7b7e\u540d\u8fd4\u56de\u7684\u6807\u8bc6\u7b26\u5373\u53ef\u3002 \u4e0b\u9762\u4f1a\u5206\u522b\u4ecb\u7ecd\u5982\u4f55\u5e94\u7528 Redis \u63d0\u4f9b\u7684 EVAL\u3001EVALSHA \u4e24\u4e2a\u547d\u4ee4\u6765\u5b9e\u73b0\u5bf9 Lua \u811a\u672c\u7684\u5e94\u7528\uff0c\u540c\u65f6\u4ecb\u7ecd\u4e00\u4e9b\u5728 Node.js \u4e2d\u8be5\u5982\u4f55\u53bb\u5e94\u7528 Redis \u7684 Lua \u811a\u672c\u3002 EVAL Redis 2.6.0 \u7248\u672c\u5f00\u59cb\uff0c\u901a\u8fc7\u5185\u7f6e\u7684 Lua \u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528 EVAL \u547d\u4ee4\u5bf9 Lua \u811a\u672c\u8fdb\u884c\u6c42\u503c script\uff1a\u6267\u884c\u7684\u811a\u672c numkeys\uff1a\u6307\u5b9a\u952e\u540d\u53c2\u6570\u4e2a\u6570 key\uff1a\u952e\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a\uff08key1\u3001key2\uff09\uff0c\u901a\u8fc7 KEYS[1] KEYS[2] \u7684\u5f62\u5f0f\u8bbf\u95ee atg\uff1a\u952e\u503c\uff0c\u53ef\u4ee5\u591a\u4e2a\uff08val1\u3001val2\uff09\uff0c\u901a\u8fc7 ARGS[1] ARGS[2] \u7684\u5f62\u5f0f\u8bbf\u95ee Bash EVAL script numkeys key [ key ... ] arg [ arg ... ] EVAL Redis \u63a7\u5236\u53f0\u5b9e\u8df5 \u6309\u7167\u4e0a\u9762\u547d\u4ee4\u683c\u5f0f\uff0c\u5199\u4e00\u4e2a\u5b9e\u4f8b\u5982\u4e0b\uff0c\u901a\u8fc7 KEYS[] \u6570\u7ec4\u7684\u5f62\u5f0f\u8bbf\u95ee ARGV[]\uff0c\u8fd9\u91cc\u4e0b\u6807\u662f\u4ee5 1 \u5f00\u59cb\uff0cKEYS[1] \u5bf9\u5e94\u7684\u952e\u540d\u4e3a name1\uff0cARGV[2] \u5bf9\u5e94\u7684\u503c\u4e3a val2 Bash 127 .0.0.1:6379> EVAL \"return redis.call('SET', KEYS[1], ARGV[2])\" 2 name1 name2 val1 val2 OK \u6267\u884c\u4ee5\u4e0a\u547d\u4ee4\uff0c\u901a\u8fc7 get \u67e5\u770b name1 \u5bf9\u5e94\u7684\u503c\u4e3a val2 Bash 127 .0.0.1:6379> get name1 \"val2\" \u6ce8\u610f\uff1a\u4ee5\u4e0a\u547d\u4ee4\u5982\u679c\u4e0d\u4f7f\u7528 return \u5c06\u4f1a\u8fd4\u56de (nil) Bash 127 .0.0.1:6379> EVAL \"redis.call('SET', KEYS[1], ARGV[2])\" 2 name1 name2 val1 val2 ( nil ) redis.call VS redis.pcall redis.call \u548c redis.pcall \u662f\u4e24\u4e2a\u4e0d\u540c\u7684 Lua \u51fd\u6570\u6765\u8c03\u7528 redis \u547d\u4ee4\uff0c \u4e24\u4e2a\u547d\u4ee4\u5f88\u7c7b\u4f3c\uff0c\u533a\u522b\u662f\u5982\u679c redis \u547d\u4ee4\u4e2d\u51fa\u73b0\u9519\u8bef\u5f02\u5e38\uff0c redis.call \u4f1a\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u7ed9\u8c03\u7528\u8005\uff0c\u800c redis.pcall \u4f1a\u4ee5 Lua \u7684\u5f62\u5f0f\u5bf9\u9519\u8bef\u8fdb\u884c\u6355\u83b7\u5e76\u8fd4\u56de\u3002 \u4f7f\u7528 redis.call \u8fd9\u91cc\u6267\u884c\u4e86\u4e24\u6761 Redis \u547d\u4ee4\uff0c\u7b2c\u4e00\u6761\u6545\u610f\u5199\u4e86\u4e00\u4e2a SET_ \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u547d\u4ee4\uff0c \u53ef\u4ee5\u770b\u5230\u51fa\u9519\u540e\uff0c\u9519\u8bef\u4fe1\u606f\u88ab\u629b\u51fa\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u540c\u65f6\u4f60\u6267\u884c get name2 \u4f1a\u5f97\u5230 (nil)\uff0c\u7b2c\u4e8c\u6761\u547d\u4ee4\u4e5f\u6ca1\u6709\u88ab\u6267\u884c Bash 127 .0.0.1:6379> EVAL \"redis.call('SET_', KEYS[1], ARGV[2]); redis.call('SET', KEYS[2], ARGV[3])\" 2 name1 name2 val1 val2 val3 ( error ) ERR Error running script ( call to f_bf814e38e3d98242ae0c62791fa299f04e757a7d ) : @user_script:1: @user_script: 1 : Unknown Redis command called from Lua script \u4f7f\u7528 redis.pcall \u548c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528 redis.pcall \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u4e3a (nil) \u5b83\u7684\u9519\u8bef\u88ab Lua \u6355\u83b7\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u5728\u6267\u884c get name2 \u4f1a\u5f97\u5230\u4e00\u4e2a\u8bbe\u7f6e\u597d\u7684\u7ed3\u679c val3\uff0c\u8fd9\u91cc\u7b2c\u4e8c\u6761\u547d\u4ee4\u662f\u88ab\u6267\u884c\u4e86\u7684\u3002 Bash EVAL \"redis.pcall('SET_', KEYS[1], ARGV[2]); redis.pcall('SET', KEYS[2], ARGV[3])\" 2 name1 name2 val1 val2 val3 ( nil ) EVAL \u5728 Node.js \u4e2d\u5b9e\u73b0 ioredis \u652f\u6301\u6240\u6709\u7684\u811a\u672c\u547d\u4ee4\uff0c\u6bd4\u5982 EVAL\u3001EVALSHA \u548c SCRIPT\u3002\u4f46\u662f\uff0c\u5728\u73b0\u5b9e\u573a\u666f\u4e2d\u4f7f\u7528\u5b83\u662f\u5f88\u7e41\u7410\u7684\uff0c \u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u6ce8\u610f\u811a\u672c\u7f13\u5b58\uff0c\u5e76\u68c0\u6d4b\u4f55\u65f6\u4f7f\u7528 EVAL\uff0c\u4f55\u65f6\u4f7f\u7528 EVALSHA\u3002 ioredis \u516c\u5f00\u4e86\u4e00\u4e2a defineCommand \u65b9\u6cd5\uff0c\u4f7f\u811a\u672c\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 Bash const Redis = require ( \"ioredis\" ) ; const redis = new Redis ( 6379 , \"127.0.0.1\" ) ; const evalScript = ` return redis.call ( 'SET' , KEYS [ 1 ] , ARGV [ 2 ]) ` ; redis.defineCommand ( \"evalTest\" , { numberOfKeys: 2 , lua: evalScript, }) async function eval () { await redis.evalTest ( 'name1' , 'name2' , 'val1' , 'val2' ) ; const result = await redis.get ( 'name1' ) ; console.log ( result ) ; // val2 } eval () ; EVALSHA EVAL \u547d\u4ee4\u8981\u6c42\u4f60\u5728\u6bcf\u6b21\u6267\u884c\u811a\u672c\u7684\u65f6\u5019\u90fd\u53d1\u9001\u4e00\u6b21\u811a\u672c\u4e3b\u4f53 (script body)\u3002 Redis \u6709\u4e00\u4e2a\u5185\u90e8\u7684\u7f13\u5b58\u673a\u5236\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u6bcf\u6b21\u90fd\u91cd\u65b0\u7f16\u8bd1\u811a\u672c\uff0c\u901a\u8fc7 EVALSHA \u6765\u5b9e\u73b0\uff0c\u6839\u636e\u7ed9\u5b9a\u7684 SHA1 \u6821\u9a8c\u7801\uff0c\u5bf9\u7f13\u5b58\u5728\u670d\u52a1\u5668\u4e2d\u7684\u811a\u672c\u8fdb\u884c\u6c42\u503c\u3002 SHA1 \u600e\u4e48\u751f\u6210\u5462\uff1f\u901a\u8fc7 script \u547d\u4ee4\uff0c\u53ef\u4ee5\u5bf9\u811a\u672c\u7f13\u5b58\u8fdb\u884c\u64cd\u4f5c SCRIPT FLUSH\uff1a\u6e05\u9664\u6240\u6709\u811a\u672c\u7f13\u5b58 SCRIPT EXISTS\uff1a\u68c0\u67e5\u6307\u5b9a\u7684\u811a\u672c\u662f\u5426\u5b58\u5728\u4e8e\u811a\u672c\u7f13\u5b58 SCRIPT LOAD\uff1a\u5c06\u4e00\u4e2a\u811a\u672c\u88c5\u5165\u811a\u672c\u7f13\u5b58\uff0c\u4f46\u5e76\u4e0d\u7acb\u5373\u8fd0\u884c\u5b83 SCRIPT KILL\uff1a\u6740\u6b7b\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u811a\u672c EVALSHA \u547d\u4ee4\u683c\u5f0f \u540c\u4e0a\u9762 EVAL \u4e0d\u540c\u7684\u662f\u524d\u9762 EVAL script \u6362\u6210\u4e86 EVALSHA sha1 Bash EVALSHA sha1 numkeys key [ key ... ] arg [ arg ... ] EVALSHA Redis \u63a7\u5236\u53f0\u5b9e\u8df5 \u8f7d\u5165\u811a\u672c\u7f13\u5b58 Bash 127 .0.0.1:6379> SCRIPT LOAD \"redis.pcall('SET', KEYS[1], ARGV[2]);\" \"2a3b189808b36be907e26dab7ddcd8428dcd1bc8\" \u4ee5\u4e0a\u811a\u672c\u6267\u884c\u4e4b\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a SHA-1 \u7b7e\u540d\u8fc7\u540e\u7684\u6807\u8bc6\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7528\u4e8e\u4e0b\u9762\u547d\u4ee4\u6267\u884c\u7b7e\u540d\u4e4b\u540e\u7684\u811a\u672c Bash 127 .0.0.1:6379> EVALSHA 2a3b189808b36be907e26dab7ddcd8428dcd1bc8 2 name1 name2 val1 val2 \u8fdb\u884c get \u64cd\u4f5c\u8bfb\u53d6 name1 \u7684\u53ea\u4e3a val2 Bash 127 .0.0.1:6379> get name1 \"val2\" EVALSHA \u5728 Node.js \u4e2d\u5b9e\u73b0 \u5206\u4e3a\u4e09\u6b65\uff1a\u7f13\u5b58\u811a\u672c\u3001\u6267\u884c\u811a\u672c\u3001\u83b7\u53d6\u6570\u636e JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const evalScript = `return redis.call('SET', KEYS[1], ARGV[2])` ; async function evalSHA () { // 1. \u7f13\u5b58\u811a\u672c\u83b7\u53d6 sha1 \u503c const sha1 = await redis . script ( \"load\" , evalScript ); console . log ( sha1 ); // 6bce4ade07396ba3eb2d98e461167563a868c661 // 2. \u901a\u8fc7 evalsha \u6267\u884c\u811a\u672c await redis . evalsha ( sha1 , 2 , \"name1\" , \"name2\" , \"val1\" , \"val2\" ); // 3. \u83b7\u53d6\u6570\u636e const result = await redis . get ( \"name1\" ); console . log ( result ); // \"val2\" } evalSHA (); Lua \u811a\u672c\u6587\u4ef6 \u6709\u903b\u8f91\u8fd0\u7b97\u7684\u811a\u672c\uff0c\u53ef\u4ee5\u7f16\u5199 Lua \u811a\u672c\u6587\u4ef6\uff0c\u7f16\u5199\u4e00\u4e9b\u7b80\u5355\u7684\u811a\u672c\u4e5f\u4e0d\u96be\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u6559\u7a0b https://www.runoob.com/lua/lua-tutorial.html Lua \u6587\u4ef6 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u6d4b\u8bd5\u4ee3\u7801\uff0c\u901a\u8fc7\u8bfb\u53d6\u4e24\u4e2a\u503c\u6bd4\u8f83\u8fd4\u56de\u4e0d\u540c\u7684\u503c\uff0c\u901a\u8fc7 Lua \u811a\u672c\u5b9e\u73b0\u540e\u53ef\u4ee5\u591a\u6761 Redis \u547d\u4ee4\u7684\u539f\u5b50\u6027\u3002 Lua -- test.lua -- \u5148 SET redis . call ( \"SET\" , KEYS [ 1 ], ARGV [ 1 ]) redis . call ( \"SET\" , KEYS [ 2 ], ARGV [ 2 ]) -- GET \u53d6\u503c local key1 = tonumber ( redis . call ( \"GET\" , KEYS [ 1 ])) local key2 = tonumber ( redis . call ( \"GET\" , KEYS [ 2 ])) -- \u5982\u679c key1 \u5c0f\u4e8e key2 \u8fd4\u56de 0 -- nil \u76f8\u5f53\u4e8e false if ( key1 == nil or key2 == nil or key1 < key2 ) then return 0 else return 1 end Node.js \u4e2d\u52a0\u8f7d Lua \u811a\u672c\u6587\u4ef6 \u548c\u4e0a\u9762 Node.js \u4e2d\u5e94\u7528 Lua \u5dee\u522b\u4e0d\u5927\uff0c\u591a\u4e86\u4e00\u6b65\uff0c\u901a\u8fc7 fs \u6a21\u5757\u5148\u8bfb\u53d6 Lua \u811a\u672c\u6587\u4ef6\uff0c\u5728\u901a\u8fc7 eval \u6216\u8005 evalsha \u6267\u884c\u3002 JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const fs = require ( \"fs\" ); async function test () { const redisLuaScript = fs . readFileSync ( \"./test.lua\" ); const result1 = await redis . eval ( redisLuaScript , 2 , \"name1\" , \"name2\" , 20 , 10 ); const result2 = await redis . eval ( redisLuaScript , 2 , \"name1\" , \"name2\" , 10 , 20 ); console . log ( result1 , result2 ); // 1 0 } test ();","title":"Node.js \u4e2d\u5b9e\u8df5 Redis Lua \u811a\u672c"},{"location":"blog/seckill/nodejs-redis-lua/#redis-lua","text":"Redis \u652f\u6301\u4e24\u79cd\u8fd0\u884c Lua \u811a\u672c\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u5728 Redis \u4e2d\u8f93\u5165 Lua \u4ee3\u7801\uff0c\u9002\u5408\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u811a\u672c\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u7f16\u5199 Lua \u811a\u672c\u6587\u4ef6\uff0c\u9002\u5408\u4e8e\u6709\u903b\u8f91\u8fd0\u7b97\u7684\u60c5\u51b5\uff0cRedis \u4f7f\u7528 SHA1 \u7b97\u6cd5\u652f\u6301\u5bf9\u811a\u672c\u7b7e\u540d\u548c Script Load \u9884\u5148\u7f13\u5b58\uff0c\u9700\u8981\u8fd0\u884c\u7684\u65f6\u5019\u901a\u8fc7\u7b7e\u540d\u8fd4\u56de\u7684\u6807\u8bc6\u7b26\u5373\u53ef\u3002 \u4e0b\u9762\u4f1a\u5206\u522b\u4ecb\u7ecd\u5982\u4f55\u5e94\u7528 Redis \u63d0\u4f9b\u7684 EVAL\u3001EVALSHA \u4e24\u4e2a\u547d\u4ee4\u6765\u5b9e\u73b0\u5bf9 Lua \u811a\u672c\u7684\u5e94\u7528\uff0c\u540c\u65f6\u4ecb\u7ecd\u4e00\u4e9b\u5728 Node.js \u4e2d\u8be5\u5982\u4f55\u53bb\u5e94\u7528 Redis \u7684 Lua \u811a\u672c\u3002","title":"Redis \u7684\u4e24\u79cd Lua \u811a\u672c"},{"location":"blog/seckill/nodejs-redis-lua/#eval","text":"Redis 2.6.0 \u7248\u672c\u5f00\u59cb\uff0c\u901a\u8fc7\u5185\u7f6e\u7684 Lua \u89e3\u91ca\u5668\uff0c\u53ef\u4ee5\u4f7f\u7528 EVAL \u547d\u4ee4\u5bf9 Lua \u811a\u672c\u8fdb\u884c\u6c42\u503c script\uff1a\u6267\u884c\u7684\u811a\u672c numkeys\uff1a\u6307\u5b9a\u952e\u540d\u53c2\u6570\u4e2a\u6570 key\uff1a\u952e\u540d\uff0c\u53ef\u4ee5\u591a\u4e2a\uff08key1\u3001key2\uff09\uff0c\u901a\u8fc7 KEYS[1] KEYS[2] \u7684\u5f62\u5f0f\u8bbf\u95ee atg\uff1a\u952e\u503c\uff0c\u53ef\u4ee5\u591a\u4e2a\uff08val1\u3001val2\uff09\uff0c\u901a\u8fc7 ARGS[1] ARGS[2] \u7684\u5f62\u5f0f\u8bbf\u95ee Bash EVAL script numkeys key [ key ... ] arg [ arg ... ]","title":"EVAL"},{"location":"blog/seckill/nodejs-redis-lua/#eval-redis","text":"\u6309\u7167\u4e0a\u9762\u547d\u4ee4\u683c\u5f0f\uff0c\u5199\u4e00\u4e2a\u5b9e\u4f8b\u5982\u4e0b\uff0c\u901a\u8fc7 KEYS[] \u6570\u7ec4\u7684\u5f62\u5f0f\u8bbf\u95ee ARGV[]\uff0c\u8fd9\u91cc\u4e0b\u6807\u662f\u4ee5 1 \u5f00\u59cb\uff0cKEYS[1] \u5bf9\u5e94\u7684\u952e\u540d\u4e3a name1\uff0cARGV[2] \u5bf9\u5e94\u7684\u503c\u4e3a val2 Bash 127 .0.0.1:6379> EVAL \"return redis.call('SET', KEYS[1], ARGV[2])\" 2 name1 name2 val1 val2 OK \u6267\u884c\u4ee5\u4e0a\u547d\u4ee4\uff0c\u901a\u8fc7 get \u67e5\u770b name1 \u5bf9\u5e94\u7684\u503c\u4e3a val2 Bash 127 .0.0.1:6379> get name1 \"val2\" \u6ce8\u610f\uff1a\u4ee5\u4e0a\u547d\u4ee4\u5982\u679c\u4e0d\u4f7f\u7528 return \u5c06\u4f1a\u8fd4\u56de (nil) Bash 127 .0.0.1:6379> EVAL \"redis.call('SET', KEYS[1], ARGV[2])\" 2 name1 name2 val1 val2 ( nil )","title":"EVAL Redis \u63a7\u5236\u53f0\u5b9e\u8df5"},{"location":"blog/seckill/nodejs-redis-lua/#rediscall-vs-redispcall","text":"redis.call \u548c redis.pcall \u662f\u4e24\u4e2a\u4e0d\u540c\u7684 Lua \u51fd\u6570\u6765\u8c03\u7528 redis \u547d\u4ee4\uff0c \u4e24\u4e2a\u547d\u4ee4\u5f88\u7c7b\u4f3c\uff0c\u533a\u522b\u662f\u5982\u679c redis \u547d\u4ee4\u4e2d\u51fa\u73b0\u9519\u8bef\u5f02\u5e38\uff0c redis.call \u4f1a\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\u7ed9\u8c03\u7528\u8005\uff0c\u800c redis.pcall \u4f1a\u4ee5 Lua \u7684\u5f62\u5f0f\u5bf9\u9519\u8bef\u8fdb\u884c\u6355\u83b7\u5e76\u8fd4\u56de\u3002","title":"redis.call VS redis.pcall"},{"location":"blog/seckill/nodejs-redis-lua/#rediscall","text":"\u8fd9\u91cc\u6267\u884c\u4e86\u4e24\u6761 Redis \u547d\u4ee4\uff0c\u7b2c\u4e00\u6761\u6545\u610f\u5199\u4e86\u4e00\u4e2a SET_ \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u547d\u4ee4\uff0c \u53ef\u4ee5\u770b\u5230\u51fa\u9519\u540e\uff0c\u9519\u8bef\u4fe1\u606f\u88ab\u629b\u51fa\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u540c\u65f6\u4f60\u6267\u884c get name2 \u4f1a\u5f97\u5230 (nil)\uff0c\u7b2c\u4e8c\u6761\u547d\u4ee4\u4e5f\u6ca1\u6709\u88ab\u6267\u884c Bash 127 .0.0.1:6379> EVAL \"redis.call('SET_', KEYS[1], ARGV[2]); redis.call('SET', KEYS[2], ARGV[3])\" 2 name1 name2 val1 val2 val3 ( error ) ERR Error running script ( call to f_bf814e38e3d98242ae0c62791fa299f04e757a7d ) : @user_script:1: @user_script: 1 : Unknown Redis command called from Lua script","title":"\u4f7f\u7528 redis.call"},{"location":"blog/seckill/nodejs-redis-lua/#redispcall","text":"\u548c\u4e0a\u9762\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528 redis.pcall \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u4e3a (nil) \u5b83\u7684\u9519\u8bef\u88ab Lua \u6355\u83b7\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u5728\u6267\u884c get name2 \u4f1a\u5f97\u5230\u4e00\u4e2a\u8bbe\u7f6e\u597d\u7684\u7ed3\u679c val3\uff0c\u8fd9\u91cc\u7b2c\u4e8c\u6761\u547d\u4ee4\u662f\u88ab\u6267\u884c\u4e86\u7684\u3002 Bash EVAL \"redis.pcall('SET_', KEYS[1], ARGV[2]); redis.pcall('SET', KEYS[2], ARGV[3])\" 2 name1 name2 val1 val2 val3 ( nil )","title":"\u4f7f\u7528 redis.pcall"},{"location":"blog/seckill/nodejs-redis-lua/#eval-nodejs","text":"ioredis \u652f\u6301\u6240\u6709\u7684\u811a\u672c\u547d\u4ee4\uff0c\u6bd4\u5982 EVAL\u3001EVALSHA \u548c SCRIPT\u3002\u4f46\u662f\uff0c\u5728\u73b0\u5b9e\u573a\u666f\u4e2d\u4f7f\u7528\u5b83\u662f\u5f88\u7e41\u7410\u7684\uff0c \u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u6ce8\u610f\u811a\u672c\u7f13\u5b58\uff0c\u5e76\u68c0\u6d4b\u4f55\u65f6\u4f7f\u7528 EVAL\uff0c\u4f55\u65f6\u4f7f\u7528 EVALSHA\u3002 ioredis \u516c\u5f00\u4e86\u4e00\u4e2a defineCommand \u65b9\u6cd5\uff0c\u4f7f\u811a\u672c\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 Bash const Redis = require ( \"ioredis\" ) ; const redis = new Redis ( 6379 , \"127.0.0.1\" ) ; const evalScript = ` return redis.call ( 'SET' , KEYS [ 1 ] , ARGV [ 2 ]) ` ; redis.defineCommand ( \"evalTest\" , { numberOfKeys: 2 , lua: evalScript, }) async function eval () { await redis.evalTest ( 'name1' , 'name2' , 'val1' , 'val2' ) ; const result = await redis.get ( 'name1' ) ; console.log ( result ) ; // val2 } eval () ;","title":"EVAL \u5728 Node.js \u4e2d\u5b9e\u73b0"},{"location":"blog/seckill/nodejs-redis-lua/#evalsha","text":"EVAL \u547d\u4ee4\u8981\u6c42\u4f60\u5728\u6bcf\u6b21\u6267\u884c\u811a\u672c\u7684\u65f6\u5019\u90fd\u53d1\u9001\u4e00\u6b21\u811a\u672c\u4e3b\u4f53 (script body)\u3002 Redis \u6709\u4e00\u4e2a\u5185\u90e8\u7684\u7f13\u5b58\u673a\u5236\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u6bcf\u6b21\u90fd\u91cd\u65b0\u7f16\u8bd1\u811a\u672c\uff0c\u901a\u8fc7 EVALSHA \u6765\u5b9e\u73b0\uff0c\u6839\u636e\u7ed9\u5b9a\u7684 SHA1 \u6821\u9a8c\u7801\uff0c\u5bf9\u7f13\u5b58\u5728\u670d\u52a1\u5668\u4e2d\u7684\u811a\u672c\u8fdb\u884c\u6c42\u503c\u3002 SHA1 \u600e\u4e48\u751f\u6210\u5462\uff1f\u901a\u8fc7 script \u547d\u4ee4\uff0c\u53ef\u4ee5\u5bf9\u811a\u672c\u7f13\u5b58\u8fdb\u884c\u64cd\u4f5c SCRIPT FLUSH\uff1a\u6e05\u9664\u6240\u6709\u811a\u672c\u7f13\u5b58 SCRIPT EXISTS\uff1a\u68c0\u67e5\u6307\u5b9a\u7684\u811a\u672c\u662f\u5426\u5b58\u5728\u4e8e\u811a\u672c\u7f13\u5b58 SCRIPT LOAD\uff1a\u5c06\u4e00\u4e2a\u811a\u672c\u88c5\u5165\u811a\u672c\u7f13\u5b58\uff0c\u4f46\u5e76\u4e0d\u7acb\u5373\u8fd0\u884c\u5b83 SCRIPT KILL\uff1a\u6740\u6b7b\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u811a\u672c","title":"EVALSHA"},{"location":"blog/seckill/nodejs-redis-lua/#evalsha_1","text":"\u540c\u4e0a\u9762 EVAL \u4e0d\u540c\u7684\u662f\u524d\u9762 EVAL script \u6362\u6210\u4e86 EVALSHA sha1 Bash EVALSHA sha1 numkeys key [ key ... ] arg [ arg ... ]","title":"EVALSHA \u547d\u4ee4\u683c\u5f0f"},{"location":"blog/seckill/nodejs-redis-lua/#evalsha-redis","text":"\u8f7d\u5165\u811a\u672c\u7f13\u5b58 Bash 127 .0.0.1:6379> SCRIPT LOAD \"redis.pcall('SET', KEYS[1], ARGV[2]);\" \"2a3b189808b36be907e26dab7ddcd8428dcd1bc8\" \u4ee5\u4e0a\u811a\u672c\u6267\u884c\u4e4b\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a SHA-1 \u7b7e\u540d\u8fc7\u540e\u7684\u6807\u8bc6\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7528\u4e8e\u4e0b\u9762\u547d\u4ee4\u6267\u884c\u7b7e\u540d\u4e4b\u540e\u7684\u811a\u672c Bash 127 .0.0.1:6379> EVALSHA 2a3b189808b36be907e26dab7ddcd8428dcd1bc8 2 name1 name2 val1 val2 \u8fdb\u884c get \u64cd\u4f5c\u8bfb\u53d6 name1 \u7684\u53ea\u4e3a val2 Bash 127 .0.0.1:6379> get name1 \"val2\"","title":"EVALSHA Redis \u63a7\u5236\u53f0\u5b9e\u8df5"},{"location":"blog/seckill/nodejs-redis-lua/#evalsha-nodejs","text":"\u5206\u4e3a\u4e09\u6b65\uff1a\u7f13\u5b58\u811a\u672c\u3001\u6267\u884c\u811a\u672c\u3001\u83b7\u53d6\u6570\u636e JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const evalScript = `return redis.call('SET', KEYS[1], ARGV[2])` ; async function evalSHA () { // 1. \u7f13\u5b58\u811a\u672c\u83b7\u53d6 sha1 \u503c const sha1 = await redis . script ( \"load\" , evalScript ); console . log ( sha1 ); // 6bce4ade07396ba3eb2d98e461167563a868c661 // 2. \u901a\u8fc7 evalsha \u6267\u884c\u811a\u672c await redis . evalsha ( sha1 , 2 , \"name1\" , \"name2\" , \"val1\" , \"val2\" ); // 3. \u83b7\u53d6\u6570\u636e const result = await redis . get ( \"name1\" ); console . log ( result ); // \"val2\" } evalSHA ();","title":"EVALSHA \u5728 Node.js \u4e2d\u5b9e\u73b0"},{"location":"blog/seckill/nodejs-redis-lua/#lua","text":"\u6709\u903b\u8f91\u8fd0\u7b97\u7684\u811a\u672c\uff0c\u53ef\u4ee5\u7f16\u5199 Lua \u811a\u672c\u6587\u4ef6\uff0c\u7f16\u5199\u4e00\u4e9b\u7b80\u5355\u7684\u811a\u672c\u4e5f\u4e0d\u96be\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u6559\u7a0b https://www.runoob.com/lua/lua-tutorial.html","title":"Lua \u811a\u672c\u6587\u4ef6"},{"location":"blog/seckill/nodejs-redis-lua/#lua_1","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6d4b\u8bd5\u4ee3\u7801\uff0c\u901a\u8fc7\u8bfb\u53d6\u4e24\u4e2a\u503c\u6bd4\u8f83\u8fd4\u56de\u4e0d\u540c\u7684\u503c\uff0c\u901a\u8fc7 Lua \u811a\u672c\u5b9e\u73b0\u540e\u53ef\u4ee5\u591a\u6761 Redis \u547d\u4ee4\u7684\u539f\u5b50\u6027\u3002 Lua -- test.lua -- \u5148 SET redis . call ( \"SET\" , KEYS [ 1 ], ARGV [ 1 ]) redis . call ( \"SET\" , KEYS [ 2 ], ARGV [ 2 ]) -- GET \u53d6\u503c local key1 = tonumber ( redis . call ( \"GET\" , KEYS [ 1 ])) local key2 = tonumber ( redis . call ( \"GET\" , KEYS [ 2 ])) -- \u5982\u679c key1 \u5c0f\u4e8e key2 \u8fd4\u56de 0 -- nil \u76f8\u5f53\u4e8e false if ( key1 == nil or key2 == nil or key1 < key2 ) then return 0 else return 1 end","title":"Lua \u6587\u4ef6"},{"location":"blog/seckill/nodejs-redis-lua/#nodejs-lua","text":"\u548c\u4e0a\u9762 Node.js \u4e2d\u5e94\u7528 Lua \u5dee\u522b\u4e0d\u5927\uff0c\u591a\u4e86\u4e00\u6b65\uff0c\u901a\u8fc7 fs \u6a21\u5757\u5148\u8bfb\u53d6 Lua \u811a\u672c\u6587\u4ef6\uff0c\u5728\u901a\u8fc7 eval \u6216\u8005 evalsha \u6267\u884c\u3002 JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ( 6379 , \"127.0.0.1\" ); const fs = require ( \"fs\" ); async function test () { const redisLuaScript = fs . readFileSync ( \"./test.lua\" ); const result1 = await redis . eval ( redisLuaScript , 2 , \"name1\" , \"name2\" , 20 , 10 ); const result2 = await redis . eval ( redisLuaScript , 2 , \"name1\" , \"name2\" , 10 , 20 ); console . log ( result1 , result2 ); // 1 0 } test ();","title":"Node.js \u4e2d\u52a0\u8f7d Lua \u811a\u672c\u6587\u4ef6"},{"location":"blog/seckill/redis_lua/","text":"https://www.cnblogs.com/itbsl/p/15021263.html \u4e4b\u524d\u5199\u4e86\u4e00\u7bc7 PHP+Redis \u94fe\u8868\u89e3\u51b3\u9ad8\u5e76\u53d1\u4e0b\u5546\u54c1\u8d85\u5356\u95ee\u9898\uff0c\u4eca\u5929\u4ecb\u7ecd\u4e00\u4e9b\u5982\u4f55\u4f7f\u7528 PHP+Redis+Lua \u89e3\u51b3\u9ad8\u5e76\u53d1\u4e0b\u5546\u54c1\u8d85\u5356\u95ee\u9898\u3002 \u4e3a\u4f55\u8981\u4f7f\u7528 Lua \u811a\u672c\u89e3\u51b3\u5546\u54c1\u8d85\u5356\u7684\u95ee\u9898\u5462\uff1f Redis \u5728 2.6 \u7248\u672c\u540e\u539f\u751f\u652f\u6301 Lua \u811a\u672c\u529f\u80fd\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528 Lua \u8bed\u8a00\u7f16\u5199\u811a\u672c\u4f20\u5230 Redis \u4e2d\u6267\u884c\u3002 \u5c06\u590d\u6742\u7684\u6216\u8005\u591a\u6b65\u7684 redis \u64cd\u4f5c\uff0c\u5199\u4e3a\u4e00\u4e2a\u811a\u672c\uff0c\u4e00\u6b21\u63d0\u4ea4\u7ed9 redis \u6267\u884c\uff0c\u51cf\u5c11\u53cd\u590d\u8fde\u63a5 redis \u7684\u6b21\u6570\uff0c\u63d0\u5347\u6027\u80fd\u3002 \u539f\u5b50\u64cd\u4f5c\u3002Redis \u4f1a\u5c06\u6574\u4e2a\u811a\u672c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6267\u884c\uff0c\u4e2d\u95f4\u4e0d\u4f1a\u88ab\u5176\u4ed6\u8bf7\u6c42\u63d2\u5165\u3002\u56e0\u6b64\u5728\u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u65e0\u9700\u62c5\u5fc3\u4f1a\u51fa\u73b0\u7ade\u6001\u6761\u4ef6\uff0c\u65e0\u9700\u4f7f\u7528\u4e8b\u52a1\u3002 \u590d\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u811a\u672c\u4f1a\u6c38\u4e45\u5b58\u5728 redis \u4e2d\uff0c\u8fd9\u6837\u5176\u4ed6\u5ba2\u6237\u7aef\u53ef\u4ee5\u590d\u7528\u8fd9\u4e00\u811a\u672c\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u4ee3\u7801\u5b8c\u6210\u76f8\u540c\u7684\u903b\u8f91\u3002 \u7f16\u5199\u811a\u672c \u9996\u5148\uff0c\u7f16\u5199 lua \u811a\u672c\uff0c\u811a\u672c\u540d\u4e3a secKill.lua\uff1a Lua -- \u63a5\u6536\u53c2\u6570 local user_id = KEYS [ 1 ] local goods_id = KEYS [ 2 ] -- \u62fc\u63a5\u5b57\u7b26\u4e32 local stock_key = \"secKill:\" .. goods_id .. \":stock\" -- \u79d2\u6740\u5546\u54c1\u5e93\u5b58 key local users_key = \"secKill:\" .. goods_id .. \":users\" -- \u6210\u529f\u79d2\u6740\u5546\u54c1\u7684\u7528\u6237\u96c6\u5408 key -- \u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u6210\u529f\u79d2\u6740\u8fc7\u8be5\u5546\u54c1\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5728\u96c6\u5408\u4e2d\uff0c\u8bf4\u660e\u5df2\u7ecf\u6210\u529f\u79d2\u6740\u8be5\u5546\u54c1\uff0c\u76f4\u63a5\u8fd4\u56de\u6807\u5fd7 2\uff0c\u9632\u6b62\u91cd\u590d\u62a2\u8d2d local user_exists = redis . call ( 'sismember' , users_key , user_id ) if tonumber ( user_exists , 10 ) == 1 then return 2 end -- \u83b7\u53d6\u5f53\u524d\u5546\u54c1\u5e93\u5b58\uff0c\u5982\u679c\u5e93\u5b58\u5c0f\u4e8e\u7b49\u4e8e 0\uff0c\u8868\u540d\u5546\u54c1\u5df2\u7ecf\u88ab\u62a2\u8d2d\u5b8c\u4e86\uff0c\u5426\u5219\u5e93\u5b58-1\uff0c\u5e76\u5c06\u62a2\u8d2d\u6210\u529f\u7684\u7528\u6237\u653e\u5165\u96c6\u5408\u4e2d local left_goods_count = redis . call ( 'get' , stock_key ) if tonumber ( left_goods_count , 10 ) <= 0 then return 0 else redis . call ( 'decr' , stock_key ) redis . call ( 'sadd' , users_key , user_id ) end return 1 \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8fd4\u56de\u7684\u6570\u5b57 0\uff0c1\uff0c2 \u53ea\u662f\u4e00\u79cd\u7ea6\u5b9a\uff0c\u81ea\u5df1\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u6709\u4e1a\u52a1\u7ea6\u5b9a\u4e0d\u540c\u72b6\u6001\u8fd4\u56de\u7684\u503c\u3002\u793a\u4f8b\u4ee3\u7801 0\uff1a\u5e93\u5b58\u4e3a 0\uff0c1\uff1a\u79d2\u6740\u6210\u529f\uff0c2\uff1a\u5df2\u79d2\u6740\u6210\u529f\u7684\u7528\u6237\u91cd\u590d\u62a2\u8d2d\u3002 lua \u811a\u672c\u7f16\u5199\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 redis-cli \u547d\u4ee4\u751f\u6210\u8be5\u811a\u672c\u7684 sha \u79d8\u94a5 Bash redis-cli script load \" $( cat /usr/local/redis/lua/secKill.lua ) \" \"63454a53284d9f6b30bdb6e5e12796a74f61f718\" \u6700\u540e\uff0c\u62ff\u5230 lua \u811a\u672c\u7684 sha \u79d8\u94a5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u3002 Bash $redis = new Redis () ; $redis ->connect ( \"192.168.111.128\" , 6379 ) ; $goodsId = 11211 ; $userId = mt_rand ( 10000 , 99999 ) ; $res = $redis ->evalSha ( '63454a53284d9f6b30bdb6e5e12796a74f61f718' , [ $userId , $goodsId ] , 2 ) ; \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5c06\u62a2\u8d2d\u903b\u8f91\u5199\u5230 lua \u811a\u672c\u540e\uff0cPHP \u4ee3\u7801\u5c31\u53d8\u5f97\u5f88\u5c11\u4e86\uff0c\u4ec5\u4ec5\u53ea\u6709 5 \u884c\u4ee3\u7801\u3002 \u6d4b\u8bd5 \u7f16\u5199\u597d\u4ee3\u7801\uff0c\u63a5\u7740\u6211\u4eec\u5f00\u59cb\u5bf9\u4e0a\u8ff0\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u5546\u54c1\u7684\u5e93\u5b58\u91cf\uff0c\u6b63\u5e38\u903b\u8f91\u662f\u5728\u540e\u53f0\u5546\u54c1\u7ba1\u7406\u9875\u586b\u5199\u5177\u4f53\u5546\u54c1\u7684\u5e93\u5b58\u91cf\uff0c \u6b64\u5904\u5047\u8bbe\u6211\u4eec\u7684\u5546\u54c1 ID \u662f 11211\uff0c\u5546\u54c1\u6570\u91cf\u4e3a 10 \u4e2a\u3002 Bash $redis -cli > set secKill:11211:stock 10 \u6211\u4eec\u4f7f\u7528 ab \u538b\u6d4b\u5de5\u5177\u6a21\u62df 2000 \u4e2a\u7528\u6237\u5e76\u53d1\u91cf 200 \u6765\u6a21\u62df\u62a2\u8d2d\u5546\u54c1 ID \u4e3a 11211 \u7684\u5546\u54c1\u3002 Bash $ ab -n 2000 -c 200 http://www.master.com/index.php \u5982\u679c\u6ca1\u6709 ab \u5de5\u5177\u9700\u8981\u4f7f\u7528 yum -y install httpd-tools \u5b89\u88c5 \u538b\u6d4b\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u901a\u8fc7 RedisDesktopManager(RDM) \u8f6f\u4ef6\u6765\u67e5\u770b\u62a2\u8d2d\u7ed3\u679c\uff0c \u53ef\u4ee5\u770b\u5230\u5373\u4f7f\u662f 200 \u7684\u5e76\u53d1\u91cf\uff0c\u6700\u7ec8\u4e5f\u53ea\u6709 10 \u4e2a\u7528\u6237\u62a2\u8d2d\u5230\u5546\u54c1\uff0c\u5e76\u4e14\u62a2\u8d2d\u6210\u529f\u7684\u7528\u6237\u88ab\u5199\u5165\u5230\u4e86 secKill:11211:users \u7684\u96c6\u5408\u4e2d\uff0c \u6211\u4eec\u53ef\u4ee5\u53e6\u5916\u5f00\u4e00\u4e2a\u5b88\u62a4\u8fdb\u7a0b\u4e13\u95e8\u7528\u4e8e\u4ece\u96c6\u5408\u4e2d\u83b7\u53d6\u7528\u6237 ID \u5904\u7406\u540e\u7eed\u4e8b\u5b9c(\u5c06\u6570\u636e\u843d\u76d8\u5199\u5165\u6570\u636e\u5e93\u3001\u7ed9\u7528\u6237\u53d1\u77ed\u4fe1\u7b49) \u4f7f\u7528 Redis+Lua \u6765\u89e3\u51b3\u62a2\u8d2d\u79d2\u6740\u7c7b\u95ee\u9898\u662f\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u4e00\u79cd\u505a\u6cd5\uff0c\u5e0c\u671b\u5bf9\u6b63\u5728\u5f00\u53d1\u79d2\u6740\u62a2\u8d2d\u529f\u80fd\u7684\u4f60\u80fd\u4ea7\u751f\u5e2e\u52a9\u3002","title":"Redis+Lua \u89e3\u51b3\u9ad8\u5e76\u53d1\u573a\u666f\u62a2\u8d2d\u79d2\u6740\u95ee\u9898"},{"location":"blog/seckill/redis_lua/#lua","text":"Redis \u5728 2.6 \u7248\u672c\u540e\u539f\u751f\u652f\u6301 Lua \u811a\u672c\u529f\u80fd\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528 Lua \u8bed\u8a00\u7f16\u5199\u811a\u672c\u4f20\u5230 Redis \u4e2d\u6267\u884c\u3002 \u5c06\u590d\u6742\u7684\u6216\u8005\u591a\u6b65\u7684 redis \u64cd\u4f5c\uff0c\u5199\u4e3a\u4e00\u4e2a\u811a\u672c\uff0c\u4e00\u6b21\u63d0\u4ea4\u7ed9 redis \u6267\u884c\uff0c\u51cf\u5c11\u53cd\u590d\u8fde\u63a5 redis \u7684\u6b21\u6570\uff0c\u63d0\u5347\u6027\u80fd\u3002 \u539f\u5b50\u64cd\u4f5c\u3002Redis \u4f1a\u5c06\u6574\u4e2a\u811a\u672c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6267\u884c\uff0c\u4e2d\u95f4\u4e0d\u4f1a\u88ab\u5176\u4ed6\u8bf7\u6c42\u63d2\u5165\u3002\u56e0\u6b64\u5728\u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u65e0\u9700\u62c5\u5fc3\u4f1a\u51fa\u73b0\u7ade\u6001\u6761\u4ef6\uff0c\u65e0\u9700\u4f7f\u7528\u4e8b\u52a1\u3002 \u590d\u7528\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u811a\u672c\u4f1a\u6c38\u4e45\u5b58\u5728 redis \u4e2d\uff0c\u8fd9\u6837\u5176\u4ed6\u5ba2\u6237\u7aef\u53ef\u4ee5\u590d\u7528\u8fd9\u4e00\u811a\u672c\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u4ee3\u7801\u5b8c\u6210\u76f8\u540c\u7684\u903b\u8f91\u3002","title":"\u4e3a\u4f55\u8981\u4f7f\u7528 Lua \u811a\u672c\u89e3\u51b3\u5546\u54c1\u8d85\u5356\u7684\u95ee\u9898\u5462\uff1f"},{"location":"blog/seckill/redis_lua/#_1","text":"","title":"\u7f16\u5199\u811a\u672c"},{"location":"blog/seckill/redis_lua/#lua-seckilllua","text":"Lua -- \u63a5\u6536\u53c2\u6570 local user_id = KEYS [ 1 ] local goods_id = KEYS [ 2 ] -- \u62fc\u63a5\u5b57\u7b26\u4e32 local stock_key = \"secKill:\" .. goods_id .. \":stock\" -- \u79d2\u6740\u5546\u54c1\u5e93\u5b58 key local users_key = \"secKill:\" .. goods_id .. \":users\" -- \u6210\u529f\u79d2\u6740\u5546\u54c1\u7684\u7528\u6237\u96c6\u5408 key -- \u5224\u65ad\u7528\u6237\u662f\u5426\u5df2\u7ecf\u6210\u529f\u79d2\u6740\u8fc7\u8be5\u5546\u54c1\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u5728\u96c6\u5408\u4e2d\uff0c\u8bf4\u660e\u5df2\u7ecf\u6210\u529f\u79d2\u6740\u8be5\u5546\u54c1\uff0c\u76f4\u63a5\u8fd4\u56de\u6807\u5fd7 2\uff0c\u9632\u6b62\u91cd\u590d\u62a2\u8d2d local user_exists = redis . call ( 'sismember' , users_key , user_id ) if tonumber ( user_exists , 10 ) == 1 then return 2 end -- \u83b7\u53d6\u5f53\u524d\u5546\u54c1\u5e93\u5b58\uff0c\u5982\u679c\u5e93\u5b58\u5c0f\u4e8e\u7b49\u4e8e 0\uff0c\u8868\u540d\u5546\u54c1\u5df2\u7ecf\u88ab\u62a2\u8d2d\u5b8c\u4e86\uff0c\u5426\u5219\u5e93\u5b58-1\uff0c\u5e76\u5c06\u62a2\u8d2d\u6210\u529f\u7684\u7528\u6237\u653e\u5165\u96c6\u5408\u4e2d local left_goods_count = redis . call ( 'get' , stock_key ) if tonumber ( left_goods_count , 10 ) <= 0 then return 0 else redis . call ( 'decr' , stock_key ) redis . call ( 'sadd' , users_key , user_id ) end return 1 \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8fd4\u56de\u7684\u6570\u5b57 0\uff0c1\uff0c2 \u53ea\u662f\u4e00\u79cd\u7ea6\u5b9a\uff0c\u81ea\u5df1\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u6709\u4e1a\u52a1\u7ea6\u5b9a\u4e0d\u540c\u72b6\u6001\u8fd4\u56de\u7684\u503c\u3002\u793a\u4f8b\u4ee3\u7801 0\uff1a\u5e93\u5b58\u4e3a 0\uff0c1\uff1a\u79d2\u6740\u6210\u529f\uff0c2\uff1a\u5df2\u79d2\u6740\u6210\u529f\u7684\u7528\u6237\u91cd\u590d\u62a2\u8d2d\u3002","title":"\u9996\u5148\uff0c\u7f16\u5199 lua \u811a\u672c\uff0c\u811a\u672c\u540d\u4e3a secKill.lua\uff1a"},{"location":"blog/seckill/redis_lua/#lua-redis-cli-sha","text":"Bash redis-cli script load \" $( cat /usr/local/redis/lua/secKill.lua ) \" \"63454a53284d9f6b30bdb6e5e12796a74f61f718\"","title":"lua \u811a\u672c\u7f16\u5199\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 redis-cli \u547d\u4ee4\u751f\u6210\u8be5\u811a\u672c\u7684 sha \u79d8\u94a5"},{"location":"blog/seckill/redis_lua/#lua-sha","text":"Bash $redis = new Redis () ; $redis ->connect ( \"192.168.111.128\" , 6379 ) ; $goodsId = 11211 ; $userId = mt_rand ( 10000 , 99999 ) ; $res = $redis ->evalSha ( '63454a53284d9f6b30bdb6e5e12796a74f61f718' , [ $userId , $goodsId ] , 2 ) ; \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5c06\u62a2\u8d2d\u903b\u8f91\u5199\u5230 lua \u811a\u672c\u540e\uff0cPHP \u4ee3\u7801\u5c31\u53d8\u5f97\u5f88\u5c11\u4e86\uff0c\u4ec5\u4ec5\u53ea\u6709 5 \u884c\u4ee3\u7801\u3002","title":"\u6700\u540e\uff0c\u62ff\u5230 lua \u811a\u672c\u7684 sha \u79d8\u94a5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u3002"},{"location":"blog/seckill/redis_lua/#_2","text":"\u7f16\u5199\u597d\u4ee3\u7801\uff0c\u63a5\u7740\u6211\u4eec\u5f00\u59cb\u5bf9\u4e0a\u8ff0\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u5546\u54c1\u7684\u5e93\u5b58\u91cf\uff0c\u6b63\u5e38\u903b\u8f91\u662f\u5728\u540e\u53f0\u5546\u54c1\u7ba1\u7406\u9875\u586b\u5199\u5177\u4f53\u5546\u54c1\u7684\u5e93\u5b58\u91cf\uff0c \u6b64\u5904\u5047\u8bbe\u6211\u4eec\u7684\u5546\u54c1 ID \u662f 11211\uff0c\u5546\u54c1\u6570\u91cf\u4e3a 10 \u4e2a\u3002 Bash $redis -cli > set secKill:11211:stock 10 \u6211\u4eec\u4f7f\u7528 ab \u538b\u6d4b\u5de5\u5177\u6a21\u62df 2000 \u4e2a\u7528\u6237\u5e76\u53d1\u91cf 200 \u6765\u6a21\u62df\u62a2\u8d2d\u5546\u54c1 ID \u4e3a 11211 \u7684\u5546\u54c1\u3002 Bash $ ab -n 2000 -c 200 http://www.master.com/index.php \u5982\u679c\u6ca1\u6709 ab \u5de5\u5177\u9700\u8981\u4f7f\u7528 yum -y install httpd-tools \u5b89\u88c5 \u538b\u6d4b\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u901a\u8fc7 RedisDesktopManager(RDM) \u8f6f\u4ef6\u6765\u67e5\u770b\u62a2\u8d2d\u7ed3\u679c\uff0c \u53ef\u4ee5\u770b\u5230\u5373\u4f7f\u662f 200 \u7684\u5e76\u53d1\u91cf\uff0c\u6700\u7ec8\u4e5f\u53ea\u6709 10 \u4e2a\u7528\u6237\u62a2\u8d2d\u5230\u5546\u54c1\uff0c\u5e76\u4e14\u62a2\u8d2d\u6210\u529f\u7684\u7528\u6237\u88ab\u5199\u5165\u5230\u4e86 secKill:11211:users \u7684\u96c6\u5408\u4e2d\uff0c \u6211\u4eec\u53ef\u4ee5\u53e6\u5916\u5f00\u4e00\u4e2a\u5b88\u62a4\u8fdb\u7a0b\u4e13\u95e8\u7528\u4e8e\u4ece\u96c6\u5408\u4e2d\u83b7\u53d6\u7528\u6237 ID \u5904\u7406\u540e\u7eed\u4e8b\u5b9c(\u5c06\u6570\u636e\u843d\u76d8\u5199\u5165\u6570\u636e\u5e93\u3001\u7ed9\u7528\u6237\u53d1\u77ed\u4fe1\u7b49) \u4f7f\u7528 Redis+Lua \u6765\u89e3\u51b3\u62a2\u8d2d\u79d2\u6740\u7c7b\u95ee\u9898\u662f\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u4e00\u79cd\u505a\u6cd5\uff0c\u5e0c\u671b\u5bf9\u6b63\u5728\u5f00\u53d1\u79d2\u6740\u62a2\u8d2d\u529f\u80fd\u7684\u4f60\u80fd\u4ea7\u751f\u5e2e\u52a9\u3002","title":"\u6d4b\u8bd5"},{"location":"blog/seckill/redlock-controversy/","text":"https://juejin.cn/post/6976538149904678925 Redis \u4f5c\u8005\u63d0\u51fa\u7684 Redlock \u65b9\u6848\u540e\uff0c\u9a6c\u4e0a\u53d7\u5230\u82f1\u56fd\u5251\u6865\u5927\u5b66\u3001\u4e1a\u754c\u8457\u540d\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e13\u5bb6 Martin \u7684\u8d28\u7591\uff01 \u8ba4\u4e3a\u8fd9\u4e2a Redlock \u7684\u7b97\u6cd5\u6a21\u578b\u662f\u6709\u95ee\u9898\u7684\uff0c\u5e76\u5199\u4e86\u7bc7\u6587\u4ef6\u5bf9\u5206\u5e03\u5f0f\u9501\u7684\u8bbe\u8ba1\uff0c\u63d0\u51fa\u4e86\u81ea\u5df1\u7684\u770b\u6cd5\u3002 \u4e4b\u540e\uff0cRedis \u4f5c\u8005 Antirez \u9762\u5bf9\u8d28\u7591\uff0c\u4e0d\u7518\u793a\u5f31\uff0c\u4e5f\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u53cd\u9a73\u4e86\u5bf9\u65b9\u7684\u89c2\u70b9\uff0c\u5e76\u8be6\u7ec6\u5256\u6790\u4e86 Redlock \u7b97\u6cd5\u6a21\u578b\u7684\u66f4\u591a\u8bbe\u8ba1\u7ec6\u8282\u3002 \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u4e89\u8bba\uff0c\u5728\u5f53\u65f6\u4e92\u8054\u7f51\u4e0a\u4e5f\u5f15\u8d77\u4e86\u975e\u5e38\u6fc0\u70c8\u7684\u8ba8\u8bba\u3002\u53cc\u65b9\u90fd\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u9886\u57df\u7684\u4e13\u5bb6\uff0c\u5374\u5bf9\u540c\u4e00\u4e2a\u95ee\u9898\u63d0\u51fa\u5f88\u591a\u76f8\u53cd\u7684\u8bba\u65ad\uff0c\u800c\u4e14\u4e8c\u4eba\u601d\u8def\u6e05\u6670\uff0c\u8bba\u636e\u5145\u5206\uff0c\u5230\u5e95\u8c01\u5bf9\u8c01\u9519\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e0b\u5206\u5e03\u5f0f\u4e13\u5bb6 Martin \u5bf9\u4e8e Relock \u7684\u8d28\u7591 \u5206\u5e03\u5f0f\u4e13\u5bb6 Martin \u5bf9\u4e8e Relock \u7684\u8d28\u7591 \u5728\u4ed6\u7684\u6587\u7ae0\u4e2d\uff0c\u4e3b\u8981\u9610\u8ff0\u4e86 4 \u4e2a\u8bba\u70b9\uff1a \u5206\u5e03\u5f0f\u9501\u7684\u504f\u597d Martin \u8868\u793a\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u6709\u4e24\u79cd\u504f\u597d \u6548\u7387 \uff1a\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u7684\u4e92\u65a5\u80fd\u529b\uff0c\u907f\u514d\u591a\u6b21\u505a\u91cd\u590d\u7684\u5de5\u4f5c\uff08\u4f8b\u5982\u4e00\u4e9b\u201c\u6602\u8d35\u201d\u7684\u8ba1\u7b97\u4efb\u52a1\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u8981\u6c42\u5373\u4f7f\u9501\u5931\u6548\uff0c\u4e5f\u4e0d\u4f1a\u5e26\u6765\u300c\u6076\u6027\u300d\u7684\u540e\u679c\u3002\u4f8b\u5982\u591a\u53d1\u4e86 1 \u6b21\u90ae\u4ef6\u7b49\u65e0\u4f24\u5927\u96c5\u7684\u573a\u666f\u3002 \u6b63\u786e\u6027 \uff1a\u4f7f\u7528\u9501\u7528\u6765\u9632\u6b62\u5e76\u53d1\u8fdb\u7a0b\u4e92\u76f8\u5e72\u6270\u3002\u5982\u679c\u9501\u5931\u6548\uff0c\u4f1a\u9020\u6210\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u4f5c\u540c\u4e00\u6761\u6570\u636e\uff0c\u4ea7\u751f\u7684\u540e\u679c\u662f\u6570\u636e\u4e25\u91cd\u9519\u8bef\u3001\u6c38\u4e45\u6027\u4e0d\u4e00\u81f4\u3001\u6570\u636e\u4e22\u5931\u7b49\u6076\u6027\u95ee\u9898\u3002 Martin \u8ba4\u4e3a\uff0c\u5982\u679c\u4f60\u662f\u4e3a\u4e86\u6548\u7387\uff0c\u90a3\u4e48\u4f7f\u7528\u5355\u673a\u7248 Redis \u5c31\u53ef\u4ee5\u4e86\uff0c\u5373\u4f7f\u5076\u5c14\u53d1\u751f\u9501\u5931\u6548\uff08\u5b95\u673a\u3001\u4e3b\u4ece\u5207\u6362\uff09\uff0c\u90fd\u4e0d\u4f1a\u4ea7\u751f\u4e25\u91cd\u7684\u540e\u679c\u3002\u800c\u4f7f\u7528 Redlock \u592a\u91cd\u4e86\uff0c\u6ca1\u5fc5\u8981\u3002 \u800c\u5982\u679c\u4f60\u662f\u4e3a\u4e86\u6b63\u786e\u6027\uff0cMartin \u8ba4\u4e3a Redlock \u6839\u672c\u8fbe\u4e0d\u5230\u5b89\u5168\u6027\u7684\u8981\u6c42\uff0c\u4e5f\u4f9d\u65e7\u5b58\u5728\u9501\u5931\u6548\u7684\u95ee\u9898\uff01 \u9501\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f1a\u9047\u5230\u7684\u95ee\u9898 Martin \u8868\u793a\uff0c\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u5b58\u5728\u7740\u5404\u79cd\u5f02\u5e38\u60c5\u51b5\uff0c\u8fd9\u4e9b\u5f02\u5e38\u573a\u666f\u4e3b\u8981\u5305\u62ec\u4e09\u5927\u5757\uff0c\u8fd9\u4e5f\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4f1a\u9047\u5230\u7684\u4e09\u5ea7\u5927\u5c71\uff1a NPC \u3002 N\uff1aNetwork Delay\uff0c\u7f51\u7edc\u5ef6\u8fdf P\uff1aProcess Pause\uff0c\u8fdb\u7a0b\u6682\u505c C\uff1aClock Drift\uff0c\u65f6\u949f\u6f02\u79fb Martin \u7528\u4e00\u4e2a\u8fdb\u7a0b\u6682\u505c\u7684\u4f8b\u5b50\uff0c\u6307\u51fa\u4e86 Redlock \u5b89\u5168\u6027\u95ee\u9898\uff1a \u5ba2\u6237\u7aef 1 \u8bf7\u6c42\u9501\u5b9a\u8282\u70b9 A\u3001B\u3001C\u3001D\u3001E \u5ba2\u6237\u7aef 1 \u7684\u62ff\u5230\u9501\u540e\uff0c\u8fdb\u5165\u8fdb\u7a0b\u6682\u505c\uff08\u65f6\u95f4\u6bd4\u8f83\u4e45\uff09 \u6240\u6709 Redis \u8282\u70b9\u4e0a\u7684\u9501\u90fd\u8fc7\u671f\u4e86 \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u5230\u4e86 A\u3001B\u3001C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 GC \u7ed3\u675f\uff0c\u8ba4\u4e3a\u6210\u529f\u83b7\u53d6\u9501 \u5ba2\u6237\u7aef 2 \u4e5f\u8ba4\u4e3a\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u53d1\u751f\u300c\u51b2\u7a81\u300d Martin \u8ba4\u4e3a\uff0c\u8fdb\u7a0b\u6682\u505c\u53ef\u80fd\u53d1\u751f\u5728\u7a0b\u5e8f\u7684\u4efb\u610f\u65f6\u523b\uff0c\u800c\u4e14\u6267\u884c\u65f6\u95f4\u662f\u4e0d\u53ef\u63a7\u7684\u3002 \u6ce8\uff1a\u5f53\u7136\uff0c\u5373\u4f7f\u6ca1\u6709\u8fdb\u7a0b\u6682\u505c\uff0c\u5728\u53d1\u751f\u7f51\u7edc\u5ef6\u8fdf\u3001\u65f6\u949f\u6f02\u79fb\u65f6\uff0c\u4e5f\u90fd\u6709\u53ef\u80fd\u5bfc\u81f4 Redlock \u51fa\u73b0\u6b64\u7c7b\u95ee\u9898\uff0c\u8fd9\u91cc Martin \u53ea\u662f\u62ff\u8fdb\u7a0b\u6682\u505c\u4e3e\u4f8b \u5047\u8bbe\u65f6\u949f\u6b63\u786e\u662f\u4e0d\u5408\u7406\u7684 Relock \u6709\u4e00\u4e2a\u9690\u542b\u6761\u4ef6\u662f\u6240\u6709\u7684\u4e3b\u673a\u65f6\u95f4\u90fd\u662f\u6b63\u786e\u7684\uff0c\u5982\u679c\u65f6\u95f4\u4e0d\u6b63\u786e\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u4f8b\u5982 \u5ba2\u6237\u7aef 1 \u83b7\u53d6\u5230\u8282\u70b9 A\u3001B\u3001C \u4e0a\u7684\u9501 \u8282\u70b9 C \u4e0a\u7684\u65f6\u949f\u300c\u5411\u524d\u8df3\u8dc3\u300d\uff0c\u5bfc\u81f4\u9501\u5230\u671f \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u8282\u70b9 C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 \u548c 2 \u73b0\u5728\u90fd\u76f8\u4fe1\u5b83\u4eec\u6301\u6709\u4e86\u9501\uff08\u51b2\u7a81\uff09 Martin \u8ba4\u4e3a Redlock \u5fc5\u987b\u300c\u5f3a\u4f9d\u8d56\u300d\u591a\u4e2a\u8282\u70b9\u7684\u65f6\u949f\u662f\u4fdd\u6301\u540c\u6b65\u7684\uff0c\u4e00\u65e6\u6709\u8282\u70b9\u65f6\u949f\u53d1\u751f\u9519\u8bef\uff0c\u90a3\u8fd9\u4e2a\u7b97\u6cd5\u6a21\u578b\u5c31\u5931\u6548\u4e86\u3002\u800c\u673a\u5668\u7684\u65f6\u949f\u53d1\u751f\u9519\u8bef\uff0c\u662f\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u7684\uff0c\u6bd4\u5982\uff1a \u7cfb\u7edf\u7ba1\u7406\u5458\u300c\u624b\u52a8\u4fee\u6539\u300d\u4e86\u673a\u5668\u65f6\u949f \u673a\u5668\u65f6\u949f\u5728\u540c\u6b65 NTP \u65f6\u95f4\u65f6\uff0c\u53d1\u751f\u4e86\u5927\u7684\u300c\u8df3\u8dc3\u300d \u603b\u4e4b\uff0cMartin \u8ba4\u4e3a\uff0cRedlock \u7684\u7b97\u6cd5\u662f\u5efa\u7acb\u5728\u300c\u540c\u6b65\u6a21\u578b\u300d\u57fa\u7840\u4e0a\u7684\uff0c\u6709\u5927\u91cf\u8d44\u6599\u7814\u7a76\u8868\u660e\uff0c\u540c\u6b65\u6a21\u578b\u7684\u5047\u8bbe\uff0c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u662f\u6709\u95ee\u9898\u7684\u3002\u5728\u6df7\u4e71\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e2d\uff0c\u4f60\u4e0d\u80fd\u5047\u8bbe\u7cfb\u7edf\u65f6\u949f\u5c31\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u975e\u5e38\u5c0f\u5fc3\u4f60\u7684\u5047\u8bbe\u3002 \u63d0\u51fa fecing token \u7684\u65b9\u6848\uff0c\u4fdd\u8bc1\u6b63\u786e\u6027 \u76f8\u5bf9\u5e94\u7684\uff0cMartin \u63d0\u51fa\u4e00\u79cd\u88ab\u53eb\u4f5c fecing token \u7684\u65b9\u6848\uff0c\u4fdd\u8bc1\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u6027\u3002(\u8fd9\u91cc\u611f\u53f9\u4e00\u53e5\uff0c\u5927\u795e\u5c31\u662f\u5927\u795e\uff0c\u4e0d\u5149\u80fd\u53d1\u73b0\u3001\u63d0\u51fa\u95ee\u9898\uff0c\u8fd8\u80fd\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848) \u8fd9\u4e2a\u6a21\u578b\u6d41\u7a0b\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u5728\u83b7\u53d6\u9501\u65f6\uff0c\u9501\u670d\u52a1\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u300c\u9012\u589e\u300d\u7684 token \u5ba2\u6237\u7aef\u62ff\u7740\u8fd9\u4e2a token \u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u5171\u4eab\u8d44\u6e90\u53ef\u4ee5\u6839\u636e token \u62d2\u7edd\u300c\u540e\u6765\u8005\u300d\u7684\u8bf7\u6c42 \u8fd9\u6837\u4e00\u6765\uff0c\u65e0\u8bba NPC \u54ea\u79cd\u5f02\u5e38\u60c5\u51b5\u53d1\u751f\uff0c\u90fd\u53ef\u4ee5\u4fdd\u8bc1\u5206\u5e03\u5f0f\u9501\u7684\u5b89\u5168\u6027\uff0c\u56e0\u4e3a\u5b83\u662f\u5efa\u7acb\u5728\u300c\u5f02\u6b65\u6a21\u578b\u300d\u4e0a\u7684\u3002 \u800c Redlock \u65e0\u6cd5\u63d0\u4f9b\u7c7b\u4f3c fecing token \u7684\u65b9\u6848\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u4fdd\u8bc1\u5b89\u5168\u6027\u3002 \u4ed6\u8fd8\u8868\u793a \u4e00\u4e2a\u597d\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u65e0\u8bba NPC \u600e\u4e48\u53d1\u751f\uff0c\u53ef\u4ee5\u4e0d\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u7ed9\u51fa\u7ed3\u679c\uff0c\u4f46\u5e76\u4e0d\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u53ea\u4f1a\u5f71\u54cd\u5230\u9501\u7684\u300c\u6027\u80fd\u300d\uff08\u6216\u79f0\u4e4b\u4e3a\u6d3b\u6027\uff09\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u5b83\u7684\u300c\u6b63\u786e\u6027\u300d\u3002 Martin \u7684\u7ed3\u8bba Redlock \u4e0d\u4f26\u4e0d\u7c7b\uff1a\u5bf9\u4e8e\u504f\u597d\u6548\u7387\u6765\u8bb2\uff0cRedlock \u6bd4\u8f83\u91cd\uff0c\u6ca1\u5fc5\u8981\u8fd9\u4e48\u505a\uff0c\u800c\u5bf9\u4e8e\u504f\u597d\u6b63\u786e\u6027\u6765\u8bf4\uff0cRedlock \u662f\u4e0d\u591f\u5b89\u5168\u7684\u3002 \u65f6\u949f\u5047\u8bbe\u4e0d\u5408\u7406\uff1a\u8be5\u7b97\u6cd5\u5bf9\u7cfb\u7edf\u65f6\u949f\u505a\u51fa\u4e86\u5371\u9669\u7684\u5047\u8bbe\uff08\u5047\u8bbe\u591a\u4e2a\u8282\u70b9\u673a\u5668\u65f6\u949f\u90fd\u662f\u4e00\u81f4\u7684\uff09\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u5047\u8bbe\uff0c\u9501\u5c31\u4f1a\u5931\u6548\u3002 \u65e0\u6cd5\u4fdd\u8bc1\u6b63\u786e\u6027\uff1aRedlock \u4e0d\u80fd\u63d0\u4f9b\u7c7b\u4f3c fencing token \u7684\u65b9\u6848\uff0c\u6240\u4ee5\u89e3\u51b3\u4e0d\u4e86\u6b63\u786e\u6027\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u6b63\u786e\u6027\uff0c\u8bf7\u4f7f\u7528\u6709\u300c\u5171\u8bc6\u7cfb\u7edf\u300d\u7684\u8f6f\u4ef6\uff0c\u4f8b\u5982 Zookeeper\u3002 \u4ee5\u4e0a\u5c31\u662f Martin \u53cd\u5bf9\u4f7f\u7528 Redlock \u7684\u89c2\u70b9\uff0c\u6709\u7406\u6709\u636e\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b Redis \u4f5c\u8005 Antirez \u662f\u5982\u4f55\u53cd\u9a73\u7684\u3002 Redis \u4f5c\u8005 Antirez \u7684\u53cd\u9a73 \u5728 Redis \u4f5c\u8005\u7684\u53cd\u9a73\u6587\u7ae0\u4e2d\uff0c\u6709 3 \u4e2a\u91cd\u70b9 \u65f6\u949f\u95ee\u9898 \u9996\u5148\uff0cRedis \u4f5c\u8005\u4e00\u773c\u5c31\u770b\u7a7f\u4e86\u5bf9\u65b9\u63d0\u51fa\u7684\u6700\u4e3a\u6838\u5fc3\u7684\u95ee\u9898\uff1a\u65f6\u949f\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48 Redis \u4f5c\u8005\u4f18\u5148\u89e3\u91ca\u65f6\u949f\u95ee\u9898\uff1f\u56e0\u4e3a\u5728\u540e\u9762\u7684\u53cd\u9a73\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u4f9d\u8d56\u8fd9\u4e2a\u57fa\u7840\u505a\u8fdb\u4e00\u6b65\u89e3\u91ca\u3002 Redis \u4f5c\u8005\u8868\u793a\uff0cRedlock \u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e00\u81f4\u7684\u65f6\u949f\uff0c\u53ea\u9700\u8981\u5927\u4f53\u4e00\u81f4\u5c31\u53ef\u4ee5\u4e86\uff0c\u5141\u8bb8\u6709\u300c\u8bef\u5dee\u300d\uff0c\u53ea\u8981\u8bef\u5dee\u4e0d\u8981\u8d85\u8fc7\u9501\u7684\u79df\u671f\u5373\u53ef\uff0c\u8fd9\u79cd\u5bf9\u4e8e\u65f6\u949f\u7684\u7cbe\u5ea6\u8981\u6c42\u5e76\u4e0d\u662f\u5f88\u9ad8\uff0c\u800c\u4e14\u8fd9\u4e5f\u7b26\u5408\u73b0\u5b9e\u73af\u5883\u3002 \u5bf9\u4e8e\u5bf9\u65b9\u63d0\u5230\u7684\u300c\u65f6\u949f\u4fee\u6539\u300d\u95ee\u9898\uff0cRedis \u4f5c\u8005\u53cd\u9a73\u5230\uff1a \u624b\u52a8\u4fee\u6539\u65f6\u949f\uff1a\u4e0d\u8981\u8fd9\u4e48\u505a\u5c31\u597d\u4e86\uff0c\u5426\u5219\u4f60\u76f4\u63a5\u4fee\u6539 Raft \u65e5\u5fd7\uff0c\u90a3 Raft \u4e5f\u4f1a\u65e0\u6cd5\u5de5\u4f5c... \u65f6\u949f\u8df3\u8dc3\uff1a\u901a\u8fc7\u300c\u6070\u5f53\u7684\u8fd0\u7ef4\u300d\uff0c\u4fdd\u8bc1\u673a\u5668\u65f6\u949f\u4e0d\u4f1a\u5927\u5e45\u5ea6\u8df3\u8dc3\uff08\u6bcf\u6b21\u901a\u8fc7\u5fae\u5c0f\u7684\u8c03\u6574\u6765\u5b8c\u6210\uff09\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u53ef\u4ee5\u505a\u5230\u7684 \u89e3\u91ca\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u95ee\u9898 Redis \u4f5c\u8005\u5bf9\u4e8e\u5bf9\u65b9\u63d0\u51fa\u7684\uff0c\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u53ef\u80fd\u5bfc\u81f4 Redlock \u5931\u6548\u7684\u95ee\u9898\uff0c\u4e5f\u505a\u4e86\u53cd\u9a73 \u6211\u4eec\u91cd\u65b0\u56de\u987e\u4e00\u4e0b\uff0cMartin \u63d0\u51fa\u7684\u95ee\u9898\u5047\u8bbe\uff1a \u5ba2\u6237\u7aef 1 \u8bf7\u6c42\u9501\u5b9a\u8282\u70b9 A\u3001B\u3001C\u3001D\u3001E \u5ba2\u6237\u7aef 1 \u7684\u62ff\u5230\u9501\u540e\uff0c\u8fdb\u5165\u8fdb\u7a0b\u6682\u505c\uff08\u65f6\u95f4\u6bd4\u8f83\u4e45\uff09 \u6240\u6709 Redis \u8282\u70b9\u4e0a\u7684\u9501\u90fd\u8fc7\u671f\u4e86 \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u5230\u4e86 A\u3001B\u3001C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 GC \u7ed3\u675f\uff0c\u8ba4\u4e3a\u6210\u529f\u83b7\u53d6\u9501 \u5ba2\u6237\u7aef 2 \u4e5f\u8ba4\u4e3a\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u53d1\u751f\u300c\u51b2\u7a81\u300d Redis \u4f5c\u8005\u53cd\u9a73\u5230\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5176\u5b9e\u662f\u6709\u95ee\u9898\u7684\uff0cRedlock \u662f\u53ef\u4ee5\u4fdd\u8bc1\u9501\u5b89\u5168\u7684\u3002\u8fd8\u8bb0\u5f97\u524d\u9762\u4ecb\u7ecd Redlock \u6d41\u7a0b\u7684\u90a3 5 \u6b65\u5417\uff1f\u8ba9\u6211\u4eec\u6765\u590d\u4e60\u4e00\u4e0b\u3002 \u5ba2\u6237\u7aef\u5148\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T1\u300d \u5ba2\u6237\u7aef\u4f9d\u6b21\u5411\u8fd9 5 \u4e2a Redis \u5b9e\u4f8b\u53d1\u8d77\u52a0\u9501\u8bf7\u6c42\uff08\u7528\u524d\u9762\u8bb2\u5230\u7684 SET \u547d\u4ee4\uff09\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff08\u6beb\u79d2\u7ea7\uff09\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u5b9e\u4f8b\u52a0\u9501\u5931\u8d25\uff08\u5305\u62ec\u7f51\u7edc\u8d85\u65f6\u3001\u9501\u88ab\u5176\u5b83\u4eba\u6301\u6709\u7b49\u5404\u79cd\u5f02\u5e38\u60c5\u51b5\uff09\uff0c\u5c31\u7acb\u5373\u5411\u4e0b\u4e00\u4e2a Redis \u5b9e\u4f8b\u7533\u8bf7\u52a0\u9501 \u5982\u679c\u5ba2\u6237\u7aef\u4ece >=3 \u4e2a\uff08\u5927\u591a\u6570\uff09\u4ee5\u4e0a Redis \u5b9e\u4f8b\u52a0\u9501\u6210\u529f\uff0c\u5219\u518d\u6b21\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T2\u300d\uff0c\u5982\u679c\u9501\u7684\u79df\u671f > T2 - T1 \uff0c\u6b64\u65f6\uff0c\u8ba4\u4e3a\u5ba2\u6237\u7aef\u52a0\u9501\u6210\u529f\uff0c\u5426\u5219\u8ba4\u4e3a\u52a0\u9501\u5931\u8d25 \u52a0\u9501\u6210\u529f\uff0c\u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u52a0\u9501\u5931\u8d25\u6216\u64cd\u4f5c\u7ed3\u675f\uff0c\u5411\u300c\u5168\u90e8\u8282\u70b9\u300d\u53d1\u8d77\u91ca\u653e\u9501\u8bf7\u6c42\uff08\u524d\u9762\u8bb2\u5230\u7684 Lua \u811a\u672c\u91ca\u653e\u9501\uff09 \u6ce8\u610f\uff0c\u91cd\u70b9\u662f 1-3\uff0c\u5728\u6b65\u9aa4 3\uff0c\u52a0\u9501\u6210\u529f\u540e\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T2\u300d\uff1f\u8fd8\u7528 T2 - T1 \u7684\u65f6\u95f4\uff0c\u4e0e\u9501\u7684\u8fc7\u671f\u65f6\u95f4\u505a\u6bd4\u8f83\uff1f Redis \u4f5c\u8005\u5f3a\u8c03\uff1a\u5982\u679c\u5728 1-3 \u53d1\u751f\u4e86\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u7b49\u8017\u65f6\u957f\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u90a3\u5728\u7b2c 3 \u6b65 T2 - T1\uff0c\u662f\u53ef\u4ee5\u68c0\u6d4b\u51fa\u6765\u7684\uff0c\u5982\u679c\u8d85\u51fa\u4e86\u9501\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u90a3\u8fd9\u65f6\u5c31\u8ba4\u4e3a\u52a0\u9501\u4f1a\u5931\u8d25\uff0c\u4e4b\u540e\u91ca\u653e\u6240\u6709\u8282\u70b9\u7684\u9501\u5c31\u597d\u4e86\uff01 Redis \u4f5c\u8005\u7ee7\u7eed\u8bba\u8ff0\uff0c\u5982\u679c\u5bf9\u65b9\u8ba4\u4e3a\uff0c\u53d1\u751f\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u662f\u5728\u6b65\u9aa4 3 \u4e4b\u540e\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u7aef\u786e\u8ba4\u62ff\u5230\u4e86\u9501\uff0c\u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u7684\u9014\u4e2d\u53d1\u751f\u4e86\u95ee\u9898\uff0c\u5bfc\u81f4\u9501\u5931\u6548\uff0c\u90a3\u8fd9\u4e0d\u6b62\u662f Redlock \u7684\u95ee\u9898\uff0c\u4efb\u4f55\u5176\u5b83\u9501\u670d\u52a1\u4f8b\u5982 Zookeeper\uff0c\u90fd\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u8fd9\u4e0d\u5728\u8ba8\u8bba\u8303\u7574\u5185\u3002 \u6240\u4ee5 Redis \u4f5c\u8005\u7684\u7ed3\u8bba\u662f\uff1a \u5ba2\u6237\u7aef\u5728\u62ff\u5230\u9501\u4e4b\u524d\uff0c\u65e0\u8bba\u7ecf\u5386\u4ec0\u4e48\u8017\u65f6\u957f\u95ee\u9898\uff0cRedlock \u90fd\u80fd\u591f\u5728\u7b2c 3 \u6b65\u68c0\u6d4b\u51fa\u6765 \u5ba2\u6237\u7aef\u5728\u62ff\u5230\u9501\u4e4b\u540e\uff0c\u53d1\u751f NPC\uff0c\u90a3 Redlock\u3001Zookeeper \u90fd\u65e0\u80fd\u4e3a\u529b \u6240\u4ee5\uff0cRedis \u4f5c\u8005\u8ba4\u4e3a Redlock \u5728\u4fdd\u8bc1\u65f6\u949f\u6b63\u786e\u7684\u57fa\u7840\u4e0a\uff0c\u662f\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u3002 \u8d28\u7591 fencing token \u673a\u5236 Redis \u4f5c\u8005\u5bf9\u4e8e\u5bf9\u65b9\u63d0\u51fa\u7684 fecing token \u673a\u5236\uff0c\u4e5f\u63d0\u51fa\u4e86\u8d28\u7591\uff0c\u4e3b\u8981\u5206\u4e3a 2 \u4e2a\u95ee\u9898 \u7b2c\u4e00\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u80fd\u62d2\u7edd\u65e7 token \u8fd9\u4e2a\u65b9\u6848\u5fc5\u987b\u8981\u6c42\u8981\u64cd\u4f5c\u7684\u300c\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u300d\u6709\u62d2\u7edd\u300c\u65e7 token\u300d\u7684\u80fd\u529b\u3002 \u5047\u8bbe\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u662f MySQL\uff0c\u6211\u4eec\u8981\u64cd\u4f5c MySQL\uff0c\u4ece\u9501\u670d\u52a1\u62ff\u5230\u4e00\u4e2a\u9012\u589e\u6570\u5b57\u7684 token\uff0c \u7136\u540e\u5ba2\u6237\u7aef\u8981\u5e26\u7740\u8fd9\u4e2a token \u53bb\u6539 MySQL \u7684\u67d0\u4e00\u884c\uff0c\u8fd9\u5c31\u9700\u8981\u5229\u7528 MySQL \u7684\u300c\u4e8b\u7269\u9694\u79bb\u6027\u300d\u6765\u505a\u3002 SQL // \u4e24\u4e2a\u5ba2\u6237\u7aef\u5fc5\u987b\u5229\u7528\u4e8b\u7269\u548c\u9694\u79bb\u6027\u8fbe\u5230\u76ee\u7684 // \u6ce8\u610f token \u7684\u5224\u65ad\u6761\u4ef6 UPDATE table T SET val = $ new_val WHERE id = $ id AND current_token < $ token \u4f46\u5982\u679c\u64cd\u4f5c\u7684\u4e0d\u662f MySQL \u800c\u662f\u5411\u78c1\u76d8\u4e0a\u5199\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u53d1\u8d77\u4e00\u4e2a HTTP \u8bf7\u6c42\uff0c\u90a3\u8fd9\u4e2a\u65b9\u6848\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff0c\u8fd9\u5bf9\u8981\u64cd\u4f5c\u7684\u8d44\u6e90\u670d\u52a1\u5668\uff0c\u63d0\u51fa\u4e86\u66f4\u9ad8\u7684\u8981\u6c42\u3002 \u518d\u8005\uff0c\u65e2\u7136\u8d44\u6e90\u670d\u52a1\u5668\u90fd\u6709\u4e86\u300c\u4e92\u65a5\u300d\u80fd\u529b\uff0c\u90a3\u8fd8\u8981\u5206\u5e03\u5f0f\u9501\u5e72\u4ec0\u4e48\uff1f \u6240\u4ee5\uff0cRedis \u4f5c\u8005\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u6848\u662f\u7ad9\u4e0d\u4f4f\u811a\u7684\u3002 \u7b2c\u4e8c Redlock \u5df2\u7ecf\u63d0\u4f9b\u4e86\u968f\u673a\u503c Redlock \u201c\u5b9e\u73b0\u201d fecing token \u9000\u4e00\u6b65\u8bb2\uff0c\u5373\u4f7f Redlock \u6ca1\u6709\u63d0\u4f9b fecing token \u7684\u80fd\u529b\uff0c\u4f46 Redlock \u5df2\u7ecf\u63d0\u4f9b\u4e86\u968f\u673a\u503c\uff08\u5c31\u662f\u4e4b\u524d\u8bb2\u7684 UUID\uff09\uff0c\u5229\u7528\u8fd9\u4e2a\u968f\u673a\u503c\uff0c\u4e5f\u53ef\u4ee5\u8fbe\u5230\u4e0e fecing token \u540c\u6837\u7684\u6548\u679c\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528 Redlock \u62ff\u5230\u9501 \u5ba2\u6237\u7aef\u5728\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u4e4b\u524d\uff0c\u5148\u628a\u8fd9\u4e2a\u9501\u7684 VALUE\uff0c\u5728\u8981\u64cd\u4f5c\u7684\u5171\u4eab\u8d44\u6e90\u4e0a\u505a\u6807\u8bb0 \u5ba2\u6237\u7aef\u5904\u7406\u4e1a\u52a1\u903b\u8f91\uff0c\u6700\u540e\uff0c\u5728\u4fee\u6539\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5224\u65ad\u8fd9\u4e2a\u6807\u8bb0\u662f\u5426\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u4e00\u6837\u624d\u4fee\u6539\uff08\u7c7b\u4f3c CAS \u7684\u601d\u8def\uff09 \u8fd8\u662f\u4ee5 MySQL \u4e3a\u4f8b,\u8fd9\u4e2a\u5b9e\u73b0\u5982\u4e0b \u5ba2\u6237\u7aef\u4f7f\u7528 Redlock \u62ff\u5230\u9501 \u5ba2\u6237\u7aef\u8981\u4fee\u6539 MySQL \u8868\u4e2d\u7684\u67d0\u4e00\u884c\u6570\u636e\u4e4b\u524d\uff0c\u5148\u628a\u9501\u7684 VALUE \u66f4\u65b0\u5230\u8fd9\u4e00\u884c\u7684\u67d0\u4e2a\u5b57\u6bb5\u4e2d\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a current_token \u5b57\u6bb5) \u5ba2\u6237\u7aef\u5904\u7406\u4e1a\u52a1\u903b\u8f91 \u5ba2\u6237\u7aef\u4fee\u6539 MySQL \u7684\u8fd9\u4e00\u884c\u6570\u636e\uff0c\u628a VALUE \u5f53\u505a WHERE \u6761\u4ef6\uff0c\u518d\u4fee\u6539 SQL UPDATE table T SET val = $ new_val WHERE id = $ id AND current_token = $ redlock_value \u53ef\u89c1\uff0c\u8fd9\u79cd\u65b9\u6848\u901a\u8fc7\u4f9d\u8d56 MySQL \u7684\u4e8b\u7269\u673a\u5236\uff0c\u4e5f\u8fbe\u5230\u5bf9\u65b9\u63d0\u5230\u7684 fecing token \u4e00\u6837\u7684\u6548\u679c\u3002 \u64cd\u4f5c\u987a\u5e8f \u5bf9\u4e8e\u4e0a\u8ff0\u901a\u8fc7 Redlock \u201c\u5b9e\u73b0\u201d fecing token \u7684\u8bbe\u8ba1\uff0c\u7f51\u53cb\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u4e24\u4e2a\u5ba2\u6237\u7aef\u901a\u8fc7\u8fd9\u79cd\u65b9\u6848\uff0c\u5148\u300c\u6807\u8bb0\u300d\u518d\u300c\u68c0\u67e5 + \u4fee\u6539\u300d\u5171\u4eab\u8d44\u6e90\uff0c\u90a3\u8fd9\u4e24\u4e2a\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u987a\u5e8f\u65e0\u6cd5\u4fdd\u8bc1\u554a\uff1f \u800c\u7528 Martin \u63d0\u5230\u7684 fecing token\uff0c\u56e0\u4e3a\u8fd9\u4e2a token \u662f\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57\uff0c\u8d44\u6e90\u670d\u52a1\u5668\u53ef\u4ee5\u62d2\u7edd\u5c0f\u7684 token \u8bf7\u6c42\uff0c\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u300c\u987a\u5e8f\u6027\u300d\uff01 Redis \u4f5c\u8005\u5bf9\u8fd9\u95ee\u9898\u505a\u4e86\u4e0d\u540c\u7684\u89e3\u91ca,\u6211\u89c9\u5f97\u975e\u5e38\u6709\u610f\u601d\uff0c\u4ed6\u8ba4\u4e3a\uff1a\u5206\u5e03\u5f0f\u9501\u7684\u672c\u8d28\uff0c\u662f\u4e3a\u4e86\u300c\u4e92\u65a5\u300d\uff0c\u53ea\u8981\u80fd\u4fdd\u8bc1\u4e24\u4e2a\u5ba2\u6237\u7aef\u5728\u5e76\u53d1\u65f6\uff0c\u4e00\u4e2a\u6210\u529f\uff0c\u4e00\u4e2a\u5931\u8d25\u5c31\u597d\u4e86\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u300c\u987a\u5e8f\u6027\u300d\u3002 \u524d\u9762 Martin \u7684\u8d28\u7591\u4e2d\uff0c\u4e00\u76f4\u5f88\u5173\u5fc3\u8fd9\u4e2a\u987a\u5e8f\u6027\u95ee\u9898\uff0c\u4f46 Redis \u7684\u4f5c\u8005\u7684\u770b\u6cd5\u5374\u4e0d\u540c\u3002 \u7efc\u4e0a\uff0cRedis \u4f5c\u8005\u7684\u7ed3\u8bba\uff1a \u4f5c\u8005\u540c\u610f\u5bf9\u65b9\u5173\u4e8e\u300c\u65f6\u949f\u8df3\u8dc3\u300d\u5bf9 Redlock \u7684\u5f71\u54cd\uff0c\u4f46\u8ba4\u4e3a\u65f6\u949f\u8df3\u8dc3\u662f\u53ef\u4ee5\u907f\u514d\u7684\uff0c\u53d6\u51b3\u4e8e\u57fa\u7840\u8bbe\u65bd\u548c\u8fd0\u7ef4\u3002 Redlock \u5728\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u8003\u8651\u4e86 NPC \u95ee\u9898\uff0c\u5728 Redlock \u6b65\u9aa4 3 \u4e4b\u524d\u51fa\u73b0 NPC\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u9501\u7684\u6b63\u786e\u6027\uff0c\u4f46\u5728\u6b65\u9aa4 3 \u4e4b\u540e\u53d1\u751f NPC\uff0c\u4e0d\u6b62\u662f Redlock \u6709\u95ee\u9898\uff0c\u5176\u5b83\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u540c\u6837\u4e5f\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u4e0d\u5728\u8ba8\u8bba\u8303\u7574\u5185\u3002 \u57fa\u4e8e Zookeeper \u7684\u5206\u5e03\u5f0f\u9501 Martin \u5728\u4ed6\u7684\u6587\u7ae0\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u8ba4\u4e3a\u5b83\u66f4\u5b89\u5168 Zookeeper \u53c8\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u9501\u7684\u5462\uff1f \u5ba2\u6237\u7aef 1 \u548c 2 \u90fd\u5c1d\u8bd5\u521b\u5efa\u300c\u4e34\u65f6\u8282\u70b9\u300d\uff0c\u4f8b\u5982 /lock \u5047\u8bbe\u5ba2\u6237\u7aef 1 \u5148\u5230\u8fbe\uff0c\u5219\u52a0\u9501\u6210\u529f\uff0c\u5ba2\u6237\u7aef 2 \u52a0\u9501\u5931\u8d25 \u5ba2\u6237\u7aef 1 \u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u5ba2\u6237\u7aef 1 \u5220\u9664 /lock \u8282\u70b9\uff0c\u91ca\u653e\u9501 Zookeeper \u4e0d\u50cf Redis \u90a3\u6837\uff0c\u9700\u8981\u8003\u8651\u9501\u7684\u8fc7\u671f\u65f6\u95f4\u95ee\u9898\uff0c\u5b83\u662f\u91c7\u7528\u4e86\u300c\u4e34\u65f6\u8282\u70b9\u300d\uff0c\u4fdd\u8bc1\u5ba2\u6237\u7aef 1 \u62ff\u5230\u9501\u540e\uff0c\u53ea\u8981\u8fde\u63a5\u4e0d\u65ad\uff0c\u5c31\u53ef\u4ee5\u4e00\u76f4\u6301\u6709\u9501\u3002 \u5982\u679c\u5ba2\u6237\u7aef 1 \u5f02\u5e38\u5d29\u6e83\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e34\u65f6\u8282\u70b9\u4f1a\u81ea\u52a8\u5220\u9664\uff0c\u4fdd\u8bc1\u4e86\u9501\u4e00\u5b9a\u4f1a\u88ab\u91ca\u653e\u3002 \u5173\u4e8e Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u5177\u4f53\u8be6\u60c5\uff0c\u53c2\u8003 Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501 \u4fdd\u6301\u6301\u6709\u9501 \u5ba2\u6237\u7aef 1 \u521b\u5efa\u4e34\u65f6\u8282\u70b9\u540e\uff0cZookeeper \u662f\u5982\u4f55\u4fdd\u8bc1\u8ba9\u8fd9\u4e2a\u5ba2\u6237\u7aef\u4e00\u76f4\u6301\u6709\u9501\u5462\uff1f \u539f\u56e0\u5c31\u5728\u4e8e\uff0c\u5ba2\u6237\u7aef 1 \u6b64\u65f6\u4f1a\u4e0e Zookeeper \u670d\u52a1\u5668\u7ef4\u62a4\u4e00\u4e2a Session\uff0c\u8fd9\u4e2a Session \u4f1a\u4f9d\u8d56\u5ba2\u6237\u7aef\u300c\u5b9a\u65f6\u5fc3\u8df3\u300d\u6765\u7ef4\u6301\u8fde\u63a5\u3002 \u5982\u679c Zookeeper \u957f\u65f6\u95f4\u6536\u4e0d\u5230\u5ba2\u6237\u7aef\u7684\u5fc3\u8df3\uff0c\u5c31\u8ba4\u4e3a\u8fd9\u4e2a Session \u8fc7\u671f\u4e86\uff0c\u4e5f\u4f1a\u628a\u8fd9\u4e2a\u4e34\u65f6\u8282\u70b9\u5220\u9664\u3002 Zookeeper \u5206\u5e03\u5f0f\u9501\u4e0b\u7684 NPC \u95ee\u9898 \u540c\u6837\u7684 Zookeeper \u7684\u5206\u5e03\u5f0f\u9501\u4e5f\u5b58\u5728 NPC \u95ee\u9898\uff0c\u4ee5\u8fdb\u7a0b\u6682\u505c\u4e3a\u4f8b \u5ba2\u6237\u7aef 1 \u521b\u5efa\u4e34\u65f6\u8282\u70b9 /lock \u6210\u529f\uff0c\u62ff\u5230\u4e86\u9501 \u5ba2\u6237\u7aef 1 \u53d1\u751f\u957f\u65f6\u95f4\u8fdb\u7a0b\u6682\u505c \u5ba2\u6237\u7aef 1 \u65e0\u6cd5\u7ed9 Zookeeper \u53d1\u9001\u5fc3\u8df3\uff0cZookeeper \u628a\u4e34\u65f6\u8282\u70b9\u300c\u5220\u9664\u300d \u5ba2\u6237\u7aef 2 \u521b\u5efa\u4e34\u65f6\u8282\u70b9 /lock \u6210\u529f\uff0c\u62ff\u5230\u4e86\u9501 \u5ba2\u6237\u7aef 1 \u8fdb\u7a0b\u6682\u505c\u7ed3\u675f\uff0c\u5b83\u4ecd\u7136\u8ba4\u4e3a\u81ea\u5df1\u6301\u6709\u9501\uff08\u51b2\u7a81\uff09 \u53ef\u89c1\uff0c\u5373\u4f7f\u662f\u4f7f\u7528 Zookeeper\uff0c\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u8fdb\u7a0b\u6682\u505c\u3001\u7f51\u7edc\u5ef6\u8fdf\u5f02\u5e38\u573a\u666f\u4e0b\u7684\u5b89\u5168\u6027\u3002 \u8fd9\u5c31\u662f\u524d\u9762 Redis \u4f5c\u8005\u5728\u53cd\u9a73\u7684\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\uff1a\u5982\u679c \u8fdb\u7a0b\u6682\u505c\u3001\u7f51\u7edc\u5ef6\u8fdf\u662f\u53d1\u751f\u5728\u5ba2\u6237\u7aef\u62ff\u5230\u9501\u4e4b\u540e\uff0c\u90a3\u4e0d\u6b62 Redlock \u6709\u95ee\u9898\uff0c\u5176\u5b83\u9501\u670d\u52a1\u90fd\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a \u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4e00\u5b9a\u662f\u5b89\u5168\u7684\u3002 Zookeeper \u5206\u5e03\u5f0f\u9501\u7684\u4f18\u7f3a\u70b9 Zookeeper \u7684\u4f18\u70b9\uff1a \u4e0d\u9700\u8981\u8003\u8651\u9501\u7684\u8fc7\u671f\u65f6\u95f4 watch \u673a\u5236\uff0c\u52a0\u9501\u5931\u8d25\uff0c\u53ef\u4ee5 watch \u7b49\u5f85\u9501\u91ca\u653e\uff0c\u5b9e\u73b0\u4e50\u89c2\u9501 \u4f46\u5b83\u7684\u52a3\u52bf\u662f\uff1a \u6027\u80fd\u4e0d\u5982 Redis \u90e8\u7f72\u548c\u8fd0\u7ef4\u6210\u672c\u9ad8 \u5ba2\u6237\u7aef\u4e0e Zookeeper \u7684\u957f\u65f6\u95f4\u5931\u8054\uff0c\u9501\u88ab\u91ca\u653e\u95ee\u9898 \u5230\u5e95\u8981\u4e0d\u8981\u7528 Redlock\uff1f \u524d\u9762\u4e5f\u5206\u6790\u4e86\uff0cRedlock \u53ea\u6709\u5efa\u7acb\u5728\u300c\u65f6\u949f\u6b63\u786e\u300d\u7684\u524d\u63d0\u4e0b\uff0c\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e2a\u524d\u63d0\uff0c\u90a3\u4e48\u53ef\u4ee5\u62ff\u6765\u4f7f\u7528\u3002 \u4f46\u4fdd\u8bc1\u65f6\u949f\u6b63\u786e\uff0c\u5e76\u4e0d\u662f\u7b80\u5355 \u7b2c\u4e00\uff0c\u4ece\u786c\u4ef6\u89d2\u5ea6\u6765\u8bf4\uff0c\u65f6\u949f\u53d1\u751f\u504f\u79fb\u662f\u65f6\u6709\u53d1\u751f\uff0c\u65e0\u6cd5\u907f\u514d\u3002\u4f8b\u5982\uff0cCPU \u6e29\u5ea6\u3001\u673a\u5668\u8d1f\u8f7d\u3001\u82af\u7247\u6750\u6599\u90fd\u662f\u6709\u53ef\u80fd\u5bfc\u81f4\u65f6\u949f\u53d1\u751f\u504f\u79fb\u7684\u3002 \u7b2c\u4e8c\uff0c\u4eba\u4e3a\u9519\u8bef\u4e5f\u662f\u5f88\u96be\u5b8c\u5168\u907f\u514d\uff0c\u8fd0\u7ef4\u66b4\u529b\u4fee\u6539\u65f6\u949f\uff0c\u8fdb\u800c\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6b63\u786e\u6027 \u6240\u4ee5\uff0c\u6211\u5bf9 Redlock \u7684\u4e2a\u4eba\u770b\u6cd5\u662f\uff0c\u5c3d\u91cf\u4e0d\u7528\u5b83\uff0c\u800c\u4e14\u5b83\u7684\u6027\u80fd\u4e0d\u5982\u5355\u673a\u7248 Redis\uff0c\u90e8\u7f72\u6210\u672c\u4e5f\u9ad8\uff0c\u5efa\u8bae\u4f18\u5148\u8003\u8651\u4f7f\u7528\u4e3b\u4ece + \u54e8\u5175\u7684\u6a21\u5f0f \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501 \u90a3\u600e\u4e48\u4fdd\u8bc1\u6b63\u786e\u6027\u4e86\uff1f \u6b63\u786e\u4f7f\u7528\u5206\u5e03\u5f0f\u9501 \u4ece\u4e0a\u9762\u6211\u4eec\u4e5f\u4e86\u89e3\u5230\uff0c\u4efb\u4f55\u5206\u5e03\u5f0f\u9501\u90fd\u65e0\u6cd5\u5b8c\u5168\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u56e0\u6b64\u5206\u5e03\u5f0f\u9501\u65f6\u5efa\u8bae \u5728\u4e0a\u5c42\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u5b8c\u6210\u300c\u4e92\u65a5\u300d\u76ee\u7684\uff0c\u867d\u7136\u6781\u7aef\u60c5\u51b5\u4e0b\u9501\u4f1a\u5931\u6548\uff0c\u4f46\u5b83\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u628a\u5e76\u53d1\u8bf7\u6c42\u963b\u6321\u5728\u6700\u4e0a\u5c42\uff0c\u51cf\u8f7b\u64cd\u4f5c\u8d44\u6e90\u5c42\u7684\u538b\u529b\u3002 \u4f46\u5bf9\u4e8e\u8981\u6c42\u6570\u636e\u7edd\u5bf9\u6b63\u786e\u7684\u4e1a\u52a1\uff0c\u5728\u8d44\u6e90\u5c42\u4e00\u5b9a\u8981\u505a\u597d\u300c\u515c\u5e95\u300d\uff0c\u53d1\u751f\u6781\u7aef\u60c5\u51b5\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u9020\u6210\u5f71\u54cd","title":"Redis Redlock \u7684\u4e89\u8bba"},{"location":"blog/seckill/redlock-controversy/#martin-relock","text":"\u5728\u4ed6\u7684\u6587\u7ae0\u4e2d\uff0c\u4e3b\u8981\u9610\u8ff0\u4e86 4 \u4e2a\u8bba\u70b9\uff1a","title":"\u5206\u5e03\u5f0f\u4e13\u5bb6 Martin \u5bf9\u4e8e Relock \u7684\u8d28\u7591"},{"location":"blog/seckill/redlock-controversy/#_1","text":"Martin \u8868\u793a\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u6709\u4e24\u79cd\u504f\u597d \u6548\u7387 \uff1a\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u7684\u4e92\u65a5\u80fd\u529b\uff0c\u907f\u514d\u591a\u6b21\u505a\u91cd\u590d\u7684\u5de5\u4f5c\uff08\u4f8b\u5982\u4e00\u4e9b\u201c\u6602\u8d35\u201d\u7684\u8ba1\u7b97\u4efb\u52a1\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u8981\u6c42\u5373\u4f7f\u9501\u5931\u6548\uff0c\u4e5f\u4e0d\u4f1a\u5e26\u6765\u300c\u6076\u6027\u300d\u7684\u540e\u679c\u3002\u4f8b\u5982\u591a\u53d1\u4e86 1 \u6b21\u90ae\u4ef6\u7b49\u65e0\u4f24\u5927\u96c5\u7684\u573a\u666f\u3002 \u6b63\u786e\u6027 \uff1a\u4f7f\u7528\u9501\u7528\u6765\u9632\u6b62\u5e76\u53d1\u8fdb\u7a0b\u4e92\u76f8\u5e72\u6270\u3002\u5982\u679c\u9501\u5931\u6548\uff0c\u4f1a\u9020\u6210\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u4f5c\u540c\u4e00\u6761\u6570\u636e\uff0c\u4ea7\u751f\u7684\u540e\u679c\u662f\u6570\u636e\u4e25\u91cd\u9519\u8bef\u3001\u6c38\u4e45\u6027\u4e0d\u4e00\u81f4\u3001\u6570\u636e\u4e22\u5931\u7b49\u6076\u6027\u95ee\u9898\u3002 Martin \u8ba4\u4e3a\uff0c\u5982\u679c\u4f60\u662f\u4e3a\u4e86\u6548\u7387\uff0c\u90a3\u4e48\u4f7f\u7528\u5355\u673a\u7248 Redis \u5c31\u53ef\u4ee5\u4e86\uff0c\u5373\u4f7f\u5076\u5c14\u53d1\u751f\u9501\u5931\u6548\uff08\u5b95\u673a\u3001\u4e3b\u4ece\u5207\u6362\uff09\uff0c\u90fd\u4e0d\u4f1a\u4ea7\u751f\u4e25\u91cd\u7684\u540e\u679c\u3002\u800c\u4f7f\u7528 Redlock \u592a\u91cd\u4e86\uff0c\u6ca1\u5fc5\u8981\u3002 \u800c\u5982\u679c\u4f60\u662f\u4e3a\u4e86\u6b63\u786e\u6027\uff0cMartin \u8ba4\u4e3a Redlock \u6839\u672c\u8fbe\u4e0d\u5230\u5b89\u5168\u6027\u7684\u8981\u6c42\uff0c\u4e5f\u4f9d\u65e7\u5b58\u5728\u9501\u5931\u6548\u7684\u95ee\u9898\uff01","title":"\u5206\u5e03\u5f0f\u9501\u7684\u504f\u597d"},{"location":"blog/seckill/redlock-controversy/#_2","text":"Martin \u8868\u793a\uff0c\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u5b58\u5728\u7740\u5404\u79cd\u5f02\u5e38\u60c5\u51b5\uff0c\u8fd9\u4e9b\u5f02\u5e38\u573a\u666f\u4e3b\u8981\u5305\u62ec\u4e09\u5927\u5757\uff0c\u8fd9\u4e5f\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u4f1a\u9047\u5230\u7684\u4e09\u5ea7\u5927\u5c71\uff1a NPC \u3002 N\uff1aNetwork Delay\uff0c\u7f51\u7edc\u5ef6\u8fdf P\uff1aProcess Pause\uff0c\u8fdb\u7a0b\u6682\u505c C\uff1aClock Drift\uff0c\u65f6\u949f\u6f02\u79fb Martin \u7528\u4e00\u4e2a\u8fdb\u7a0b\u6682\u505c\u7684\u4f8b\u5b50\uff0c\u6307\u51fa\u4e86 Redlock \u5b89\u5168\u6027\u95ee\u9898\uff1a \u5ba2\u6237\u7aef 1 \u8bf7\u6c42\u9501\u5b9a\u8282\u70b9 A\u3001B\u3001C\u3001D\u3001E \u5ba2\u6237\u7aef 1 \u7684\u62ff\u5230\u9501\u540e\uff0c\u8fdb\u5165\u8fdb\u7a0b\u6682\u505c\uff08\u65f6\u95f4\u6bd4\u8f83\u4e45\uff09 \u6240\u6709 Redis \u8282\u70b9\u4e0a\u7684\u9501\u90fd\u8fc7\u671f\u4e86 \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u5230\u4e86 A\u3001B\u3001C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 GC \u7ed3\u675f\uff0c\u8ba4\u4e3a\u6210\u529f\u83b7\u53d6\u9501 \u5ba2\u6237\u7aef 2 \u4e5f\u8ba4\u4e3a\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u53d1\u751f\u300c\u51b2\u7a81\u300d Martin \u8ba4\u4e3a\uff0c\u8fdb\u7a0b\u6682\u505c\u53ef\u80fd\u53d1\u751f\u5728\u7a0b\u5e8f\u7684\u4efb\u610f\u65f6\u523b\uff0c\u800c\u4e14\u6267\u884c\u65f6\u95f4\u662f\u4e0d\u53ef\u63a7\u7684\u3002 \u6ce8\uff1a\u5f53\u7136\uff0c\u5373\u4f7f\u6ca1\u6709\u8fdb\u7a0b\u6682\u505c\uff0c\u5728\u53d1\u751f\u7f51\u7edc\u5ef6\u8fdf\u3001\u65f6\u949f\u6f02\u79fb\u65f6\uff0c\u4e5f\u90fd\u6709\u53ef\u80fd\u5bfc\u81f4 Redlock \u51fa\u73b0\u6b64\u7c7b\u95ee\u9898\uff0c\u8fd9\u91cc Martin \u53ea\u662f\u62ff\u8fdb\u7a0b\u6682\u505c\u4e3e\u4f8b","title":"\u9501\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f1a\u9047\u5230\u7684\u95ee\u9898"},{"location":"blog/seckill/redlock-controversy/#_3","text":"Relock \u6709\u4e00\u4e2a\u9690\u542b\u6761\u4ef6\u662f\u6240\u6709\u7684\u4e3b\u673a\u65f6\u95f4\u90fd\u662f\u6b63\u786e\u7684\uff0c\u5982\u679c\u65f6\u95f4\u4e0d\u6b63\u786e\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u4f8b\u5982 \u5ba2\u6237\u7aef 1 \u83b7\u53d6\u5230\u8282\u70b9 A\u3001B\u3001C \u4e0a\u7684\u9501 \u8282\u70b9 C \u4e0a\u7684\u65f6\u949f\u300c\u5411\u524d\u8df3\u8dc3\u300d\uff0c\u5bfc\u81f4\u9501\u5230\u671f \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u8282\u70b9 C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 \u548c 2 \u73b0\u5728\u90fd\u76f8\u4fe1\u5b83\u4eec\u6301\u6709\u4e86\u9501\uff08\u51b2\u7a81\uff09 Martin \u8ba4\u4e3a Redlock \u5fc5\u987b\u300c\u5f3a\u4f9d\u8d56\u300d\u591a\u4e2a\u8282\u70b9\u7684\u65f6\u949f\u662f\u4fdd\u6301\u540c\u6b65\u7684\uff0c\u4e00\u65e6\u6709\u8282\u70b9\u65f6\u949f\u53d1\u751f\u9519\u8bef\uff0c\u90a3\u8fd9\u4e2a\u7b97\u6cd5\u6a21\u578b\u5c31\u5931\u6548\u4e86\u3002\u800c\u673a\u5668\u7684\u65f6\u949f\u53d1\u751f\u9519\u8bef\uff0c\u662f\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u7684\uff0c\u6bd4\u5982\uff1a \u7cfb\u7edf\u7ba1\u7406\u5458\u300c\u624b\u52a8\u4fee\u6539\u300d\u4e86\u673a\u5668\u65f6\u949f \u673a\u5668\u65f6\u949f\u5728\u540c\u6b65 NTP \u65f6\u95f4\u65f6\uff0c\u53d1\u751f\u4e86\u5927\u7684\u300c\u8df3\u8dc3\u300d \u603b\u4e4b\uff0cMartin \u8ba4\u4e3a\uff0cRedlock \u7684\u7b97\u6cd5\u662f\u5efa\u7acb\u5728\u300c\u540c\u6b65\u6a21\u578b\u300d\u57fa\u7840\u4e0a\u7684\uff0c\u6709\u5927\u91cf\u8d44\u6599\u7814\u7a76\u8868\u660e\uff0c\u540c\u6b65\u6a21\u578b\u7684\u5047\u8bbe\uff0c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u662f\u6709\u95ee\u9898\u7684\u3002\u5728\u6df7\u4e71\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e2d\uff0c\u4f60\u4e0d\u80fd\u5047\u8bbe\u7cfb\u7edf\u65f6\u949f\u5c31\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u975e\u5e38\u5c0f\u5fc3\u4f60\u7684\u5047\u8bbe\u3002","title":"\u5047\u8bbe\u65f6\u949f\u6b63\u786e\u662f\u4e0d\u5408\u7406\u7684"},{"location":"blog/seckill/redlock-controversy/#fecing-token","text":"\u76f8\u5bf9\u5e94\u7684\uff0cMartin \u63d0\u51fa\u4e00\u79cd\u88ab\u53eb\u4f5c fecing token \u7684\u65b9\u6848\uff0c\u4fdd\u8bc1\u5206\u5e03\u5f0f\u9501\u7684\u6b63\u786e\u6027\u3002(\u8fd9\u91cc\u611f\u53f9\u4e00\u53e5\uff0c\u5927\u795e\u5c31\u662f\u5927\u795e\uff0c\u4e0d\u5149\u80fd\u53d1\u73b0\u3001\u63d0\u51fa\u95ee\u9898\uff0c\u8fd8\u80fd\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848) \u8fd9\u4e2a\u6a21\u578b\u6d41\u7a0b\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u5728\u83b7\u53d6\u9501\u65f6\uff0c\u9501\u670d\u52a1\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u300c\u9012\u589e\u300d\u7684 token \u5ba2\u6237\u7aef\u62ff\u7740\u8fd9\u4e2a token \u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u5171\u4eab\u8d44\u6e90\u53ef\u4ee5\u6839\u636e token \u62d2\u7edd\u300c\u540e\u6765\u8005\u300d\u7684\u8bf7\u6c42 \u8fd9\u6837\u4e00\u6765\uff0c\u65e0\u8bba NPC \u54ea\u79cd\u5f02\u5e38\u60c5\u51b5\u53d1\u751f\uff0c\u90fd\u53ef\u4ee5\u4fdd\u8bc1\u5206\u5e03\u5f0f\u9501\u7684\u5b89\u5168\u6027\uff0c\u56e0\u4e3a\u5b83\u662f\u5efa\u7acb\u5728\u300c\u5f02\u6b65\u6a21\u578b\u300d\u4e0a\u7684\u3002 \u800c Redlock \u65e0\u6cd5\u63d0\u4f9b\u7c7b\u4f3c fecing token \u7684\u65b9\u6848\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u4fdd\u8bc1\u5b89\u5168\u6027\u3002 \u4ed6\u8fd8\u8868\u793a \u4e00\u4e2a\u597d\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u65e0\u8bba NPC \u600e\u4e48\u53d1\u751f\uff0c\u53ef\u4ee5\u4e0d\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u7ed9\u51fa\u7ed3\u679c\uff0c\u4f46\u5e76\u4e0d\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u53ea\u4f1a\u5f71\u54cd\u5230\u9501\u7684\u300c\u6027\u80fd\u300d\uff08\u6216\u79f0\u4e4b\u4e3a\u6d3b\u6027\uff09\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u5b83\u7684\u300c\u6b63\u786e\u6027\u300d\u3002","title":"\u63d0\u51fa fecing token \u7684\u65b9\u6848\uff0c\u4fdd\u8bc1\u6b63\u786e\u6027"},{"location":"blog/seckill/redlock-controversy/#martin","text":"Redlock \u4e0d\u4f26\u4e0d\u7c7b\uff1a\u5bf9\u4e8e\u504f\u597d\u6548\u7387\u6765\u8bb2\uff0cRedlock \u6bd4\u8f83\u91cd\uff0c\u6ca1\u5fc5\u8981\u8fd9\u4e48\u505a\uff0c\u800c\u5bf9\u4e8e\u504f\u597d\u6b63\u786e\u6027\u6765\u8bf4\uff0cRedlock \u662f\u4e0d\u591f\u5b89\u5168\u7684\u3002 \u65f6\u949f\u5047\u8bbe\u4e0d\u5408\u7406\uff1a\u8be5\u7b97\u6cd5\u5bf9\u7cfb\u7edf\u65f6\u949f\u505a\u51fa\u4e86\u5371\u9669\u7684\u5047\u8bbe\uff08\u5047\u8bbe\u591a\u4e2a\u8282\u70b9\u673a\u5668\u65f6\u949f\u90fd\u662f\u4e00\u81f4\u7684\uff09\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u5047\u8bbe\uff0c\u9501\u5c31\u4f1a\u5931\u6548\u3002 \u65e0\u6cd5\u4fdd\u8bc1\u6b63\u786e\u6027\uff1aRedlock \u4e0d\u80fd\u63d0\u4f9b\u7c7b\u4f3c fencing token \u7684\u65b9\u6848\uff0c\u6240\u4ee5\u89e3\u51b3\u4e0d\u4e86\u6b63\u786e\u6027\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u6b63\u786e\u6027\uff0c\u8bf7\u4f7f\u7528\u6709\u300c\u5171\u8bc6\u7cfb\u7edf\u300d\u7684\u8f6f\u4ef6\uff0c\u4f8b\u5982 Zookeeper\u3002 \u4ee5\u4e0a\u5c31\u662f Martin \u53cd\u5bf9\u4f7f\u7528 Redlock \u7684\u89c2\u70b9\uff0c\u6709\u7406\u6709\u636e\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b Redis \u4f5c\u8005 Antirez \u662f\u5982\u4f55\u53cd\u9a73\u7684\u3002","title":"Martin \u7684\u7ed3\u8bba"},{"location":"blog/seckill/redlock-controversy/#redis-antirez","text":"\u5728 Redis \u4f5c\u8005\u7684\u53cd\u9a73\u6587\u7ae0\u4e2d\uff0c\u6709 3 \u4e2a\u91cd\u70b9","title":"Redis \u4f5c\u8005 Antirez \u7684\u53cd\u9a73"},{"location":"blog/seckill/redlock-controversy/#_4","text":"\u9996\u5148\uff0cRedis \u4f5c\u8005\u4e00\u773c\u5c31\u770b\u7a7f\u4e86\u5bf9\u65b9\u63d0\u51fa\u7684\u6700\u4e3a\u6838\u5fc3\u7684\u95ee\u9898\uff1a\u65f6\u949f\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48 Redis \u4f5c\u8005\u4f18\u5148\u89e3\u91ca\u65f6\u949f\u95ee\u9898\uff1f\u56e0\u4e3a\u5728\u540e\u9762\u7684\u53cd\u9a73\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u4f9d\u8d56\u8fd9\u4e2a\u57fa\u7840\u505a\u8fdb\u4e00\u6b65\u89e3\u91ca\u3002 Redis \u4f5c\u8005\u8868\u793a\uff0cRedlock \u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e00\u81f4\u7684\u65f6\u949f\uff0c\u53ea\u9700\u8981\u5927\u4f53\u4e00\u81f4\u5c31\u53ef\u4ee5\u4e86\uff0c\u5141\u8bb8\u6709\u300c\u8bef\u5dee\u300d\uff0c\u53ea\u8981\u8bef\u5dee\u4e0d\u8981\u8d85\u8fc7\u9501\u7684\u79df\u671f\u5373\u53ef\uff0c\u8fd9\u79cd\u5bf9\u4e8e\u65f6\u949f\u7684\u7cbe\u5ea6\u8981\u6c42\u5e76\u4e0d\u662f\u5f88\u9ad8\uff0c\u800c\u4e14\u8fd9\u4e5f\u7b26\u5408\u73b0\u5b9e\u73af\u5883\u3002 \u5bf9\u4e8e\u5bf9\u65b9\u63d0\u5230\u7684\u300c\u65f6\u949f\u4fee\u6539\u300d\u95ee\u9898\uff0cRedis \u4f5c\u8005\u53cd\u9a73\u5230\uff1a \u624b\u52a8\u4fee\u6539\u65f6\u949f\uff1a\u4e0d\u8981\u8fd9\u4e48\u505a\u5c31\u597d\u4e86\uff0c\u5426\u5219\u4f60\u76f4\u63a5\u4fee\u6539 Raft \u65e5\u5fd7\uff0c\u90a3 Raft \u4e5f\u4f1a\u65e0\u6cd5\u5de5\u4f5c... \u65f6\u949f\u8df3\u8dc3\uff1a\u901a\u8fc7\u300c\u6070\u5f53\u7684\u8fd0\u7ef4\u300d\uff0c\u4fdd\u8bc1\u673a\u5668\u65f6\u949f\u4e0d\u4f1a\u5927\u5e45\u5ea6\u8df3\u8dc3\uff08\u6bcf\u6b21\u901a\u8fc7\u5fae\u5c0f\u7684\u8c03\u6574\u6765\u5b8c\u6210\uff09\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u53ef\u4ee5\u505a\u5230\u7684","title":"\u65f6\u949f\u95ee\u9898"},{"location":"blog/seckill/redlock-controversy/#_5","text":"Redis \u4f5c\u8005\u5bf9\u4e8e\u5bf9\u65b9\u63d0\u51fa\u7684\uff0c\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u53ef\u80fd\u5bfc\u81f4 Redlock \u5931\u6548\u7684\u95ee\u9898\uff0c\u4e5f\u505a\u4e86\u53cd\u9a73 \u6211\u4eec\u91cd\u65b0\u56de\u987e\u4e00\u4e0b\uff0cMartin \u63d0\u51fa\u7684\u95ee\u9898\u5047\u8bbe\uff1a \u5ba2\u6237\u7aef 1 \u8bf7\u6c42\u9501\u5b9a\u8282\u70b9 A\u3001B\u3001C\u3001D\u3001E \u5ba2\u6237\u7aef 1 \u7684\u62ff\u5230\u9501\u540e\uff0c\u8fdb\u5165\u8fdb\u7a0b\u6682\u505c\uff08\u65f6\u95f4\u6bd4\u8f83\u4e45\uff09 \u6240\u6709 Redis \u8282\u70b9\u4e0a\u7684\u9501\u90fd\u8fc7\u671f\u4e86 \u5ba2\u6237\u7aef 2 \u83b7\u53d6\u5230\u4e86 A\u3001B\u3001C\u3001D\u3001E \u4e0a\u7684\u9501 \u5ba2\u6237\u7aef 1 GC \u7ed3\u675f\uff0c\u8ba4\u4e3a\u6210\u529f\u83b7\u53d6\u9501 \u5ba2\u6237\u7aef 2 \u4e5f\u8ba4\u4e3a\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u53d1\u751f\u300c\u51b2\u7a81\u300d Redis \u4f5c\u8005\u53cd\u9a73\u5230\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5176\u5b9e\u662f\u6709\u95ee\u9898\u7684\uff0cRedlock \u662f\u53ef\u4ee5\u4fdd\u8bc1\u9501\u5b89\u5168\u7684\u3002\u8fd8\u8bb0\u5f97\u524d\u9762\u4ecb\u7ecd Redlock \u6d41\u7a0b\u7684\u90a3 5 \u6b65\u5417\uff1f\u8ba9\u6211\u4eec\u6765\u590d\u4e60\u4e00\u4e0b\u3002 \u5ba2\u6237\u7aef\u5148\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T1\u300d \u5ba2\u6237\u7aef\u4f9d\u6b21\u5411\u8fd9 5 \u4e2a Redis \u5b9e\u4f8b\u53d1\u8d77\u52a0\u9501\u8bf7\u6c42\uff08\u7528\u524d\u9762\u8bb2\u5230\u7684 SET \u547d\u4ee4\uff09\uff0c\u5e76\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff08\u6beb\u79d2\u7ea7\uff09\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u5b9e\u4f8b\u52a0\u9501\u5931\u8d25\uff08\u5305\u62ec\u7f51\u7edc\u8d85\u65f6\u3001\u9501\u88ab\u5176\u5b83\u4eba\u6301\u6709\u7b49\u5404\u79cd\u5f02\u5e38\u60c5\u51b5\uff09\uff0c\u5c31\u7acb\u5373\u5411\u4e0b\u4e00\u4e2a Redis \u5b9e\u4f8b\u7533\u8bf7\u52a0\u9501 \u5982\u679c\u5ba2\u6237\u7aef\u4ece >=3 \u4e2a\uff08\u5927\u591a\u6570\uff09\u4ee5\u4e0a Redis \u5b9e\u4f8b\u52a0\u9501\u6210\u529f\uff0c\u5219\u518d\u6b21\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T2\u300d\uff0c\u5982\u679c\u9501\u7684\u79df\u671f > T2 - T1 \uff0c\u6b64\u65f6\uff0c\u8ba4\u4e3a\u5ba2\u6237\u7aef\u52a0\u9501\u6210\u529f\uff0c\u5426\u5219\u8ba4\u4e3a\u52a0\u9501\u5931\u8d25 \u52a0\u9501\u6210\u529f\uff0c\u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u52a0\u9501\u5931\u8d25\u6216\u64cd\u4f5c\u7ed3\u675f\uff0c\u5411\u300c\u5168\u90e8\u8282\u70b9\u300d\u53d1\u8d77\u91ca\u653e\u9501\u8bf7\u6c42\uff08\u524d\u9762\u8bb2\u5230\u7684 Lua \u811a\u672c\u91ca\u653e\u9501\uff09 \u6ce8\u610f\uff0c\u91cd\u70b9\u662f 1-3\uff0c\u5728\u6b65\u9aa4 3\uff0c\u52a0\u9501\u6210\u529f\u540e\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u83b7\u53d6\u300c\u5f53\u524d\u65f6\u95f4\u6233 T2\u300d\uff1f\u8fd8\u7528 T2 - T1 \u7684\u65f6\u95f4\uff0c\u4e0e\u9501\u7684\u8fc7\u671f\u65f6\u95f4\u505a\u6bd4\u8f83\uff1f Redis \u4f5c\u8005\u5f3a\u8c03\uff1a\u5982\u679c\u5728 1-3 \u53d1\u751f\u4e86\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u7b49\u8017\u65f6\u957f\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u90a3\u5728\u7b2c 3 \u6b65 T2 - T1\uff0c\u662f\u53ef\u4ee5\u68c0\u6d4b\u51fa\u6765\u7684\uff0c\u5982\u679c\u8d85\u51fa\u4e86\u9501\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u90a3\u8fd9\u65f6\u5c31\u8ba4\u4e3a\u52a0\u9501\u4f1a\u5931\u8d25\uff0c\u4e4b\u540e\u91ca\u653e\u6240\u6709\u8282\u70b9\u7684\u9501\u5c31\u597d\u4e86\uff01 Redis \u4f5c\u8005\u7ee7\u7eed\u8bba\u8ff0\uff0c\u5982\u679c\u5bf9\u65b9\u8ba4\u4e3a\uff0c\u53d1\u751f\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u662f\u5728\u6b65\u9aa4 3 \u4e4b\u540e\uff0c\u4e5f\u5c31\u662f\u5ba2\u6237\u7aef\u786e\u8ba4\u62ff\u5230\u4e86\u9501\uff0c\u53bb\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u7684\u9014\u4e2d\u53d1\u751f\u4e86\u95ee\u9898\uff0c\u5bfc\u81f4\u9501\u5931\u6548\uff0c\u90a3\u8fd9\u4e0d\u6b62\u662f Redlock \u7684\u95ee\u9898\uff0c\u4efb\u4f55\u5176\u5b83\u9501\u670d\u52a1\u4f8b\u5982 Zookeeper\uff0c\u90fd\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u8fd9\u4e0d\u5728\u8ba8\u8bba\u8303\u7574\u5185\u3002 \u6240\u4ee5 Redis \u4f5c\u8005\u7684\u7ed3\u8bba\u662f\uff1a \u5ba2\u6237\u7aef\u5728\u62ff\u5230\u9501\u4e4b\u524d\uff0c\u65e0\u8bba\u7ecf\u5386\u4ec0\u4e48\u8017\u65f6\u957f\u95ee\u9898\uff0cRedlock \u90fd\u80fd\u591f\u5728\u7b2c 3 \u6b65\u68c0\u6d4b\u51fa\u6765 \u5ba2\u6237\u7aef\u5728\u62ff\u5230\u9501\u4e4b\u540e\uff0c\u53d1\u751f NPC\uff0c\u90a3 Redlock\u3001Zookeeper \u90fd\u65e0\u80fd\u4e3a\u529b \u6240\u4ee5\uff0cRedis \u4f5c\u8005\u8ba4\u4e3a Redlock \u5728\u4fdd\u8bc1\u65f6\u949f\u6b63\u786e\u7684\u57fa\u7840\u4e0a\uff0c\u662f\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u3002","title":"\u89e3\u91ca\u7f51\u7edc\u5ef6\u8fdf\u3001\u8fdb\u7a0b\u6682\u505c\u95ee\u9898"},{"location":"blog/seckill/redlock-controversy/#fencing-token","text":"Redis \u4f5c\u8005\u5bf9\u4e8e\u5bf9\u65b9\u63d0\u51fa\u7684 fecing token \u673a\u5236\uff0c\u4e5f\u63d0\u51fa\u4e86\u8d28\u7591\uff0c\u4e3b\u8981\u5206\u4e3a 2 \u4e2a\u95ee\u9898","title":"\u8d28\u7591 fencing token \u673a\u5236"},{"location":"blog/seckill/redlock-controversy/#token","text":"\u8fd9\u4e2a\u65b9\u6848\u5fc5\u987b\u8981\u6c42\u8981\u64cd\u4f5c\u7684\u300c\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u300d\u6709\u62d2\u7edd\u300c\u65e7 token\u300d\u7684\u80fd\u529b\u3002 \u5047\u8bbe\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u662f MySQL\uff0c\u6211\u4eec\u8981\u64cd\u4f5c MySQL\uff0c\u4ece\u9501\u670d\u52a1\u62ff\u5230\u4e00\u4e2a\u9012\u589e\u6570\u5b57\u7684 token\uff0c \u7136\u540e\u5ba2\u6237\u7aef\u8981\u5e26\u7740\u8fd9\u4e2a token \u53bb\u6539 MySQL \u7684\u67d0\u4e00\u884c\uff0c\u8fd9\u5c31\u9700\u8981\u5229\u7528 MySQL \u7684\u300c\u4e8b\u7269\u9694\u79bb\u6027\u300d\u6765\u505a\u3002 SQL // \u4e24\u4e2a\u5ba2\u6237\u7aef\u5fc5\u987b\u5229\u7528\u4e8b\u7269\u548c\u9694\u79bb\u6027\u8fbe\u5230\u76ee\u7684 // \u6ce8\u610f token \u7684\u5224\u65ad\u6761\u4ef6 UPDATE table T SET val = $ new_val WHERE id = $ id AND current_token < $ token \u4f46\u5982\u679c\u64cd\u4f5c\u7684\u4e0d\u662f MySQL \u800c\u662f\u5411\u78c1\u76d8\u4e0a\u5199\u4e00\u4e2a\u6587\u4ef6\uff0c\u6216\u53d1\u8d77\u4e00\u4e2a HTTP \u8bf7\u6c42\uff0c\u90a3\u8fd9\u4e2a\u65b9\u6848\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff0c\u8fd9\u5bf9\u8981\u64cd\u4f5c\u7684\u8d44\u6e90\u670d\u52a1\u5668\uff0c\u63d0\u51fa\u4e86\u66f4\u9ad8\u7684\u8981\u6c42\u3002 \u518d\u8005\uff0c\u65e2\u7136\u8d44\u6e90\u670d\u52a1\u5668\u90fd\u6709\u4e86\u300c\u4e92\u65a5\u300d\u80fd\u529b\uff0c\u90a3\u8fd8\u8981\u5206\u5e03\u5f0f\u9501\u5e72\u4ec0\u4e48\uff1f \u6240\u4ee5\uff0cRedis \u4f5c\u8005\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u6848\u662f\u7ad9\u4e0d\u4f4f\u811a\u7684\u3002","title":"\u7b2c\u4e00\u5171\u4eab\u8d44\u6e90\u670d\u52a1\u5668\u80fd\u62d2\u7edd\u65e7 token"},{"location":"blog/seckill/redlock-controversy/#redlock","text":"Redlock \u201c\u5b9e\u73b0\u201d fecing token \u9000\u4e00\u6b65\u8bb2\uff0c\u5373\u4f7f Redlock \u6ca1\u6709\u63d0\u4f9b fecing token \u7684\u80fd\u529b\uff0c\u4f46 Redlock \u5df2\u7ecf\u63d0\u4f9b\u4e86\u968f\u673a\u503c\uff08\u5c31\u662f\u4e4b\u524d\u8bb2\u7684 UUID\uff09\uff0c\u5229\u7528\u8fd9\u4e2a\u968f\u673a\u503c\uff0c\u4e5f\u53ef\u4ee5\u8fbe\u5230\u4e0e fecing token \u540c\u6837\u7684\u6548\u679c\u3002 \u5ba2\u6237\u7aef\u4f7f\u7528 Redlock \u62ff\u5230\u9501 \u5ba2\u6237\u7aef\u5728\u64cd\u4f5c\u5171\u4eab\u8d44\u6e90\u4e4b\u524d\uff0c\u5148\u628a\u8fd9\u4e2a\u9501\u7684 VALUE\uff0c\u5728\u8981\u64cd\u4f5c\u7684\u5171\u4eab\u8d44\u6e90\u4e0a\u505a\u6807\u8bb0 \u5ba2\u6237\u7aef\u5904\u7406\u4e1a\u52a1\u903b\u8f91\uff0c\u6700\u540e\uff0c\u5728\u4fee\u6539\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5224\u65ad\u8fd9\u4e2a\u6807\u8bb0\u662f\u5426\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u4e00\u6837\u624d\u4fee\u6539\uff08\u7c7b\u4f3c CAS \u7684\u601d\u8def\uff09 \u8fd8\u662f\u4ee5 MySQL \u4e3a\u4f8b,\u8fd9\u4e2a\u5b9e\u73b0\u5982\u4e0b \u5ba2\u6237\u7aef\u4f7f\u7528 Redlock \u62ff\u5230\u9501 \u5ba2\u6237\u7aef\u8981\u4fee\u6539 MySQL \u8868\u4e2d\u7684\u67d0\u4e00\u884c\u6570\u636e\u4e4b\u524d\uff0c\u5148\u628a\u9501\u7684 VALUE \u66f4\u65b0\u5230\u8fd9\u4e00\u884c\u7684\u67d0\u4e2a\u5b57\u6bb5\u4e2d\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a current_token \u5b57\u6bb5) \u5ba2\u6237\u7aef\u5904\u7406\u4e1a\u52a1\u903b\u8f91 \u5ba2\u6237\u7aef\u4fee\u6539 MySQL \u7684\u8fd9\u4e00\u884c\u6570\u636e\uff0c\u628a VALUE \u5f53\u505a WHERE \u6761\u4ef6\uff0c\u518d\u4fee\u6539 SQL UPDATE table T SET val = $ new_val WHERE id = $ id AND current_token = $ redlock_value \u53ef\u89c1\uff0c\u8fd9\u79cd\u65b9\u6848\u901a\u8fc7\u4f9d\u8d56 MySQL \u7684\u4e8b\u7269\u673a\u5236\uff0c\u4e5f\u8fbe\u5230\u5bf9\u65b9\u63d0\u5230\u7684 fecing token \u4e00\u6837\u7684\u6548\u679c\u3002","title":"\u7b2c\u4e8c Redlock \u5df2\u7ecf\u63d0\u4f9b\u4e86\u968f\u673a\u503c"},{"location":"blog/seckill/redlock-controversy/#_6","text":"\u5bf9\u4e8e\u4e0a\u8ff0\u901a\u8fc7 Redlock \u201c\u5b9e\u73b0\u201d fecing token \u7684\u8bbe\u8ba1\uff0c\u7f51\u53cb\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u4e24\u4e2a\u5ba2\u6237\u7aef\u901a\u8fc7\u8fd9\u79cd\u65b9\u6848\uff0c\u5148\u300c\u6807\u8bb0\u300d\u518d\u300c\u68c0\u67e5 + \u4fee\u6539\u300d\u5171\u4eab\u8d44\u6e90\uff0c\u90a3\u8fd9\u4e24\u4e2a\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u987a\u5e8f\u65e0\u6cd5\u4fdd\u8bc1\u554a\uff1f \u800c\u7528 Martin \u63d0\u5230\u7684 fecing token\uff0c\u56e0\u4e3a\u8fd9\u4e2a token \u662f\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57\uff0c\u8d44\u6e90\u670d\u52a1\u5668\u53ef\u4ee5\u62d2\u7edd\u5c0f\u7684 token \u8bf7\u6c42\uff0c\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u300c\u987a\u5e8f\u6027\u300d\uff01 Redis \u4f5c\u8005\u5bf9\u8fd9\u95ee\u9898\u505a\u4e86\u4e0d\u540c\u7684\u89e3\u91ca,\u6211\u89c9\u5f97\u975e\u5e38\u6709\u610f\u601d\uff0c\u4ed6\u8ba4\u4e3a\uff1a\u5206\u5e03\u5f0f\u9501\u7684\u672c\u8d28\uff0c\u662f\u4e3a\u4e86\u300c\u4e92\u65a5\u300d\uff0c\u53ea\u8981\u80fd\u4fdd\u8bc1\u4e24\u4e2a\u5ba2\u6237\u7aef\u5728\u5e76\u53d1\u65f6\uff0c\u4e00\u4e2a\u6210\u529f\uff0c\u4e00\u4e2a\u5931\u8d25\u5c31\u597d\u4e86\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u300c\u987a\u5e8f\u6027\u300d\u3002 \u524d\u9762 Martin \u7684\u8d28\u7591\u4e2d\uff0c\u4e00\u76f4\u5f88\u5173\u5fc3\u8fd9\u4e2a\u987a\u5e8f\u6027\u95ee\u9898\uff0c\u4f46 Redis \u7684\u4f5c\u8005\u7684\u770b\u6cd5\u5374\u4e0d\u540c\u3002 \u7efc\u4e0a\uff0cRedis \u4f5c\u8005\u7684\u7ed3\u8bba\uff1a \u4f5c\u8005\u540c\u610f\u5bf9\u65b9\u5173\u4e8e\u300c\u65f6\u949f\u8df3\u8dc3\u300d\u5bf9 Redlock \u7684\u5f71\u54cd\uff0c\u4f46\u8ba4\u4e3a\u65f6\u949f\u8df3\u8dc3\u662f\u53ef\u4ee5\u907f\u514d\u7684\uff0c\u53d6\u51b3\u4e8e\u57fa\u7840\u8bbe\u65bd\u548c\u8fd0\u7ef4\u3002 Redlock \u5728\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u8003\u8651\u4e86 NPC \u95ee\u9898\uff0c\u5728 Redlock \u6b65\u9aa4 3 \u4e4b\u524d\u51fa\u73b0 NPC\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u9501\u7684\u6b63\u786e\u6027\uff0c\u4f46\u5728\u6b65\u9aa4 3 \u4e4b\u540e\u53d1\u751f NPC\uff0c\u4e0d\u6b62\u662f Redlock \u6709\u95ee\u9898\uff0c\u5176\u5b83\u5206\u5e03\u5f0f\u9501\u670d\u52a1\u540c\u6837\u4e5f\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u4e0d\u5728\u8ba8\u8bba\u8303\u7574\u5185\u3002","title":"\u64cd\u4f5c\u987a\u5e8f"},{"location":"blog/seckill/redlock-controversy/#zookeeper","text":"Martin \u5728\u4ed6\u7684\u6587\u7ae0\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u8ba4\u4e3a\u5b83\u66f4\u5b89\u5168 Zookeeper \u53c8\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u9501\u7684\u5462\uff1f \u5ba2\u6237\u7aef 1 \u548c 2 \u90fd\u5c1d\u8bd5\u521b\u5efa\u300c\u4e34\u65f6\u8282\u70b9\u300d\uff0c\u4f8b\u5982 /lock \u5047\u8bbe\u5ba2\u6237\u7aef 1 \u5148\u5230\u8fbe\uff0c\u5219\u52a0\u9501\u6210\u529f\uff0c\u5ba2\u6237\u7aef 2 \u52a0\u9501\u5931\u8d25 \u5ba2\u6237\u7aef 1 \u64cd\u4f5c\u5171\u4eab\u8d44\u6e90 \u5ba2\u6237\u7aef 1 \u5220\u9664 /lock \u8282\u70b9\uff0c\u91ca\u653e\u9501 Zookeeper \u4e0d\u50cf Redis \u90a3\u6837\uff0c\u9700\u8981\u8003\u8651\u9501\u7684\u8fc7\u671f\u65f6\u95f4\u95ee\u9898\uff0c\u5b83\u662f\u91c7\u7528\u4e86\u300c\u4e34\u65f6\u8282\u70b9\u300d\uff0c\u4fdd\u8bc1\u5ba2\u6237\u7aef 1 \u62ff\u5230\u9501\u540e\uff0c\u53ea\u8981\u8fde\u63a5\u4e0d\u65ad\uff0c\u5c31\u53ef\u4ee5\u4e00\u76f4\u6301\u6709\u9501\u3002 \u5982\u679c\u5ba2\u6237\u7aef 1 \u5f02\u5e38\u5d29\u6e83\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e34\u65f6\u8282\u70b9\u4f1a\u81ea\u52a8\u5220\u9664\uff0c\u4fdd\u8bc1\u4e86\u9501\u4e00\u5b9a\u4f1a\u88ab\u91ca\u653e\u3002 \u5173\u4e8e Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u7684\u5177\u4f53\u8be6\u60c5\uff0c\u53c2\u8003 Zookeeper \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501","title":"\u57fa\u4e8e Zookeeper \u7684\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/redlock-controversy/#_7","text":"\u5ba2\u6237\u7aef 1 \u521b\u5efa\u4e34\u65f6\u8282\u70b9\u540e\uff0cZookeeper \u662f\u5982\u4f55\u4fdd\u8bc1\u8ba9\u8fd9\u4e2a\u5ba2\u6237\u7aef\u4e00\u76f4\u6301\u6709\u9501\u5462\uff1f \u539f\u56e0\u5c31\u5728\u4e8e\uff0c\u5ba2\u6237\u7aef 1 \u6b64\u65f6\u4f1a\u4e0e Zookeeper \u670d\u52a1\u5668\u7ef4\u62a4\u4e00\u4e2a Session\uff0c\u8fd9\u4e2a Session \u4f1a\u4f9d\u8d56\u5ba2\u6237\u7aef\u300c\u5b9a\u65f6\u5fc3\u8df3\u300d\u6765\u7ef4\u6301\u8fde\u63a5\u3002 \u5982\u679c Zookeeper \u957f\u65f6\u95f4\u6536\u4e0d\u5230\u5ba2\u6237\u7aef\u7684\u5fc3\u8df3\uff0c\u5c31\u8ba4\u4e3a\u8fd9\u4e2a Session \u8fc7\u671f\u4e86\uff0c\u4e5f\u4f1a\u628a\u8fd9\u4e2a\u4e34\u65f6\u8282\u70b9\u5220\u9664\u3002","title":"\u4fdd\u6301\u6301\u6709\u9501"},{"location":"blog/seckill/redlock-controversy/#zookeeper-npc","text":"\u540c\u6837\u7684 Zookeeper \u7684\u5206\u5e03\u5f0f\u9501\u4e5f\u5b58\u5728 NPC \u95ee\u9898\uff0c\u4ee5\u8fdb\u7a0b\u6682\u505c\u4e3a\u4f8b \u5ba2\u6237\u7aef 1 \u521b\u5efa\u4e34\u65f6\u8282\u70b9 /lock \u6210\u529f\uff0c\u62ff\u5230\u4e86\u9501 \u5ba2\u6237\u7aef 1 \u53d1\u751f\u957f\u65f6\u95f4\u8fdb\u7a0b\u6682\u505c \u5ba2\u6237\u7aef 1 \u65e0\u6cd5\u7ed9 Zookeeper \u53d1\u9001\u5fc3\u8df3\uff0cZookeeper \u628a\u4e34\u65f6\u8282\u70b9\u300c\u5220\u9664\u300d \u5ba2\u6237\u7aef 2 \u521b\u5efa\u4e34\u65f6\u8282\u70b9 /lock \u6210\u529f\uff0c\u62ff\u5230\u4e86\u9501 \u5ba2\u6237\u7aef 1 \u8fdb\u7a0b\u6682\u505c\u7ed3\u675f\uff0c\u5b83\u4ecd\u7136\u8ba4\u4e3a\u81ea\u5df1\u6301\u6709\u9501\uff08\u51b2\u7a81\uff09 \u53ef\u89c1\uff0c\u5373\u4f7f\u662f\u4f7f\u7528 Zookeeper\uff0c\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u8fdb\u7a0b\u6682\u505c\u3001\u7f51\u7edc\u5ef6\u8fdf\u5f02\u5e38\u573a\u666f\u4e0b\u7684\u5b89\u5168\u6027\u3002 \u8fd9\u5c31\u662f\u524d\u9762 Redis \u4f5c\u8005\u5728\u53cd\u9a73\u7684\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\uff1a\u5982\u679c \u8fdb\u7a0b\u6682\u505c\u3001\u7f51\u7edc\u5ef6\u8fdf\u662f\u53d1\u751f\u5728\u5ba2\u6237\u7aef\u62ff\u5230\u9501\u4e4b\u540e\uff0c\u90a3\u4e0d\u6b62 Redlock \u6709\u95ee\u9898\uff0c\u5176\u5b83\u9501\u670d\u52a1\u90fd\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a \u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4e00\u5b9a\u662f\u5b89\u5168\u7684\u3002","title":"Zookeeper \u5206\u5e03\u5f0f\u9501\u4e0b\u7684 NPC \u95ee\u9898"},{"location":"blog/seckill/redlock-controversy/#zookeeper_1","text":"Zookeeper \u7684\u4f18\u70b9\uff1a \u4e0d\u9700\u8981\u8003\u8651\u9501\u7684\u8fc7\u671f\u65f6\u95f4 watch \u673a\u5236\uff0c\u52a0\u9501\u5931\u8d25\uff0c\u53ef\u4ee5 watch \u7b49\u5f85\u9501\u91ca\u653e\uff0c\u5b9e\u73b0\u4e50\u89c2\u9501 \u4f46\u5b83\u7684\u52a3\u52bf\u662f\uff1a \u6027\u80fd\u4e0d\u5982 Redis \u90e8\u7f72\u548c\u8fd0\u7ef4\u6210\u672c\u9ad8 \u5ba2\u6237\u7aef\u4e0e Zookeeper \u7684\u957f\u65f6\u95f4\u5931\u8054\uff0c\u9501\u88ab\u91ca\u653e\u95ee\u9898","title":"Zookeeper \u5206\u5e03\u5f0f\u9501\u7684\u4f18\u7f3a\u70b9"},{"location":"blog/seckill/redlock-controversy/#redlock_1","text":"\u524d\u9762\u4e5f\u5206\u6790\u4e86\uff0cRedlock \u53ea\u6709\u5efa\u7acb\u5728\u300c\u65f6\u949f\u6b63\u786e\u300d\u7684\u524d\u63d0\u4e0b\uff0c\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e2a\u524d\u63d0\uff0c\u90a3\u4e48\u53ef\u4ee5\u62ff\u6765\u4f7f\u7528\u3002 \u4f46\u4fdd\u8bc1\u65f6\u949f\u6b63\u786e\uff0c\u5e76\u4e0d\u662f\u7b80\u5355 \u7b2c\u4e00\uff0c\u4ece\u786c\u4ef6\u89d2\u5ea6\u6765\u8bf4\uff0c\u65f6\u949f\u53d1\u751f\u504f\u79fb\u662f\u65f6\u6709\u53d1\u751f\uff0c\u65e0\u6cd5\u907f\u514d\u3002\u4f8b\u5982\uff0cCPU \u6e29\u5ea6\u3001\u673a\u5668\u8d1f\u8f7d\u3001\u82af\u7247\u6750\u6599\u90fd\u662f\u6709\u53ef\u80fd\u5bfc\u81f4\u65f6\u949f\u53d1\u751f\u504f\u79fb\u7684\u3002 \u7b2c\u4e8c\uff0c\u4eba\u4e3a\u9519\u8bef\u4e5f\u662f\u5f88\u96be\u5b8c\u5168\u907f\u514d\uff0c\u8fd0\u7ef4\u66b4\u529b\u4fee\u6539\u65f6\u949f\uff0c\u8fdb\u800c\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6b63\u786e\u6027 \u6240\u4ee5\uff0c\u6211\u5bf9 Redlock \u7684\u4e2a\u4eba\u770b\u6cd5\u662f\uff0c\u5c3d\u91cf\u4e0d\u7528\u5b83\uff0c\u800c\u4e14\u5b83\u7684\u6027\u80fd\u4e0d\u5982\u5355\u673a\u7248 Redis\uff0c\u90e8\u7f72\u6210\u672c\u4e5f\u9ad8\uff0c\u5efa\u8bae\u4f18\u5148\u8003\u8651\u4f7f\u7528\u4e3b\u4ece + \u54e8\u5175\u7684\u6a21\u5f0f \u5b9e\u73b0\u5206\u5e03\u5f0f\u9501 \u90a3\u600e\u4e48\u4fdd\u8bc1\u6b63\u786e\u6027\u4e86\uff1f","title":"\u5230\u5e95\u8981\u4e0d\u8981\u7528 Redlock\uff1f"},{"location":"blog/seckill/redlock-controversy/#_8","text":"\u4ece\u4e0a\u9762\u6211\u4eec\u4e5f\u4e86\u89e3\u5230\uff0c\u4efb\u4f55\u5206\u5e03\u5f0f\u9501\u90fd\u65e0\u6cd5\u5b8c\u5168\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u56e0\u6b64\u5206\u5e03\u5f0f\u9501\u65f6\u5efa\u8bae \u5728\u4e0a\u5c42\u4f7f\u7528\u5206\u5e03\u5f0f\u9501\u5b8c\u6210\u300c\u4e92\u65a5\u300d\u76ee\u7684\uff0c\u867d\u7136\u6781\u7aef\u60c5\u51b5\u4e0b\u9501\u4f1a\u5931\u6548\uff0c\u4f46\u5b83\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u628a\u5e76\u53d1\u8bf7\u6c42\u963b\u6321\u5728\u6700\u4e0a\u5c42\uff0c\u51cf\u8f7b\u64cd\u4f5c\u8d44\u6e90\u5c42\u7684\u538b\u529b\u3002 \u4f46\u5bf9\u4e8e\u8981\u6c42\u6570\u636e\u7edd\u5bf9\u6b63\u786e\u7684\u4e1a\u52a1\uff0c\u5728\u8d44\u6e90\u5c42\u4e00\u5b9a\u8981\u505a\u597d\u300c\u515c\u5e95\u300d\uff0c\u53d1\u751f\u6781\u7aef\u60c5\u51b5\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u9020\u6210\u5f71\u54cd","title":"\u6b63\u786e\u4f7f\u7528\u5206\u5e03\u5f0f\u9501"},{"location":"blog/seckill/redlock-system-awareness/","text":"https://xie.infoq.cn/article/50d9f8f82ba0f96d07b38032f 01 \u524d\u8a00 \u8fd9\u662f\u4e00\u7bc7\u89e3\u6790\u5e95\u5c42\u539f\u7406\u7684\u6587\u7ae0\uff0c\u4ece Redis \u5b98\u65b9\u63a8\u8350\u7684 Redlock \u7b97\u6cd5\u5165\u624b\uff0c\u5e2e\u52a9\u4f60\u5efa\u7acb\u5bf9\u5206\u5e03\u5f0f\u9501\u7684\u8ba4\u77e5\uff0c\u5e76\u5177\u5907\u5224\u65ad\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u4f18\u52a3\u7684\u7406\u8bba\u57fa\u7840\u3002 \u901a\u8fc7\u5bf9\u672c\u6587\u7684\u5b66\u4e60\uff0c\u4f60\u5c06\u6536\u83b7\u4ee5\u4e0b\u77e5\u8bc6\uff1a \u5206\u5e03\u5f0f\u9501\u7684\u57fa\u672c\u8981\u6c42 \u8bc4\u4f30\u7b80\u5316\u7248\u65b9\u6848\u7684\u73b0\u72b6 \u5355\u5b9e\u4f8b Redis \u7684\u9501\u65b9\u6848 Redlock \u7b97\u6cd5\u6838\u5fc3\u601d\u60f3 \u79d1\u5b66\u7684\u5931\u8d25\u91cd\u8bd5\u673a\u5236 \u6027\u80fd\u3001\u6545\u969c\u6062\u590d\u548c\u6301\u4e45\u5316 \u8ba9\u7b97\u6cd5\u66f4\u53ef\u9760\uff1a\u7eed\u671f\u673a\u5236 \u4ec0\u4e48\u662f\u5206\u5e03\u5f0f\u9501\uff1f\u5f53\u4e0d\u540c\u7684\u8fdb\u7a0b\u5fc5\u987b\u4ee5\u4e92\u65a5\u5730\u65b9\u5f0f\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5c31\u8981\u7528\u5230\u5206\u5e03\u5f0f\u9501\u3002 \u5f53\u7136\uff0c\u6211\u66f4\u5efa\u8bae\u5728\u5de5\u7a0b\u5b9e\u8df5\u65f6\u5408\u7406\u8bbe\u8ba1\u65b9\u6848\uff0c\u907f\u514d\u7528\u5230\u9501\uff0c\u9664\u975e\u65e0\u6cd5\u907f\u514d\u3002 \u7f51\u4e0a\u4e5f\u6709\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5176\u53ef\u9760\u6027\u5f80\u5f80\u5f97\u4e0d\u5230\u5f88\u597d\u7684\u4fdd\u8bc1\u3002 \u5f88\u591a\u8bed\u8a00\u90fd\u6709 Redlock \u5206\u5e03\u5f0f\u9501\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5217\u4e3e\u51e0\u4e2a\u4e3b\u6d41\u8bed\u8a00\u7684\u5b9e\u73b0\uff1a Ruby\uff1aRedlock-rb Python\uff1aRedlock-py\u3001Pottery\u3001Aioredlock PHP\uff1aRedlock-php\u3001PHPRedisMutex\u3001cheprasov/php-redis-lock\u3001rtckit/react-redlock Go\uff1aRedSync Java\uff1aRedisson NodeJS\uff1anode-redlock C++\uff1aRedlock-cpp 02 \u5206\u5e03\u5f0f\u9501\u7684\u57fa\u672c\u8981\u6c42 \u4e00\u4e2a\u6700\u5c0f\u5316\u3001\u53ef\u6709\u6548\u4f7f\u7528\u7684\u5206\u5e03\u5f0f\u9501\u81f3\u5c11\u9700\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u5c5e\u6027\uff1a \u5b89\u5168\u6027\uff1a\u4e92\u65a5 \u3002\u5bf9\u4e8e\u540c\u4e00\u8d44\u6e90\uff0c\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u6301\u6709\u9501\u3002 \u6d3b\u8dc3\u6027 A \uff1a\u6b7b\u9501\u91ca\u653e\u3002\u5f53\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u53d1\u751f\u5d29\u6e83\u7b49\u5f02\u5e38\u800c\u4e0d\u80fd\u91ca\u653e\u9501\u65f6\uff0c\u9501\u6700\u7ec8\u4e5f\u80fd\u88ab\u5176\u5b83\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u3002 \u6d3b\u8dc3\u6027 B \uff1a\u5bb9\u9519\u3002\u53ea\u8981\u5927\u591a\u6570\uff08\u534a\u6570\u4ee5\u4e0a\uff09Redis \u8282\u70b9\u5904\u4e8e\u542f\u52a8\u72b6\u6001\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002 \u4e0d\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u4e09\u4e2a\u5c5e\u6027\uff0c\u5219\u4e0d\u662f\u4e00\u4e2a\u5408\u683c\u7684\u5206\u5e03\u5f0f\u9501\u65b9\u6848\uff0c\u5176\u53ef\u9760\u6027\u4e0d\u8db3\u4ee5\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u3002\u5728\u9009\u62e9\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u65f6\u8981\u7262\u8bb0\u8fd9\u4e09\u70b9\u3002 03 \u8bc4\u4f30\u7b80\u5316\u7248\u65b9\u6848\u7684\u73b0\u72b6 \u6bd4\u8f83\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u5728\u4e00\u4e2a Redis \u5b9e\u4f8b\u4e2d\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u8fc7\u671f\u65f6\u95f4\u7684 key\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9501\u6700\u7ec8\u4f1a\u88ab\u91ca\u653e\uff08\u6ee1\u8db3\u6d3b\u8dc3\u6027 A \u7684\u8981\u6c42\uff09\u3002 \u5f53\u5ba2\u6237\u7aef\u9700\u8981\u91ca\u653e\u9501\u65f6\uff0c\u4e3b\u52a8\u5220\u6389\u8fd9\u4e2a key \u5c31\u53ef\u4ee5\u4e86\u3002 \u8868\u9762\u4e0a\u770b\u8d77\u6765\u8fd8\u4e0d\u9519\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u5355\u70b9\u5931\u8d25\u3002\u5927\u591a\u6570\u516c\u53f8\u5728\u4f7f\u7528 Redis \u65f6\u4f1a\u91c7\u7528\u4e3b\u4ece\u6a21\u5f0f\uff08\u4e3b\u8981\u6307\u4e00\u4e3b\u4e00\u4ece\uff09\uff0c \u56e0\u4e3a master \u5230 slave \u8282\u70b9\u7684\u6570\u636e\u590d\u5236\u662f\u5f02\u6b65\u7684\uff0c\u5f53 master \u6302\u6389\u4e4b\u540e\uff0c\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\u662f\u65e0\u6cd5\u5f97\u5230\u6ee1\u8db3\u3002 \u5177\u4f53\u5206\u6790\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef A \u5728 master \u8282\u70b9\u4e2d\u83b7\u53d6\u4e86\u9501\u3002 \u5bf9\u5e94\u7684 key \u5728\u88ab\u590d\u5236\u5230 slave \u8282\u70b9\u4e4b\u524d\uff0cmaster \u8282\u70b9\u6302\u4e86\u3002 slave \u8282\u70b9\u88ab\u63d0\u5347\u4e3a master\u3002 \u5ba2\u6237\u7aef B \u5728\u65b0\u7684 master \u4e2d\u83b7\u53d6\u5230\u4e86 A \u5df2\u7ecf\u6301\u6709\u7684\u76f8\u540c\u8d44\u6e90\u7684\u9501\u3002\u8fdd\u53cd\u4e86\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u6240\u4ee5\uff0c\u4e0d\u8981\u5728\u4e3b\u4ece\u6a21\u5f0f\u7684 Redis \u73af\u5883\u4e2d\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u5373\u4fbf\u662f\u540e\u6587\u4e2d\u7684 Redlock \u65b9\u6848\u4e5f\u662f\u4e00\u6837\uff0cNO REPLICATION\uff01 \u5728\u9009\u62e9\u4e00\u4e9b\u5f00\u6e90\u7c7b\u5e93\u65f6\u4e5f\u9700\u8981\u8003\u5bdf\u5176\u662f\u5426\u5bf9\u6709\u526f\u672c\u7684\u60c5\u51b5\u8fdb\u884c\u4e86\u5408\u7406\u5730\u5904\u7406\u3002\u4e8b\u5b9e\u4e0a\u5f88\u96be\u5904\u7406\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u57fa\u4e8e Redis \u65b9\u6848\u7684\u7f3a\u9677\u3002 04 \u5355\u5b9e\u4f8b Redis \u7684\u9501\u65b9\u6848 \u6838\u5fc3\u8981\u70b9\uff1a key \u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e key\uff0cvalue \u4e3a\u5168\u5c40\u552f\u4e00\u7b7e\u540d\uff0c\u4e00\u5b9a\u65f6\u95f4\u540e\u81ea\u52a8\u5931\u6548\u3002 \u5220\u9664 key \u65f6\u5fc5\u987b\u5339\u914d\u7b7e\u540d\u3002 \u65e2\u7136\u4e3b\u4ece\u7684 Redis \u73af\u5883\u4e0d\u9002\u5408\u505a\u5206\u5e03\u5f0f\u9501\uff0c\u90a3\u6211\u4eec\u6765\u770b\u770b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u7684 Redis \u73af\u5883\u600e\u4e48\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u3002 \u8bbe\u7f6e\u4e00\u4e2a\u5f53\u524d\u4e0d\u5b58\u5728\u7684 key\uff0c\u5e76\u4f7f\u7528\u968f\u673a\u503c\u7b7e\u540d\uff0c\u914d\u7f6e\u8fc7\u671f\u65f6\u95f4\u3002 Bash SET resource_name my_random_value NX PX 30000 \u53ea\u6709\u5f53 resource_name \u8fd9\u4e2a key \u4e0d\u5b58\u5728\u65f6\uff0c\u624d\u8bbe\u7f6e key\u3002\u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u968f\u673a\u6570\u503c\uff0c\u4f5c\u4e3a key \u7684\u7b7e\u540d\uff0c\u5e76\u4e14\u8fd9\u4e2a key \u5c06\u4f1a\u5728 30000 \u6beb\u79d2\u540e\u8fc7\u671f\u3002 \u9a8c\u8bc1\u7b7e\u540d\u5339\u914d\u540e\u65b9\u53ef\u5220\u9664\u3002 \u5bf9\u5e94\u7684 Lua \u811a\u672c\u5982\u4e0b\uff1a Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end \u53ea\u6709\u7b7e\u540d\u503c\u5bf9\u5e94\u4e0a\u65f6\u624d\u5141\u8bb8\u5220\u9664\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5b89\u5168\u5730\u91ca\u653e\u9501\uff0c\u907f\u514d\u5220\u6389\u5176\u5b83\u5ba2\u6237\u7aef\u521b\u5efa\u7684\u9501\u3002 \u5728\u4e00\u4e9b\u66f4\u52a0\u7b80\u964b\u7684\u65b9\u6848\u4e2d\u662f\u6ca1\u6709\u9501\u7b7e\u540d\u7684\uff0c\u5b83\u4eec\u7684\u53ef\u9760\u6027\u5c31\u8981\u66f4\u5dee\u4e00\u4e9b\u4e86\u3002 \u8bef\u5220\u5176\u5b83\u5ba2\u6237\u7aef\u7684\u9501\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u4f8b\u5982\uff1a \u5ba2\u6237\u7aef A \u83b7\u53d6\u5230\u4e00\u4e2a\u9501\u3002 \u5ba2\u6237\u7aef A \u957f\u65f6\u95f4\u963b\u585e\u5728\u67d0\u4e9b\u64cd\u4f5c\u4e0a\uff0c\u963b\u585e\u7684\u65f6\u95f4\u8d85\u8fc7\u4e86\u9501\u7684\u6709\u6548\u65f6\u95f4\uff08\u901a\u8fc7 PX \u53c2\u6570\u8bbe\u7f6e\u7684\u65f6\u95f4\uff09\u3002 \u64cd\u4f5c\u5b8c\u6210\u540e\u6267\u884c\u9501\u7684 DEL\uff0c\u4f46\u8fd9\u4e2a\u9501\u5df2\u7ecf\u8fc7\u671f\u5e76\u4e14\u88ab\u5ba2\u6237\u7aef B \u83b7\u53d6\u5230\u3002 DEL \u64cd\u4f5c\u5bfc\u81f4\u5ba2\u6237\u7aef B \u7684\u9501\u88ab\u8bef\u5220\uff0c\u5ba2\u6237\u7aef C \u6b64\u65f6\u53ef\u4ee5\u83b7\u53d6 B \u9501\u6301\u6709\u7684\u9501\u3002 \u8fdd\u53cd\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u6211\u4eec\u4f7f\u7528\u5168\u5c40\u552f\u4e00\u7684\u968f\u673a\u503c\u7ed9\u9501\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u901a\u8fc7\u4ee5\u4e0a\u7684\u811a\u672c\u8fdb\u884c\u5220\u9664\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u9501\u53ea\u80fd\u88ab\u521b\u5efa\u8005\u5220\u9664\u3002 \u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u5f53\u524d\u6beb\u79d2\u65f6\u95f4\uff0c\u62fc\u63a5\u4e0a\u5ba2\u6237\u7aef id \u4f5c\u4e3a\u9501\u7684\u7b7e\u540d\u503c\u3002 \u7ed9 key \u6307\u5b9a\u7684\u751f\u5b58\u65f6\u95f4\u88ab\u79f0\u4e3a\u201c\u9501\u6709\u6548\u65f6\u95f4\u201d\uff0c\u5b83\u65e2\u662f\u9501\u81ea\u52a8\u91ca\u653e\u7684\u65f6\u95f4\uff0c\u4e5f\u662f\u5ba2\u6237\u7aef\u6267\u884c\u64cd\u4f5c\u5fc5\u9700\u7684\u65f6\u95f4\uff0c\u9700\u8981\u6bd4\u6700\u5927\u6267\u884c\u65f6\u95f4\u66f4\u5927\u4e00\u4e9b\uff0c\u6b64\u65f6\u5e76\u4e0d\u8fdd\u53cd\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\u3002 \u4f46\u4e8b\u5b9e\u4e0a\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u5ba2\u6237\u7aef\u64cd\u4f5c\u7684\u65f6\u95f4\u4e00\u5b9a\u5c0f\u4e8e\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u9501\u5df2\u7ecf\u81ea\u52a8\u8fc7\u671f\uff0c\u4ece\u800c\u88ab\u5176\u5b83\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u3002 \u8fd9\u91cc\u9700\u8981\u914d\u5408\u9501\u7684\u7eed\u671f\u624d\u80fd\u786e\u4fdd\u5b89\u5168\u6027\uff0c\u6587\u7ae0\u7684\u6700\u540e\u4e00\u90e8\u5206\u4f1a\u8bb2\u89e3\u7eed\u671f\u673a\u5236\u3002 \u65b9\u6848\u4f18\u70b9\uff1a\u76f8\u5bf9\u7b80\u5355\u6613\u5b9e\u73b0\u3002 \u65b9\u6848\u7f3a\u70b9\uff1a\u53ef\u7528\u6027\u4e0d\u9ad8\uff0c\u4e00\u65e6\u552f\u4e00\u7684 Redis \u8282\u70b9\u6302\u6389\uff0c\u7cfb\u7edf\u5c06\u5b8c\u5168\u4e0d\u53ef\u7528\u3002 \u4e0d\u5efa\u8bae\u5728\u53ef\u7528\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u4e2d\u4f7f\u7528\u8be5\u65b9\u6848\uff01 05 Redlock \u7b97\u6cd5\u6838\u5fc3\u601d\u60f3 \u6838\u5fc3\u8981\u70b9\uff1a N \u4e2a\u72ec\u7acb\u8282\u70b9\uff0c\u65e0\u526f\u672c\uff0c\u4e92\u4e0d\u4f9d\u8d56\uff08\u975e\u96c6\u7fa4\uff09\uff0cN \u662f\u5947\u6570\u4e14 N\u22653\u3002 \u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\uff0c\u5ba2\u6237\u7aef\u5728\u534a\u6570\u4ee5\u4e0a\u8282\u70b9\u6210\u529f\u8bbe\u7f6e key\uff0c\u5219\u53ef\u4ee5\u83b7\u53d6\u9501\u3002 \u5ba2\u6237\u7aef\u9700\u63d0\u524d\u51e0\u6beb\u79d2\u5b8c\u6210\u5de5\u4f5c\uff0c\u4f5c\u4e3a\u5bf9\u65f6\u949f\u6f02\u79fb\u7684\u8865\u507f\u3002 \u5355\u5b9e\u4f8b\u65b9\u6848\u5728\u9762\u5bf9\u5355\u70b9\u6545\u969c\u65f6\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u591a\u5b9e\u4f8b\u6765\u786e\u4fdd\u53ef\u7528\u6027\uff0c\u800c\u5355\u5b9e\u4f8b\u7684\u65b9\u6848\u65e0\u6cd5\u76f4\u63a5\u5957\u7528\u5728\u591a\u5b9e\u4f8b\u73af\u5883\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u6539\u8fdb\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a N \u4e2a Redis master \u8282\u70b9\u3002\u8fd9\u4e9b\u8282\u70b9\u662f\u72ec\u7acb\u7684\u3001\u4e92\u4e0d\u4f9d\u8d56\u7684\uff0c\u6ca1\u6709\u4f7f\u7528\u4e3b\u4ece\u590d\u5236\u6216\u8005\u5176\u5b83\u7684\u534f\u8c03\u673a\u5236\u3002\u5f53 N=5 \u65f6\uff0c \u6211\u4eec\u9700\u8981\u5728\u4e0d\u540c\u7684\u4e3b\u673a\u6216\u8005\u865a\u62df\u673a\u4e0a\u8fd0\u884c 5 \u4e2a Redis master \u8282\u70b9\uff0c\u4ee5\u786e\u4fdd\u8282\u70b9\u5931\u6548\u65f6\u72ec\u7acb\u5931\u6548\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e3a\u4e86\u83b7\u53d6\u9501\uff0c\u5ba2\u6237\u7aef\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u5f53\u524d\u6beb\u79d2\u65f6\u95f4\u3002 \u5c1d\u8bd5\u987a\u5e8f\u5730\u4ece\u6240\u6709\u5b9e\u4f8b\u4e2d\u83b7\u53d6\u9501\uff0c\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u90fd\u8bbe\u7f6e\u540c\u6837\u7684 key \u540d\u79f0\u548c\u968f\u673a\u503c\u3002\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u8bbe\u7f6e\u9501\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u6709\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u6bd4\u9501\u7684\u6709\u6548\u65f6\u95f4\u66f4\u5c0f\u3002 \u6bd4\u5982\uff0c\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\u662f 10 \u79d2\uff0c\u5219\u8d85\u65f6\u65f6\u95f4\u53ef\u4ee5\u662f 5~50 \u6beb\u79d2\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u5ba2\u6237\u7aef\u5c1d\u8bd5\u4ece\u5df2\u7ecf\u5931\u6548\u7684 Redis \u8282\u70b9\u83b7\u53d6\u9501\u800c\u957f\u65f6\u95f4\u88ab\u963b\u585e\u3002 \u5f53\u4e00\u4e2a Redis \u5b9e\u4f8b\u4e0d\u53ef\u7528\u65f6\uff0c\u8981\u5c3d\u53ef\u80fd\u5feb\u5730\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5ba2\u6237\u7aef\u4f1a\u8ba1\u7b97\u83b7\u53d6\u9501\u7684\u8fc7\u7a0b\u6d88\u8017\u4e86\u591a\u5c11\u65f6\u95f4\u3002\u5f53\u4e14\u4ec5\u5f53\u5ba2\u6237\u7aef\u5728\u534a\u6570\u4ee5\u4e0a\u7684 Redis \u5b9e\u4f8b\u4e2d\u8bbe\u7f6e\u6210\u529f\uff0c\u4e14\u603b\u8017\u65f6\u8fdc\u5c0f\u4e8e\u9501\u7684\u6709\u6548\u65f6\u95f4\u65f6\uff0c\u624d\u4f1a\u8ba9\u9501\u6700\u7ec8\u6210\u529f\u88ab\u83b7\u53d6\u3002 \u5982\u679c\u5728\u67d0\u4e2a Redis \u5b9e\u4f8b\u4e0a\u8bbe\u7f6e\u6210\u529f\uff0c\u5219\u4f1a\u4f7f\u7528\u5728\u6b65\u9aa4 1 \u4e2d\u83b7\u53d6\u7684\u65f6\u95f4\uff0c\u518d\u52a0\u4e0a\u5df2\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u4f5c\u4e3a\u8fc7\u671f\u65f6\u95f4\u3002 \u5982\u679c\u8bbe\u7f6e\u9501\u5931\u8d25\u4e86\uff08\u672a\u80fd\u6210\u529f\u9501\u5b9a\u534a\u6570\u4ee5\u4e0a Redis \u5b9e\u4f8b\u6216\u8005\u6709\u6548\u65f6\u95f4\u662f\u8d1f\u7684\uff09\uff0c\u5c06\u4f1a\u5c1d\u8bd5\u5728\u6240\u6709 Redis \u5b9e\u4f8b\u4e0a\u89e3\u9501\uff0c\u5220\u9664\u5bf9\u5e94\u7684 key\u3002 \u8be5\u7b97\u6cd5\u4f9d\u8d56\u4e8e\u4e00\u79cd\u5047\u8bbe\uff1a\u5c3d\u7ba1\u8fdb\u7a0b\u4e4b\u95f4\u6ca1\u6709\u540c\u6b65\u65f6\u949f\uff0c\u4f46\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u672c\u5730\u65f6\u95f4\u4ecd\u7136\u4ee5\u5927\u81f4\u76f8\u540c\u7684\u901f\u5ea6\u6d41\u52a8\uff0c\u5176\u8bef\u5dee\u4e0e\u9501\u7684\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\u76f8\u6bd4\u662f\u5f88\u5c0f\u7684\u3002 \u8fd9\u4e2a\u5047\u8bbe\u662f\u975e\u5e38\u63a5\u8fd1\u4e8b\u5b9e\u7684\uff1a\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u672c\u5730\u65f6\u949f\uff0c\u901a\u5e38\u8fd9\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u6f02\u79fb\u662f\u5f88\u5c0f\u7684\uff0c\u53ea\u6709\u51e0\u6beb\u79d2\u3002 \u57fa\u4e8e\u8fd9\u4e00\u70b9\uff0c\u53ea\u6709\u5f53\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u5728\u9501\u6709\u6548\u65f6\u95f4\u8fbe\u5230\u4e4b\u524d\u5b8c\u6210\u5de5\u4f5c\uff0c\u4e92\u65a5\u6027\u624d\u4f1a\u5f97\u5230\u4fdd\u8bc1\u3002\u63d0\u524d\u7684\u51e0\u6beb\u79d2\u7528\u4e8e\u8865\u507f\u8fdb\u7a0b\u4e4b\u95f4\u7684\u65f6\u949f\u6f02\u79fb\u3002 \u8fd9\u5c31\u8ddf\u6728\u6876\u539f\u7406\u4e00\u6837\uff0c\u8f83\u77ed\u7684\u4e00\u5757\u677f\u5b50\u51b3\u5b9a\u4e86\u6700\u5927\u84c4\u6c34\u91cf\uff0c\u6700\u65e9\u7684\u8fc7\u671f\u65f6\u95f4\u51b3\u5b9a\u4e86\u9501\u7684\u5b9e\u9645\u6700\u5927\u751f\u5b58\u65f6\u957f\u3002 06 \u79d1\u5b66\u7684\u5931\u8d25\u91cd\u8bd5\u673a\u5236 \u6838\u5fc3\u8981\u70b9\uff1a \u5148\u5ef6\u8fdf\u4e00\u4e2a\u968f\u673a\u65f6\u95f4\u3002 \u518d\u4f7f\u7528\u6307\u6570\u9000\u907f\u6cd5\u6267\u884c\u91cd\u8bd5\u3002 \u4f18\u79c0\u7684\u65b9\u6848\u8bbe\u8ba1\u4e00\u5b9a\u8981\u5145\u5206\u8003\u8651\u5931\u8d25\u573a\u666f\uff0c\u5373\u9762\u5411\u5931\u8d25\u8bbe\u8ba1\u7684\u601d\u60f3\uff01 \u5f53\u5ba2\u6237\u7aef\u4e0d\u80fd\u6210\u529f\u83b7\u53d6\u5230\u9501\u65f6\uff0c\u5e94\u8be5\u5ef6\u8fdf\u4e00\u4e2a\u968f\u673a\u65f6\u95f4\u540e\u518d\u91cd\u8bd5\u3002\u4f7f\u7528\u968f\u673a\u65f6\u95f4\u53ef\u4ee5\u907f\u514d\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u4e89\u593a\u540c\u4e00\u4e2a\u8d44\u6e90\u7684\u9501\u3002 \u5927\u91cf\u5ba2\u6237\u7aef\u540c\u65f6\u53d1\u8d77\u91cd\u8bd5\u8bf7\u6c42\u7684\u60c5\u51b5\u79f0\u4e3a\u60ca\u7fa4\u6548\u5e94\uff08thundering herd\uff09\uff0c\u4f1a\u8fc7\u591a\u6d88\u8017\u4f60\u7684\u670d\u52a1\u5668\u8d44\u6e90\u3002\u5982\u679c\u8981\u5bf9\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\uff0c\u6211\u5fc5\u987b\u5173\u6ce8\u7684\u4e00\u4e2a\u6307\u6807\u5c31\u662f\uff1a\u91cd\u8bd5\u6b21\u6570/\u6210\u529f\u6b21\u6570\uff0c\u8fd9\u4e2a\u6307\u6807\u8d8a\u4f4e\u8d8a\u597d\u3002 \u5982\u4f55\u51cf\u5c11\u91cd\u8bd5\u51e0\u7387\u548c\u65f6\u95f4\uff1f \u5ba2\u6237\u7aef\u5c1d\u8bd5\u5728\u534a\u6570\u4ee5\u4e0a Redis \u5b9e\u4f8b\u4e0a\u52a0\u9501\u7684\u901f\u5ea6\u8d8a\u5feb\uff0c\u7ade\u4e89\u7684\u65f6\u95f4\u7a97\u53e3\u5c31\u4f1a\u8d8a\u5c0f\uff0c\u56e0\u6b64\u6700\u7406\u60f3\u7684\u60c5\u51b5\u662f\u5ba2\u6237\u7aef\u91c7\u7528\u591a\u8def\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u5411 N \u4e2a\u5b9e\u4f8b\u53d1\u9001 SET \u547d\u4ee4\u3002\u5bf9\u4e8e\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u534a\u6570\u4ee5\u4e0a\u9501\u7684\u5ba2\u6237\u7aef\uff0c\u8981\u5c3d\u5feb\u91ca\u653e\u5df2\u83b7\u53d6\u5230\u7684\u9501\uff0c\u4e0d\u9700\u8981\u7b49\u5f85 key \u81ea\u52a8\u8fc7\u671f\uff0c\u4ee5\u786e\u4fdd\u9501\u53ef\u4ee5\u5c3d\u5feb\u88ab\u518d\u6b21\u8bf7\u6c42\u3002 \u5f53\u91cd\u8bd5\u53d1\u751f\u65f6\u7684\u6700\u4f73\u7b56\u7565\uff1a\u4f7f\u7528\u968f\u673a\u5ef6\u8fdf+\u6307\u6570\u9000\u907f\u53ef\u6709\u6548\u5730\u5206\u6563\u91cd\u8bd5\u8bf7\u6c42\uff0c\u524a\u5f31\u60ca\u7fa4\u6548\u5e94\u7684\u5f71\u54cd\u3002 \u6307\u6570\u9000\u907f\u6cd5\uff08Exponential Backoff\uff09 Text Only //retry=1 \u4ee3\u8868\u5f53\u524d\u7b2c 1 \u6b21\u91cd\u8bd5\uff0c\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u662f 3\u3002 //\u968f\u7740\u91cd\u8bd5\u6b21\u6570\u7684\u589e\u52a0\uff0c\u5ef6\u8fdf\u65f6\u95f4\u8d8a\u6765\u8d8a\u5927\u3002\u7b2c 1 \u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\u662f 20ms\uff0c\u7b2c 3 \u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\u662f 80ms\u3002 long timemillsec = (long) (Math.pow(2, Math.min(retry, 3)) \\* 10); \u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u8c03\u7528+\u5b9a\u65f6\u5668\u8fdb\u884c\u91cd\u8bd5\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u91cd\u8bd5\u540e\u90fd\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\uff0c\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u800c\u4f9d\u7136\u6ca1\u6709\u6210\u529f\u5219\u653e\u5f03\u91cd\u8bd5\uff0c\u4e1a\u52a1\u5ba2\u6237\u7aef\u8981\u6709\u5bf9\u5e94\u7684\u5931\u8d25\u5904\u7406\u3002 07 \u6027\u80fd\u3001\u6545\u969c\u6062\u590d\u4e0e\u6301\u4e45\u5316 \u6838\u5fc3\u8981\u70b9\uff1a \u591a\u8def\u590d\u7528\uff0c\u66f4\u5feb\u5b8c\u6210\u52a0\u9501/\u89e3\u9501\uff0c\u63d0\u9ad8\u6027\u80fd\u3002 \u5b9e\u65f6 AOF \u6216\u8005\u65e0\u6301\u4e45\u5316\u3001\u5ef6\u8fdf\u91cd\u542f\uff0c\u786e\u4fdd\u4e92\u65a5\u3002 \u591a\u8def\u590d\u7528\uff0c\u4e3a\u4e86\u66f4\u5feb \u4e4b\u6240\u4ee5\u9009\u62e9 Redis \u505a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\uff0c\u662f\u56e0\u4e3a\u60f3\u83b7\u5f97\u8f83\u9ad8\u7684\u6027\u80fd\uff0c\u6bcf\u79d2\u80fd\u591f\u6267\u884c\u5927\u91cf\u7684\u52a0\u9501\u548c\u89e3\u9501\u64cd\u4f5c\u3002 \u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u8bc9\u6c42\uff0c\u53ef\u4ee5\u91c7\u7528\u591a\u8def\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u5c06\u6240\u6709\u547d\u4ee4\u53d1\u9001\u5230 N \u4e2a Redis \u8282\u70b9\u4e0a\uff0c\u5e76\u540c\u65f6\u8bfb\u53d6\u547d\u4ee4\u7ed3\u679c\uff08\u5047\u8bbe\u6240\u6709 Redis \u8282\u70b9\u7684\u54cd\u5e94\u65f6\u95f4\u662f\u4e00\u81f4\u7684\uff09\u3002 \u6709\u6301\u4e45\u5316\uff0c\u5b9e\u65f6 AOF-\u91cd\u542f\u540e\u6570\u636e\u4e0d\u4e22\u5931\uff0c\u786e\u4fdd\u4e92\u65a5\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u7cfb\u7edf\u5177\u5907\u6545\u969c\u6062\u590d\u80fd\u529b\uff0c\u5c31\u9700\u8981\u8003\u8651 Redis \u7684\u6301\u4e45\u5316\u7b56\u7565\u3002 \u5047\u8bbe\u6211\u4eec\u914d\u7f6e\u4e86 5 \u4e2a\u6ca1\u6709\u4efb\u4f55\u6301\u4e45\u5316\u7b56\u7565\u7684 Redis \u5b9e\u4f8b\uff0c\u6765\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4e00\u4e2a\u5ba2\u6237\u7aef\u5728 3 \u4e2a\u5b9e\u4f8b\u4e0a\u6210\u529f\u8bbe\u7f6e\u4e86\u9501\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u91cd\u542f\u5bfc\u81f4\u6570\u636e\u4e22\u5931\uff0c\u5b9e\u9645\u9501\u6210\u529f\u7684\u8282\u70b9\u53ea\u5269\u4e0b 2 \u4e2a\uff08\u534a\u6570\u4ee5\u4e0b\uff09\uff0c\u6b64\u65f6\u5176\u5b83\u5ba2\u6237\u7aef\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u540c\u4e00\u4e2a\u8d44\u6e90\u7684\u9501\u3002 \u8fdd\u53cd\u4e86\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u5f53\u5f00\u542f AOF \u6301\u4e45\u5316\u540e\uff0c\u60c5\u51b5\u4f1a\u6709\u5f88\u5927\u6539\u5584\u3002 \u4f8b\u5982\uff1a\u5411 Redis Server \u53d1\u9001 SHUTDOWN \u547d\u4ee4\u5e76\u91cd\u542f\uff0cRedis \u4f1a\u5148\u8fdb\u884c\u6301\u4e45\u5316\u7136\u540e\u518d\u91cd\u542f\uff0c\u91cd\u542f\u540e\u4ece AOF \u6587\u4ef6\u4e2d\u6062\u590d\u6570\u636e\u3002 \u5728 Server \u5173\u95ed\u671f\u95f4\uff0c\u9501\u7684\u751f\u5b58\u65f6\u95f4\u4ecd\u7136\u5728\u6b63\u5e38\u6d41\u901d\uff0c\u5bf9\u9501\u7684\u8fc7\u671f\u6ca1\u6709\u5f71\u54cd\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002 \u4f46\u5982\u679c\u662f\u7a81\u7136\u65ad\u7535\u5462\uff1f\u5047\u8bbe Redis \u6309\u7167\u9ed8\u8ba4\u914d\u7f6e\uff0c\u6bcf\u79d2\u8fdb\u884c\u4e00\u6b21 AOF \u6587\u4ef6\u7684\u5199\u76d8\uff0c\u5219\u6709\u53ef\u80fd\u56e0\u4e3a\u6765\u4e0d\u53ca\u5199\u76d8\u800c\u4e22\u5931\u6570\u636e\u3002 \u5982\u679c\u60f3\u5728\u8fd9\u79cd\u5f02\u5e38\u91cd\u542f\u7684\u60c5\u51b5\u4e0b\u4fdd\u8bc1\u9501\u7684\u5b89\u5168\u6027\uff0c\u5c31\u9700\u8981\u5728\u6301\u4e45\u5316\u914d\u7f6e\u4e2d\u628a fsync \u8bbe\u7f6e\u4e3a always\uff0c\u5b9e\u65f6\u5199\u76d8\u3002 \u6309\u7167\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 CAP \u7406\u8bba\uff0c\u8fd9\u662f\u901a\u8fc7\u727a\u7272\u4e00\u5b9a\u7684\u53ef\u7528\u6027\uff0c\u4fdd\u8bc1\u4e86\u4e00\u81f4\u6027\u548c\u5206\u533a\u5bb9\u9519\u6027\u3002 \u65e0\u6301\u4e45\u5316\uff0c\u5ef6\u8fdf\u91cd\u542f-\u8282\u70b9\u5bf9\u5e94\u7684\u9501\u5168\u90e8\u8fc7\u671f\u81ea\u52a8\u5931\u6548\uff0c\u786e\u4fdd\u4e92\u65a5\u3002 \u5982\u679c\u4e00\u4e2a Redis \u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u91cd\u542f\uff0c\u800c\u4e14\u8be5\u5b9e\u4f8b\u4e2d\u6240\u6709\u7684\u9501\u90fd\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684\u9501\uff08\u5f53\u524d\u6d3b\u52a8\u9501\uff09\uff0c\u5219\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u4e5f\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002 \u6211\u4eec\u53ea\u9700\u8981\u5728 Redis \u5b9e\u4f8b\u5d29\u6e83\u540e\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u518d\u542f\u52a8\u5c31\u53ef\u4ee5\u3002\u5ef6\u8fdf\u7684\u65f6\u95f4\u8981\u6bd4\u6700\u5927\u7684\u9501\u751f\u5b58\u65f6\u95f4\u5927\u4e00\u4e9b\uff0c\u8fd9\u6837\u8be5\u5b9e\u4f8b\u4e2d\u7684\u9501\u5728\u91cd\u542f\u540e\u5df2\u7ecf\u5168\u90e8\u5931\u6548\u5e76\u4e14\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u3002 \u5f53 Redis \u5b9e\u4f8b\u6ca1\u6709\u914d\u7f6e\u4efb\u4f55\u6301\u4e45\u5316\u65f6\uff0c\u4f7f\u7528\u5ef6\u8fdf\u91cd\u542f\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u79cd\u91cd\u542f\u7684\u60c5\u51b5\u4e0b\u786e\u4fdd\u9501\u7684\u5b89\u5168\u3002 \u8fd9\u4e5f\u662f\u4e00\u79cd\u727a\u7272\u53ef\u7528\u6027\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\u5f53\u534a\u6570\u4ee5\u4e0a\u7684 Redis \u5b9e\u4f8b\u5d29\u6e83\u540e\uff0c\u7cfb\u7edf\u4f1a\u53d8\u5f97\u5b8c\u5168\u4e0d\u53ef\u7528\uff0c\u6301\u7eed\u7684\u65f6\u95f4\u662f\u6700\u5927\u9501\u751f\u5b58\u65f6\u95f4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\u6ca1\u6709\u4efb\u4f55\u8d44\u6e90\u53ef\u4ee5\u88ab\u9501\u5b9a\u3002 08 \u8ba9\u7b97\u6cd5\u66f4\u53ef\u9760\uff1a\u7eed\u671f\u673a\u5236 \u6838\u5fc3\u8981\u70b9\uff1a \u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5c3d\u53ef\u80fd\u51c6\u786e\u5730\u9884\u4f30\u5ba2\u6237\u7aef\u64cd\u4f5c\u8017\u65f6\uff0c\u4f5c\u4e3a\u9501\u6709\u6548\u671f\u7684\u53c2\u8003\u3002 \u589e\u52a0\u9501\u7684\u7eed\u671f\u673a\u5236\uff0c\u5e94\u5bf9\u610f\u5916\u60c5\u51b5\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u64cd\u4f5c\u7684\u6b65\u9aa4\u5f88\u5c11\uff0c\u8017\u65f6\u5f88\u77ed\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c0f\u7684\u9501\u6709\u6548\u65f6\u95f4\u3002 \u4f46\u65e0\u8bba\u9884\u4f30\u5730\u591a\u4e48\u51c6\u786e\uff0c\u90fd\u65e0\u6cd5\u907f\u514d\u610f\u5916\uff0c\u5efa\u8bae\u4f7f\u7528\u9501\u7684\u7eed\u671f\u673a\u5236\u5bf9\u7b97\u6cd5\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u786e\u5b9a\u6027\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u6b63\u5728\u6267\u884c\u64cd\u4f5c\uff0c\u800c\u9501\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\u5df2\u7ecf\u5f88\u5c0f\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 Lua \u811a\u672c\u5bf9\u5df2\u5b58\u5728\u7684\u9501\u8fdb\u884c\u6709\u6548\u671f\u5ef6\u957f\u3002 09 \u603b\u7ed3 \u6ca1\u6709\u6700\u5b8c\u7f8e\u7684\u65b9\u6848\uff0c\u53ea\u6709\u6700\u9002\u5408\u7684\u3002 \u57fa\u4e8e Redis \u4e5f\u4e0d\u662f\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u7684\u552f\u4e00\u9009\u9879\uff0c\u8fd8\u6709\u57fa\u4e8e Zookeeper \u7684\u65b9\u6848\u4e5f\u53ef\u4ee5\u8003\u8651\uff0c\u6700\u4f73\u7684\u65b9\u6848\u662f\u4e0d\u9700\u8981\u5206\u5e03\u5f0f\u9501\u3002 \u5728\u5b9e\u8df5\u4e2d\u8981\u8003\u8651\u57fa\u7840\u8bbe\u65bd\u60c5\u51b5\u548c\u4e1a\u52a1\u8981\u6c42\uff0c\u4ed4\u7ec6\u6743\u8861\u3002 \u671f\u671b\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u5efa\u7acb\u5bf9\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u7684\u8bc4\u5224\u6807\u51c6\uff0c\u5728\u5b9e\u9645\u7684\u6280\u672f\u9009\u578b\u4e2d\u80fd\u591f\u5bf9\u591a\u79cd\u65b9\u6848\u8fdb\u884c\u5ba2\u89c2\u8bc4\u4ef7\u3002","title":"\u5efa\u7acb\u5bf9\u5206\u5e03\u5f0f\u9501\u7684\u7cfb\u7edf\u8ba4\u77e5 - \u4ece Redlock \u5f00\u59cb"},{"location":"blog/seckill/redlock-system-awareness/#01","text":"\u8fd9\u662f\u4e00\u7bc7\u89e3\u6790\u5e95\u5c42\u539f\u7406\u7684\u6587\u7ae0\uff0c\u4ece Redis \u5b98\u65b9\u63a8\u8350\u7684 Redlock \u7b97\u6cd5\u5165\u624b\uff0c\u5e2e\u52a9\u4f60\u5efa\u7acb\u5bf9\u5206\u5e03\u5f0f\u9501\u7684\u8ba4\u77e5\uff0c\u5e76\u5177\u5907\u5224\u65ad\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u4f18\u52a3\u7684\u7406\u8bba\u57fa\u7840\u3002 \u901a\u8fc7\u5bf9\u672c\u6587\u7684\u5b66\u4e60\uff0c\u4f60\u5c06\u6536\u83b7\u4ee5\u4e0b\u77e5\u8bc6\uff1a \u5206\u5e03\u5f0f\u9501\u7684\u57fa\u672c\u8981\u6c42 \u8bc4\u4f30\u7b80\u5316\u7248\u65b9\u6848\u7684\u73b0\u72b6 \u5355\u5b9e\u4f8b Redis \u7684\u9501\u65b9\u6848 Redlock \u7b97\u6cd5\u6838\u5fc3\u601d\u60f3 \u79d1\u5b66\u7684\u5931\u8d25\u91cd\u8bd5\u673a\u5236 \u6027\u80fd\u3001\u6545\u969c\u6062\u590d\u548c\u6301\u4e45\u5316 \u8ba9\u7b97\u6cd5\u66f4\u53ef\u9760\uff1a\u7eed\u671f\u673a\u5236 \u4ec0\u4e48\u662f\u5206\u5e03\u5f0f\u9501\uff1f\u5f53\u4e0d\u540c\u7684\u8fdb\u7a0b\u5fc5\u987b\u4ee5\u4e92\u65a5\u5730\u65b9\u5f0f\u8bbf\u95ee\u540c\u4e00\u4e2a\u5171\u4eab\u8d44\u6e90\u65f6\uff0c\u5c31\u8981\u7528\u5230\u5206\u5e03\u5f0f\u9501\u3002 \u5f53\u7136\uff0c\u6211\u66f4\u5efa\u8bae\u5728\u5de5\u7a0b\u5b9e\u8df5\u65f6\u5408\u7406\u8bbe\u8ba1\u65b9\u6848\uff0c\u907f\u514d\u7528\u5230\u9501\uff0c\u9664\u975e\u65e0\u6cd5\u907f\u514d\u3002 \u7f51\u4e0a\u4e5f\u6709\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u8bbe\u8ba1\u65b9\u6848\uff0c\u5176\u53ef\u9760\u6027\u5f80\u5f80\u5f97\u4e0d\u5230\u5f88\u597d\u7684\u4fdd\u8bc1\u3002 \u5f88\u591a\u8bed\u8a00\u90fd\u6709 Redlock \u5206\u5e03\u5f0f\u9501\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5217\u4e3e\u51e0\u4e2a\u4e3b\u6d41\u8bed\u8a00\u7684\u5b9e\u73b0\uff1a Ruby\uff1aRedlock-rb Python\uff1aRedlock-py\u3001Pottery\u3001Aioredlock PHP\uff1aRedlock-php\u3001PHPRedisMutex\u3001cheprasov/php-redis-lock\u3001rtckit/react-redlock Go\uff1aRedSync Java\uff1aRedisson NodeJS\uff1anode-redlock C++\uff1aRedlock-cpp","title":"01 \u524d\u8a00"},{"location":"blog/seckill/redlock-system-awareness/#02","text":"\u4e00\u4e2a\u6700\u5c0f\u5316\u3001\u53ef\u6709\u6548\u4f7f\u7528\u7684\u5206\u5e03\u5f0f\u9501\u81f3\u5c11\u9700\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u5c5e\u6027\uff1a \u5b89\u5168\u6027\uff1a\u4e92\u65a5 \u3002\u5bf9\u4e8e\u540c\u4e00\u8d44\u6e90\uff0c\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u6301\u6709\u9501\u3002 \u6d3b\u8dc3\u6027 A \uff1a\u6b7b\u9501\u91ca\u653e\u3002\u5f53\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u53d1\u751f\u5d29\u6e83\u7b49\u5f02\u5e38\u800c\u4e0d\u80fd\u91ca\u653e\u9501\u65f6\uff0c\u9501\u6700\u7ec8\u4e5f\u80fd\u88ab\u5176\u5b83\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u3002 \u6d3b\u8dc3\u6027 B \uff1a\u5bb9\u9519\u3002\u53ea\u8981\u5927\u591a\u6570\uff08\u534a\u6570\u4ee5\u4e0a\uff09Redis \u8282\u70b9\u5904\u4e8e\u542f\u52a8\u72b6\u6001\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u83b7\u53d6\u548c\u91ca\u653e\u9501\u3002 \u4e0d\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u4e09\u4e2a\u5c5e\u6027\uff0c\u5219\u4e0d\u662f\u4e00\u4e2a\u5408\u683c\u7684\u5206\u5e03\u5f0f\u9501\u65b9\u6848\uff0c\u5176\u53ef\u9760\u6027\u4e0d\u8db3\u4ee5\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u3002\u5728\u9009\u62e9\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u65f6\u8981\u7262\u8bb0\u8fd9\u4e09\u70b9\u3002","title":"02 \u5206\u5e03\u5f0f\u9501\u7684\u57fa\u672c\u8981\u6c42"},{"location":"blog/seckill/redlock-system-awareness/#03","text":"\u6bd4\u8f83\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u5728\u4e00\u4e2a Redis \u5b9e\u4f8b\u4e2d\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u8fc7\u671f\u65f6\u95f4\u7684 key\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9501\u6700\u7ec8\u4f1a\u88ab\u91ca\u653e\uff08\u6ee1\u8db3\u6d3b\u8dc3\u6027 A \u7684\u8981\u6c42\uff09\u3002 \u5f53\u5ba2\u6237\u7aef\u9700\u8981\u91ca\u653e\u9501\u65f6\uff0c\u4e3b\u52a8\u5220\u6389\u8fd9\u4e2a key \u5c31\u53ef\u4ee5\u4e86\u3002 \u8868\u9762\u4e0a\u770b\u8d77\u6765\u8fd8\u4e0d\u9519\uff0c\u4f46\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u5355\u70b9\u5931\u8d25\u3002\u5927\u591a\u6570\u516c\u53f8\u5728\u4f7f\u7528 Redis \u65f6\u4f1a\u91c7\u7528\u4e3b\u4ece\u6a21\u5f0f\uff08\u4e3b\u8981\u6307\u4e00\u4e3b\u4e00\u4ece\uff09\uff0c \u56e0\u4e3a master \u5230 slave \u8282\u70b9\u7684\u6570\u636e\u590d\u5236\u662f\u5f02\u6b65\u7684\uff0c\u5f53 master \u6302\u6389\u4e4b\u540e\uff0c\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\u662f\u65e0\u6cd5\u5f97\u5230\u6ee1\u8db3\u3002 \u5177\u4f53\u5206\u6790\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef A \u5728 master \u8282\u70b9\u4e2d\u83b7\u53d6\u4e86\u9501\u3002 \u5bf9\u5e94\u7684 key \u5728\u88ab\u590d\u5236\u5230 slave \u8282\u70b9\u4e4b\u524d\uff0cmaster \u8282\u70b9\u6302\u4e86\u3002 slave \u8282\u70b9\u88ab\u63d0\u5347\u4e3a master\u3002 \u5ba2\u6237\u7aef B \u5728\u65b0\u7684 master \u4e2d\u83b7\u53d6\u5230\u4e86 A \u5df2\u7ecf\u6301\u6709\u7684\u76f8\u540c\u8d44\u6e90\u7684\u9501\u3002\u8fdd\u53cd\u4e86\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u6240\u4ee5\uff0c\u4e0d\u8981\u5728\u4e3b\u4ece\u6a21\u5f0f\u7684 Redis \u73af\u5883\u4e2d\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff0c\u5373\u4fbf\u662f\u540e\u6587\u4e2d\u7684 Redlock \u65b9\u6848\u4e5f\u662f\u4e00\u6837\uff0cNO REPLICATION\uff01 \u5728\u9009\u62e9\u4e00\u4e9b\u5f00\u6e90\u7c7b\u5e93\u65f6\u4e5f\u9700\u8981\u8003\u5bdf\u5176\u662f\u5426\u5bf9\u6709\u526f\u672c\u7684\u60c5\u51b5\u8fdb\u884c\u4e86\u5408\u7406\u5730\u5904\u7406\u3002\u4e8b\u5b9e\u4e0a\u5f88\u96be\u5904\u7406\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u57fa\u4e8e Redis \u65b9\u6848\u7684\u7f3a\u9677\u3002","title":"03 \u8bc4\u4f30\u7b80\u5316\u7248\u65b9\u6848\u7684\u73b0\u72b6"},{"location":"blog/seckill/redlock-system-awareness/#04-redis","text":"\u6838\u5fc3\u8981\u70b9\uff1a key \u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e key\uff0cvalue \u4e3a\u5168\u5c40\u552f\u4e00\u7b7e\u540d\uff0c\u4e00\u5b9a\u65f6\u95f4\u540e\u81ea\u52a8\u5931\u6548\u3002 \u5220\u9664 key \u65f6\u5fc5\u987b\u5339\u914d\u7b7e\u540d\u3002 \u65e2\u7136\u4e3b\u4ece\u7684 Redis \u73af\u5883\u4e0d\u9002\u5408\u505a\u5206\u5e03\u5f0f\u9501\uff0c\u90a3\u6211\u4eec\u6765\u770b\u770b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u7684 Redis \u73af\u5883\u600e\u4e48\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u3002 \u8bbe\u7f6e\u4e00\u4e2a\u5f53\u524d\u4e0d\u5b58\u5728\u7684 key\uff0c\u5e76\u4f7f\u7528\u968f\u673a\u503c\u7b7e\u540d\uff0c\u914d\u7f6e\u8fc7\u671f\u65f6\u95f4\u3002 Bash SET resource_name my_random_value NX PX 30000 \u53ea\u6709\u5f53 resource_name \u8fd9\u4e2a key \u4e0d\u5b58\u5728\u65f6\uff0c\u624d\u8bbe\u7f6e key\u3002\u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u968f\u673a\u6570\u503c\uff0c\u4f5c\u4e3a key \u7684\u7b7e\u540d\uff0c\u5e76\u4e14\u8fd9\u4e2a key \u5c06\u4f1a\u5728 30000 \u6beb\u79d2\u540e\u8fc7\u671f\u3002 \u9a8c\u8bc1\u7b7e\u540d\u5339\u914d\u540e\u65b9\u53ef\u5220\u9664\u3002 \u5bf9\u5e94\u7684 Lua \u811a\u672c\u5982\u4e0b\uff1a Lua if redis . call ( \"get\" , KEYS [ 1 ]) == ARGV [ 1 ] then return redis . call ( \"del\" , KEYS [ 1 ]) else return 0 end \u53ea\u6709\u7b7e\u540d\u503c\u5bf9\u5e94\u4e0a\u65f6\u624d\u5141\u8bb8\u5220\u9664\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5b89\u5168\u5730\u91ca\u653e\u9501\uff0c\u907f\u514d\u5220\u6389\u5176\u5b83\u5ba2\u6237\u7aef\u521b\u5efa\u7684\u9501\u3002 \u5728\u4e00\u4e9b\u66f4\u52a0\u7b80\u964b\u7684\u65b9\u6848\u4e2d\u662f\u6ca1\u6709\u9501\u7b7e\u540d\u7684\uff0c\u5b83\u4eec\u7684\u53ef\u9760\u6027\u5c31\u8981\u66f4\u5dee\u4e00\u4e9b\u4e86\u3002 \u8bef\u5220\u5176\u5b83\u5ba2\u6237\u7aef\u7684\u9501\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u4f8b\u5982\uff1a \u5ba2\u6237\u7aef A \u83b7\u53d6\u5230\u4e00\u4e2a\u9501\u3002 \u5ba2\u6237\u7aef A \u957f\u65f6\u95f4\u963b\u585e\u5728\u67d0\u4e9b\u64cd\u4f5c\u4e0a\uff0c\u963b\u585e\u7684\u65f6\u95f4\u8d85\u8fc7\u4e86\u9501\u7684\u6709\u6548\u65f6\u95f4\uff08\u901a\u8fc7 PX \u53c2\u6570\u8bbe\u7f6e\u7684\u65f6\u95f4\uff09\u3002 \u64cd\u4f5c\u5b8c\u6210\u540e\u6267\u884c\u9501\u7684 DEL\uff0c\u4f46\u8fd9\u4e2a\u9501\u5df2\u7ecf\u8fc7\u671f\u5e76\u4e14\u88ab\u5ba2\u6237\u7aef B \u83b7\u53d6\u5230\u3002 DEL \u64cd\u4f5c\u5bfc\u81f4\u5ba2\u6237\u7aef B \u7684\u9501\u88ab\u8bef\u5220\uff0c\u5ba2\u6237\u7aef C \u6b64\u65f6\u53ef\u4ee5\u83b7\u53d6 B \u9501\u6301\u6709\u7684\u9501\u3002 \u8fdd\u53cd\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u6211\u4eec\u4f7f\u7528\u5168\u5c40\u552f\u4e00\u7684\u968f\u673a\u503c\u7ed9\u9501\u8fdb\u884c\u7b7e\u540d\uff0c\u7136\u540e\u901a\u8fc7\u4ee5\u4e0a\u7684\u811a\u672c\u8fdb\u884c\u5220\u9664\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u9501\u53ea\u80fd\u88ab\u521b\u5efa\u8005\u5220\u9664\u3002 \u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u5f53\u524d\u6beb\u79d2\u65f6\u95f4\uff0c\u62fc\u63a5\u4e0a\u5ba2\u6237\u7aef id \u4f5c\u4e3a\u9501\u7684\u7b7e\u540d\u503c\u3002 \u7ed9 key \u6307\u5b9a\u7684\u751f\u5b58\u65f6\u95f4\u88ab\u79f0\u4e3a\u201c\u9501\u6709\u6548\u65f6\u95f4\u201d\uff0c\u5b83\u65e2\u662f\u9501\u81ea\u52a8\u91ca\u653e\u7684\u65f6\u95f4\uff0c\u4e5f\u662f\u5ba2\u6237\u7aef\u6267\u884c\u64cd\u4f5c\u5fc5\u9700\u7684\u65f6\u95f4\uff0c\u9700\u8981\u6bd4\u6700\u5927\u6267\u884c\u65f6\u95f4\u66f4\u5927\u4e00\u4e9b\uff0c\u6b64\u65f6\u5e76\u4e0d\u8fdd\u53cd\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\u3002 \u4f46\u4e8b\u5b9e\u4e0a\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u5ba2\u6237\u7aef\u64cd\u4f5c\u7684\u65f6\u95f4\u4e00\u5b9a\u5c0f\u4e8e\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u9501\u5df2\u7ecf\u81ea\u52a8\u8fc7\u671f\uff0c\u4ece\u800c\u88ab\u5176\u5b83\u5ba2\u6237\u7aef\u83b7\u53d6\u5230\u3002 \u8fd9\u91cc\u9700\u8981\u914d\u5408\u9501\u7684\u7eed\u671f\u624d\u80fd\u786e\u4fdd\u5b89\u5168\u6027\uff0c\u6587\u7ae0\u7684\u6700\u540e\u4e00\u90e8\u5206\u4f1a\u8bb2\u89e3\u7eed\u671f\u673a\u5236\u3002 \u65b9\u6848\u4f18\u70b9\uff1a\u76f8\u5bf9\u7b80\u5355\u6613\u5b9e\u73b0\u3002 \u65b9\u6848\u7f3a\u70b9\uff1a\u53ef\u7528\u6027\u4e0d\u9ad8\uff0c\u4e00\u65e6\u552f\u4e00\u7684 Redis \u8282\u70b9\u6302\u6389\uff0c\u7cfb\u7edf\u5c06\u5b8c\u5168\u4e0d\u53ef\u7528\u3002 \u4e0d\u5efa\u8bae\u5728\u53ef\u7528\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u4e2d\u4f7f\u7528\u8be5\u65b9\u6848\uff01","title":"04 \u5355\u5b9e\u4f8b Redis \u7684\u9501\u65b9\u6848"},{"location":"blog/seckill/redlock-system-awareness/#05-redlock","text":"\u6838\u5fc3\u8981\u70b9\uff1a N \u4e2a\u72ec\u7acb\u8282\u70b9\uff0c\u65e0\u526f\u672c\uff0c\u4e92\u4e0d\u4f9d\u8d56\uff08\u975e\u96c6\u7fa4\uff09\uff0cN \u662f\u5947\u6570\u4e14 N\u22653\u3002 \u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\uff0c\u5ba2\u6237\u7aef\u5728\u534a\u6570\u4ee5\u4e0a\u8282\u70b9\u6210\u529f\u8bbe\u7f6e key\uff0c\u5219\u53ef\u4ee5\u83b7\u53d6\u9501\u3002 \u5ba2\u6237\u7aef\u9700\u63d0\u524d\u51e0\u6beb\u79d2\u5b8c\u6210\u5de5\u4f5c\uff0c\u4f5c\u4e3a\u5bf9\u65f6\u949f\u6f02\u79fb\u7684\u8865\u507f\u3002 \u5355\u5b9e\u4f8b\u65b9\u6848\u5728\u9762\u5bf9\u5355\u70b9\u6545\u969c\u65f6\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u591a\u5b9e\u4f8b\u6765\u786e\u4fdd\u53ef\u7528\u6027\uff0c\u800c\u5355\u5b9e\u4f8b\u7684\u65b9\u6848\u65e0\u6cd5\u76f4\u63a5\u5957\u7528\u5728\u591a\u5b9e\u4f8b\u73af\u5883\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u6539\u8fdb\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a N \u4e2a Redis master \u8282\u70b9\u3002\u8fd9\u4e9b\u8282\u70b9\u662f\u72ec\u7acb\u7684\u3001\u4e92\u4e0d\u4f9d\u8d56\u7684\uff0c\u6ca1\u6709\u4f7f\u7528\u4e3b\u4ece\u590d\u5236\u6216\u8005\u5176\u5b83\u7684\u534f\u8c03\u673a\u5236\u3002\u5f53 N=5 \u65f6\uff0c \u6211\u4eec\u9700\u8981\u5728\u4e0d\u540c\u7684\u4e3b\u673a\u6216\u8005\u865a\u62df\u673a\u4e0a\u8fd0\u884c 5 \u4e2a Redis master \u8282\u70b9\uff0c\u4ee5\u786e\u4fdd\u8282\u70b9\u5931\u6548\u65f6\u72ec\u7acb\u5931\u6548\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e3a\u4e86\u83b7\u53d6\u9501\uff0c\u5ba2\u6237\u7aef\u4f1a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u5f53\u524d\u6beb\u79d2\u65f6\u95f4\u3002 \u5c1d\u8bd5\u987a\u5e8f\u5730\u4ece\u6240\u6709\u5b9e\u4f8b\u4e2d\u83b7\u53d6\u9501\uff0c\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u90fd\u8bbe\u7f6e\u540c\u6837\u7684 key \u540d\u79f0\u548c\u968f\u673a\u503c\u3002\u5728\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u8bbe\u7f6e\u9501\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u6709\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u6bd4\u9501\u7684\u6709\u6548\u65f6\u95f4\u66f4\u5c0f\u3002 \u6bd4\u5982\uff0c\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\u662f 10 \u79d2\uff0c\u5219\u8d85\u65f6\u65f6\u95f4\u53ef\u4ee5\u662f 5~50 \u6beb\u79d2\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u5ba2\u6237\u7aef\u5c1d\u8bd5\u4ece\u5df2\u7ecf\u5931\u6548\u7684 Redis \u8282\u70b9\u83b7\u53d6\u9501\u800c\u957f\u65f6\u95f4\u88ab\u963b\u585e\u3002 \u5f53\u4e00\u4e2a Redis \u5b9e\u4f8b\u4e0d\u53ef\u7528\u65f6\uff0c\u8981\u5c3d\u53ef\u80fd\u5feb\u5730\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5ba2\u6237\u7aef\u4f1a\u8ba1\u7b97\u83b7\u53d6\u9501\u7684\u8fc7\u7a0b\u6d88\u8017\u4e86\u591a\u5c11\u65f6\u95f4\u3002\u5f53\u4e14\u4ec5\u5f53\u5ba2\u6237\u7aef\u5728\u534a\u6570\u4ee5\u4e0a\u7684 Redis \u5b9e\u4f8b\u4e2d\u8bbe\u7f6e\u6210\u529f\uff0c\u4e14\u603b\u8017\u65f6\u8fdc\u5c0f\u4e8e\u9501\u7684\u6709\u6548\u65f6\u95f4\u65f6\uff0c\u624d\u4f1a\u8ba9\u9501\u6700\u7ec8\u6210\u529f\u88ab\u83b7\u53d6\u3002 \u5982\u679c\u5728\u67d0\u4e2a Redis \u5b9e\u4f8b\u4e0a\u8bbe\u7f6e\u6210\u529f\uff0c\u5219\u4f1a\u4f7f\u7528\u5728\u6b65\u9aa4 1 \u4e2d\u83b7\u53d6\u7684\u65f6\u95f4\uff0c\u518d\u52a0\u4e0a\u5df2\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u4f5c\u4e3a\u8fc7\u671f\u65f6\u95f4\u3002 \u5982\u679c\u8bbe\u7f6e\u9501\u5931\u8d25\u4e86\uff08\u672a\u80fd\u6210\u529f\u9501\u5b9a\u534a\u6570\u4ee5\u4e0a Redis \u5b9e\u4f8b\u6216\u8005\u6709\u6548\u65f6\u95f4\u662f\u8d1f\u7684\uff09\uff0c\u5c06\u4f1a\u5c1d\u8bd5\u5728\u6240\u6709 Redis \u5b9e\u4f8b\u4e0a\u89e3\u9501\uff0c\u5220\u9664\u5bf9\u5e94\u7684 key\u3002 \u8be5\u7b97\u6cd5\u4f9d\u8d56\u4e8e\u4e00\u79cd\u5047\u8bbe\uff1a\u5c3d\u7ba1\u8fdb\u7a0b\u4e4b\u95f4\u6ca1\u6709\u540c\u6b65\u65f6\u949f\uff0c\u4f46\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u672c\u5730\u65f6\u95f4\u4ecd\u7136\u4ee5\u5927\u81f4\u76f8\u540c\u7684\u901f\u5ea6\u6d41\u52a8\uff0c\u5176\u8bef\u5dee\u4e0e\u9501\u7684\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\u76f8\u6bd4\u662f\u5f88\u5c0f\u7684\u3002 \u8fd9\u4e2a\u5047\u8bbe\u662f\u975e\u5e38\u63a5\u8fd1\u4e8b\u5b9e\u7684\uff1a\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u672c\u5730\u65f6\u949f\uff0c\u901a\u5e38\u8fd9\u4e9b\u8ba1\u7b97\u673a\u7684\u65f6\u949f\u6f02\u79fb\u662f\u5f88\u5c0f\u7684\uff0c\u53ea\u6709\u51e0\u6beb\u79d2\u3002 \u57fa\u4e8e\u8fd9\u4e00\u70b9\uff0c\u53ea\u6709\u5f53\u6301\u6709\u9501\u7684\u5ba2\u6237\u7aef\u5728\u9501\u6709\u6548\u65f6\u95f4\u8fbe\u5230\u4e4b\u524d\u5b8c\u6210\u5de5\u4f5c\uff0c\u4e92\u65a5\u6027\u624d\u4f1a\u5f97\u5230\u4fdd\u8bc1\u3002\u63d0\u524d\u7684\u51e0\u6beb\u79d2\u7528\u4e8e\u8865\u507f\u8fdb\u7a0b\u4e4b\u95f4\u7684\u65f6\u949f\u6f02\u79fb\u3002 \u8fd9\u5c31\u8ddf\u6728\u6876\u539f\u7406\u4e00\u6837\uff0c\u8f83\u77ed\u7684\u4e00\u5757\u677f\u5b50\u51b3\u5b9a\u4e86\u6700\u5927\u84c4\u6c34\u91cf\uff0c\u6700\u65e9\u7684\u8fc7\u671f\u65f6\u95f4\u51b3\u5b9a\u4e86\u9501\u7684\u5b9e\u9645\u6700\u5927\u751f\u5b58\u65f6\u957f\u3002","title":"05 Redlock \u7b97\u6cd5\u6838\u5fc3\u601d\u60f3"},{"location":"blog/seckill/redlock-system-awareness/#06","text":"\u6838\u5fc3\u8981\u70b9\uff1a \u5148\u5ef6\u8fdf\u4e00\u4e2a\u968f\u673a\u65f6\u95f4\u3002 \u518d\u4f7f\u7528\u6307\u6570\u9000\u907f\u6cd5\u6267\u884c\u91cd\u8bd5\u3002 \u4f18\u79c0\u7684\u65b9\u6848\u8bbe\u8ba1\u4e00\u5b9a\u8981\u5145\u5206\u8003\u8651\u5931\u8d25\u573a\u666f\uff0c\u5373\u9762\u5411\u5931\u8d25\u8bbe\u8ba1\u7684\u601d\u60f3\uff01 \u5f53\u5ba2\u6237\u7aef\u4e0d\u80fd\u6210\u529f\u83b7\u53d6\u5230\u9501\u65f6\uff0c\u5e94\u8be5\u5ef6\u8fdf\u4e00\u4e2a\u968f\u673a\u65f6\u95f4\u540e\u518d\u91cd\u8bd5\u3002\u4f7f\u7528\u968f\u673a\u65f6\u95f4\u53ef\u4ee5\u907f\u514d\u591a\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u4e89\u593a\u540c\u4e00\u4e2a\u8d44\u6e90\u7684\u9501\u3002 \u5927\u91cf\u5ba2\u6237\u7aef\u540c\u65f6\u53d1\u8d77\u91cd\u8bd5\u8bf7\u6c42\u7684\u60c5\u51b5\u79f0\u4e3a\u60ca\u7fa4\u6548\u5e94\uff08thundering herd\uff09\uff0c\u4f1a\u8fc7\u591a\u6d88\u8017\u4f60\u7684\u670d\u52a1\u5668\u8d44\u6e90\u3002\u5982\u679c\u8981\u5bf9\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\uff0c\u6211\u5fc5\u987b\u5173\u6ce8\u7684\u4e00\u4e2a\u6307\u6807\u5c31\u662f\uff1a\u91cd\u8bd5\u6b21\u6570/\u6210\u529f\u6b21\u6570\uff0c\u8fd9\u4e2a\u6307\u6807\u8d8a\u4f4e\u8d8a\u597d\u3002","title":"06 \u79d1\u5b66\u7684\u5931\u8d25\u91cd\u8bd5\u673a\u5236"},{"location":"blog/seckill/redlock-system-awareness/#_1","text":"\u5ba2\u6237\u7aef\u5c1d\u8bd5\u5728\u534a\u6570\u4ee5\u4e0a Redis \u5b9e\u4f8b\u4e0a\u52a0\u9501\u7684\u901f\u5ea6\u8d8a\u5feb\uff0c\u7ade\u4e89\u7684\u65f6\u95f4\u7a97\u53e3\u5c31\u4f1a\u8d8a\u5c0f\uff0c\u56e0\u6b64\u6700\u7406\u60f3\u7684\u60c5\u51b5\u662f\u5ba2\u6237\u7aef\u91c7\u7528\u591a\u8def\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u5411 N \u4e2a\u5b9e\u4f8b\u53d1\u9001 SET \u547d\u4ee4\u3002\u5bf9\u4e8e\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u534a\u6570\u4ee5\u4e0a\u9501\u7684\u5ba2\u6237\u7aef\uff0c\u8981\u5c3d\u5feb\u91ca\u653e\u5df2\u83b7\u53d6\u5230\u7684\u9501\uff0c\u4e0d\u9700\u8981\u7b49\u5f85 key \u81ea\u52a8\u8fc7\u671f\uff0c\u4ee5\u786e\u4fdd\u9501\u53ef\u4ee5\u5c3d\u5feb\u88ab\u518d\u6b21\u8bf7\u6c42\u3002 \u5f53\u91cd\u8bd5\u53d1\u751f\u65f6\u7684\u6700\u4f73\u7b56\u7565\uff1a\u4f7f\u7528\u968f\u673a\u5ef6\u8fdf+\u6307\u6570\u9000\u907f\u53ef\u6709\u6548\u5730\u5206\u6563\u91cd\u8bd5\u8bf7\u6c42\uff0c\u524a\u5f31\u60ca\u7fa4\u6548\u5e94\u7684\u5f71\u54cd\u3002","title":"\u5982\u4f55\u51cf\u5c11\u91cd\u8bd5\u51e0\u7387\u548c\u65f6\u95f4\uff1f"},{"location":"blog/seckill/redlock-system-awareness/#exponential-backoff","text":"Text Only //retry=1 \u4ee3\u8868\u5f53\u524d\u7b2c 1 \u6b21\u91cd\u8bd5\uff0c\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u662f 3\u3002 //\u968f\u7740\u91cd\u8bd5\u6b21\u6570\u7684\u589e\u52a0\uff0c\u5ef6\u8fdf\u65f6\u95f4\u8d8a\u6765\u8d8a\u5927\u3002\u7b2c 1 \u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\u662f 20ms\uff0c\u7b2c 3 \u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\u662f 80ms\u3002 long timemillsec = (long) (Math.pow(2, Math.min(retry, 3)) \\* 10); \u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u8c03\u7528+\u5b9a\u65f6\u5668\u8fdb\u884c\u91cd\u8bd5\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u91cd\u8bd5\u540e\u90fd\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21\u91cd\u8bd5\u7684\u5ef6\u8fdf\u65f6\u95f4\uff0c\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u800c\u4f9d\u7136\u6ca1\u6709\u6210\u529f\u5219\u653e\u5f03\u91cd\u8bd5\uff0c\u4e1a\u52a1\u5ba2\u6237\u7aef\u8981\u6709\u5bf9\u5e94\u7684\u5931\u8d25\u5904\u7406\u3002","title":"\u6307\u6570\u9000\u907f\u6cd5\uff08Exponential Backoff\uff09"},{"location":"blog/seckill/redlock-system-awareness/#07","text":"\u6838\u5fc3\u8981\u70b9\uff1a \u591a\u8def\u590d\u7528\uff0c\u66f4\u5feb\u5b8c\u6210\u52a0\u9501/\u89e3\u9501\uff0c\u63d0\u9ad8\u6027\u80fd\u3002 \u5b9e\u65f6 AOF \u6216\u8005\u65e0\u6301\u4e45\u5316\u3001\u5ef6\u8fdf\u91cd\u542f\uff0c\u786e\u4fdd\u4e92\u65a5\u3002 \u591a\u8def\u590d\u7528\uff0c\u4e3a\u4e86\u66f4\u5feb \u4e4b\u6240\u4ee5\u9009\u62e9 Redis \u505a\u5206\u5e03\u5f0f\u9501\u670d\u52a1\uff0c\u662f\u56e0\u4e3a\u60f3\u83b7\u5f97\u8f83\u9ad8\u7684\u6027\u80fd\uff0c\u6bcf\u79d2\u80fd\u591f\u6267\u884c\u5927\u91cf\u7684\u52a0\u9501\u548c\u89e3\u9501\u64cd\u4f5c\u3002 \u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u8bc9\u6c42\uff0c\u53ef\u4ee5\u91c7\u7528\u591a\u8def\u590d\u7528\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u5c06\u6240\u6709\u547d\u4ee4\u53d1\u9001\u5230 N \u4e2a Redis \u8282\u70b9\u4e0a\uff0c\u5e76\u540c\u65f6\u8bfb\u53d6\u547d\u4ee4\u7ed3\u679c\uff08\u5047\u8bbe\u6240\u6709 Redis \u8282\u70b9\u7684\u54cd\u5e94\u65f6\u95f4\u662f\u4e00\u81f4\u7684\uff09\u3002","title":"07 \u6027\u80fd\u3001\u6545\u969c\u6062\u590d\u4e0e\u6301\u4e45\u5316"},{"location":"blog/seckill/redlock-system-awareness/#aof-","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u7cfb\u7edf\u5177\u5907\u6545\u969c\u6062\u590d\u80fd\u529b\uff0c\u5c31\u9700\u8981\u8003\u8651 Redis \u7684\u6301\u4e45\u5316\u7b56\u7565\u3002 \u5047\u8bbe\u6211\u4eec\u914d\u7f6e\u4e86 5 \u4e2a\u6ca1\u6709\u4efb\u4f55\u6301\u4e45\u5316\u7b56\u7565\u7684 Redis \u5b9e\u4f8b\uff0c\u6765\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4e00\u4e2a\u5ba2\u6237\u7aef\u5728 3 \u4e2a\u5b9e\u4f8b\u4e0a\u6210\u529f\u8bbe\u7f6e\u4e86\u9501\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u91cd\u542f\u5bfc\u81f4\u6570\u636e\u4e22\u5931\uff0c\u5b9e\u9645\u9501\u6210\u529f\u7684\u8282\u70b9\u53ea\u5269\u4e0b 2 \u4e2a\uff08\u534a\u6570\u4ee5\u4e0b\uff09\uff0c\u6b64\u65f6\u5176\u5b83\u5ba2\u6237\u7aef\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u540c\u4e00\u4e2a\u8d44\u6e90\u7684\u9501\u3002 \u8fdd\u53cd\u4e86\u4e92\u65a5\u7684\u5b89\u5168\u6027\u8981\u6c42\uff01 \u5f53\u5f00\u542f AOF \u6301\u4e45\u5316\u540e\uff0c\u60c5\u51b5\u4f1a\u6709\u5f88\u5927\u6539\u5584\u3002 \u4f8b\u5982\uff1a\u5411 Redis Server \u53d1\u9001 SHUTDOWN \u547d\u4ee4\u5e76\u91cd\u542f\uff0cRedis \u4f1a\u5148\u8fdb\u884c\u6301\u4e45\u5316\u7136\u540e\u518d\u91cd\u542f\uff0c\u91cd\u542f\u540e\u4ece AOF \u6587\u4ef6\u4e2d\u6062\u590d\u6570\u636e\u3002 \u5728 Server \u5173\u95ed\u671f\u95f4\uff0c\u9501\u7684\u751f\u5b58\u65f6\u95f4\u4ecd\u7136\u5728\u6b63\u5e38\u6d41\u901d\uff0c\u5bf9\u9501\u7684\u8fc7\u671f\u6ca1\u6709\u5f71\u54cd\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002 \u4f46\u5982\u679c\u662f\u7a81\u7136\u65ad\u7535\u5462\uff1f\u5047\u8bbe Redis \u6309\u7167\u9ed8\u8ba4\u914d\u7f6e\uff0c\u6bcf\u79d2\u8fdb\u884c\u4e00\u6b21 AOF \u6587\u4ef6\u7684\u5199\u76d8\uff0c\u5219\u6709\u53ef\u80fd\u56e0\u4e3a\u6765\u4e0d\u53ca\u5199\u76d8\u800c\u4e22\u5931\u6570\u636e\u3002 \u5982\u679c\u60f3\u5728\u8fd9\u79cd\u5f02\u5e38\u91cd\u542f\u7684\u60c5\u51b5\u4e0b\u4fdd\u8bc1\u9501\u7684\u5b89\u5168\u6027\uff0c\u5c31\u9700\u8981\u5728\u6301\u4e45\u5316\u914d\u7f6e\u4e2d\u628a fsync \u8bbe\u7f6e\u4e3a always\uff0c\u5b9e\u65f6\u5199\u76d8\u3002 \u6309\u7167\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 CAP \u7406\u8bba\uff0c\u8fd9\u662f\u901a\u8fc7\u727a\u7272\u4e00\u5b9a\u7684\u53ef\u7528\u6027\uff0c\u4fdd\u8bc1\u4e86\u4e00\u81f4\u6027\u548c\u5206\u533a\u5bb9\u9519\u6027\u3002","title":"\u6709\u6301\u4e45\u5316\uff0c\u5b9e\u65f6 AOF-\u91cd\u542f\u540e\u6570\u636e\u4e0d\u4e22\u5931\uff0c\u786e\u4fdd\u4e92\u65a5\u3002"},{"location":"blog/seckill/redlock-system-awareness/#-","text":"\u5982\u679c\u4e00\u4e2a Redis \u5b9e\u4f8b\u5728\u5d29\u6e83\u540e\u91cd\u542f\uff0c\u800c\u4e14\u8be5\u5b9e\u4f8b\u4e2d\u6240\u6709\u7684\u9501\u90fd\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684\u9501\uff08\u5f53\u524d\u6d3b\u52a8\u9501\uff09\uff0c\u5219\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u4e5f\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\u3002 \u6211\u4eec\u53ea\u9700\u8981\u5728 Redis \u5b9e\u4f8b\u5d29\u6e83\u540e\uff0c\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\u518d\u542f\u52a8\u5c31\u53ef\u4ee5\u3002\u5ef6\u8fdf\u7684\u65f6\u95f4\u8981\u6bd4\u6700\u5927\u7684\u9501\u751f\u5b58\u65f6\u95f4\u5927\u4e00\u4e9b\uff0c\u8fd9\u6837\u8be5\u5b9e\u4f8b\u4e2d\u7684\u9501\u5728\u91cd\u542f\u540e\u5df2\u7ecf\u5168\u90e8\u5931\u6548\u5e76\u4e14\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u3002 \u5f53 Redis \u5b9e\u4f8b\u6ca1\u6709\u914d\u7f6e\u4efb\u4f55\u6301\u4e45\u5316\u65f6\uff0c\u4f7f\u7528\u5ef6\u8fdf\u91cd\u542f\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u79cd\u91cd\u542f\u7684\u60c5\u51b5\u4e0b\u786e\u4fdd\u9501\u7684\u5b89\u5168\u3002 \u8fd9\u4e5f\u662f\u4e00\u79cd\u727a\u7272\u53ef\u7528\u6027\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\u5f53\u534a\u6570\u4ee5\u4e0a\u7684 Redis \u5b9e\u4f8b\u5d29\u6e83\u540e\uff0c\u7cfb\u7edf\u4f1a\u53d8\u5f97\u5b8c\u5168\u4e0d\u53ef\u7528\uff0c\u6301\u7eed\u7684\u65f6\u95f4\u662f\u6700\u5927\u9501\u751f\u5b58\u65f6\u95f4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\u6ca1\u6709\u4efb\u4f55\u8d44\u6e90\u53ef\u4ee5\u88ab\u9501\u5b9a\u3002","title":"\u65e0\u6301\u4e45\u5316\uff0c\u5ef6\u8fdf\u91cd\u542f-\u8282\u70b9\u5bf9\u5e94\u7684\u9501\u5168\u90e8\u8fc7\u671f\u81ea\u52a8\u5931\u6548\uff0c\u786e\u4fdd\u4e92\u65a5\u3002"},{"location":"blog/seckill/redlock-system-awareness/#08","text":"\u6838\u5fc3\u8981\u70b9\uff1a \u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5c3d\u53ef\u80fd\u51c6\u786e\u5730\u9884\u4f30\u5ba2\u6237\u7aef\u64cd\u4f5c\u8017\u65f6\uff0c\u4f5c\u4e3a\u9501\u6709\u6548\u671f\u7684\u53c2\u8003\u3002 \u589e\u52a0\u9501\u7684\u7eed\u671f\u673a\u5236\uff0c\u5e94\u5bf9\u610f\u5916\u60c5\u51b5\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u64cd\u4f5c\u7684\u6b65\u9aa4\u5f88\u5c11\uff0c\u8017\u65f6\u5f88\u77ed\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c0f\u7684\u9501\u6709\u6548\u65f6\u95f4\u3002 \u4f46\u65e0\u8bba\u9884\u4f30\u5730\u591a\u4e48\u51c6\u786e\uff0c\u90fd\u65e0\u6cd5\u907f\u514d\u610f\u5916\uff0c\u5efa\u8bae\u4f7f\u7528\u9501\u7684\u7eed\u671f\u673a\u5236\u5bf9\u7b97\u6cd5\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u786e\u5b9a\u6027\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u6b63\u5728\u6267\u884c\u64cd\u4f5c\uff0c\u800c\u9501\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\u5df2\u7ecf\u5f88\u5c0f\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 Lua \u811a\u672c\u5bf9\u5df2\u5b58\u5728\u7684\u9501\u8fdb\u884c\u6709\u6548\u671f\u5ef6\u957f\u3002","title":"08 \u8ba9\u7b97\u6cd5\u66f4\u53ef\u9760\uff1a\u7eed\u671f\u673a\u5236"},{"location":"blog/seckill/redlock-system-awareness/#09","text":"\u6ca1\u6709\u6700\u5b8c\u7f8e\u7684\u65b9\u6848\uff0c\u53ea\u6709\u6700\u9002\u5408\u7684\u3002 \u57fa\u4e8e Redis \u4e5f\u4e0d\u662f\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u7684\u552f\u4e00\u9009\u9879\uff0c\u8fd8\u6709\u57fa\u4e8e Zookeeper \u7684\u65b9\u6848\u4e5f\u53ef\u4ee5\u8003\u8651\uff0c\u6700\u4f73\u7684\u65b9\u6848\u662f\u4e0d\u9700\u8981\u5206\u5e03\u5f0f\u9501\u3002 \u5728\u5b9e\u8df5\u4e2d\u8981\u8003\u8651\u57fa\u7840\u8bbe\u65bd\u60c5\u51b5\u548c\u4e1a\u52a1\u8981\u6c42\uff0c\u4ed4\u7ec6\u6743\u8861\u3002 \u671f\u671b\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u5efa\u7acb\u5bf9\u5206\u5e03\u5f0f\u9501\u65b9\u6848\u7684\u8bc4\u5224\u6807\u51c6\uff0c\u5728\u5b9e\u9645\u7684\u6280\u672f\u9009\u578b\u4e2d\u80fd\u591f\u5bf9\u591a\u79cd\u65b9\u6848\u8fdb\u884c\u5ba2\u89c2\u8bc4\u4ef7\u3002","title":"09 \u603b\u7ed3"},{"location":"blog/seckill/replace_setnx/","text":"https://learnku.com/articles/39265 \u80cc\u666f \u6700\u8fd1\u516c\u53f8\u51fa\u4e86\u4e00\u8d77\u6545\u969c\uff0c\u95ee\u9898\u4ee3\u7801\u5982\u4e0b\uff1a PHP /** * TRUE: \u89e6\u53d1\u9650\u6d41\uff0cFALSE\uff1a\u672a\u89e6\u53d1\u9650\u6d41 */ public function acquire() { try { $redisHandler = $this->redisInstance->getHandler(); $redisHandler->set($this->rateLimitKey, $this->tokenNum, ['nx', 'ex' => $this->expireTime]); $leftTokenNum = $redisHandler->decr($this->rateLimitKey); if ($leftTokenNum < 0) { return TRUE; } return FALSE; } catch (\\Exception $e) { return FALSE; } } \u4f5c\u8005\u7684\u76ee\u7684\u662f\u9488\u5bf9\u7206\u6b3e\u5546\u54c1\u7684\u8d2d\u4e70\uff0c\u4f7f\u7528 redis \u6765\u8d77\u5230\u4e00\u4e2a\u9650\u6d41\u7684\u4f5c\u7528\uff0c1 \u79d2\u949f\u53ea\u5141\u8bb8 1 \u4eba\u8d2d\u4e70\u3002 \u7ed3\u679c\u4e0a\u7ebf\u8fc7\u540e\u4e0d\u4e45\uff0c\u8fd0\u8425\u5c31\u53cd\u9988\u7ebf\u4e0a\u51fa\u6545\u969c\u4e86\uff0c\u8be5\u7206\u6b3e\u5546\u54c1\u6240\u6709\u4eba\u90fd\u4e0d\u80fd\u8d2d\u4e70\u4e86\u3002 \u5206\u6790 \u4e0a\u9762\u4ee3\u7801\u7684\u601d\u8def\u5f88\u7b80\u5355\uff1a\u901a\u8fc7 $redis->set('key', '1', ['nx', 'ex'=>1]); \u547d\u4ee4\uff0c\u8bbe\u7f6e\u503c\u4e3a 1 \u8fc7\u671f\u65f6\u95f4\u4e3a 1 \u79d2\u7684\u8ba1\u6570\u5668\uff0c\u57fa\u4e8e\u8be5\u8ba1\u6570\u5668\u7684\u6263\u51cf\u6765\u8fbe\u5230 1 \u79d2\u949f\u653e\u884c 1 \u4e2a\u8bf7\u6c42\u7684\u76ee\u7684\u3002 \u6d4b\u8bd5 \u6211\u4eec\u7b80\u5316\u4e00\u4e0b\u4e0a\u9762\u7684\u4ee3\u7801\uff0c PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key'; $redis->set($key, '1', ['nx', 'ex' => 1]); $left = $redis->decr($key); if ($left < 0) { // \u8fd9\u91cc\u901a\u8fc7\u72b6\u6001\u7801\u6765\u66f4\u65b9\u4fbf\u7684\u89c2\u5bdf header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u7b80\u5316\u540e\u4f7f\u7528 siege \u6a21\u62df 100 \u4e2a\u7528\u6237\u5e76\u53d1\u538b\u6d4b\u4e00\u4e0b\u3002 \u975e\u5e38\u7a33\u554a\uff0c1 \u79d2\u949f\u901a\u8fc7 1 \u4e2a\u8bf7\u6c42\u3002 \u6211\u4eec\u7684\u5f00\u53d1\u540c\u5b66\u4e5f\u5c31\u662f\u7ecf\u8fc7\u4e86\u4e0a\u8ff0\u6d4b\u8bd5\u624d\u653e\u5fc3\u628a\u4ee3\u7801\u53d1\u4e0a\u7ebf\u7684\uff0c\u548b\u4e00\u4e0a\u7ebf\u5c31\u70b8\u4e86\u5462\uff1f \u539f\u56e0 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u4e00\u6bb5\u64cd\u4f5c\uff0c Bash [ root@e98dffb83384 src ] # ./redis-cli 127 .0.0.1:6379> SETNX k 1 ( integer ) 1 127 .0.0.1:6379> EXPIRE k 10 # \u4e3a\u4e86\u65b9\u4fbf\u6f14\u793a\uff0c\u8fd9\u91cc\u8bbe\u7f6e 10 \u79d2\u8fc7\u671f\u65f6\u95f4 ( integer ) 1 127 .0.0.1:6379> DECR k # \u5728\u8fc7\u671f\u65f6\u95f4\u5185\uff0c\u7b2c\u4e00\u6b21\u6263\u51cf\u6210 0 ( integer ) 0 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -1 ( integer ) -1 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -2 ( integer ) -2 127 .0.0.1:6379> TTL k # k \u8fd8\u6709 2 \u79d2\u8fc7\u671f ( integer ) 2 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -3 ( integer ) -3 127 .0.0.1:6379> TTL k # \u8ddd\u79bb\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 10 \u79d2\u4e4b\u540e\uff0ck \u5df2\u7ecf\u8fc7\u671f ( integer ) -2 127 .0.0.1:6379> DECR k # \u8fd9\u65f6\u5019\u518d\u6263\u51cf\u53d1\u73b0 k \u7684\u503c\u88ab\u6263\u51cf\u6210 -1 ( integer ) -1 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -2 ( integer ) -2 127 .0.0.1:6379> TTL k # \u67e5\u770b k \u8fc7\u671f\u65f6\u95f4\u662f\u6c38\u4e0d\u8fc7\u671f ( integer ) -1 127 .0.0.1:6379> SETNX k 3 # \u518d\u8bbe\u7f6e\u662f\u4e0d\u6210\u529f\u7684 ( integer ) 0 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -3 ( integer ) -3 \u5728 Redis key \u672a\u8fc7\u671f\u4e4b\u524d\uff0cDECR \u547d\u4ee4\u90fd\u662f\u6b63\u5e38\u6263\u51cf\u7684\u3002\u4e00\u65e6 key \u8fc7\u671f\u4e86\uff0c\u518d\u6267\u884c DECR \u547d\u4ee4\uff0c\u4f1a\u53d1\u73b0 key \u7684\u503c\u548c\u8fc7\u671f\u65f6\u95f4\u90fd\u53d8\u4e3a -1 \u4e86\u3002 Redis \u5b98\u7f51\u5bf9 DECR \u547d\u4ee4\u4ecb\u7ecd\u91cc\u6709\u8fd9\u4e48\u4e00\u6bb5\uff1a Text Only Decrements the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. \u5bf9\u4e8e\u51fa\u95ee\u9898\u7684\u4ee3\u7801\uff0c PHP $redisHandler->set($this->rateLimitKey, $this->tokenNum, ['nx', 'ex' => $this->expireTime]); $leftTokenNum = $redisHandler->decr($this->rateLimitKey); \u5047\u8bbe\u5728\u7b2c\u4e00\u53e5 SETNX \u4e4b\u540e\u7b2c\u4e8c\u53e5 DECR \u4e4b\u524d\uff0ckey \u8fc7\u671f\u4e86\uff0c\u518d\u6267\u884c DECR \u5c31\u4f1a\u5148\u751f\u6210\u4e00\u4e2a\u6c38\u4e0d\u8fc7\u671f\u503c\u4e3a 0 \u7684 key\u3002 \u4e4b\u540e\u6240\u6709\u8bf7\u6c42\u7684 SETNX \u90fd\u662f fasle\uff0c\u4e00\u76f4\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u6c38\u4e0d\u8fc7\u671f\u7684 key \u8fdb\u884c\u9012\u51cf\uff0c\u6240\u6709\u7684 $leftTokenNum \u90fd\u5c0f\u4e8e 0\uff0c\u56e0\u6b64\u5bfc\u81f4\u6240\u6709\u8bf7\u6c42\u88ab\u9650\u6d41\u3002 \u95ee\u9898\u590d\u73b0 \u81ea\u6d4b\u65f6\u4e3a\u5565\u53d1\u73b0\u4e0d\u4e86\u95ee\u9898\uff1f\u56e0\u4e3a\u81ea\u6d4b\u65f6\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\u662f 1 \u79d2\uff0c\u5bfc\u81f4 key \u5728\u4e24\u6b65\u4e4b\u95f4\u8fc7\u671f\u51fa\u73b0\u7684\u6982\u7387\u5f88\u5c0f\u3002\u6211\u4eec\u53ea\u8981\u5c06\u8fc7\u671f\u65f6\u95f4\u8c03\u7684\u8db3\u591f\u5c0f\uff0c\u5f88\u5bb9\u6613\u590d\u73b0\u95ee\u9898\u3002 \u628a\u8fc7\u671f\u65f6\u95f4\u6539\u4e3a 5 \u6beb\u79d2\uff0c PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key'; $redis->set($key, '3', ['nx', 'px' => 5]); // key \u8bbe\u7f6e\u6210 5 \u6beb\u79d2\u8fc7\u671f $left = $redis->decr($key); if ($left < 0) { // \u8fd9\u91cc\u901a\u8fc7\u72b6\u6001\u7801\u6765\u66f4\u65b9\u4fbf\u7684\u89c2\u5bdf header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u4f9d\u7136\u4f7f\u7528 siege \u538b\u6d4b\uff1a \u7531\u4e8e\u8bbe\u7f6e\u7684 5 \u6beb\u79d2\u653e\u884c\u4e00\u4e2a\u8bf7\u6c42\uff0c\u56e0\u6b64\u524d\u534a\u90e8\u5206\u57fa\u672c\u4e0a\u90fd\u662f\u901a\u8fc7\u7684\u8bf7\u6c42\uff0c\u5076\u5c14\u6709\u51e0\u4e2a\u9650\u6d41\u7684\uff0c\u8fd9\u662f\u6b63\u5e38\u7684\u3002 \u4f46\u662f\u6ca1\u8fc7\u591a\u4e45\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u88ab\u9650\u6d41\u4e86\uff0c\u4e5f\u5c31\u590d\u73b0\u4e86\u7ebf\u4e0a\u7684\u6545\u969c\u3002 \u89e3\u51b3\u65b9\u6848 \u5982\u4f55\u6539\u8fdb\u4ee3\u7801\u6765\u6b63\u786e\u7684\u5b9e\u73b0\u9650\u6d41\u5462\uff1f Redis \u7684 EVAL \u547d\u4ee4 \u6267\u884c Lua \u811a\u672c\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u539f\u5b50\u6027\u3002 Text Only Atomicity of scripts Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. EVAL \u547d\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a Bash EVAL script numkeys key [ key ... ] arg [ arg ... ] \u4f8b\u5b50\uff1a Text Only > eval \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" 2 key1 key2 first second 1. \"key1\" 2. \"key2\" 3. \"first\" 4. \"second\" \u6211\u4eec\u53ef\u4ee5\u501f\u52a9 Lua \u811a\u672c\u6765\u907f\u514d SETNX \u548c DECR \u4e4b\u95f4\u4f1a\u51fa\u73b0\u8fc7\u671f\u7684\u5c34\u5c2c\u60c5\u51b5\u3002 PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key1'; $script = <<<LUA local max = tonumber(ARGV[1]) local interval_milliseconds = tonumber(ARGV[2]) local current = tonumber(redis.call('get', KEYS[1]) or 0) if (current + 1 > max) then return true else redis.call('incrby', KEYS[1], 1) if (current == 0) then redis.call('pexpire', KEYS[1], interval_milliseconds) end return false end LUA; $redis->script('load', $script); $isLimited = $redis->eval($script, [$key, 1, 5], 1); // key 5 \u6beb\u79d2\u8fc7\u671f if ($isLimited) { header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u4f9d\u7136\u4f7f\u7528 siege \u538b\u6d4b\uff0c \u6301\u7eed\u538b\u4e86 10 \u591a\u5206\u949f\u4e5f\u6ca1\u51fa\u73b0\u4e4b\u524d\u95ee\u9898\uff0c\u95ee\u9898\u5f97\u4ee5\u89e3\u51b3\u3002 \u603b\u7ed3 Redis \u4e2d DECR \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key \u4f1a\u5148\u628a key \u503c\u8bbe\u7f6e\u4e3a 0 , TTL \u8bbe\u7f6e\u4e3a -1 (\u6c38\u4e0d\u8fc7\u671f)\uff0c\u518d\u8fdb\u884c\u51cf 1 \u64cd\u4f5c\u3002 \u4f7f\u7528 SETNX \u914d\u5408 DECR \u5b9e\u73b0\u9650\u6d41\uff0c\u4f1a\u51fa\u73b0 key \u6c38\u4e0d\u8fc7\u671f\u60c5\u51b5\u3002\u8fc7\u671f\u65f6\u95f4\u6bd4\u8f83\u5c0f\u6216\u8005\u9ad8\u5e76\u53d1\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6982\u7387\u66f4\u9ad8\u3002 \u5728 Redis \u4e2d\u6267\u884c Lua \u811a\u672c\u662f\u539f\u5b50\u64cd\u4f5c\u3002 \u53ef\u4ee5\u901a\u8fc7 Redis + Lua \u5b9e\u73b0\u9ad8\u5e76\u53d1\u4e0b\u7684\u9650\u6d41\u3002","title":"Redis \u4f7f\u7528 Lua \u811a\u672c\u66ff\u4ee3 SETNX / DECR \u4fdd\u8bc1\u539f\u5b50\u6027"},{"location":"blog/seckill/replace_setnx/#_1","text":"\u6700\u8fd1\u516c\u53f8\u51fa\u4e86\u4e00\u8d77\u6545\u969c\uff0c\u95ee\u9898\u4ee3\u7801\u5982\u4e0b\uff1a PHP /** * TRUE: \u89e6\u53d1\u9650\u6d41\uff0cFALSE\uff1a\u672a\u89e6\u53d1\u9650\u6d41 */ public function acquire() { try { $redisHandler = $this->redisInstance->getHandler(); $redisHandler->set($this->rateLimitKey, $this->tokenNum, ['nx', 'ex' => $this->expireTime]); $leftTokenNum = $redisHandler->decr($this->rateLimitKey); if ($leftTokenNum < 0) { return TRUE; } return FALSE; } catch (\\Exception $e) { return FALSE; } } \u4f5c\u8005\u7684\u76ee\u7684\u662f\u9488\u5bf9\u7206\u6b3e\u5546\u54c1\u7684\u8d2d\u4e70\uff0c\u4f7f\u7528 redis \u6765\u8d77\u5230\u4e00\u4e2a\u9650\u6d41\u7684\u4f5c\u7528\uff0c1 \u79d2\u949f\u53ea\u5141\u8bb8 1 \u4eba\u8d2d\u4e70\u3002 \u7ed3\u679c\u4e0a\u7ebf\u8fc7\u540e\u4e0d\u4e45\uff0c\u8fd0\u8425\u5c31\u53cd\u9988\u7ebf\u4e0a\u51fa\u6545\u969c\u4e86\uff0c\u8be5\u7206\u6b3e\u5546\u54c1\u6240\u6709\u4eba\u90fd\u4e0d\u80fd\u8d2d\u4e70\u4e86\u3002","title":"\u80cc\u666f"},{"location":"blog/seckill/replace_setnx/#_2","text":"\u4e0a\u9762\u4ee3\u7801\u7684\u601d\u8def\u5f88\u7b80\u5355\uff1a\u901a\u8fc7 $redis->set('key', '1', ['nx', 'ex'=>1]); \u547d\u4ee4\uff0c\u8bbe\u7f6e\u503c\u4e3a 1 \u8fc7\u671f\u65f6\u95f4\u4e3a 1 \u79d2\u7684\u8ba1\u6570\u5668\uff0c\u57fa\u4e8e\u8be5\u8ba1\u6570\u5668\u7684\u6263\u51cf\u6765\u8fbe\u5230 1 \u79d2\u949f\u653e\u884c 1 \u4e2a\u8bf7\u6c42\u7684\u76ee\u7684\u3002","title":"\u5206\u6790"},{"location":"blog/seckill/replace_setnx/#_3","text":"\u6211\u4eec\u7b80\u5316\u4e00\u4e0b\u4e0a\u9762\u7684\u4ee3\u7801\uff0c PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key'; $redis->set($key, '1', ['nx', 'ex' => 1]); $left = $redis->decr($key); if ($left < 0) { // \u8fd9\u91cc\u901a\u8fc7\u72b6\u6001\u7801\u6765\u66f4\u65b9\u4fbf\u7684\u89c2\u5bdf header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u7b80\u5316\u540e\u4f7f\u7528 siege \u6a21\u62df 100 \u4e2a\u7528\u6237\u5e76\u53d1\u538b\u6d4b\u4e00\u4e0b\u3002 \u975e\u5e38\u7a33\u554a\uff0c1 \u79d2\u949f\u901a\u8fc7 1 \u4e2a\u8bf7\u6c42\u3002 \u6211\u4eec\u7684\u5f00\u53d1\u540c\u5b66\u4e5f\u5c31\u662f\u7ecf\u8fc7\u4e86\u4e0a\u8ff0\u6d4b\u8bd5\u624d\u653e\u5fc3\u628a\u4ee3\u7801\u53d1\u4e0a\u7ebf\u7684\uff0c\u548b\u4e00\u4e0a\u7ebf\u5c31\u70b8\u4e86\u5462\uff1f","title":"\u6d4b\u8bd5"},{"location":"blog/seckill/replace_setnx/#_4","text":"\u6211\u4eec\u6765\u770b\u4e0b\u9762\u4e00\u6bb5\u64cd\u4f5c\uff0c Bash [ root@e98dffb83384 src ] # ./redis-cli 127 .0.0.1:6379> SETNX k 1 ( integer ) 1 127 .0.0.1:6379> EXPIRE k 10 # \u4e3a\u4e86\u65b9\u4fbf\u6f14\u793a\uff0c\u8fd9\u91cc\u8bbe\u7f6e 10 \u79d2\u8fc7\u671f\u65f6\u95f4 ( integer ) 1 127 .0.0.1:6379> DECR k # \u5728\u8fc7\u671f\u65f6\u95f4\u5185\uff0c\u7b2c\u4e00\u6b21\u6263\u51cf\u6210 0 ( integer ) 0 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -1 ( integer ) -1 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -2 ( integer ) -2 127 .0.0.1:6379> TTL k # k \u8fd8\u6709 2 \u79d2\u8fc7\u671f ( integer ) 2 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -3 ( integer ) -3 127 .0.0.1:6379> TTL k # \u8ddd\u79bb\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 10 \u79d2\u4e4b\u540e\uff0ck \u5df2\u7ecf\u8fc7\u671f ( integer ) -2 127 .0.0.1:6379> DECR k # \u8fd9\u65f6\u5019\u518d\u6263\u51cf\u53d1\u73b0 k \u7684\u503c\u88ab\u6263\u51cf\u6210 -1 ( integer ) -1 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -2 ( integer ) -2 127 .0.0.1:6379> TTL k # \u67e5\u770b k \u8fc7\u671f\u65f6\u95f4\u662f\u6c38\u4e0d\u8fc7\u671f ( integer ) -1 127 .0.0.1:6379> SETNX k 3 # \u518d\u8bbe\u7f6e\u662f\u4e0d\u6210\u529f\u7684 ( integer ) 0 127 .0.0.1:6379> DECR k # \u7ee7\u7eed\u6263\u51cf\u6210 -3 ( integer ) -3 \u5728 Redis key \u672a\u8fc7\u671f\u4e4b\u524d\uff0cDECR \u547d\u4ee4\u90fd\u662f\u6b63\u5e38\u6263\u51cf\u7684\u3002\u4e00\u65e6 key \u8fc7\u671f\u4e86\uff0c\u518d\u6267\u884c DECR \u547d\u4ee4\uff0c\u4f1a\u53d1\u73b0 key \u7684\u503c\u548c\u8fc7\u671f\u65f6\u95f4\u90fd\u53d8\u4e3a -1 \u4e86\u3002 Redis \u5b98\u7f51\u5bf9 DECR \u547d\u4ee4\u4ecb\u7ecd\u91cc\u6709\u8fd9\u4e48\u4e00\u6bb5\uff1a Text Only Decrements the number stored at key by one. If the key does not exist, it is set to 0 before performing the operation. \u5bf9\u4e8e\u51fa\u95ee\u9898\u7684\u4ee3\u7801\uff0c PHP $redisHandler->set($this->rateLimitKey, $this->tokenNum, ['nx', 'ex' => $this->expireTime]); $leftTokenNum = $redisHandler->decr($this->rateLimitKey); \u5047\u8bbe\u5728\u7b2c\u4e00\u53e5 SETNX \u4e4b\u540e\u7b2c\u4e8c\u53e5 DECR \u4e4b\u524d\uff0ckey \u8fc7\u671f\u4e86\uff0c\u518d\u6267\u884c DECR \u5c31\u4f1a\u5148\u751f\u6210\u4e00\u4e2a\u6c38\u4e0d\u8fc7\u671f\u503c\u4e3a 0 \u7684 key\u3002 \u4e4b\u540e\u6240\u6709\u8bf7\u6c42\u7684 SETNX \u90fd\u662f fasle\uff0c\u4e00\u76f4\u4f1a\u57fa\u4e8e\u8fd9\u4e2a\u6c38\u4e0d\u8fc7\u671f\u7684 key \u8fdb\u884c\u9012\u51cf\uff0c\u6240\u6709\u7684 $leftTokenNum \u90fd\u5c0f\u4e8e 0\uff0c\u56e0\u6b64\u5bfc\u81f4\u6240\u6709\u8bf7\u6c42\u88ab\u9650\u6d41\u3002","title":"\u539f\u56e0"},{"location":"blog/seckill/replace_setnx/#_5","text":"\u81ea\u6d4b\u65f6\u4e3a\u5565\u53d1\u73b0\u4e0d\u4e86\u95ee\u9898\uff1f\u56e0\u4e3a\u81ea\u6d4b\u65f6\u8bbe\u7f6e\u7684\u8fc7\u671f\u65f6\u95f4\u662f 1 \u79d2\uff0c\u5bfc\u81f4 key \u5728\u4e24\u6b65\u4e4b\u95f4\u8fc7\u671f\u51fa\u73b0\u7684\u6982\u7387\u5f88\u5c0f\u3002\u6211\u4eec\u53ea\u8981\u5c06\u8fc7\u671f\u65f6\u95f4\u8c03\u7684\u8db3\u591f\u5c0f\uff0c\u5f88\u5bb9\u6613\u590d\u73b0\u95ee\u9898\u3002 \u628a\u8fc7\u671f\u65f6\u95f4\u6539\u4e3a 5 \u6beb\u79d2\uff0c PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key'; $redis->set($key, '3', ['nx', 'px' => 5]); // key \u8bbe\u7f6e\u6210 5 \u6beb\u79d2\u8fc7\u671f $left = $redis->decr($key); if ($left < 0) { // \u8fd9\u91cc\u901a\u8fc7\u72b6\u6001\u7801\u6765\u66f4\u65b9\u4fbf\u7684\u89c2\u5bdf header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u4f9d\u7136\u4f7f\u7528 siege \u538b\u6d4b\uff1a \u7531\u4e8e\u8bbe\u7f6e\u7684 5 \u6beb\u79d2\u653e\u884c\u4e00\u4e2a\u8bf7\u6c42\uff0c\u56e0\u6b64\u524d\u534a\u90e8\u5206\u57fa\u672c\u4e0a\u90fd\u662f\u901a\u8fc7\u7684\u8bf7\u6c42\uff0c\u5076\u5c14\u6709\u51e0\u4e2a\u9650\u6d41\u7684\uff0c\u8fd9\u662f\u6b63\u5e38\u7684\u3002 \u4f46\u662f\u6ca1\u8fc7\u591a\u4e45\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u88ab\u9650\u6d41\u4e86\uff0c\u4e5f\u5c31\u590d\u73b0\u4e86\u7ebf\u4e0a\u7684\u6545\u969c\u3002","title":"\u95ee\u9898\u590d\u73b0"},{"location":"blog/seckill/replace_setnx/#_6","text":"\u5982\u4f55\u6539\u8fdb\u4ee3\u7801\u6765\u6b63\u786e\u7684\u5b9e\u73b0\u9650\u6d41\u5462\uff1f Redis \u7684 EVAL \u547d\u4ee4 \u6267\u884c Lua \u811a\u672c\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u539f\u5b50\u6027\u3002 Text Only Atomicity of scripts Redis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. EVAL \u547d\u4ee4\u7684\u683c\u5f0f\u4e3a\uff1a Bash EVAL script numkeys key [ key ... ] arg [ arg ... ] \u4f8b\u5b50\uff1a Text Only > eval \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" 2 key1 key2 first second 1. \"key1\" 2. \"key2\" 3. \"first\" 4. \"second\" \u6211\u4eec\u53ef\u4ee5\u501f\u52a9 Lua \u811a\u672c\u6765\u907f\u514d SETNX \u548c DECR \u4e4b\u95f4\u4f1a\u51fa\u73b0\u8fc7\u671f\u7684\u5c34\u5c2c\u60c5\u51b5\u3002 PHP $redis = new Redis(); $redis->connect('127.0.0.1', 6379); $key = 'test_redis_key1'; $script = <<<LUA local max = tonumber(ARGV[1]) local interval_milliseconds = tonumber(ARGV[2]) local current = tonumber(redis.call('get', KEYS[1]) or 0) if (current + 1 > max) then return true else redis.call('incrby', KEYS[1], 1) if (current == 0) then redis.call('pexpire', KEYS[1], interval_milliseconds) end return false end LUA; $redis->script('load', $script); $isLimited = $redis->eval($script, [$key, 1, 5], 1); // key 5 \u6beb\u79d2\u8fc7\u671f if ($isLimited) { header('Is-Limited:1', true, 500); } else { header('Is-Limited:0', true, 200); } \u4f9d\u7136\u4f7f\u7528 siege \u538b\u6d4b\uff0c \u6301\u7eed\u538b\u4e86 10 \u591a\u5206\u949f\u4e5f\u6ca1\u51fa\u73b0\u4e4b\u524d\u95ee\u9898\uff0c\u95ee\u9898\u5f97\u4ee5\u89e3\u51b3\u3002","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"blog/seckill/replace_setnx/#_7","text":"Redis \u4e2d DECR \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key \u4f1a\u5148\u628a key \u503c\u8bbe\u7f6e\u4e3a 0 , TTL \u8bbe\u7f6e\u4e3a -1 (\u6c38\u4e0d\u8fc7\u671f)\uff0c\u518d\u8fdb\u884c\u51cf 1 \u64cd\u4f5c\u3002 \u4f7f\u7528 SETNX \u914d\u5408 DECR \u5b9e\u73b0\u9650\u6d41\uff0c\u4f1a\u51fa\u73b0 key \u6c38\u4e0d\u8fc7\u671f\u60c5\u51b5\u3002\u8fc7\u671f\u65f6\u95f4\u6bd4\u8f83\u5c0f\u6216\u8005\u9ad8\u5e76\u53d1\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6982\u7387\u66f4\u9ad8\u3002 \u5728 Redis \u4e2d\u6267\u884c Lua \u811a\u672c\u662f\u539f\u5b50\u64cd\u4f5c\u3002 \u53ef\u4ee5\u901a\u8fc7 Redis + Lua \u5b9e\u73b0\u9ad8\u5e76\u53d1\u4e0b\u7684\u9650\u6d41\u3002","title":"\u603b\u7ed3"},{"location":"docs/","text":"\u6587\u6863","title":"\u6587\u6863"},{"location":"docs/#_1","text":"","title":"\u6587\u6863"},{"location":"docs/bull/","text":"\u5b89\u88c5 Install using npm: Text Only $ npm install bullmq Install using yarn: Text Only $ yarn add bullmq {% hint style=\"info\" %} Bull is written in TypeScript, and although it can be used in vanilla JavaScript, all examples in this guide will be written in TypeScript. {% endhint %} Import into your project and add some jobs: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"foo\" ); async function addJobs () { await myQueue . add ( \"myJobName\" , { foo : \"bar\" }); await myQueue . add ( \"myJobName\" , { qux : \"baz\" }); } await addJobs (); {% hint style=\"danger\" %} You need to have a Redis service running in your local computer to run these examples successfully. You can read more about Redis connections here . {% endhint %} Jobs are added to the queue and can be processed at any time, with at least one Node.js process running a worker: TypeScript import { Worker } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job ) => { // Will print { foo: 'bar'} for the first job // and { qux: 'baz' } for the second. console . log ( job . data ); }); {% hint style=\"info\" %} You can have as many worker processes as you want, BullMQ will distribute the jobs across your workers in a round robin fashion. {% endhint %} You can listen to completed (or failed) jobs by attaching listeners to the workers: TypeScript worker . on ( \"completed\" , ( job ) => { console . log ( ` ${ job . id } has completed!` ); }); worker . on ( \"failed\" , ( job , err ) => { console . log ( ` ${ job . id } has failed with ${ err . message } ` ); }); {% hint style=\"info\" %} There are many other events available, check the Guide or the API reference for more information. {% endhint %} Sometimes you need to listen to all the workers events in a given place, for this you need to use a special class QueueEvents : TypeScript import { QueueEvents } from \"bullmq\" ; const queueEvents = new QueueEvents (); queueEvents . on ( \"waiting\" , ({ jobId }) => { console . log ( `A job with ID ${ jobId } is waiting` ); }); queueEvents . on ( \"active\" , ({ jobId , prev }) => { console . log ( `Job ${ jobId } is now active; previous status was ${ prev } ` ); }); queueEvents . on ( \"completed\" , ({ jobId , returnvalue }) => { console . log ( ` ${ jobId } has completed and returned ${ returnvalue } ` ); }); queueEvents . on ( \"failed\" , ({ jobId , failedReason }) => { console . log ( ` ${ jobId } has failed with reason ${ failedReason } ` ); }); You may also access the timestamp of the event, which looks like \"1580456039332-0\". TypeScript import { QueueEvents } from \"bullmq\" ; const queueEvents = new QueueEvents (); queueEvents . on ( \"progress\" , ({ jobId , data }, timestamp ) => { console . log ( ` ${ jobId } reported progress ${ data } at ${ timestamp } ` ); }); {% hint style=\"danger\" %} For performance reasons the events emited by a QueueEvents instance do not contain the Job instance, only the jobId . Use the Job#fromId method if you need the Job instance. {% endhint %}","title":"\u5feb\u901f\u542f\u52a8"},{"location":"docs/bull/#_1","text":"Install using npm: Text Only $ npm install bullmq Install using yarn: Text Only $ yarn add bullmq {% hint style=\"info\" %} Bull is written in TypeScript, and although it can be used in vanilla JavaScript, all examples in this guide will be written in TypeScript. {% endhint %} Import into your project and add some jobs: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"foo\" ); async function addJobs () { await myQueue . add ( \"myJobName\" , { foo : \"bar\" }); await myQueue . add ( \"myJobName\" , { qux : \"baz\" }); } await addJobs (); {% hint style=\"danger\" %} You need to have a Redis service running in your local computer to run these examples successfully. You can read more about Redis connections here . {% endhint %} Jobs are added to the queue and can be processed at any time, with at least one Node.js process running a worker: TypeScript import { Worker } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job ) => { // Will print { foo: 'bar'} for the first job // and { qux: 'baz' } for the second. console . log ( job . data ); }); {% hint style=\"info\" %} You can have as many worker processes as you want, BullMQ will distribute the jobs across your workers in a round robin fashion. {% endhint %} You can listen to completed (or failed) jobs by attaching listeners to the workers: TypeScript worker . on ( \"completed\" , ( job ) => { console . log ( ` ${ job . id } has completed!` ); }); worker . on ( \"failed\" , ( job , err ) => { console . log ( ` ${ job . id } has failed with ${ err . message } ` ); }); {% hint style=\"info\" %} There are many other events available, check the Guide or the API reference for more information. {% endhint %} Sometimes you need to listen to all the workers events in a given place, for this you need to use a special class QueueEvents : TypeScript import { QueueEvents } from \"bullmq\" ; const queueEvents = new QueueEvents (); queueEvents . on ( \"waiting\" , ({ jobId }) => { console . log ( `A job with ID ${ jobId } is waiting` ); }); queueEvents . on ( \"active\" , ({ jobId , prev }) => { console . log ( `Job ${ jobId } is now active; previous status was ${ prev } ` ); }); queueEvents . on ( \"completed\" , ({ jobId , returnvalue }) => { console . log ( ` ${ jobId } has completed and returned ${ returnvalue } ` ); }); queueEvents . on ( \"failed\" , ({ jobId , failedReason }) => { console . log ( ` ${ jobId } has failed with reason ${ failedReason } ` ); }); You may also access the timestamp of the event, which looks like \"1580456039332-0\". TypeScript import { QueueEvents } from \"bullmq\" ; const queueEvents = new QueueEvents (); queueEvents . on ( \"progress\" , ({ jobId , data }, timestamp ) => { console . log ( ` ${ jobId } reported progress ${ data } at ${ timestamp } ` ); }); {% hint style=\"danger\" %} For performance reasons the events emited by a QueueEvents instance do not contain the Job instance, only the jobId . Use the Job#fromId method if you need the Job instance. {% endhint %}","title":"\u5b89\u88c5"},{"location":"docs/bull/SUMMARY/","text":"Table of contents Quick Start What is BullMQ API Reference Changelog Guide Introduction Connections Queues Removing Jobs Workers Concurrency Graceful shutdown Stalled Jobs Sandboxed processors Pausing queues Jobs FIFO LIFO Job Ids Delayed Repeatable Prioritized Adding bulks Removing job Stalled Getters Flows Get Flow Tree Rate limiting Retrying failing jobs Returning job data Events QueueScheduler Architecture Patterns Manually processing jobs Producer - Consumer Flows Real time updates Sender - Receiver Working with batches Idempotent jobs Throttle jobs Process Step Jobs Failing fast when Redis is down BullMQ Pro Introduction Install Observables Groups Rate limiting Bull Introduction Install Quick Guide Important Notes Reference Patterns Message queue Returning Job Completions Reusing Redis Connections Redis cluster Custom backoff strategy Debugging Manually fetching jobs Bull 3.x Migration Compatibility class Migration","title":"Table of contents"},{"location":"docs/bull/SUMMARY/#table-of-contents","text":"Quick Start What is BullMQ API Reference Changelog","title":"Table of contents"},{"location":"docs/bull/SUMMARY/#guide","text":"Introduction Connections Queues Removing Jobs Workers Concurrency Graceful shutdown Stalled Jobs Sandboxed processors Pausing queues Jobs FIFO LIFO Job Ids Delayed Repeatable Prioritized Adding bulks Removing job Stalled Getters Flows Get Flow Tree Rate limiting Retrying failing jobs Returning job data Events QueueScheduler Architecture","title":"Guide"},{"location":"docs/bull/SUMMARY/#patterns","text":"Manually processing jobs Producer - Consumer Flows Real time updates Sender - Receiver Working with batches Idempotent jobs Throttle jobs Process Step Jobs Failing fast when Redis is down","title":"Patterns"},{"location":"docs/bull/SUMMARY/#bullmq-pro","text":"Introduction Install Observables Groups Rate limiting","title":"BullMQ Pro"},{"location":"docs/bull/SUMMARY/#bull","text":"Introduction Install Quick Guide Important Notes Reference Patterns Message queue Returning Job Completions Reusing Redis Connections Redis cluster Custom backoff strategy Debugging Manually fetching jobs","title":"Bull"},{"location":"docs/bull/SUMMARY/#bull-3x-migration","text":"Compatibility class Migration","title":"Bull 3.x Migration"},{"location":"docs/bull/_index/","text":"","title":"Bull"},{"location":"docs/bull/changelog/","text":"1.74.1 (2022-02-20) Bug Fixes flow: respect defaultJobOptions from queue opts ( #1080 ) fixes #1034 ( 0aca072 ) 1.74.0 (2022-02-19) Features retry-jobs: pass timestamp as option ( #1054 ) ( 1522359 ) 1.73.0 (2022-02-16) Features job: add prefix getter ( #1077 ) ( db9ef10 ) queue-getters: add getQueueSchedulers ( #1078 ) ref #1075 ( 0b3b1c4 ) 1.72.0 (2022-02-15) Features backoff: validate UnrecoverableError presence ( #1074 ) ( 1defeac ) 1.71.0 (2022-02-14) Features get-job-counts: add default values ( #1068 ) ( 1c7f841 ) 1.70.0 (2022-02-11) Features sandbox: pass parent property ( #1065 ) ( 1fd33f6 ) 1.69.1 (2022-02-10) Bug Fixes move-to-finished: validate lock first ( #1064 ) ( 9da1b29 ) 1.69.0 (2022-02-08) Features job: pass queueName into sandbox ( #1053 ) fixes #1050 ref #1051 ( 12bb19c ) 1.68.4 (2022-02-05) Bug Fixes clean: consider checking parent jobs when cleaning ( #1048 ) ( 0708a24 ) 1.68.3 (2022-02-04) Bug Fixes drain: delete priority queueKey ( #1049 ) ( 2e6129a ) 1.68.2 (2022-02-03) Performance Improvements remove-parent-dependency: do not emit wait event in hard deletions ( #1045 ) ( 4069821 ) 1.68.1 (2022-02-01) Bug Fixes update: throw error when missing job key ( #1042 ) ( a00ae5c ) 1.68.0 (2022-01-29) Features queue: add retryJobs method for failed jobs ( #1024 ) ( 310a730 ) Performance Improvements lua: call del command with multiple keys ( #1035 ) ( 9cfaab8 ) 1.67.3 (2022-01-28) Bug Fixes drain: consider checking parent jobs when draining ( #992 ) ( 81b7221 ) 1.67.2 (2022-01-28) Bug Fixes repeat: consider immediately option with cron ( #1030 ) fixes #1020 ( b9e7488 ) 1.67.1 (2022-01-27) Bug Fixes retry: pass state in error message ( #1027 ) ( c646a45 ) Performance Improvements retry: delete props in retryJob lua script ( #1016 ) ( 547cedd ) 1.67.0 (2022-01-26) Features add support for removeOn based on time ( 6c4ac75 ) 1.66.1 (2022-01-25) Bug Fixes job: increase attemptsMade when moving job to active ( #1009 ) fixes #1002 ( 0974ae0 ) 1.66.0 (2022-01-23) Features queue-events: add retries-exhausted event ( #1010 ) ( e476f35 ) 1.65.1 (2022-01-21) Bug Fixes dont loop through empty modules paths ( #1013 ) fixes #1012 ( 86e84df ) 1.65.0 (2022-01-21) Features queue: add JobType and JobState unions for better typing ( #1011 ) ( 3b9b79d ) 1.64.4 (2022-01-19) Bug Fixes queue: use 0 as initial value for getJobCountByTypes reducer ( #1005 ) ( f0e23ef ) 1.64.3 (2022-01-17) Bug Fixes worker: blockTime must be integer on older Redis ( 6fedc0a ) 1.64.2 (2022-01-14) Bug Fixes remove-job: consider removing parent dependency key in lua scripts ( #990 ) ( 661abf0 ) 1.64.1 (2022-01-14) Bug Fixes sandbox: exit uncaughtException instead of throwing error ( 013d6a5 ) 1.64.0 (2022-01-07) Features sanboxed-process: support .cjs files ( #984 ) ( 531e4de ) 1.63.3 (2022-01-06) Bug Fixes job: throw error when delay and repeat are provided together ( #983 ) ( 07b0082 ) 1.63.2 (2022-01-04) Bug Fixes queue: add missing error event typing ( #979 ) ( afdaac6 ) 1.63.1 (2022-01-04) Bug Fixes update-progress: throw error if job key is missing ( #978 ) ref #977 ( b03aaf1 ) 1.63.0 (2021-12-31) Features job: use generic types for static methods ( #975 ) ( f78f4d0 ) 1.62.0 (2021-12-31) Bug Fixes add deprecated tag in progress and Queue3 class ( #973 ) ( 6abdf5b ) Features queue: add better event typing ( #971 ) ( 596fd7b ) 1.61.0 (2021-12-29) Features queue: reuse generic typing for jobs ( 5c10818 ) worker: reuse generic typing for jobs ( 9adcdb7 ) 1.60.0 (2021-12-29) Features queue-scheduler: add better event typing ( #963 ) ( b23c006 ) 1.59.4 (2021-12-21) Bug Fixes downgrade typescript to 3.9.10 fixes #917 ( #960 ) ( 4e51fe0 ) 1.59.3 (2021-12-21) Bug Fixes worker: fix undefined moveToActive ( 87e8cab ) 1.59.2 (2021-12-17) Bug Fixes package: add jsnext:main prop ( #953 ) ( 1a92bf7 ) 1.59.1 (2021-12-17) Bug Fixes copy lua files to correct location ( 2be1120 ) 1.59.0 (2021-12-17) Bug Fixes correct dist path ( 067d4c2 ) Features also export bullmq as an ESM ( e97e5b5 ) 1.58.0 (2021-12-15) Features worker: add better event typing ( #940 ) ( a326d4f ) 1.57.4 (2021-12-14) Bug Fixes move-to-active: add try catch in moveToActive call ( #933 ) ( bab45b0 ) redis-connection: consider cluster redisOptions config ( #934 ) ( 5130f63 ) 1.57.3 (2021-12-14) Bug Fixes remove debug console.error ( #932 ) ( 271aac3 ) 1.57.2 (2021-12-11) Bug Fixes connection: check instance options to console log deprecation message ( #927 ) ( fc1e2b9 ) Performance Improvements add-job: save parent data as json ( #859 ) ( 556d4ee ) 1.57.1 (2021-12-11) Bug Fixes worker: better handling of block timeout ( be4c933 ) 1.57.0 (2021-12-08) Features queue-events: add better event typing ( #919 ) ( e980080 ) 1.56.0 (2021-12-06) Bug Fixes emit drain event if no jobs left when completing ( 9ad78a9 ) worker: use client for setting worker name ( af65c2c ) Features worker: make moveToActive protected ( d2897ee ) 1.55.1 (2021-12-03) Bug Fixes worker: always try to move to active after waiting for job ( #914 ) ( 97b7084 ) 1.55.0 (2021-12-02) Features script-loader: lua script loader with include support ( #897 ) ( 64b6ccf ) 1.54.6 (2021-11-30) Bug Fixes stalled: save finishedOn when job stalled more than allowable limit ( #900 ) ( eb89edf ) 1.54.5 (2021-11-26) Bug Fixes tsconfig: only include node types ( #895 ) ( 5f4fdca ) 1.54.4 (2021-11-24) Bug Fixes child-processor: add deprecation warning for progress method ( #890 ) ( f80b19a ) 1.54.3 (2021-11-22) Bug Fixes clean: use range values in lua script ( #885 ) ( 02ef63a ) 1.54.2 (2021-11-20) Bug Fixes job: use this when use new operators ( #884 ) ( 7b84283 ) 1.54.1 (2021-11-19) Bug Fixes job: change private attributes to protected for extensions ( #882 ) ( ffcc3f0 ) 1.54.0 (2021-11-17) Features load-includes: export includes to be reused in extensions ( #877 ) ( b56c4a9 ) 1.53.0 (2021-11-16) Features queue-events: add cleaned event ( #865 ) ( b3aebad ) 1.52.2 (2021-11-14) Bug Fixes worker: change private attributes to protected for pro extension ( #874 ) ( 1c73881 ) 1.52.1 (2021-11-12) Performance Improvements clean: speed up clean method when called with limit param ( #864 ) ( 09b5cb4 ) 1.52.0 (2021-11-11) Features queue: add waiting event type declaration ( #872 ) ( f29925d ) 1.51.3 (2021-11-04) Bug Fixes move-to-failed: delete closing check that prevents script execution ( #858 ) fixes #834 ( d50814f ) 1.51.2 (2021-11-03) Bug Fixes flow: remove repeat option from FlowJob opts ( #853 ) fixes #851 ( c9ee2f1 ) 1.51.1 (2021-10-29) Bug Fixes commands: copy includes lua scripts ( #843 ) fixes #837 ( cab33e0 ) 1.51.0 (2021-10-28) Features flow: consider continually adding jobs ( #828 ) fixes #826 ( b0fde69 ) 1.50.7 (2021-10-28) Bug Fixes override enableReadyCheck, maxRetriesPerRequest fixes reconnection ( 09ba358 ) queue-base: deprecation warning on missing connection ( 2f79802 ) 1.50.6 (2021-10-28) Bug Fixes queue-base: show connection deprecation warning ( #832 ) fixes #829 ( 5d023fe ) 1.50.5 (2021-10-21) Bug Fixes child-pool: pipe process stdout and stderr( #822 ) fixes #821 ( 13f5c62 ) 1.50.4 (2021-10-20) Bug Fixes properly pass sharedConnection option to worker base class ( 56557f1 ) 1.50.3 (2021-10-18) Bug Fixes msgpackr: upgrade version to 1.4.6 to support esm bundlers ( #818 ) fixes #813 ( 913d7a9 ) 1.50.2 (2021-10-12) Bug Fixes msgpack: replace msgpack by msgpackr ( dc13a75 ) 1.50.1 (2021-10-12) Bug Fixes queue-getters: only getting the first 2 jobs ( 653873a ) 1.50.0 (2021-10-12) Features easier to build extensions on top of BullMQ ( b1a9e64 ) 1.49.0 (2021-10-08) Features sandboxed-process: handle init-failed error ( #797 ) ( 5d2f553 ) 1.48.3 (2021-10-05) Bug Fixes change-delay: add current time to delay ( #789 ) fixes #787 ( 4a70def ) 1.48.2 (2021-09-24) Performance Improvements obliterate: do not pass unused variables ( #766 ) ( e9abfa6 ) 1.48.1 (2021-09-23) Bug Fixes obliterate: consider dependencies and processed keys ( #765 ) ( fd6bad8 ) 1.48.0 (2021-09-23) Features queue: add drain lua script ( #764 ) ( 2daa698 ) 1.47.2 (2021-09-22) Bug Fixes flow-producer: use default prefix in add method ( #763 ) fixes #762 ( fffdb55 ) 1.47.1 (2021-09-17) Bug Fixes running: move running attribute before first async call ( #756 ) ( f7f0660 ) 1.47.0 (2021-09-16) Features queue-events: launch without launching process ( #750 ) ( 23a2360 ) 1.46.7 (2021-09-16) Bug Fixes wait-for-job: add catch block and emit error ( #749 ) ( b407f9a ) 1.46.6 (2021-09-15) Bug Fixes connection: fail only if redis connection does not recover ( #751 ) ( 8d59ced ) 1.46.5 (2021-09-12) Bug Fixes is-finished: reject when missing job key ( #746 ) fixes #85 ( bd49bd2 ) 1.46.4 (2021-09-10) Bug Fixes wait-until-finished: isFinished return failedReason or returnValue ( #743 ) fixes #555 ( 63acae9 ) 1.46.3 (2021-09-08) Bug Fixes add-job: throw error when missing parent key ( #739 ) ( d751070 ) 1.46.2 (2021-09-07) Bug Fixes queue-events: duplicate connection ( #733 ) fixes #726 ( e2531ed ) 1.46.1 (2021-09-06) Bug Fixes redis-connection: improve closing fixes #721 ( 9d8eb03 ) 1.46.0 (2021-09-02) Features worker: launch without launching process ( #724 ) ( af689e4 ), closes #436 1.45.0 (2021-09-02) Features queue-scheduler: launch without launching process ( #729 ) ( f1932a7 ), closes #436 1.44.3 (2021-09-02) Bug Fixes queuescheduler: handle shared connections fixes #721 ( 32a2b2e ) 1.44.2 (2021-08-29) Bug Fixes worker: use spread operator in processing map keys ( #720 ) ( 32f1e57 ) 1.44.1 (2021-08-29) Bug Fixes retry: throw error when retry non failed job ( #717 ) ( bb9b192 ) 1.44.0 (2021-08-27) Features queue-events: add waiting-children event ( #704 ) ( 18b0b79 ) 1.43.0 (2021-08-25) Features events: add added event when job is created ( #699 ) ( f533cc5 ) 1.42.1 (2021-08-23) Bug Fixes protect emit calls with throw/catch ( 79f879b ) 1.42.0 (2021-08-20) Features flows: add queuesOptions for rate limit ( #692 ) ( 6689ec3 ), closes #621 1.41.0 (2021-08-20) Features flow: add bulk ( dc59fe6 ) 1.40.4 (2021-08-06) Bug Fixes rate-limiter: check groupKey is not undefined ( 999b918 ) 1.40.3 (2021-08-06) Bug Fixes redis-connection: add error event in waitUntilReady ( ac4101e ) 1.40.2 (2021-08-06) Bug Fixes move clientCommandMessageReg to utils ( dd5d555 ) 1.40.1 (2021-07-24) Bug Fixes connection hangs with failed connection fixes #656 ( c465611 ) 1.40.0 (2021-07-22) Features worker: retry with delay errors in run loop ( 409fe7f ) 1.39.5 (2021-07-21) Bug Fixes move-to-finished: remove stalled jobs when finishing ( 3867126 ) 1.39.4 (2021-07-21) Bug Fixes repeatable: validate endDate when adding next repeatable job ( 1324cbb ) 1.39.3 (2021-07-16) Bug Fixes connect if redis client has status \"wait\" ( f711717 ) 1.39.2 (2021-07-15) Bug Fixes queue: ensure the Queue constructor doesn't try to set queue options if the client is closed ( b40c6eb ) 1.39.1 (2021-07-15) Bug Fixes sandbox: use updateProgress method name ( 27d62c3 ) 1.39.0 (2021-07-13) Features worker+scheduler: add a \"running\" attribute for healthchecking ( aae358e ) 1.38.1 (2021-07-12) Bug Fixes reprocess: do not store job.id in added list ( 9c0605e ) 1.38.0 (2021-07-12) Features queue: add missing events typings ( b42e78c ) 1.37.1 (2021-07-02) Bug Fixes stalled-jobs: move stalled jobs to wait in batches ( a23fcb8 ), closes #422 1.37.0 (2021-06-30) Features job: add changeDelay method for delayed jobs ( f0a9f9c ) 1.36.1 (2021-06-22) Bug Fixes worker: change active event typing ( 220b4f6 ) 1.36.0 (2021-06-20) Bug Fixes queue-events: fix drained typing ( 9cf711d ) Features worker: add active event typing ( 5508cdf ) worker: add progress event typing ( 119cb7c ) 1.35.0 (2021-06-19) Features worker: add drained event typing ( ed5f315 ) 1.34.2 (2021-06-18) Bug Fixes worker: await for processing functions ( 0566804 ) 1.34.1 (2021-06-18) Bug Fixes redis-connection: remove error event listener from client ( 2d70fe7 ) 1.34.0 (2021-06-11) Features job: expose queueName ( 8683bd4 ) 1.33.1 (2021-06-10) Bug Fixes job: destructure default opts for pagination ( 73363a5 ) 1.33.0 (2021-06-10) Features job: add getDependenciesCount method ( ae39a4c ) 1.32.0 (2021-06-07) Features flow-producer: add getFlow method ( ce93d04 ) 1.31.1 (2021-06-07) Bug Fixes worker: remove processed key when removeOnComplete ( 4ec1b73 ) 1.31.0 (2021-06-04) Features job: extend getDependencies to support pagination ( 9b61bbb ) 1.30.2 (2021-06-03) Bug Fixes job: parse results in getDependencies for processed jobs ( 6fdc701 ) 1.30.1 (2021-06-02) Bug Fixes move-to-waiting-children: make opts optional ( 33bd76a ) 1.30.0 (2021-06-02) Features add some event typing ( 934c004 ) 1.29.1 (2021-05-31) Bug Fixes move-stalled-jobs-to-wait: send failedReason to queueEvents ( 7c510b5 ) 1.29.0 (2021-05-31) Features add move to waiting children for manual processing ( #477 ) ( f312f29 ) 1.28.2 (2021-05-31) Bug Fixes obliterate: remove job logs ( ea91895 ) 1.28.1 (2021-05-31) Bug Fixes get-workers: use strict equality on name fixes #564 ( 4becfa6 ) 1.28.0 (2021-05-24) Features flow-producer: expose client connection ( 17d4263 ) 1.27.0 (2021-05-24) Features repeat: add immediately opt for repeat ( d095573 ) 1.26.5 (2021-05-21) Bug Fixes movetofinished: use parent queue for events ( 1b17b62 ) 1.26.4 (2021-05-20) Bug Fixes removejob: delete processed hash ( a2a5058 ) 1.26.3 (2021-05-19) Bug Fixes ensure connection reconnects when pausing fixes #160 ( f38fee8 ) 1.26.2 (2021-05-18) Bug Fixes getjoblogs: no reversed pagination ( fb0c3a5 ) 1.26.1 (2021-05-17) Bug Fixes flow-producer: use custom jobId as parentId for children fixes #552 ( 645b576 ) 1.26.0 (2021-05-16) Features custombackoff: provide job as third parameter ( ddaf8dc ) 1.25.2 (2021-05-16) Bug Fixes flow-producer: process parent with children as empty array fixes #547 ( 48168f0 ) 1.25.1 (2021-05-13) Bug Fixes addbulk: should not consider repeat option ( c85357e ) 1.25.0 (2021-05-11) Features job: add sizeLimit option when creating a job ( f10aeeb ) 1.24.5 (2021-05-08) Bug Fixes deps: upgrading lodash to 4.17.21 ( 6e90c3f ) 1.24.4 (2021-05-07) Bug Fixes cluster: add redis cluster support ( 5a7dd14 ) redisclient: not reference types from import ( 022fc04 ) 1.24.3 (2021-05-05) Bug Fixes sandbox: properly redirect stdout ( #525 ) ( c8642a0 ) 1.24.2 (2021-05-05) Bug Fixes sandbox: handle broken processor files ( 2326983 ) 1.24.1 (2021-05-05) Bug Fixes queueevents: add active type fixes #519 ( 10af883 ) 1.24.0 (2021-05-03) Features add option for non-blocking getNextJob ( 13ce2cf ) 1.23.1 (2021-05-03) Bug Fixes add return type for job.waitUntilFinished() ( 59ede97 ) 1.23.0 (2021-04-30) Features job: pass parent opts to addBulk ( 7f21615 ) 1.22.2 (2021-04-29) Bug Fixes add missing Redis Cluster types fixes #406 ( 07743ff ) 1.22.1 (2021-04-28) Bug Fixes addjob: fix redis cluster CROSSSLOT ( a5fd1d7 ) 1.22.0 (2021-04-28) Features jobcreate: allow passing parent in job.create ( ede3626 ) 1.21.0 (2021-04-26) Features add typing for addNextRepeatableJob ( a3be937 ) 1.20.6 (2021-04-25) Bug Fixes movetocompleted: should not complete before children ( 812ff66 ) 1.20.5 (2021-04-23) Bug Fixes obliterate: correctly remove many jobs ( b5ae4ce ) 1.20.4 (2021-04-23) Bug Fixes remove internal deps on barrel fixes #469 ( #495 ) ( 60dbeed ) 1.20.3 (2021-04-23) Bug Fixes flows: correct typings fixes #492 ( a77f80b ) 1.20.2 (2021-04-22) Bug Fixes movetodelayed: check if job is in active state ( 4e63f70 ) 1.20.1 (2021-04-22) Bug Fixes worker: make token optional in processor function fixes #490 ( 3940bd7 ) 1.20.0 (2021-04-21) Features worker: passing token in processor function ( 2249724 ) 1.19.3 (2021-04-20) Bug Fixes movetocompleted: throw an error if job is not in active state ( c2fe5d2 ) 1.19.2 (2021-04-19) Bug Fixes worker: close base class connection #451 ( 0875306 ) 1.19.1 (2021-04-19) Bug Fixes remove repeatable with obliterate ( 1c5e581 ) 1.19.0 (2021-04-19) Features add workerDelay option to limiter ( 9b6ab8a ) 1.18.2 (2021-04-16) Bug Fixes add parentKey property to Job ( febc60d ) 1.18.1 (2021-04-16) Bug Fixes rename Flow to FlowProducer class ( c64321d ) 1.18.0 (2021-04-16) Features add remove support for flows ( 4e8a7ef ) 1.17.0 (2021-04-16) Features job: consider waiting-children state ( 2916dd5 ) 1.16.2 (2021-04-14) Bug Fixes read lua scripts serially ( 69e73b8 ) 1.16.1 (2021-04-12) Bug Fixes flow: relative dependency path fixes #466 ( d104bf8 ) 1.16.0 (2021-04-12) Features add support for flows (parent-child dependencies) ( #454 ) ( 362212c ) 1.15.1 (2021-03-19) Bug Fixes obliterate: safer implementation ( 82f571f ) 1.15.0 (2021-03-18) Features add method to \"obliterate\" a queue, fixes #430 ( 624be0e ) 1.14.8 (2021-03-06) Bug Fixes specify promise type to make TS 4.1 and 4.2 happy. ( #418 ) ( 702f609 ) 1.14.7 (2021-02-16) Bug Fixes remove \"client\" property of QueueBaseOptions ( #324 ) ( e0b9e71 ) 1.14.6 (2021-02-16) Bug Fixes remove next job in removeRepeatableByKey fixes #165 ( fb3a7c2 ) 1.14.5 (2021-02-16) Bug Fixes add jobId support to repeatable jobs fixes #396 ( c2dc669 ) 1.14.4 (2021-02-08) Bug Fixes reconnect at start fixes #337 ( fb33772 ) 1.14.3 (2021-02-07) Bug Fixes worker: avoid possible infinite loop fixes #389 ( d05566e ) 1.14.2 (2021-02-02) Bug Fixes improve job timeout notification by giving the job name and id in the error message ( #387 ) ( ca886b1 ) 1.14.1 (2021-02-01) Bug Fixes job finish queue events race condition ( 355bca5 ) 1.14.0 (2021-01-06) Features job: expose extendLock as a public method ( 17e8431 ) 1.13.0 (2020-12-30) Features add support for manually processing jobs fixes #327 ( e42bfd2 ) 1.12.3 (2020-12-28) Bug Fixes correctly handle \"falsy\" data values fixes #264 ( becad91 ) worker: setname on worker blocking connection ( 645b633 ) 1.12.2 (2020-12-23) Bug Fixes catch errors from Repeat ( #348 ) ( 09a1a98 ) 1.12.1 (2020-12-21) Bug Fixes correctly handle \"falsy\" data values fixes #264 ( cf1dbaf ) 1.12.0 (2020-12-16) Features add ability to get if queue is paused or not ( e98b7d8 ) 1.11.2 (2020-12-15) Bug Fixes promote jobs to the right \"list\" when paused ( d3df615 ) 1.11.1 (2020-12-15) Bug Fixes clientCommandMessageReg to support GCP memorystore v5 ( 8408dda ) 1.11.0 (2020-11-24) Bug Fixes add generic type to processor ( d4f6501 ) Features add name and return types to queue, worker and processor ( 4879715 ) 1.10.0 (2020-10-20) Bug Fixes job: remove listeners before resolving promise ( 563ce92 ) worker: continue processing if handleFailed fails. fixes #286 ( 4ef1cbc ) worker: fix memory leak on Promise.race ( #282 ) ( a78ab2b ) worker: setname on worker blocking connection ( #291 ) ( 50a87fc ) remove async for loop in child pool fixes #229 ( d77505e ) Features sandbox: kill child workers gracefully ( #243 ) ( 4262837 ) 1.9.0 (2020-07-19) Features add grouped rate limiting ( 3a958dd ) 1.8.14 (2020-07-03) Bug Fixes typescript: fix typings, upgrade ioredis dependencies ( #220 ) ( 7059f20 ) worker: return this.closing when calling close ( b68c845 ) 1.8.13 (2020-06-05) Bug Fixes redis-connection: run the load command for reused redis client ( fab9bba ) 1.8.12 (2020-06-04) Bug Fixes remove unused options ( 23aadc3 ) 1.8.11 (2020-05-29) Bug Fixes scheduler: remove unnecessary division by 4096 ( 4d25e95 ) 1.8.10 (2020-05-28) Bug Fixes scheduler: divide timestamp by 4096 in update set fixes #168 ( 0c5db83 ) 1.8.9 (2020-05-25) Bug Fixes scheduler: divide next timestamp by 4096 ( #204 ) ( 9562d74 ) 1.8.8 (2020-05-25) Bug Fixes queue-base: error event is passed through ( ad14e77 ) redis-connection: error event is passed through ( a15b1a1 ) worker: error event is passed through ( d7f0374 ) 1.8.7 (2020-04-10) Bug Fixes worker: do not use global child pool fixes #172 ( bc65f26 ) 1.8.6 (2020-04-10) Bug Fixes workers: do not call super.close() ( ebd2ae1 ) make sure closing is returned in every close call ( 88c5948 ) scheduler: duplicate connections fixes #174 ( 011b8ac ) worker: return this.closing when calling close ( 06d3d4f ) 1.8.5 (2020-04-05) Bug Fixes removed deprecated and unused node-uuid ( c810579 ) 1.8.4 (2020-03-17) Bug Fixes job: added nullable/optional properties ( cef134f ) 1.8.3 (2020-03-13) Bug Fixes sandbox: If the child process is killed, remove it from the pool. ( 8fb0fb5 ) 1.8.2 (2020-03-03) Bug Fixes restore the Job timestamp when deserializing JSON data ( #138 ) ( #152 ) ( c171bd4 ) 1.8.1 (2020-03-02) Bug Fixes modified imports to work when esModuleInterop is disabled ( #132 ) ( 01681f2 ) 1.8.0 (2020-03-02) Bug Fixes cleanup signatures for queue add and addBulk ( #127 ) ( 48e221b ) exit code 12 when using inspect with child process ( #137 ) ( 43ebc67 ) Features types: add sandboxed job processor types ( #114 ) ( a50a88c ) 1.7.0 (2020-03-02) Features made queue name publicly readable for #140 ( f2bba2e ) 1.6.8 (2020-02-22) Bug Fixes modified QueueGetters.getJob and Job.fromId to also return null to ( 65183fc ) modified QueueGetters.getJob and Job.fromId to return undefined ( ede352b ) 1.6.7 (2020-01-16) Bug Fixes don't fail a job when the worker already lost the lock ( 23c0bf7 ) 1.6.6 (2020-01-05) Bug Fixes remove duplicate active entry ( 1d2cca3 ) 1.6.5 (2020-01-05) Bug Fixes get rid of flushdb/flushall in tests ( 550c67b ) 1.6.4 (2020-01-05) Bug Fixes delete logs when cleaning jobs in set ( b11c6c7 ) 1.6.3 (2020-01-01) Bug Fixes add tslib dependency fixes #65 ( 7ad7995 ) 1.6.2 (2019-12-16) Bug Fixes change default QueueEvents lastEventId to $ ( 3c5b01d ) ensure QE ready before adding test events ( fd190f4 ) explicitly test the behavior of .on and .once ( ea11087 ) 1.6.1 (2019-12-16) Bug Fixes check of existing redis instance ( dd466b3 ) 1.6.0 (2019-12-12) Features add generic type to job data and return value ( 87c0531 ) 1.5.0 (2019-11-22) Features remove delay dependency ( 97e1a30 ) remove dependence on Bluebird.delay #67 ( bedbaf2 ) 1.4.3 (2019-11-21) Bug Fixes check in moveToFinished to use default val for opts.maxLenEvents ( d1118aa ) 1.4.2 (2019-11-21) Bug Fixes avoid Job<->Queue circular json error ( 5752727 ) avoid the .toJSON serializer interface #70 ( 5941b82 ) 1.4.1 (2019-11-08) Bug Fixes default job settings #58 ( 667fc6e ) 1.4.0 (2019-11-06) Features job.progress() return last progress for sandboxed processors ( 5c4b146 ) 1.3.0 (2019-11-05) Features test worker extends job lock while job is active ( 577efdf ) 1.2.0 (2019-11-03) Bug Fixes only run coveralls after success ( bd51893 ) Features added code coverage and coveralls ( 298cfc4 ) added missing deps for coverage ( 6f3ab8d ) ignore commitlint file in coverage ( f874441 ) only upload coverage once after all tests pass ( a7f73ec ) 1.1.0 (2019-11-01) Bug Fixes failing build ( bb21d53 ) fix failing tests ( 824eb6b ) Features initial version of job locking mechanism ( 1d4fa38 ) 1.0.1 (2019-10-27) Bug Fixes save job stacktrace on failure ( 85dfe52 ) simplify logic for stackTraceLimit ( 296bd89 ) 1.0.0 (2019-10-20) Bug Fixes add compilation step before running tests ( 64abc13 ) add extra client to worker fixes #34 ( 90bd891 ) add missing dependency ( b92e330 ) check closing after resuming from pause ( 7b2cef3 ) default opts ( 333c73b ) do not block if blockTime is zero ( 13b2df2 ) do not exec if closing ( b1d1c08 ) do not trim if maxEvents is undefined ( 7edd8f4 ) emit wait event in add job ( 39cba31 ) fix a couple of job tests ( e66b97b ) fix compiling error ( 3cf2617 ) fix more tests ( 6a07b35 ) fix progress script ( 4228e27 ) fix retry functionality ( ec41ea4 ) fix several floating promises ( 590a4a9 ) fixed reprocess lua script ( b78296f ) improve concurrency mechanism ( a3f6148 ) improve disconnection for queue events ( 56b53a1 ) initialize events comsumption in constructor ( dbb66cd ) make ioredis typings a normal dependency ( fb80b90 ) minor fixes ( 7791cda ) parse progres and return value in events ( 9e43d0e ) properly emit event for progress ( 3f70175 ) reduce drain delay to 5 seconds ( c6cfe7c ) remove buggy close() on redis-connection (fixes 5 failing tests) ( 64c2ede ) remove unused dependencies ( 34293c8 ) replace init by waitUntilReady ( 4336161 ) reworked initialization of redis clients ( c17d4be ) several fixes to make the lib work on other ts projects ( 3cac1b0 ) throw error messages instead of codes ( 9267541 ) update tests after merge ( 51f75a4 ) wait until ready before trying to get jobs ( f3b768f ) connections: reused connections ( 1e808d2 ) waitUntilFinished improvements ( 18d4afe ) Features add cleaned event ( c544775 ) add empty method ( 4376112 ) add retry errors ( f6a7990 ) add script to generate typedocs ( d0a8cb3 ) add some new tests for compat class, more minor fixes ( bc0f653 ) add support for adding jobs in bulk ( b62bddc ) add trimEvents method to queue client ( b7da7c4 ) automatically trim events ( 279bbba ) emit global stalled event fixes #10 ( 241f229 ) get rid of Job3 in favor of bullmq Job class ( 7590cea ) implement close in redis connection fixes #8 ( 6de8b48 ) make delay in backoffs optional ( 30d59e5 ) move async initialization to constructors ( 3fbacd0 ) port a lot of functionality from bull 3.x ( ec9f3d2 ) port more features from bull 3.x ( 75bd261 ) ported tests and functionality from bull 3 ( 1b6b192 ) workers: support for async backoffs ( c555837 ) remove support of bull3 config format in compat class ( d909486 ) support global:progress event ( 60f4d85 ) trim option to event stream #21 & fix #17 ( 7eae653 ) Changelog 4.0.0-beta.2 Fixed Removed humans, they weren't doing fine with animals. Changed Animals are now super cute, all of them. 4.0.0-beta.1 Added Introduced animals into the world, we believe they're going to be a neat addition. 4.0.0-beta.0","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"docs/bull/changelog/#1741-2022-02-20","text":"","title":"1.74.1 (2022-02-20)"},{"location":"docs/bull/changelog/#bug-fixes","text":"flow: respect defaultJobOptions from queue opts ( #1080 ) fixes #1034 ( 0aca072 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1740-2022-02-19","text":"","title":"1.74.0 (2022-02-19)"},{"location":"docs/bull/changelog/#features","text":"retry-jobs: pass timestamp as option ( #1054 ) ( 1522359 )","title":"Features"},{"location":"docs/bull/changelog/#1730-2022-02-16","text":"","title":"1.73.0 (2022-02-16)"},{"location":"docs/bull/changelog/#features_1","text":"job: add prefix getter ( #1077 ) ( db9ef10 ) queue-getters: add getQueueSchedulers ( #1078 ) ref #1075 ( 0b3b1c4 )","title":"Features"},{"location":"docs/bull/changelog/#1720-2022-02-15","text":"","title":"1.72.0 (2022-02-15)"},{"location":"docs/bull/changelog/#features_2","text":"backoff: validate UnrecoverableError presence ( #1074 ) ( 1defeac )","title":"Features"},{"location":"docs/bull/changelog/#1710-2022-02-14","text":"","title":"1.71.0 (2022-02-14)"},{"location":"docs/bull/changelog/#features_3","text":"get-job-counts: add default values ( #1068 ) ( 1c7f841 )","title":"Features"},{"location":"docs/bull/changelog/#1700-2022-02-11","text":"","title":"1.70.0 (2022-02-11)"},{"location":"docs/bull/changelog/#features_4","text":"sandbox: pass parent property ( #1065 ) ( 1fd33f6 )","title":"Features"},{"location":"docs/bull/changelog/#1691-2022-02-10","text":"","title":"1.69.1 (2022-02-10)"},{"location":"docs/bull/changelog/#bug-fixes_1","text":"move-to-finished: validate lock first ( #1064 ) ( 9da1b29 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1690-2022-02-08","text":"","title":"1.69.0 (2022-02-08)"},{"location":"docs/bull/changelog/#features_5","text":"job: pass queueName into sandbox ( #1053 ) fixes #1050 ref #1051 ( 12bb19c )","title":"Features"},{"location":"docs/bull/changelog/#1684-2022-02-05","text":"","title":"1.68.4 (2022-02-05)"},{"location":"docs/bull/changelog/#bug-fixes_2","text":"clean: consider checking parent jobs when cleaning ( #1048 ) ( 0708a24 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1683-2022-02-04","text":"","title":"1.68.3 (2022-02-04)"},{"location":"docs/bull/changelog/#bug-fixes_3","text":"drain: delete priority queueKey ( #1049 ) ( 2e6129a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1682-2022-02-03","text":"","title":"1.68.2 (2022-02-03)"},{"location":"docs/bull/changelog/#performance-improvements","text":"remove-parent-dependency: do not emit wait event in hard deletions ( #1045 ) ( 4069821 )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1681-2022-02-01","text":"","title":"1.68.1 (2022-02-01)"},{"location":"docs/bull/changelog/#bug-fixes_4","text":"update: throw error when missing job key ( #1042 ) ( a00ae5c )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1680-2022-01-29","text":"","title":"1.68.0 (2022-01-29)"},{"location":"docs/bull/changelog/#features_6","text":"queue: add retryJobs method for failed jobs ( #1024 ) ( 310a730 )","title":"Features"},{"location":"docs/bull/changelog/#performance-improvements_1","text":"lua: call del command with multiple keys ( #1035 ) ( 9cfaab8 )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1673-2022-01-28","text":"","title":"1.67.3 (2022-01-28)"},{"location":"docs/bull/changelog/#bug-fixes_5","text":"drain: consider checking parent jobs when draining ( #992 ) ( 81b7221 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1672-2022-01-28","text":"","title":"1.67.2 (2022-01-28)"},{"location":"docs/bull/changelog/#bug-fixes_6","text":"repeat: consider immediately option with cron ( #1030 ) fixes #1020 ( b9e7488 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1671-2022-01-27","text":"","title":"1.67.1 (2022-01-27)"},{"location":"docs/bull/changelog/#bug-fixes_7","text":"retry: pass state in error message ( #1027 ) ( c646a45 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#performance-improvements_2","text":"retry: delete props in retryJob lua script ( #1016 ) ( 547cedd )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1670-2022-01-26","text":"","title":"1.67.0 (2022-01-26)"},{"location":"docs/bull/changelog/#features_7","text":"add support for removeOn based on time ( 6c4ac75 )","title":"Features"},{"location":"docs/bull/changelog/#1661-2022-01-25","text":"","title":"1.66.1 (2022-01-25)"},{"location":"docs/bull/changelog/#bug-fixes_8","text":"job: increase attemptsMade when moving job to active ( #1009 ) fixes #1002 ( 0974ae0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1660-2022-01-23","text":"","title":"1.66.0 (2022-01-23)"},{"location":"docs/bull/changelog/#features_8","text":"queue-events: add retries-exhausted event ( #1010 ) ( e476f35 )","title":"Features"},{"location":"docs/bull/changelog/#1651-2022-01-21","text":"","title":"1.65.1 (2022-01-21)"},{"location":"docs/bull/changelog/#bug-fixes_9","text":"dont loop through empty modules paths ( #1013 ) fixes #1012 ( 86e84df )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1650-2022-01-21","text":"","title":"1.65.0 (2022-01-21)"},{"location":"docs/bull/changelog/#features_9","text":"queue: add JobType and JobState unions for better typing ( #1011 ) ( 3b9b79d )","title":"Features"},{"location":"docs/bull/changelog/#1644-2022-01-19","text":"","title":"1.64.4 (2022-01-19)"},{"location":"docs/bull/changelog/#bug-fixes_10","text":"queue: use 0 as initial value for getJobCountByTypes reducer ( #1005 ) ( f0e23ef )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1643-2022-01-17","text":"","title":"1.64.3 (2022-01-17)"},{"location":"docs/bull/changelog/#bug-fixes_11","text":"worker: blockTime must be integer on older Redis ( 6fedc0a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1642-2022-01-14","text":"","title":"1.64.2 (2022-01-14)"},{"location":"docs/bull/changelog/#bug-fixes_12","text":"remove-job: consider removing parent dependency key in lua scripts ( #990 ) ( 661abf0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1641-2022-01-14","text":"","title":"1.64.1 (2022-01-14)"},{"location":"docs/bull/changelog/#bug-fixes_13","text":"sandbox: exit uncaughtException instead of throwing error ( 013d6a5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1640-2022-01-07","text":"","title":"1.64.0 (2022-01-07)"},{"location":"docs/bull/changelog/#features_10","text":"sanboxed-process: support .cjs files ( #984 ) ( 531e4de )","title":"Features"},{"location":"docs/bull/changelog/#1633-2022-01-06","text":"","title":"1.63.3 (2022-01-06)"},{"location":"docs/bull/changelog/#bug-fixes_14","text":"job: throw error when delay and repeat are provided together ( #983 ) ( 07b0082 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1632-2022-01-04","text":"","title":"1.63.2 (2022-01-04)"},{"location":"docs/bull/changelog/#bug-fixes_15","text":"queue: add missing error event typing ( #979 ) ( afdaac6 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1631-2022-01-04","text":"","title":"1.63.1 (2022-01-04)"},{"location":"docs/bull/changelog/#bug-fixes_16","text":"update-progress: throw error if job key is missing ( #978 ) ref #977 ( b03aaf1 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1630-2021-12-31","text":"","title":"1.63.0 (2021-12-31)"},{"location":"docs/bull/changelog/#features_11","text":"job: use generic types for static methods ( #975 ) ( f78f4d0 )","title":"Features"},{"location":"docs/bull/changelog/#1620-2021-12-31","text":"","title":"1.62.0 (2021-12-31)"},{"location":"docs/bull/changelog/#bug-fixes_17","text":"add deprecated tag in progress and Queue3 class ( #973 ) ( 6abdf5b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_12","text":"queue: add better event typing ( #971 ) ( 596fd7b )","title":"Features"},{"location":"docs/bull/changelog/#1610-2021-12-29","text":"","title":"1.61.0 (2021-12-29)"},{"location":"docs/bull/changelog/#features_13","text":"queue: reuse generic typing for jobs ( 5c10818 ) worker: reuse generic typing for jobs ( 9adcdb7 )","title":"Features"},{"location":"docs/bull/changelog/#1600-2021-12-29","text":"","title":"1.60.0 (2021-12-29)"},{"location":"docs/bull/changelog/#features_14","text":"queue-scheduler: add better event typing ( #963 ) ( b23c006 )","title":"Features"},{"location":"docs/bull/changelog/#1594-2021-12-21","text":"","title":"1.59.4 (2021-12-21)"},{"location":"docs/bull/changelog/#bug-fixes_18","text":"downgrade typescript to 3.9.10 fixes #917 ( #960 ) ( 4e51fe0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1593-2021-12-21","text":"","title":"1.59.3 (2021-12-21)"},{"location":"docs/bull/changelog/#bug-fixes_19","text":"worker: fix undefined moveToActive ( 87e8cab )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1592-2021-12-17","text":"","title":"1.59.2 (2021-12-17)"},{"location":"docs/bull/changelog/#bug-fixes_20","text":"package: add jsnext:main prop ( #953 ) ( 1a92bf7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1591-2021-12-17","text":"","title":"1.59.1 (2021-12-17)"},{"location":"docs/bull/changelog/#bug-fixes_21","text":"copy lua files to correct location ( 2be1120 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1590-2021-12-17","text":"","title":"1.59.0 (2021-12-17)"},{"location":"docs/bull/changelog/#bug-fixes_22","text":"correct dist path ( 067d4c2 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_15","text":"also export bullmq as an ESM ( e97e5b5 )","title":"Features"},{"location":"docs/bull/changelog/#1580-2021-12-15","text":"","title":"1.58.0 (2021-12-15)"},{"location":"docs/bull/changelog/#features_16","text":"worker: add better event typing ( #940 ) ( a326d4f )","title":"Features"},{"location":"docs/bull/changelog/#1574-2021-12-14","text":"","title":"1.57.4 (2021-12-14)"},{"location":"docs/bull/changelog/#bug-fixes_23","text":"move-to-active: add try catch in moveToActive call ( #933 ) ( bab45b0 ) redis-connection: consider cluster redisOptions config ( #934 ) ( 5130f63 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1573-2021-12-14","text":"","title":"1.57.3 (2021-12-14)"},{"location":"docs/bull/changelog/#bug-fixes_24","text":"remove debug console.error ( #932 ) ( 271aac3 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1572-2021-12-11","text":"","title":"1.57.2 (2021-12-11)"},{"location":"docs/bull/changelog/#bug-fixes_25","text":"connection: check instance options to console log deprecation message ( #927 ) ( fc1e2b9 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#performance-improvements_3","text":"add-job: save parent data as json ( #859 ) ( 556d4ee )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1571-2021-12-11","text":"","title":"1.57.1 (2021-12-11)"},{"location":"docs/bull/changelog/#bug-fixes_26","text":"worker: better handling of block timeout ( be4c933 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1570-2021-12-08","text":"","title":"1.57.0 (2021-12-08)"},{"location":"docs/bull/changelog/#features_17","text":"queue-events: add better event typing ( #919 ) ( e980080 )","title":"Features"},{"location":"docs/bull/changelog/#1560-2021-12-06","text":"","title":"1.56.0 (2021-12-06)"},{"location":"docs/bull/changelog/#bug-fixes_27","text":"emit drain event if no jobs left when completing ( 9ad78a9 ) worker: use client for setting worker name ( af65c2c )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_18","text":"worker: make moveToActive protected ( d2897ee )","title":"Features"},{"location":"docs/bull/changelog/#1551-2021-12-03","text":"","title":"1.55.1 (2021-12-03)"},{"location":"docs/bull/changelog/#bug-fixes_28","text":"worker: always try to move to active after waiting for job ( #914 ) ( 97b7084 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1550-2021-12-02","text":"","title":"1.55.0 (2021-12-02)"},{"location":"docs/bull/changelog/#features_19","text":"script-loader: lua script loader with include support ( #897 ) ( 64b6ccf )","title":"Features"},{"location":"docs/bull/changelog/#1546-2021-11-30","text":"","title":"1.54.6 (2021-11-30)"},{"location":"docs/bull/changelog/#bug-fixes_29","text":"stalled: save finishedOn when job stalled more than allowable limit ( #900 ) ( eb89edf )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1545-2021-11-26","text":"","title":"1.54.5 (2021-11-26)"},{"location":"docs/bull/changelog/#bug-fixes_30","text":"tsconfig: only include node types ( #895 ) ( 5f4fdca )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1544-2021-11-24","text":"","title":"1.54.4 (2021-11-24)"},{"location":"docs/bull/changelog/#bug-fixes_31","text":"child-processor: add deprecation warning for progress method ( #890 ) ( f80b19a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1543-2021-11-22","text":"","title":"1.54.3 (2021-11-22)"},{"location":"docs/bull/changelog/#bug-fixes_32","text":"clean: use range values in lua script ( #885 ) ( 02ef63a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1542-2021-11-20","text":"","title":"1.54.2 (2021-11-20)"},{"location":"docs/bull/changelog/#bug-fixes_33","text":"job: use this when use new operators ( #884 ) ( 7b84283 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1541-2021-11-19","text":"","title":"1.54.1 (2021-11-19)"},{"location":"docs/bull/changelog/#bug-fixes_34","text":"job: change private attributes to protected for extensions ( #882 ) ( ffcc3f0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1540-2021-11-17","text":"","title":"1.54.0 (2021-11-17)"},{"location":"docs/bull/changelog/#features_20","text":"load-includes: export includes to be reused in extensions ( #877 ) ( b56c4a9 )","title":"Features"},{"location":"docs/bull/changelog/#1530-2021-11-16","text":"","title":"1.53.0 (2021-11-16)"},{"location":"docs/bull/changelog/#features_21","text":"queue-events: add cleaned event ( #865 ) ( b3aebad )","title":"Features"},{"location":"docs/bull/changelog/#1522-2021-11-14","text":"","title":"1.52.2 (2021-11-14)"},{"location":"docs/bull/changelog/#bug-fixes_35","text":"worker: change private attributes to protected for pro extension ( #874 ) ( 1c73881 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1521-2021-11-12","text":"","title":"1.52.1 (2021-11-12)"},{"location":"docs/bull/changelog/#performance-improvements_4","text":"clean: speed up clean method when called with limit param ( #864 ) ( 09b5cb4 )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1520-2021-11-11","text":"","title":"1.52.0 (2021-11-11)"},{"location":"docs/bull/changelog/#features_22","text":"queue: add waiting event type declaration ( #872 ) ( f29925d )","title":"Features"},{"location":"docs/bull/changelog/#1513-2021-11-04","text":"","title":"1.51.3 (2021-11-04)"},{"location":"docs/bull/changelog/#bug-fixes_36","text":"move-to-failed: delete closing check that prevents script execution ( #858 ) fixes #834 ( d50814f )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1512-2021-11-03","text":"","title":"1.51.2 (2021-11-03)"},{"location":"docs/bull/changelog/#bug-fixes_37","text":"flow: remove repeat option from FlowJob opts ( #853 ) fixes #851 ( c9ee2f1 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1511-2021-10-29","text":"","title":"1.51.1 (2021-10-29)"},{"location":"docs/bull/changelog/#bug-fixes_38","text":"commands: copy includes lua scripts ( #843 ) fixes #837 ( cab33e0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1510-2021-10-28","text":"","title":"1.51.0 (2021-10-28)"},{"location":"docs/bull/changelog/#features_23","text":"flow: consider continually adding jobs ( #828 ) fixes #826 ( b0fde69 )","title":"Features"},{"location":"docs/bull/changelog/#1507-2021-10-28","text":"","title":"1.50.7 (2021-10-28)"},{"location":"docs/bull/changelog/#bug-fixes_39","text":"override enableReadyCheck, maxRetriesPerRequest fixes reconnection ( 09ba358 ) queue-base: deprecation warning on missing connection ( 2f79802 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1506-2021-10-28","text":"","title":"1.50.6 (2021-10-28)"},{"location":"docs/bull/changelog/#bug-fixes_40","text":"queue-base: show connection deprecation warning ( #832 ) fixes #829 ( 5d023fe )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1505-2021-10-21","text":"","title":"1.50.5 (2021-10-21)"},{"location":"docs/bull/changelog/#bug-fixes_41","text":"child-pool: pipe process stdout and stderr( #822 ) fixes #821 ( 13f5c62 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1504-2021-10-20","text":"","title":"1.50.4 (2021-10-20)"},{"location":"docs/bull/changelog/#bug-fixes_42","text":"properly pass sharedConnection option to worker base class ( 56557f1 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1503-2021-10-18","text":"","title":"1.50.3 (2021-10-18)"},{"location":"docs/bull/changelog/#bug-fixes_43","text":"msgpackr: upgrade version to 1.4.6 to support esm bundlers ( #818 ) fixes #813 ( 913d7a9 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1502-2021-10-12","text":"","title":"1.50.2 (2021-10-12)"},{"location":"docs/bull/changelog/#bug-fixes_44","text":"msgpack: replace msgpack by msgpackr ( dc13a75 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1501-2021-10-12","text":"","title":"1.50.1 (2021-10-12)"},{"location":"docs/bull/changelog/#bug-fixes_45","text":"queue-getters: only getting the first 2 jobs ( 653873a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1500-2021-10-12","text":"","title":"1.50.0 (2021-10-12)"},{"location":"docs/bull/changelog/#features_24","text":"easier to build extensions on top of BullMQ ( b1a9e64 )","title":"Features"},{"location":"docs/bull/changelog/#1490-2021-10-08","text":"","title":"1.49.0 (2021-10-08)"},{"location":"docs/bull/changelog/#features_25","text":"sandboxed-process: handle init-failed error ( #797 ) ( 5d2f553 )","title":"Features"},{"location":"docs/bull/changelog/#1483-2021-10-05","text":"","title":"1.48.3 (2021-10-05)"},{"location":"docs/bull/changelog/#bug-fixes_46","text":"change-delay: add current time to delay ( #789 ) fixes #787 ( 4a70def )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1482-2021-09-24","text":"","title":"1.48.2 (2021-09-24)"},{"location":"docs/bull/changelog/#performance-improvements_5","text":"obliterate: do not pass unused variables ( #766 ) ( e9abfa6 )","title":"Performance Improvements"},{"location":"docs/bull/changelog/#1481-2021-09-23","text":"","title":"1.48.1 (2021-09-23)"},{"location":"docs/bull/changelog/#bug-fixes_47","text":"obliterate: consider dependencies and processed keys ( #765 ) ( fd6bad8 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1480-2021-09-23","text":"","title":"1.48.0 (2021-09-23)"},{"location":"docs/bull/changelog/#features_26","text":"queue: add drain lua script ( #764 ) ( 2daa698 )","title":"Features"},{"location":"docs/bull/changelog/#1472-2021-09-22","text":"","title":"1.47.2 (2021-09-22)"},{"location":"docs/bull/changelog/#bug-fixes_48","text":"flow-producer: use default prefix in add method ( #763 ) fixes #762 ( fffdb55 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1471-2021-09-17","text":"","title":"1.47.1 (2021-09-17)"},{"location":"docs/bull/changelog/#bug-fixes_49","text":"running: move running attribute before first async call ( #756 ) ( f7f0660 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1470-2021-09-16","text":"","title":"1.47.0 (2021-09-16)"},{"location":"docs/bull/changelog/#features_27","text":"queue-events: launch without launching process ( #750 ) ( 23a2360 )","title":"Features"},{"location":"docs/bull/changelog/#1467-2021-09-16","text":"","title":"1.46.7 (2021-09-16)"},{"location":"docs/bull/changelog/#bug-fixes_50","text":"wait-for-job: add catch block and emit error ( #749 ) ( b407f9a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1466-2021-09-15","text":"","title":"1.46.6 (2021-09-15)"},{"location":"docs/bull/changelog/#bug-fixes_51","text":"connection: fail only if redis connection does not recover ( #751 ) ( 8d59ced )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1465-2021-09-12","text":"","title":"1.46.5 (2021-09-12)"},{"location":"docs/bull/changelog/#bug-fixes_52","text":"is-finished: reject when missing job key ( #746 ) fixes #85 ( bd49bd2 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1464-2021-09-10","text":"","title":"1.46.4 (2021-09-10)"},{"location":"docs/bull/changelog/#bug-fixes_53","text":"wait-until-finished: isFinished return failedReason or returnValue ( #743 ) fixes #555 ( 63acae9 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1463-2021-09-08","text":"","title":"1.46.3 (2021-09-08)"},{"location":"docs/bull/changelog/#bug-fixes_54","text":"add-job: throw error when missing parent key ( #739 ) ( d751070 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1462-2021-09-07","text":"","title":"1.46.2 (2021-09-07)"},{"location":"docs/bull/changelog/#bug-fixes_55","text":"queue-events: duplicate connection ( #733 ) fixes #726 ( e2531ed )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1461-2021-09-06","text":"","title":"1.46.1 (2021-09-06)"},{"location":"docs/bull/changelog/#bug-fixes_56","text":"redis-connection: improve closing fixes #721 ( 9d8eb03 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1460-2021-09-02","text":"","title":"1.46.0 (2021-09-02)"},{"location":"docs/bull/changelog/#features_28","text":"worker: launch without launching process ( #724 ) ( af689e4 ), closes #436","title":"Features"},{"location":"docs/bull/changelog/#1450-2021-09-02","text":"","title":"1.45.0 (2021-09-02)"},{"location":"docs/bull/changelog/#features_29","text":"queue-scheduler: launch without launching process ( #729 ) ( f1932a7 ), closes #436","title":"Features"},{"location":"docs/bull/changelog/#1443-2021-09-02","text":"","title":"1.44.3 (2021-09-02)"},{"location":"docs/bull/changelog/#bug-fixes_57","text":"queuescheduler: handle shared connections fixes #721 ( 32a2b2e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1442-2021-08-29","text":"","title":"1.44.2 (2021-08-29)"},{"location":"docs/bull/changelog/#bug-fixes_58","text":"worker: use spread operator in processing map keys ( #720 ) ( 32f1e57 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1441-2021-08-29","text":"","title":"1.44.1 (2021-08-29)"},{"location":"docs/bull/changelog/#bug-fixes_59","text":"retry: throw error when retry non failed job ( #717 ) ( bb9b192 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1440-2021-08-27","text":"","title":"1.44.0 (2021-08-27)"},{"location":"docs/bull/changelog/#features_30","text":"queue-events: add waiting-children event ( #704 ) ( 18b0b79 )","title":"Features"},{"location":"docs/bull/changelog/#1430-2021-08-25","text":"","title":"1.43.0 (2021-08-25)"},{"location":"docs/bull/changelog/#features_31","text":"events: add added event when job is created ( #699 ) ( f533cc5 )","title":"Features"},{"location":"docs/bull/changelog/#1421-2021-08-23","text":"","title":"1.42.1 (2021-08-23)"},{"location":"docs/bull/changelog/#bug-fixes_60","text":"protect emit calls with throw/catch ( 79f879b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1420-2021-08-20","text":"","title":"1.42.0 (2021-08-20)"},{"location":"docs/bull/changelog/#features_32","text":"flows: add queuesOptions for rate limit ( #692 ) ( 6689ec3 ), closes #621","title":"Features"},{"location":"docs/bull/changelog/#1410-2021-08-20","text":"","title":"1.41.0 (2021-08-20)"},{"location":"docs/bull/changelog/#features_33","text":"flow: add bulk ( dc59fe6 )","title":"Features"},{"location":"docs/bull/changelog/#1404-2021-08-06","text":"","title":"1.40.4 (2021-08-06)"},{"location":"docs/bull/changelog/#bug-fixes_61","text":"rate-limiter: check groupKey is not undefined ( 999b918 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1403-2021-08-06","text":"","title":"1.40.3 (2021-08-06)"},{"location":"docs/bull/changelog/#bug-fixes_62","text":"redis-connection: add error event in waitUntilReady ( ac4101e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1402-2021-08-06","text":"","title":"1.40.2 (2021-08-06)"},{"location":"docs/bull/changelog/#bug-fixes_63","text":"move clientCommandMessageReg to utils ( dd5d555 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1401-2021-07-24","text":"","title":"1.40.1 (2021-07-24)"},{"location":"docs/bull/changelog/#bug-fixes_64","text":"connection hangs with failed connection fixes #656 ( c465611 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1400-2021-07-22","text":"","title":"1.40.0 (2021-07-22)"},{"location":"docs/bull/changelog/#features_34","text":"worker: retry with delay errors in run loop ( 409fe7f )","title":"Features"},{"location":"docs/bull/changelog/#1395-2021-07-21","text":"","title":"1.39.5 (2021-07-21)"},{"location":"docs/bull/changelog/#bug-fixes_65","text":"move-to-finished: remove stalled jobs when finishing ( 3867126 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1394-2021-07-21","text":"","title":"1.39.4 (2021-07-21)"},{"location":"docs/bull/changelog/#bug-fixes_66","text":"repeatable: validate endDate when adding next repeatable job ( 1324cbb )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1393-2021-07-16","text":"","title":"1.39.3 (2021-07-16)"},{"location":"docs/bull/changelog/#bug-fixes_67","text":"connect if redis client has status \"wait\" ( f711717 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1392-2021-07-15","text":"","title":"1.39.2 (2021-07-15)"},{"location":"docs/bull/changelog/#bug-fixes_68","text":"queue: ensure the Queue constructor doesn't try to set queue options if the client is closed ( b40c6eb )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1391-2021-07-15","text":"","title":"1.39.1 (2021-07-15)"},{"location":"docs/bull/changelog/#bug-fixes_69","text":"sandbox: use updateProgress method name ( 27d62c3 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1390-2021-07-13","text":"","title":"1.39.0 (2021-07-13)"},{"location":"docs/bull/changelog/#features_35","text":"worker+scheduler: add a \"running\" attribute for healthchecking ( aae358e )","title":"Features"},{"location":"docs/bull/changelog/#1381-2021-07-12","text":"","title":"1.38.1 (2021-07-12)"},{"location":"docs/bull/changelog/#bug-fixes_70","text":"reprocess: do not store job.id in added list ( 9c0605e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1380-2021-07-12","text":"","title":"1.38.0 (2021-07-12)"},{"location":"docs/bull/changelog/#features_36","text":"queue: add missing events typings ( b42e78c )","title":"Features"},{"location":"docs/bull/changelog/#1371-2021-07-02","text":"","title":"1.37.1 (2021-07-02)"},{"location":"docs/bull/changelog/#bug-fixes_71","text":"stalled-jobs: move stalled jobs to wait in batches ( a23fcb8 ), closes #422","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1370-2021-06-30","text":"","title":"1.37.0 (2021-06-30)"},{"location":"docs/bull/changelog/#features_37","text":"job: add changeDelay method for delayed jobs ( f0a9f9c )","title":"Features"},{"location":"docs/bull/changelog/#1361-2021-06-22","text":"","title":"1.36.1 (2021-06-22)"},{"location":"docs/bull/changelog/#bug-fixes_72","text":"worker: change active event typing ( 220b4f6 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1360-2021-06-20","text":"","title":"1.36.0 (2021-06-20)"},{"location":"docs/bull/changelog/#bug-fixes_73","text":"queue-events: fix drained typing ( 9cf711d )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_38","text":"worker: add active event typing ( 5508cdf ) worker: add progress event typing ( 119cb7c )","title":"Features"},{"location":"docs/bull/changelog/#1350-2021-06-19","text":"","title":"1.35.0 (2021-06-19)"},{"location":"docs/bull/changelog/#features_39","text":"worker: add drained event typing ( ed5f315 )","title":"Features"},{"location":"docs/bull/changelog/#1342-2021-06-18","text":"","title":"1.34.2 (2021-06-18)"},{"location":"docs/bull/changelog/#bug-fixes_74","text":"worker: await for processing functions ( 0566804 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1341-2021-06-18","text":"","title":"1.34.1 (2021-06-18)"},{"location":"docs/bull/changelog/#bug-fixes_75","text":"redis-connection: remove error event listener from client ( 2d70fe7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1340-2021-06-11","text":"","title":"1.34.0 (2021-06-11)"},{"location":"docs/bull/changelog/#features_40","text":"job: expose queueName ( 8683bd4 )","title":"Features"},{"location":"docs/bull/changelog/#1331-2021-06-10","text":"","title":"1.33.1 (2021-06-10)"},{"location":"docs/bull/changelog/#bug-fixes_76","text":"job: destructure default opts for pagination ( 73363a5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1330-2021-06-10","text":"","title":"1.33.0 (2021-06-10)"},{"location":"docs/bull/changelog/#features_41","text":"job: add getDependenciesCount method ( ae39a4c )","title":"Features"},{"location":"docs/bull/changelog/#1320-2021-06-07","text":"","title":"1.32.0 (2021-06-07)"},{"location":"docs/bull/changelog/#features_42","text":"flow-producer: add getFlow method ( ce93d04 )","title":"Features"},{"location":"docs/bull/changelog/#1311-2021-06-07","text":"","title":"1.31.1 (2021-06-07)"},{"location":"docs/bull/changelog/#bug-fixes_77","text":"worker: remove processed key when removeOnComplete ( 4ec1b73 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1310-2021-06-04","text":"","title":"1.31.0 (2021-06-04)"},{"location":"docs/bull/changelog/#features_43","text":"job: extend getDependencies to support pagination ( 9b61bbb )","title":"Features"},{"location":"docs/bull/changelog/#1302-2021-06-03","text":"","title":"1.30.2 (2021-06-03)"},{"location":"docs/bull/changelog/#bug-fixes_78","text":"job: parse results in getDependencies for processed jobs ( 6fdc701 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1301-2021-06-02","text":"","title":"1.30.1 (2021-06-02)"},{"location":"docs/bull/changelog/#bug-fixes_79","text":"move-to-waiting-children: make opts optional ( 33bd76a )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1300-2021-06-02","text":"","title":"1.30.0 (2021-06-02)"},{"location":"docs/bull/changelog/#features_44","text":"add some event typing ( 934c004 )","title":"Features"},{"location":"docs/bull/changelog/#1291-2021-05-31","text":"","title":"1.29.1 (2021-05-31)"},{"location":"docs/bull/changelog/#bug-fixes_80","text":"move-stalled-jobs-to-wait: send failedReason to queueEvents ( 7c510b5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1290-2021-05-31","text":"","title":"1.29.0 (2021-05-31)"},{"location":"docs/bull/changelog/#features_45","text":"add move to waiting children for manual processing ( #477 ) ( f312f29 )","title":"Features"},{"location":"docs/bull/changelog/#1282-2021-05-31","text":"","title":"1.28.2 (2021-05-31)"},{"location":"docs/bull/changelog/#bug-fixes_81","text":"obliterate: remove job logs ( ea91895 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1281-2021-05-31","text":"","title":"1.28.1 (2021-05-31)"},{"location":"docs/bull/changelog/#bug-fixes_82","text":"get-workers: use strict equality on name fixes #564 ( 4becfa6 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1280-2021-05-24","text":"","title":"1.28.0 (2021-05-24)"},{"location":"docs/bull/changelog/#features_46","text":"flow-producer: expose client connection ( 17d4263 )","title":"Features"},{"location":"docs/bull/changelog/#1270-2021-05-24","text":"","title":"1.27.0 (2021-05-24)"},{"location":"docs/bull/changelog/#features_47","text":"repeat: add immediately opt for repeat ( d095573 )","title":"Features"},{"location":"docs/bull/changelog/#1265-2021-05-21","text":"","title":"1.26.5 (2021-05-21)"},{"location":"docs/bull/changelog/#bug-fixes_83","text":"movetofinished: use parent queue for events ( 1b17b62 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1264-2021-05-20","text":"","title":"1.26.4 (2021-05-20)"},{"location":"docs/bull/changelog/#bug-fixes_84","text":"removejob: delete processed hash ( a2a5058 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1263-2021-05-19","text":"","title":"1.26.3 (2021-05-19)"},{"location":"docs/bull/changelog/#bug-fixes_85","text":"ensure connection reconnects when pausing fixes #160 ( f38fee8 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1262-2021-05-18","text":"","title":"1.26.2 (2021-05-18)"},{"location":"docs/bull/changelog/#bug-fixes_86","text":"getjoblogs: no reversed pagination ( fb0c3a5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1261-2021-05-17","text":"","title":"1.26.1 (2021-05-17)"},{"location":"docs/bull/changelog/#bug-fixes_87","text":"flow-producer: use custom jobId as parentId for children fixes #552 ( 645b576 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1260-2021-05-16","text":"","title":"1.26.0 (2021-05-16)"},{"location":"docs/bull/changelog/#features_48","text":"custombackoff: provide job as third parameter ( ddaf8dc )","title":"Features"},{"location":"docs/bull/changelog/#1252-2021-05-16","text":"","title":"1.25.2 (2021-05-16)"},{"location":"docs/bull/changelog/#bug-fixes_88","text":"flow-producer: process parent with children as empty array fixes #547 ( 48168f0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1251-2021-05-13","text":"","title":"1.25.1 (2021-05-13)"},{"location":"docs/bull/changelog/#bug-fixes_89","text":"addbulk: should not consider repeat option ( c85357e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1250-2021-05-11","text":"","title":"1.25.0 (2021-05-11)"},{"location":"docs/bull/changelog/#features_49","text":"job: add sizeLimit option when creating a job ( f10aeeb )","title":"Features"},{"location":"docs/bull/changelog/#1245-2021-05-08","text":"","title":"1.24.5 (2021-05-08)"},{"location":"docs/bull/changelog/#bug-fixes_90","text":"deps: upgrading lodash to 4.17.21 ( 6e90c3f )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1244-2021-05-07","text":"","title":"1.24.4 (2021-05-07)"},{"location":"docs/bull/changelog/#bug-fixes_91","text":"cluster: add redis cluster support ( 5a7dd14 ) redisclient: not reference types from import ( 022fc04 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1243-2021-05-05","text":"","title":"1.24.3 (2021-05-05)"},{"location":"docs/bull/changelog/#bug-fixes_92","text":"sandbox: properly redirect stdout ( #525 ) ( c8642a0 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1242-2021-05-05","text":"","title":"1.24.2 (2021-05-05)"},{"location":"docs/bull/changelog/#bug-fixes_93","text":"sandbox: handle broken processor files ( 2326983 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1241-2021-05-05","text":"","title":"1.24.1 (2021-05-05)"},{"location":"docs/bull/changelog/#bug-fixes_94","text":"queueevents: add active type fixes #519 ( 10af883 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1240-2021-05-03","text":"","title":"1.24.0 (2021-05-03)"},{"location":"docs/bull/changelog/#features_50","text":"add option for non-blocking getNextJob ( 13ce2cf )","title":"Features"},{"location":"docs/bull/changelog/#1231-2021-05-03","text":"","title":"1.23.1 (2021-05-03)"},{"location":"docs/bull/changelog/#bug-fixes_95","text":"add return type for job.waitUntilFinished() ( 59ede97 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1230-2021-04-30","text":"","title":"1.23.0 (2021-04-30)"},{"location":"docs/bull/changelog/#features_51","text":"job: pass parent opts to addBulk ( 7f21615 )","title":"Features"},{"location":"docs/bull/changelog/#1222-2021-04-29","text":"","title":"1.22.2 (2021-04-29)"},{"location":"docs/bull/changelog/#bug-fixes_96","text":"add missing Redis Cluster types fixes #406 ( 07743ff )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1221-2021-04-28","text":"","title":"1.22.1 (2021-04-28)"},{"location":"docs/bull/changelog/#bug-fixes_97","text":"addjob: fix redis cluster CROSSSLOT ( a5fd1d7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1220-2021-04-28","text":"","title":"1.22.0 (2021-04-28)"},{"location":"docs/bull/changelog/#features_52","text":"jobcreate: allow passing parent in job.create ( ede3626 )","title":"Features"},{"location":"docs/bull/changelog/#1210-2021-04-26","text":"","title":"1.21.0 (2021-04-26)"},{"location":"docs/bull/changelog/#features_53","text":"add typing for addNextRepeatableJob ( a3be937 )","title":"Features"},{"location":"docs/bull/changelog/#1206-2021-04-25","text":"","title":"1.20.6 (2021-04-25)"},{"location":"docs/bull/changelog/#bug-fixes_98","text":"movetocompleted: should not complete before children ( 812ff66 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1205-2021-04-23","text":"","title":"1.20.5 (2021-04-23)"},{"location":"docs/bull/changelog/#bug-fixes_99","text":"obliterate: correctly remove many jobs ( b5ae4ce )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1204-2021-04-23","text":"","title":"1.20.4 (2021-04-23)"},{"location":"docs/bull/changelog/#bug-fixes_100","text":"remove internal deps on barrel fixes #469 ( #495 ) ( 60dbeed )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1203-2021-04-23","text":"","title":"1.20.3 (2021-04-23)"},{"location":"docs/bull/changelog/#bug-fixes_101","text":"flows: correct typings fixes #492 ( a77f80b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1202-2021-04-22","text":"","title":"1.20.2 (2021-04-22)"},{"location":"docs/bull/changelog/#bug-fixes_102","text":"movetodelayed: check if job is in active state ( 4e63f70 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1201-2021-04-22","text":"","title":"1.20.1 (2021-04-22)"},{"location":"docs/bull/changelog/#bug-fixes_103","text":"worker: make token optional in processor function fixes #490 ( 3940bd7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1200-2021-04-21","text":"","title":"1.20.0 (2021-04-21)"},{"location":"docs/bull/changelog/#features_54","text":"worker: passing token in processor function ( 2249724 )","title":"Features"},{"location":"docs/bull/changelog/#1193-2021-04-20","text":"","title":"1.19.3 (2021-04-20)"},{"location":"docs/bull/changelog/#bug-fixes_104","text":"movetocompleted: throw an error if job is not in active state ( c2fe5d2 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1192-2021-04-19","text":"","title":"1.19.2 (2021-04-19)"},{"location":"docs/bull/changelog/#bug-fixes_105","text":"worker: close base class connection #451 ( 0875306 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1191-2021-04-19","text":"","title":"1.19.1 (2021-04-19)"},{"location":"docs/bull/changelog/#bug-fixes_106","text":"remove repeatable with obliterate ( 1c5e581 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1190-2021-04-19","text":"","title":"1.19.0 (2021-04-19)"},{"location":"docs/bull/changelog/#features_55","text":"add workerDelay option to limiter ( 9b6ab8a )","title":"Features"},{"location":"docs/bull/changelog/#1182-2021-04-16","text":"","title":"1.18.2 (2021-04-16)"},{"location":"docs/bull/changelog/#bug-fixes_107","text":"add parentKey property to Job ( febc60d )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1181-2021-04-16","text":"","title":"1.18.1 (2021-04-16)"},{"location":"docs/bull/changelog/#bug-fixes_108","text":"rename Flow to FlowProducer class ( c64321d )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1180-2021-04-16","text":"","title":"1.18.0 (2021-04-16)"},{"location":"docs/bull/changelog/#features_56","text":"add remove support for flows ( 4e8a7ef )","title":"Features"},{"location":"docs/bull/changelog/#1170-2021-04-16","text":"","title":"1.17.0 (2021-04-16)"},{"location":"docs/bull/changelog/#features_57","text":"job: consider waiting-children state ( 2916dd5 )","title":"Features"},{"location":"docs/bull/changelog/#1162-2021-04-14","text":"","title":"1.16.2 (2021-04-14)"},{"location":"docs/bull/changelog/#bug-fixes_109","text":"read lua scripts serially ( 69e73b8 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1161-2021-04-12","text":"","title":"1.16.1 (2021-04-12)"},{"location":"docs/bull/changelog/#bug-fixes_110","text":"flow: relative dependency path fixes #466 ( d104bf8 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1160-2021-04-12","text":"","title":"1.16.0 (2021-04-12)"},{"location":"docs/bull/changelog/#features_58","text":"add support for flows (parent-child dependencies) ( #454 ) ( 362212c )","title":"Features"},{"location":"docs/bull/changelog/#1151-2021-03-19","text":"","title":"1.15.1 (2021-03-19)"},{"location":"docs/bull/changelog/#bug-fixes_111","text":"obliterate: safer implementation ( 82f571f )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1150-2021-03-18","text":"","title":"1.15.0 (2021-03-18)"},{"location":"docs/bull/changelog/#features_59","text":"add method to \"obliterate\" a queue, fixes #430 ( 624be0e )","title":"Features"},{"location":"docs/bull/changelog/#1148-2021-03-06","text":"","title":"1.14.8 (2021-03-06)"},{"location":"docs/bull/changelog/#bug-fixes_112","text":"specify promise type to make TS 4.1 and 4.2 happy. ( #418 ) ( 702f609 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1147-2021-02-16","text":"","title":"1.14.7 (2021-02-16)"},{"location":"docs/bull/changelog/#bug-fixes_113","text":"remove \"client\" property of QueueBaseOptions ( #324 ) ( e0b9e71 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1146-2021-02-16","text":"","title":"1.14.6 (2021-02-16)"},{"location":"docs/bull/changelog/#bug-fixes_114","text":"remove next job in removeRepeatableByKey fixes #165 ( fb3a7c2 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1145-2021-02-16","text":"","title":"1.14.5 (2021-02-16)"},{"location":"docs/bull/changelog/#bug-fixes_115","text":"add jobId support to repeatable jobs fixes #396 ( c2dc669 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1144-2021-02-08","text":"","title":"1.14.4 (2021-02-08)"},{"location":"docs/bull/changelog/#bug-fixes_116","text":"reconnect at start fixes #337 ( fb33772 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1143-2021-02-07","text":"","title":"1.14.3 (2021-02-07)"},{"location":"docs/bull/changelog/#bug-fixes_117","text":"worker: avoid possible infinite loop fixes #389 ( d05566e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1142-2021-02-02","text":"","title":"1.14.2 (2021-02-02)"},{"location":"docs/bull/changelog/#bug-fixes_118","text":"improve job timeout notification by giving the job name and id in the error message ( #387 ) ( ca886b1 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1141-2021-02-01","text":"","title":"1.14.1 (2021-02-01)"},{"location":"docs/bull/changelog/#bug-fixes_119","text":"job finish queue events race condition ( 355bca5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1140-2021-01-06","text":"","title":"1.14.0 (2021-01-06)"},{"location":"docs/bull/changelog/#features_60","text":"job: expose extendLock as a public method ( 17e8431 )","title":"Features"},{"location":"docs/bull/changelog/#1130-2020-12-30","text":"","title":"1.13.0 (2020-12-30)"},{"location":"docs/bull/changelog/#features_61","text":"add support for manually processing jobs fixes #327 ( e42bfd2 )","title":"Features"},{"location":"docs/bull/changelog/#1123-2020-12-28","text":"","title":"1.12.3 (2020-12-28)"},{"location":"docs/bull/changelog/#bug-fixes_120","text":"correctly handle \"falsy\" data values fixes #264 ( becad91 ) worker: setname on worker blocking connection ( 645b633 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1122-2020-12-23","text":"","title":"1.12.2 (2020-12-23)"},{"location":"docs/bull/changelog/#bug-fixes_121","text":"catch errors from Repeat ( #348 ) ( 09a1a98 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1121-2020-12-21","text":"","title":"1.12.1 (2020-12-21)"},{"location":"docs/bull/changelog/#bug-fixes_122","text":"correctly handle \"falsy\" data values fixes #264 ( cf1dbaf )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1120-2020-12-16","text":"","title":"1.12.0 (2020-12-16)"},{"location":"docs/bull/changelog/#features_62","text":"add ability to get if queue is paused or not ( e98b7d8 )","title":"Features"},{"location":"docs/bull/changelog/#1112-2020-12-15","text":"","title":"1.11.2 (2020-12-15)"},{"location":"docs/bull/changelog/#bug-fixes_123","text":"promote jobs to the right \"list\" when paused ( d3df615 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1111-2020-12-15","text":"","title":"1.11.1 (2020-12-15)"},{"location":"docs/bull/changelog/#bug-fixes_124","text":"clientCommandMessageReg to support GCP memorystore v5 ( 8408dda )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1110-2020-11-24","text":"","title":"1.11.0 (2020-11-24)"},{"location":"docs/bull/changelog/#bug-fixes_125","text":"add generic type to processor ( d4f6501 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_63","text":"add name and return types to queue, worker and processor ( 4879715 )","title":"Features"},{"location":"docs/bull/changelog/#1100-2020-10-20","text":"","title":"1.10.0 (2020-10-20)"},{"location":"docs/bull/changelog/#bug-fixes_126","text":"job: remove listeners before resolving promise ( 563ce92 ) worker: continue processing if handleFailed fails. fixes #286 ( 4ef1cbc ) worker: fix memory leak on Promise.race ( #282 ) ( a78ab2b ) worker: setname on worker blocking connection ( #291 ) ( 50a87fc ) remove async for loop in child pool fixes #229 ( d77505e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_64","text":"sandbox: kill child workers gracefully ( #243 ) ( 4262837 )","title":"Features"},{"location":"docs/bull/changelog/#190-2020-07-19","text":"","title":"1.9.0 (2020-07-19)"},{"location":"docs/bull/changelog/#features_65","text":"add grouped rate limiting ( 3a958dd )","title":"Features"},{"location":"docs/bull/changelog/#1814-2020-07-03","text":"","title":"1.8.14 (2020-07-03)"},{"location":"docs/bull/changelog/#bug-fixes_127","text":"typescript: fix typings, upgrade ioredis dependencies ( #220 ) ( 7059f20 ) worker: return this.closing when calling close ( b68c845 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1813-2020-06-05","text":"","title":"1.8.13 (2020-06-05)"},{"location":"docs/bull/changelog/#bug-fixes_128","text":"redis-connection: run the load command for reused redis client ( fab9bba )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1812-2020-06-04","text":"","title":"1.8.12 (2020-06-04)"},{"location":"docs/bull/changelog/#bug-fixes_129","text":"remove unused options ( 23aadc3 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1811-2020-05-29","text":"","title":"1.8.11 (2020-05-29)"},{"location":"docs/bull/changelog/#bug-fixes_130","text":"scheduler: remove unnecessary division by 4096 ( 4d25e95 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#1810-2020-05-28","text":"","title":"1.8.10 (2020-05-28)"},{"location":"docs/bull/changelog/#bug-fixes_131","text":"scheduler: divide timestamp by 4096 in update set fixes #168 ( 0c5db83 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#189-2020-05-25","text":"","title":"1.8.9 (2020-05-25)"},{"location":"docs/bull/changelog/#bug-fixes_132","text":"scheduler: divide next timestamp by 4096 ( #204 ) ( 9562d74 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#188-2020-05-25","text":"","title":"1.8.8 (2020-05-25)"},{"location":"docs/bull/changelog/#bug-fixes_133","text":"queue-base: error event is passed through ( ad14e77 ) redis-connection: error event is passed through ( a15b1a1 ) worker: error event is passed through ( d7f0374 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#187-2020-04-10","text":"","title":"1.8.7 (2020-04-10)"},{"location":"docs/bull/changelog/#bug-fixes_134","text":"worker: do not use global child pool fixes #172 ( bc65f26 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#186-2020-04-10","text":"","title":"1.8.6 (2020-04-10)"},{"location":"docs/bull/changelog/#bug-fixes_135","text":"workers: do not call super.close() ( ebd2ae1 ) make sure closing is returned in every close call ( 88c5948 ) scheduler: duplicate connections fixes #174 ( 011b8ac ) worker: return this.closing when calling close ( 06d3d4f )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#185-2020-04-05","text":"","title":"1.8.5 (2020-04-05)"},{"location":"docs/bull/changelog/#bug-fixes_136","text":"removed deprecated and unused node-uuid ( c810579 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#184-2020-03-17","text":"","title":"1.8.4 (2020-03-17)"},{"location":"docs/bull/changelog/#bug-fixes_137","text":"job: added nullable/optional properties ( cef134f )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#183-2020-03-13","text":"","title":"1.8.3 (2020-03-13)"},{"location":"docs/bull/changelog/#bug-fixes_138","text":"sandbox: If the child process is killed, remove it from the pool. ( 8fb0fb5 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#182-2020-03-03","text":"","title":"1.8.2 (2020-03-03)"},{"location":"docs/bull/changelog/#bug-fixes_139","text":"restore the Job timestamp when deserializing JSON data ( #138 ) ( #152 ) ( c171bd4 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#181-2020-03-02","text":"","title":"1.8.1 (2020-03-02)"},{"location":"docs/bull/changelog/#bug-fixes_140","text":"modified imports to work when esModuleInterop is disabled ( #132 ) ( 01681f2 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#180-2020-03-02","text":"","title":"1.8.0 (2020-03-02)"},{"location":"docs/bull/changelog/#bug-fixes_141","text":"cleanup signatures for queue add and addBulk ( #127 ) ( 48e221b ) exit code 12 when using inspect with child process ( #137 ) ( 43ebc67 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_66","text":"types: add sandboxed job processor types ( #114 ) ( a50a88c )","title":"Features"},{"location":"docs/bull/changelog/#170-2020-03-02","text":"","title":"1.7.0 (2020-03-02)"},{"location":"docs/bull/changelog/#features_67","text":"made queue name publicly readable for #140 ( f2bba2e )","title":"Features"},{"location":"docs/bull/changelog/#168-2020-02-22","text":"","title":"1.6.8 (2020-02-22)"},{"location":"docs/bull/changelog/#bug-fixes_142","text":"modified QueueGetters.getJob and Job.fromId to also return null to ( 65183fc ) modified QueueGetters.getJob and Job.fromId to return undefined ( ede352b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#167-2020-01-16","text":"","title":"1.6.7 (2020-01-16)"},{"location":"docs/bull/changelog/#bug-fixes_143","text":"don't fail a job when the worker already lost the lock ( 23c0bf7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#166-2020-01-05","text":"","title":"1.6.6 (2020-01-05)"},{"location":"docs/bull/changelog/#bug-fixes_144","text":"remove duplicate active entry ( 1d2cca3 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#165-2020-01-05","text":"","title":"1.6.5 (2020-01-05)"},{"location":"docs/bull/changelog/#bug-fixes_145","text":"get rid of flushdb/flushall in tests ( 550c67b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#164-2020-01-05","text":"","title":"1.6.4 (2020-01-05)"},{"location":"docs/bull/changelog/#bug-fixes_146","text":"delete logs when cleaning jobs in set ( b11c6c7 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#163-2020-01-01","text":"","title":"1.6.3 (2020-01-01)"},{"location":"docs/bull/changelog/#bug-fixes_147","text":"add tslib dependency fixes #65 ( 7ad7995 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#162-2019-12-16","text":"","title":"1.6.2 (2019-12-16)"},{"location":"docs/bull/changelog/#bug-fixes_148","text":"change default QueueEvents lastEventId to $ ( 3c5b01d ) ensure QE ready before adding test events ( fd190f4 ) explicitly test the behavior of .on and .once ( ea11087 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#161-2019-12-16","text":"","title":"1.6.1 (2019-12-16)"},{"location":"docs/bull/changelog/#bug-fixes_149","text":"check of existing redis instance ( dd466b3 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#160-2019-12-12","text":"","title":"1.6.0 (2019-12-12)"},{"location":"docs/bull/changelog/#features_68","text":"add generic type to job data and return value ( 87c0531 )","title":"Features"},{"location":"docs/bull/changelog/#150-2019-11-22","text":"","title":"1.5.0 (2019-11-22)"},{"location":"docs/bull/changelog/#features_69","text":"remove delay dependency ( 97e1a30 ) remove dependence on Bluebird.delay #67 ( bedbaf2 )","title":"Features"},{"location":"docs/bull/changelog/#143-2019-11-21","text":"","title":"1.4.3 (2019-11-21)"},{"location":"docs/bull/changelog/#bug-fixes_150","text":"check in moveToFinished to use default val for opts.maxLenEvents ( d1118aa )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#142-2019-11-21","text":"","title":"1.4.2 (2019-11-21)"},{"location":"docs/bull/changelog/#bug-fixes_151","text":"avoid Job<->Queue circular json error ( 5752727 ) avoid the .toJSON serializer interface #70 ( 5941b82 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#141-2019-11-08","text":"","title":"1.4.1 (2019-11-08)"},{"location":"docs/bull/changelog/#bug-fixes_152","text":"default job settings #58 ( 667fc6e )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#140-2019-11-06","text":"","title":"1.4.0 (2019-11-06)"},{"location":"docs/bull/changelog/#features_70","text":"job.progress() return last progress for sandboxed processors ( 5c4b146 )","title":"Features"},{"location":"docs/bull/changelog/#130-2019-11-05","text":"","title":"1.3.0 (2019-11-05)"},{"location":"docs/bull/changelog/#features_71","text":"test worker extends job lock while job is active ( 577efdf )","title":"Features"},{"location":"docs/bull/changelog/#120-2019-11-03","text":"","title":"1.2.0 (2019-11-03)"},{"location":"docs/bull/changelog/#bug-fixes_153","text":"only run coveralls after success ( bd51893 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_72","text":"added code coverage and coveralls ( 298cfc4 ) added missing deps for coverage ( 6f3ab8d ) ignore commitlint file in coverage ( f874441 ) only upload coverage once after all tests pass ( a7f73ec )","title":"Features"},{"location":"docs/bull/changelog/#110-2019-11-01","text":"","title":"1.1.0 (2019-11-01)"},{"location":"docs/bull/changelog/#bug-fixes_154","text":"failing build ( bb21d53 ) fix failing tests ( 824eb6b )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_73","text":"initial version of job locking mechanism ( 1d4fa38 )","title":"Features"},{"location":"docs/bull/changelog/#101-2019-10-27","text":"","title":"1.0.1 (2019-10-27)"},{"location":"docs/bull/changelog/#bug-fixes_155","text":"save job stacktrace on failure ( 85dfe52 ) simplify logic for stackTraceLimit ( 296bd89 )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#100-2019-10-20","text":"","title":"1.0.0 (2019-10-20)"},{"location":"docs/bull/changelog/#bug-fixes_156","text":"add compilation step before running tests ( 64abc13 ) add extra client to worker fixes #34 ( 90bd891 ) add missing dependency ( b92e330 ) check closing after resuming from pause ( 7b2cef3 ) default opts ( 333c73b ) do not block if blockTime is zero ( 13b2df2 ) do not exec if closing ( b1d1c08 ) do not trim if maxEvents is undefined ( 7edd8f4 ) emit wait event in add job ( 39cba31 ) fix a couple of job tests ( e66b97b ) fix compiling error ( 3cf2617 ) fix more tests ( 6a07b35 ) fix progress script ( 4228e27 ) fix retry functionality ( ec41ea4 ) fix several floating promises ( 590a4a9 ) fixed reprocess lua script ( b78296f ) improve concurrency mechanism ( a3f6148 ) improve disconnection for queue events ( 56b53a1 ) initialize events comsumption in constructor ( dbb66cd ) make ioredis typings a normal dependency ( fb80b90 ) minor fixes ( 7791cda ) parse progres and return value in events ( 9e43d0e ) properly emit event for progress ( 3f70175 ) reduce drain delay to 5 seconds ( c6cfe7c ) remove buggy close() on redis-connection (fixes 5 failing tests) ( 64c2ede ) remove unused dependencies ( 34293c8 ) replace init by waitUntilReady ( 4336161 ) reworked initialization of redis clients ( c17d4be ) several fixes to make the lib work on other ts projects ( 3cac1b0 ) throw error messages instead of codes ( 9267541 ) update tests after merge ( 51f75a4 ) wait until ready before trying to get jobs ( f3b768f ) connections: reused connections ( 1e808d2 ) waitUntilFinished improvements ( 18d4afe )","title":"Bug Fixes"},{"location":"docs/bull/changelog/#features_74","text":"add cleaned event ( c544775 ) add empty method ( 4376112 ) add retry errors ( f6a7990 ) add script to generate typedocs ( d0a8cb3 ) add some new tests for compat class, more minor fixes ( bc0f653 ) add support for adding jobs in bulk ( b62bddc ) add trimEvents method to queue client ( b7da7c4 ) automatically trim events ( 279bbba ) emit global stalled event fixes #10 ( 241f229 ) get rid of Job3 in favor of bullmq Job class ( 7590cea ) implement close in redis connection fixes #8 ( 6de8b48 ) make delay in backoffs optional ( 30d59e5 ) move async initialization to constructors ( 3fbacd0 ) port a lot of functionality from bull 3.x ( ec9f3d2 ) port more features from bull 3.x ( 75bd261 ) ported tests and functionality from bull 3 ( 1b6b192 ) workers: support for async backoffs ( c555837 ) remove support of bull3 config format in compat class ( d909486 ) support global:progress event ( 60f4d85 ) trim option to event stream #21 & fix #17 ( 7eae653 )","title":"Features"},{"location":"docs/bull/changelog/#changelog","text":"","title":"Changelog"},{"location":"docs/bull/changelog/#400-beta2","text":"","title":"4.0.0-beta.2"},{"location":"docs/bull/changelog/#fixed","text":"Removed humans, they weren't doing fine with animals.","title":"Fixed"},{"location":"docs/bull/changelog/#changed","text":"Animals are now super cute, all of them.","title":"Changed"},{"location":"docs/bull/changelog/#400-beta1","text":"","title":"4.0.0-beta.1"},{"location":"docs/bull/changelog/#added","text":"Introduced animals into the world, we believe they're going to be a neat addition.","title":"Added"},{"location":"docs/bull/changelog/#400-beta0","text":"","title":"4.0.0-beta.0"},{"location":"docs/bull/what-is-bullmq/","text":"BullMQ is a Node.js library that implements a fast and robust queue system built on top of Redis that helps in resolving many modern age micro-services architectures. The library is designed so that it will fulfil the following goals: Exactly once queue semantics, i.e., attempts to deliver every message exactly one time, but it will deliver at least once in the worst case scenario*. Easy to scale horizontally. Add more workers for processing jobs in parallel. Consistent. High performant. Try to get the highest possible throughput from Redis by combining efficient .lua scripts and pipelining. View the repository, see open issues, and contribute back on GitHub ! Features If you are new to Message Queues, you may wonder why they are needed after all. Queues can solve many different problems in an elegant way, from smoothing out processing peaks to creating robust communication channels between micro-services or offloading heavy work from one server to many smaller workers, and many other use cases. Check the Patterns section for getting some inspiration and information about best practices. [x] Minimal CPU usage due to a polling-free design [x] Distributed job execution based on Redis [x] LIFO and FIFO jobs [x] Priorities [x] Delayed jobs [x] Scheduled and repeatable jobs according to cron specifications [x] Retries of failed jobs [x] Concurrency setting per worker [x] Threaded (sandboxed) processing functions [x] Automatic recovery from process crashes Used by BullMQ is used by many organizations big and small, here are some notable examples:","title":"\u4ec0\u4e48\u662f BullMQ"},{"location":"docs/bull/what-is-bullmq/#features","text":"If you are new to Message Queues, you may wonder why they are needed after all. Queues can solve many different problems in an elegant way, from smoothing out processing peaks to creating robust communication channels between micro-services or offloading heavy work from one server to many smaller workers, and many other use cases. Check the Patterns section for getting some inspiration and information about best practices. [x] Minimal CPU usage due to a polling-free design [x] Distributed job execution based on Redis [x] LIFO and FIFO jobs [x] Priorities [x] Delayed jobs [x] Scheduled and repeatable jobs according to cron specifications [x] Retries of failed jobs [x] Concurrency setting per worker [x] Threaded (sandboxed) processing functions [x] Automatic recovery from process crashes","title":"Features"},{"location":"docs/bull/what-is-bullmq/#used-by","text":"BullMQ is used by many organizations big and small, here are some notable examples:","title":"Used by"},{"location":"docs/bull/api/_index/","text":"","title":"API"},{"location":"docs/bull/bull/_index/","text":"\u6587\u6863 For the full documentation, check out the reference and common patterns: Guide \u2014 Your starting point for developing with Bull. Reference \u2014 Reference document with all objects and methods available. Patterns \u2014 a set of examples for common patterns. License \u2014 the Bull license\u2014it's MIT. If you see anything that could use more docs, please submit a pull request!","title":"Bull"},{"location":"docs/bull/bull/_index/#_1","text":"For the full documentation, check out the reference and common patterns: Guide \u2014 Your starting point for developing with Bull. Reference \u2014 Reference document with all objects and methods available. Patterns \u2014 a set of examples for common patterns. License \u2014 the Bull license\u2014it's MIT. If you see anything that could use more docs, please submit a pull request!","title":"\u6587\u6863"},{"location":"docs/bull/bull/develop/","text":"What is Bull? Bull is a Node library that implements a fast and robust queue system based on redis . Although it is possible to implement queues directly using Redis commands, this library provides an API that takes care of all the low-level details and enriches Redis basic functionality so that more complex use-cases can be handled easily. If you are new to queues you may wonder why they are needed after all. Queues can solve many different problems in an elegant way, from smoothing out processing peaks to creating robust communication channels between microservices or offloading heavy work from one server to many smaller workers, etc. Getting Started Bull is a public npm package and can be installed using either npm or yarn: Bash $ npm install bull --save or Bash $ yarn add bull In order to work with Bull, you also need to have a Redis server running. For local development you can easily install it using docker . Bull will by default try to connect to a Redis server running on localhost:6379 Simple Queues A queue is simply created by instantiating a Bull instance: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); A queue instance can normally have 3 main different roles: A job producer, a job consumer or/and an events listener. Although one given instance can be used for the 3 roles, normally the producer and consumer are divided into several instances. A given queue, always referred by its instantiation name ( my-first-queue in the example above ), can have many producers, many consumers, and many listeners. An important aspect is that producers can add jobs to a queue even if there are no consumers available at that moment: queues provide asynchronous communication, which is one of the features that makes them so powerful. Conversely, you can have one or more workers consuming jobs from the queue, which will consume the jobs in a given order: FIFO (the default), LIFO or according to priorities. Talking about workers, they can run in the same or different processes, in the same machine or in a cluster. Redis will act as a common point, and as long as a consumer or producer can connect to Redis, they will be able to co-operate processing the jobs. Producers A job producer is simply some Node program that adds jobs to a queue, like this: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); const job = await myFirstQueue . add ({ foo : \"bar\" , }); As you can see a job is just a javascript object. This object needs to be serializable, more concrete it should be possible to JSON stringify it, since that is how it is going to be stored in Redis. It is also possible to provide an options object after the job's data, but we will cover that later on. Consumers A consumer or worker (we will use these two terms interchangeably in this guide), is nothing more than a Node program that defines a process function like so: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); myFirstQueue . process ( async ( job ) => { return doSomething ( job . data ); }); The process function will be called every time the worker is idling and there are jobs to process in the queue. Since the consumer does not need to be online when the jobs are added it could happen that the queue has already many jobs waiting in it, so then the process will be kept busy processing jobs one by one until all of them are done. In the example above we define the process function as async , which is the highly recommended way to define them. If your Node runtime does not support async/await, then you can just return a promise at the end of the process function for a similar result. The value returned by your process function will be stored in the jobs object and can be accessed later on, for example in a listener for the completed event. Sometimes you need to provide job's progress information to an external listener, this can be easily accomplished by using the progress method on the job object: JavaScript myFirstQueue . process ( async ( job ) => { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; job . progress ( progress ); } }); Listeners Finally, you can just listen to events that happen in the queue. Listeners can be local, meaning that they only will receive notifications produced in the given queue instance , or global, meaning that they listen to all the events for a given queue. So you can attach a listener to any instance, even instances that are acting as consumers or producers. But note that a local event will never fire if the queue is not a consumer or producer, you will need to use global events in that case. JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); // Define a local completed event myFirstQueue . on ( \"completed\" , ( job , result ) => { console . log ( `Job completed with result ${ result } ` ); }); A Job's Lifecycle In order to use the full potential of Bull queues, it is important to understand the lifecycle of a job. From the moment a producer calls the add method on a queue instance, a job enters a lifecycle where it will be in different states, until its completion or failure (although technically a failed job could be retried and get a new lifecycle). When a job is added to a queue it can be in one of two states, it can either be in the \"wait\" status, which is, in fact, a waiting list, where all jobs must enter before they can be processed, or it can be in a \"delayed\" status: a delayed status implies that the job is waiting for some timeout or to be promoted for being processed, however, a delayed job will not be processed directly, instead it will be placed at the beginning of the waiting list and processed as soon as a worker is idle. The next state for a job is the \"active\" state. The active state is represented by a set, and are jobs that are currently being processed, i.e. they are running in the process function explained in the previous chapter. A job can be in the active state for an unlimited amount of time until the process is completed or an exception is thrown so that the job will end in either the \"completed\" or the \"failed\" status. Stalled jobs In Bull, we defined the concept of stalled jobs. A stalled job is a job that is being processed but where Bull suspects that the process function has hanged. This happens when the process function is processing a job and is keeping the CPU so busy that the worker is not able to tell the queue that it is still working on the job. When a job stalls, depending on the job settings the job can be retried by another idle worker or it can just move to the failed status. Stalled jobs can be avoided by either making sure that the process function does not keep Node event loop busy for too long (we are talking several seconds with Bull default options), or by using a separate sandboxed processor . Events A Queue in Bull generates a handful of events that are useful in many use cases. Events can be local for a given queue instance (a worker), for example, if a job is completed in a given worker a local event will be emitted just for that instance. However, it is possible to listen to all events, by prefixing global: to the local event name. Then we can listen to all the events produced by all the workers of a given queue. A local complete event: JavaScript queue . on ( \"completed\" , ( job ) => { console . log ( `Job with id ${ job . id } has been completed` ); }); Whereas the global version of the event can be listen to with: JavaScript queue . on ( \"global:completed\" , ( jobId ) => { console . log ( `Job with id ${ jobId } has been completed` ); }); Note that signatures of global events are slightly different than their local counterpart, in the example above it is only sent the job id not a complete instance of the job itself, this is done for performance reasons. The list of available events can be found in the reference . Queue Options A queue can be instantiated with some useful options, for instance, you can specify the location and password of your Redis server, as well as some other useful settings. All these settings are described in Bull's reference and we will not repeat them here, however, we will go through some use cases. Rate Limiter It is possible to create queues that limit the number of jobs processed in a unit of time. The limiter is defined per queue, independently of the number of workers, so you can scale horizontally and still limiting the rate of processing easily: JavaScript // Limit queue to max 1000 jobs per 5000 milliseconds. const myRateLimitedQueue = new Queue ( \"rateLimited\" , { limiter : { max : 1000 , duration : 5000 , }, }); When a queue hits the rate limit, requested jobs will join the delayed queue. Named jobs It is possible to give names to jobs. This does not change any of the mechanics of the queue but can be used for clearer code and better visualization in UI tools: JavaScript // Jobs producer const myJob = await transcoderQueue . add ( \"image\" , { input : \"myimagefile\" }); const myJob = await transcoderQueue . add ( \"audio\" , { input : \"myaudiofile\" }); const myJob = await transcoderQueue . add ( \"video\" , { input : \"myvideofile\" }); JavaScript // Worker transcoderQueue . process ( \"image\" , processImage ); transcoderQueue . process ( \"audio\" , processAudio ); transcoderQueue . process ( \"video\" , processVideo ); Just keep in mind that every queue instance is required to provide a processor for every named job or you will get an exception. Sandboxed Processors As explained above, when defining a process function, it is also possible to provide a concurrency setting. This setting allows the worker to process several jobs in parallel. The jobs are still processed in the same Node process, and if the jobs are very IO intensive they will be handled just fine. Sometimes jobs are more CPU intensive which could lock the Node event loop for too long and Bull could decide the job has been stalled. To avoid this situation, it is possible to run the process functions in separate Node processes. In this case, the concurrency parameter will decide the maximum number of concurrent processes that are allowed to run. We call this kind of processes for \"sandboxed\" processes, and they also have the property that if the crash they will not affect any other process, and a new process will be spawned automatically to replace it. Job types The default job type in Bull is \"FIFO\" (first in first out), meaning that the jobs are processed in the same order they are coming into the queue. Sometimes it is useful to process jobs in a different order. LIFO Lifo (last in first out) means that jobs are added to the beginning of the queue and therefore will be processed as soon as the worker is idle. JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { lifo : true }); Delayed It is also possible to add jobs to the queue that are delayed a certain amount of time before they will be processed. Note that the delay parameter means the minimum amount of time the job will wait before being processed. When the delay time has passed the job will be moved to the beginning of the queue and be processed as soon as a worker is idle. JavaScript // Delayed 5 seconds const myJob = await myqueue . add ({ foo : \"bar\" }, { delay : 5000 }); Prioritized Jobs can be added to a queue with a priority value. Jobs with higher priority will be processed before than jobs with lower priority. Highest priority is 1, and lower the larger integer you use. Keep in mind that priority queues are a bit slower than a standard queue (currently insertion time O(n), n being the number of jobs currently waiting in the queue, instead of O(1) for standard queues). JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { priority : 3 }); Repeatable Repeatable jobs are special jobs that repeat themselves indefinitely or until a given maximum date or the number of repetitions has been reached, according to a cron specification or a time interval. JavaScript // Repeat every 10 seconds for 100 times. const myJob = await myqueue . add ( { foo : \"bar\" }, { repeat : { every : 10000 , limit : 100 , }, } ); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); There are some important considerations regarding repeatable jobs: Bull is smart enough not to add the same repeatable job if the repeat options are the same. (CAUTION: A job id is part of the repeat options since: https://github.com/OptimalBits/bull/pull/603, therefore passing job ids will allow jobs with the same cron to be inserted in the queue) If there are no workers running, repeatable jobs will not accumulate next time a worker is online. repeatable jobs can be removed using the removeRepeatable method.","title":"Guide"},{"location":"docs/bull/bull/develop/#what-is-bull","text":"Bull is a Node library that implements a fast and robust queue system based on redis . Although it is possible to implement queues directly using Redis commands, this library provides an API that takes care of all the low-level details and enriches Redis basic functionality so that more complex use-cases can be handled easily. If you are new to queues you may wonder why they are needed after all. Queues can solve many different problems in an elegant way, from smoothing out processing peaks to creating robust communication channels between microservices or offloading heavy work from one server to many smaller workers, etc.","title":"What is Bull?"},{"location":"docs/bull/bull/develop/#getting-started","text":"Bull is a public npm package and can be installed using either npm or yarn: Bash $ npm install bull --save or Bash $ yarn add bull In order to work with Bull, you also need to have a Redis server running. For local development you can easily install it using docker . Bull will by default try to connect to a Redis server running on localhost:6379","title":"Getting Started"},{"location":"docs/bull/bull/develop/#simple-queues","text":"A queue is simply created by instantiating a Bull instance: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); A queue instance can normally have 3 main different roles: A job producer, a job consumer or/and an events listener. Although one given instance can be used for the 3 roles, normally the producer and consumer are divided into several instances. A given queue, always referred by its instantiation name ( my-first-queue in the example above ), can have many producers, many consumers, and many listeners. An important aspect is that producers can add jobs to a queue even if there are no consumers available at that moment: queues provide asynchronous communication, which is one of the features that makes them so powerful. Conversely, you can have one or more workers consuming jobs from the queue, which will consume the jobs in a given order: FIFO (the default), LIFO or according to priorities. Talking about workers, they can run in the same or different processes, in the same machine or in a cluster. Redis will act as a common point, and as long as a consumer or producer can connect to Redis, they will be able to co-operate processing the jobs.","title":"Simple Queues"},{"location":"docs/bull/bull/develop/#producers","text":"A job producer is simply some Node program that adds jobs to a queue, like this: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); const job = await myFirstQueue . add ({ foo : \"bar\" , }); As you can see a job is just a javascript object. This object needs to be serializable, more concrete it should be possible to JSON stringify it, since that is how it is going to be stored in Redis. It is also possible to provide an options object after the job's data, but we will cover that later on.","title":"Producers"},{"location":"docs/bull/bull/develop/#consumers","text":"A consumer or worker (we will use these two terms interchangeably in this guide), is nothing more than a Node program that defines a process function like so: JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); myFirstQueue . process ( async ( job ) => { return doSomething ( job . data ); }); The process function will be called every time the worker is idling and there are jobs to process in the queue. Since the consumer does not need to be online when the jobs are added it could happen that the queue has already many jobs waiting in it, so then the process will be kept busy processing jobs one by one until all of them are done. In the example above we define the process function as async , which is the highly recommended way to define them. If your Node runtime does not support async/await, then you can just return a promise at the end of the process function for a similar result. The value returned by your process function will be stored in the jobs object and can be accessed later on, for example in a listener for the completed event. Sometimes you need to provide job's progress information to an external listener, this can be easily accomplished by using the progress method on the job object: JavaScript myFirstQueue . process ( async ( job ) => { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; job . progress ( progress ); } });","title":"Consumers"},{"location":"docs/bull/bull/develop/#listeners","text":"Finally, you can just listen to events that happen in the queue. Listeners can be local, meaning that they only will receive notifications produced in the given queue instance , or global, meaning that they listen to all the events for a given queue. So you can attach a listener to any instance, even instances that are acting as consumers or producers. But note that a local event will never fire if the queue is not a consumer or producer, you will need to use global events in that case. JavaScript const myFirstQueue = new Bull ( \"my-first-queue\" ); // Define a local completed event myFirstQueue . on ( \"completed\" , ( job , result ) => { console . log ( `Job completed with result ${ result } ` ); });","title":"Listeners"},{"location":"docs/bull/bull/develop/#a-jobs-lifecycle","text":"In order to use the full potential of Bull queues, it is important to understand the lifecycle of a job. From the moment a producer calls the add method on a queue instance, a job enters a lifecycle where it will be in different states, until its completion or failure (although technically a failed job could be retried and get a new lifecycle). When a job is added to a queue it can be in one of two states, it can either be in the \"wait\" status, which is, in fact, a waiting list, where all jobs must enter before they can be processed, or it can be in a \"delayed\" status: a delayed status implies that the job is waiting for some timeout or to be promoted for being processed, however, a delayed job will not be processed directly, instead it will be placed at the beginning of the waiting list and processed as soon as a worker is idle. The next state for a job is the \"active\" state. The active state is represented by a set, and are jobs that are currently being processed, i.e. they are running in the process function explained in the previous chapter. A job can be in the active state for an unlimited amount of time until the process is completed or an exception is thrown so that the job will end in either the \"completed\" or the \"failed\" status.","title":"A Job's Lifecycle"},{"location":"docs/bull/bull/develop/#stalled-jobs","text":"In Bull, we defined the concept of stalled jobs. A stalled job is a job that is being processed but where Bull suspects that the process function has hanged. This happens when the process function is processing a job and is keeping the CPU so busy that the worker is not able to tell the queue that it is still working on the job. When a job stalls, depending on the job settings the job can be retried by another idle worker or it can just move to the failed status. Stalled jobs can be avoided by either making sure that the process function does not keep Node event loop busy for too long (we are talking several seconds with Bull default options), or by using a separate sandboxed processor .","title":"Stalled jobs"},{"location":"docs/bull/bull/develop/#events","text":"A Queue in Bull generates a handful of events that are useful in many use cases. Events can be local for a given queue instance (a worker), for example, if a job is completed in a given worker a local event will be emitted just for that instance. However, it is possible to listen to all events, by prefixing global: to the local event name. Then we can listen to all the events produced by all the workers of a given queue. A local complete event: JavaScript queue . on ( \"completed\" , ( job ) => { console . log ( `Job with id ${ job . id } has been completed` ); }); Whereas the global version of the event can be listen to with: JavaScript queue . on ( \"global:completed\" , ( jobId ) => { console . log ( `Job with id ${ jobId } has been completed` ); }); Note that signatures of global events are slightly different than their local counterpart, in the example above it is only sent the job id not a complete instance of the job itself, this is done for performance reasons. The list of available events can be found in the reference .","title":"Events"},{"location":"docs/bull/bull/develop/#queue-options","text":"A queue can be instantiated with some useful options, for instance, you can specify the location and password of your Redis server, as well as some other useful settings. All these settings are described in Bull's reference and we will not repeat them here, however, we will go through some use cases.","title":"Queue Options"},{"location":"docs/bull/bull/develop/#rate-limiter","text":"It is possible to create queues that limit the number of jobs processed in a unit of time. The limiter is defined per queue, independently of the number of workers, so you can scale horizontally and still limiting the rate of processing easily: JavaScript // Limit queue to max 1000 jobs per 5000 milliseconds. const myRateLimitedQueue = new Queue ( \"rateLimited\" , { limiter : { max : 1000 , duration : 5000 , }, }); When a queue hits the rate limit, requested jobs will join the delayed queue.","title":"Rate Limiter"},{"location":"docs/bull/bull/develop/#named-jobs","text":"It is possible to give names to jobs. This does not change any of the mechanics of the queue but can be used for clearer code and better visualization in UI tools: JavaScript // Jobs producer const myJob = await transcoderQueue . add ( \"image\" , { input : \"myimagefile\" }); const myJob = await transcoderQueue . add ( \"audio\" , { input : \"myaudiofile\" }); const myJob = await transcoderQueue . add ( \"video\" , { input : \"myvideofile\" }); JavaScript // Worker transcoderQueue . process ( \"image\" , processImage ); transcoderQueue . process ( \"audio\" , processAudio ); transcoderQueue . process ( \"video\" , processVideo ); Just keep in mind that every queue instance is required to provide a processor for every named job or you will get an exception.","title":"Named jobs"},{"location":"docs/bull/bull/develop/#sandboxed-processors","text":"As explained above, when defining a process function, it is also possible to provide a concurrency setting. This setting allows the worker to process several jobs in parallel. The jobs are still processed in the same Node process, and if the jobs are very IO intensive they will be handled just fine. Sometimes jobs are more CPU intensive which could lock the Node event loop for too long and Bull could decide the job has been stalled. To avoid this situation, it is possible to run the process functions in separate Node processes. In this case, the concurrency parameter will decide the maximum number of concurrent processes that are allowed to run. We call this kind of processes for \"sandboxed\" processes, and they also have the property that if the crash they will not affect any other process, and a new process will be spawned automatically to replace it.","title":"Sandboxed Processors"},{"location":"docs/bull/bull/develop/#job-types","text":"The default job type in Bull is \"FIFO\" (first in first out), meaning that the jobs are processed in the same order they are coming into the queue. Sometimes it is useful to process jobs in a different order.","title":"Job types"},{"location":"docs/bull/bull/develop/#lifo","text":"Lifo (last in first out) means that jobs are added to the beginning of the queue and therefore will be processed as soon as the worker is idle. JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { lifo : true });","title":"LIFO"},{"location":"docs/bull/bull/develop/#delayed","text":"It is also possible to add jobs to the queue that are delayed a certain amount of time before they will be processed. Note that the delay parameter means the minimum amount of time the job will wait before being processed. When the delay time has passed the job will be moved to the beginning of the queue and be processed as soon as a worker is idle. JavaScript // Delayed 5 seconds const myJob = await myqueue . add ({ foo : \"bar\" }, { delay : 5000 });","title":"Delayed"},{"location":"docs/bull/bull/develop/#prioritized","text":"Jobs can be added to a queue with a priority value. Jobs with higher priority will be processed before than jobs with lower priority. Highest priority is 1, and lower the larger integer you use. Keep in mind that priority queues are a bit slower than a standard queue (currently insertion time O(n), n being the number of jobs currently waiting in the queue, instead of O(1) for standard queues). JavaScript const myJob = await myqueue . add ({ foo : \"bar\" }, { priority : 3 });","title":"Prioritized"},{"location":"docs/bull/bull/develop/#repeatable","text":"Repeatable jobs are special jobs that repeat themselves indefinitely or until a given maximum date or the number of repetitions has been reached, according to a cron specification or a time interval. JavaScript // Repeat every 10 seconds for 100 times. const myJob = await myqueue . add ( { foo : \"bar\" }, { repeat : { every : 10000 , limit : 100 , }, } ); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); There are some important considerations regarding repeatable jobs: Bull is smart enough not to add the same repeatable job if the repeat options are the same. (CAUTION: A job id is part of the repeat options since: https://github.com/OptimalBits/bull/pull/603, therefore passing job ids will allow jobs with the same cron to be inserted in the queue) If there are no workers running, repeatable jobs will not accumulate next time a worker is online. repeatable jobs can be removed using the removeRepeatable method.","title":"Repeatable"},{"location":"docs/bull/bull/important-notes/","text":"\u961f\u5217\u7684\u76ee\u6807\u662f\u201c\u81f3\u5c11\u4e00\u6b21\u201d\u5de5\u4f5c\u7b56\u7565\u3002 \u8fd9\u610f\u5473\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4f5c\u4e1a\u53ef\u4ee5\u88ab\u5904\u7406\u591a\u6b21\u3002 \u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u53d1\u751f\u5728 worker \u5728\u6574\u4e2a\u5904\u7406\u8fc7\u7a0b\u4e2d\u672a\u80fd\u4e3a\u7ed9\u5b9a\u7684\u4f5c\u4e1a\u4fdd\u6301\u9501\u65f6\u3002 \u5f53\u4e00\u4e2a\u5de5\u4eba\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u4f5c\u4e1a\u65f6\uff0c\u5b83\u5c06\u4fdd\u6301\u8fd9\u4e2a\u4f5c\u4e1a\u201c\u9501\u5b9a\u201d\uff0c\u8fd9\u6837\u5176\u4ed6\u5de5\u4eba\u5c31\u4e0d\u80fd\u5904\u7406\u5b83\u4e86\u3002 \u7406\u89e3\u9501\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u5f88\u91cd\u8981\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u60a8\u7684\u4f5c\u4e1a-\u5931\u53bb\u5b83\u4eec\u7684\u9501-\uff0c\u5e76\u56e0\u6b64\u800c\u88ab\u91cd\u65b0\u542f\u52a8\u3002 \u9501\u5b9a\u662f\u901a\u8fc7\u5728\u5185\u90e8\u4e3a lockRenewTime \u95f4\u9694(\u901a\u5e38\u662f lockDuration \u7684\u4e00\u534a)\u521b\u5efa\u4e00\u4e2a lockDuration \u7684\u9501\u6765\u5b9e\u73b0\u7684\u3002 \u5982\u679c\u5728\u66f4\u65b0\u9501\u4e4b\u524d lockDuration \u5df2\u7ecf\u8fc7\u671f\uff0c\u4f5c\u4e1a\u5c06\u88ab\u8ba4\u4e3a\u662f\u505c\u6ede\u7684\uff0c\u5e76\u81ea\u52a8\u91cd\u65b0\u542f\u52a8;\u5b83\u5c06\u88ab \u53cc\u91cd\u5904\u7406 \u3002 \u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u4ee5\u4e0b\u60c5\u51b5: \u8fd0\u884c\u4f5c\u4e1a\u5904\u7406\u5668\u7684 Node \u8fdb\u7a0b\u610f\u5916\u7ec8\u6b62\u3002 \u60a8\u7684\u4f5c\u4e1a\u5904\u7406\u5668\u8fc7\u4e8e cpu \u5bc6\u96c6\u578b\uff0c\u5bfc\u81f4 Node \u4e8b\u4ef6\u5faa\u73af\u9677\u5165\u505c\u987f\uff0c\u56e0\u6b64\uff0cBull \u65e0\u6cd5\u66f4\u65b0\u4f5c\u4e1a\u9501 (\u8bf7\u53c2\u9605 #488 \u4e86\u89e3\u6211\u4eec\u5982\u4f55\u66f4\u597d\u5730\u68c0\u6d4b\u5230\u8fd9\u4e00\u70b9). \u53ef\u4ee5\u901a\u8fc7\u5c06\u4f5c\u4e1a\u5904\u7406\u5668\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u90e8\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u5355\u4e2a\u90e8\u5206\u963b\u585e Node \u4e8b\u4ef6\u5faa\u73af\u3002 \u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4e3a lockDuration \u8bbe\u7f6e\u4f20\u9012\u4e00\u4e2a\u8f83\u5927\u7684\u503c(\u8fd9\u6837\u505a\u7684\u4ee3\u4ef7\u662f\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u6765\u8bc6\u522b\u771f\u6b63\u505c\u6b62\u7684\u5de5\u4f5c)\u3002 \u56e0\u6b64\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4fa6\u542c stalled \u4e8b\u4ef6\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\u5230\u9519\u8bef\u76d1\u89c6\u7cfb\u7edf\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4f5c\u4e1a\u53ef\u80fd\u4f1a\u5f97\u5230\u53cc\u91cd\u5904\u7406\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u6709\u95ee\u9898\u7684\u4f5c\u4e1a\u4e0d\u4f1a\u65e0\u9650\u671f\u91cd\u542f(\u4f8b\u5982\uff0c\u5982\u679c\u4f5c\u4e1a\u5904\u7406\u5668\u603b\u662f\u4f7f\u5176 Node \u8fdb\u7a0b\u5d29\u6e83)\uff0c\u4f5c\u4e1a\u5c06\u4ece\u505c\u6b62\u72b6\u6001\u4e2d\u6062\u590d\uff0c\u6700\u5927\u6062\u590d\u6b21\u6570\u4e3a maxStalledCount (\u9ed8\u8ba4\u503c\u4e3a 1 )\u3002 Important Notes The queue aims for an \"at least once\" working strategy. This means that in some situations, a job could be processed more than once. This mostly happens when a worker fails to keep a lock for a given job during the total duration of the processing. When a worker is processing a job it will keep the job \"locked\" so other workers can't process it. It's important to understand how locking works to prevent your jobs from losing their lock - becoming stalled - and being restarted as a result. Locking is implemented internally by creating a lock for lockDuration on interval lockRenewTime (which is usually half lockDuration ). If lockDuration elapses before the lock can be renewed, the job will be considered stalled and is automatically restarted; it will be double processed . This can happen when: The Node process running your job processor unexpectedly terminates. Your job processor was too CPU-intensive and stalled the Node event loop, and as a result, Bull couldn't renew the job lock (see #488 for how we might better detect this). You can fix this by breaking your job processor into smaller parts so that no single part can block the Node event loop. Alternatively, you can pass a larger value for the lockDuration setting (with the tradeoff being that it will take longer to recognize a real stalled job). As such, you should always listen for the stalled event and log this to your error monitoring system, as this means your jobs are likely getting double-processed. As a safeguard so problematic jobs won't get restarted indefinitely (e.g. if the job processor always crashes its Node process), jobs will be recovered from a stalled state a maximum of maxStalledCount times (default: 1 ).","title":"\u91cd\u8981\u7684\u7b14\u8bb0"},{"location":"docs/bull/bull/important-notes/#important-notes","text":"The queue aims for an \"at least once\" working strategy. This means that in some situations, a job could be processed more than once. This mostly happens when a worker fails to keep a lock for a given job during the total duration of the processing. When a worker is processing a job it will keep the job \"locked\" so other workers can't process it. It's important to understand how locking works to prevent your jobs from losing their lock - becoming stalled - and being restarted as a result. Locking is implemented internally by creating a lock for lockDuration on interval lockRenewTime (which is usually half lockDuration ). If lockDuration elapses before the lock can be renewed, the job will be considered stalled and is automatically restarted; it will be double processed . This can happen when: The Node process running your job processor unexpectedly terminates. Your job processor was too CPU-intensive and stalled the Node event loop, and as a result, Bull couldn't renew the job lock (see #488 for how we might better detect this). You can fix this by breaking your job processor into smaller parts so that no single part can block the Node event loop. Alternatively, you can pass a larger value for the lockDuration setting (with the tradeoff being that it will take longer to recognize a real stalled job). As such, you should always listen for the stalled event and log this to your error monitoring system, as this means your jobs are likely getting double-processed. As a safeguard so problematic jobs won't get restarted indefinitely (e.g. if the job processor always crashes its Node process), jobs will be recovered from a stalled state a maximum of maxStalledCount times (default: 1 ).","title":"Important Notes"},{"location":"docs/bull/bull/install/","text":"Npm \u5b89\u88c5: Bash npm install bull --save Yarn \u5b89\u88c5: Bash yarn add bull Requirements: Bull \u8981\u6c42 Redis \u7248\u672c\u5927\u4e8e\u6216\u7b49\u4e8e 2.8.18 Typescript \u5b9a\u4e49 Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull \u5b9a\u4e49\u76ee\u524d\u7ef4\u62a4\u5728 DefinitelyTyped repo\u3002","title":"\u5b89\u88c5"},{"location":"docs/bull/bull/install/#typescript","text":"Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull \u5b9a\u4e49\u76ee\u524d\u7ef4\u62a4\u5728 DefinitelyTyped repo\u3002","title":"Typescript \u5b9a\u4e49"},{"location":"docs/bull/bull/introduction/","text":"Bull \u662f BullMQ \u7684\u9057\u7559\u7248\u672c\u3002\u7531\u4e8e\u5b83\u5728\u4eca\u5929\u4ecd\u7136\u88ab\u5927\u91cf\u4f7f\u7528\uff0c\u6240\u4ee5\u5b83\u4e5f\u88ab\u7528\u4e8e bug \u7684\u7ef4\u62a4\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u65b0\u7684\u4e3b\u8981\u529f\u80fd\u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u4e00\u4e2a\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684\u961f\u5217\u5e93\uff0c\u4f60\u4e0d\u9700\u8981\u66f4\u597d\u7684 typescript \u96c6\u6210\uff0c\u4e5f\u4e0d\u9700\u8981\u6700\u65b0\u7684\u7279\u6027\uff0c\u4f60\u53ef\u4ee5\u5728\u672a\u6765\u51e0\u5e74\u4f7f\u7528\u8fd9\u4e2a\u5e93\u3002 \u6240\u4f7f\u7528\u7684 \u957f\u671f\u4ee5\u6765\uff0cBull \u4e00\u76f4\u662f NodeJS \u751f\u6001\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u8bb8\u591a\u7ec4\u7ec7\u5728\u5546\u4e1a\u548c\u5f00\u6e90\u9879\u76ee\u4e2d\u90fd\u4f7f\u7528\u4e86 Bull\u3002 \u7279\u522b\u63d0\u5230\u51e0\u70b9: The fastest, most reliable, Redis-based queue for Node. Carefully written for rock solid stability and atomicity. Sponsors \u00b7 Features \u00b7 UIs \u00b7 Install \u00b7 Quick Guide \u00b7 Documentation Check the new Guide! \ud83d\udcfb \u65b0\u95fb\u548c\u66f4\u65b0 Follow me on Twitter for important news and updates. \ud83d\udee0 \u624b\u518c You can find tutorials and news in this blog: https://blog.taskforce.sh/ \u88ab\u4f7f\u7528 Bull is popular among large and small organizations, like the following ones: BullMQ \u5982\u679c\u4f60\u60f3\u5f00\u59cb\u4f7f\u7528\u5b8c\u5168\u7528 Typescript \u7f16\u5199\u7684\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\u7684 Bull\uff0c\u6b22\u8fce\u4f7f\u7528\u65b0\u7684 repo \u8fd9\u91cc \u3002 \u5426\u5219\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4ecd\u7136\u4f7f\u7528 Bull\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684\u4ee3\u7801\u5e93\u3002 \ud83d\ude80 \u8d21\u732e \ud83d\ude80 If you need high quality production Redis instances for your Bull projects, please consider subscribing to RedisGreen , leaders in Redis hosting that works perfectly with Bull. Use the promo code \"BULLMQ\" when signing up to help us sponsor the development of Bull! \u5b98\u65b9\u7684\u524d\u7aef Supercharge your queues with a professional front end: Get a complete overview of all your queues. Inspect jobs, search, retry, or promote delayed jobs. Metrics and statistics. and many more features. Sign up at Taskforce.sh Bull \u7279\u6027 [x] Minimal CPU usage due to a polling-free design. [x] Robust design based on Redis. [x] Delayed jobs. [x] Schedule and repeat jobs according to a cron specification. [x] Rate limiter for jobs. [x] Retries. [x] Priority. [x] Concurrency. [x] Pause/resume\u2014globally or locally. [x] Multiple job types per queue. [x] Threaded (sandboxed) processing functions. [x] Automatic recovery from process crashes. And coming up on the roadmap... [ ] Job completion acknowledgement (you can use the message queue pattern in the meantime). [ ] Parent-child jobs relationships. UIs There are a few third-party UIs that you can use for monitoring: BullMQ Taskforce Bull v3 Taskforce bull-board bull-repl bull-monitor Monitoro Bull <= v2 Matador react-bull Toureiro \u76d1\u6d4b\u548c\u62a5\u8b66 With Prometheus Bull Queue Exporter \u7279\u5f81\u6bd4\u8f83 Since there are a few job queue solutions, here is a table comparing them: Feature Bullmq-Pro Bullmq Bull Kue Bee Agenda Backend redis redis redis redis redis mongo Observables \u2713 Group Rate Limit \u2713 Group Support \u2713 Parent/Child Dependencies \u2713 \u2713 Priorities \u2713 \u2713 \u2713 \u2713 \u2713 Concurrency \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Delayed jobs \u2713 \u2713 \u2713 \u2713 \u2713 Global events \u2713 \u2713 \u2713 \u2713 Rate Limiter \u2713 \u2713 \u2713 Pause/Resume \u2713 \u2713 \u2713 \u2713 Sandboxed worker \u2713 \u2713 \u2713 Repeatable jobs \u2713 \u2713 \u2713 \u2713 Atomic ops \u2713 \u2713 \u2713 \u2713 Persistence \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 UI \u2713 \u2713 \u2713 \u2713 \u2713 Optimized for Jobs / Messages Jobs / Messages Jobs / Messages Jobs Messages Jobs \u5b89\u88c5 Bash npm install bull --save or Bash yarn add bull Requirements: Bull requires a Redis version greater than or equal to 2.8.18 . Typescript \u5b9a\u4e49 Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull Definitions are currently maintained in the DefinitelyTyped repo. \u8d21\u732e We welcome all types of contributions, either code fixes, new features or doc improvements. Code formatting is enforced by prettier . For commits please follow conventional commits convention . All code must pass lint rules and test suites before it can be merged into develop.","title":"\u4ecb\u7ecd"},{"location":"docs/bull/bull/introduction/#_1","text":"\u957f\u671f\u4ee5\u6765\uff0cBull \u4e00\u76f4\u662f NodeJS \u751f\u6001\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u8bb8\u591a\u7ec4\u7ec7\u5728\u5546\u4e1a\u548c\u5f00\u6e90\u9879\u76ee\u4e2d\u90fd\u4f7f\u7528\u4e86 Bull\u3002 \u7279\u522b\u63d0\u5230\u51e0\u70b9: The fastest, most reliable, Redis-based queue for Node. Carefully written for rock solid stability and atomicity. Sponsors \u00b7 Features \u00b7 UIs \u00b7 Install \u00b7 Quick Guide \u00b7 Documentation Check the new Guide!","title":"\u6240\u4f7f\u7528\u7684"},{"location":"docs/bull/bull/introduction/#_2","text":"Follow me on Twitter for important news and updates.","title":"\ud83d\udcfb \u65b0\u95fb\u548c\u66f4\u65b0"},{"location":"docs/bull/bull/introduction/#_3","text":"You can find tutorials and news in this blog: https://blog.taskforce.sh/","title":"\ud83d\udee0 \u624b\u518c"},{"location":"docs/bull/bull/introduction/#_4","text":"Bull is popular among large and small organizations, like the following ones:","title":"\u88ab\u4f7f\u7528"},{"location":"docs/bull/bull/introduction/#bullmq","text":"\u5982\u679c\u4f60\u60f3\u5f00\u59cb\u4f7f\u7528\u5b8c\u5168\u7528 Typescript \u7f16\u5199\u7684\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\u7684 Bull\uff0c\u6b22\u8fce\u4f7f\u7528\u65b0\u7684 repo \u8fd9\u91cc \u3002 \u5426\u5219\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4ecd\u7136\u4f7f\u7528 Bull\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u7ecf\u8fc7\u6218\u6597\u6d4b\u8bd5\u7684\u4ee3\u7801\u5e93\u3002","title":"BullMQ"},{"location":"docs/bull/bull/introduction/#_5","text":"If you need high quality production Redis instances for your Bull projects, please consider subscribing to RedisGreen , leaders in Redis hosting that works perfectly with Bull. Use the promo code \"BULLMQ\" when signing up to help us sponsor the development of Bull!","title":"\ud83d\ude80 \u8d21\u732e \ud83d\ude80"},{"location":"docs/bull/bull/introduction/#_6","text":"Supercharge your queues with a professional front end: Get a complete overview of all your queues. Inspect jobs, search, retry, or promote delayed jobs. Metrics and statistics. and many more features. Sign up at Taskforce.sh","title":"\u5b98\u65b9\u7684\u524d\u7aef"},{"location":"docs/bull/bull/introduction/#bull","text":"[x] Minimal CPU usage due to a polling-free design. [x] Robust design based on Redis. [x] Delayed jobs. [x] Schedule and repeat jobs according to a cron specification. [x] Rate limiter for jobs. [x] Retries. [x] Priority. [x] Concurrency. [x] Pause/resume\u2014globally or locally. [x] Multiple job types per queue. [x] Threaded (sandboxed) processing functions. [x] Automatic recovery from process crashes. And coming up on the roadmap... [ ] Job completion acknowledgement (you can use the message queue pattern in the meantime). [ ] Parent-child jobs relationships.","title":"Bull \u7279\u6027"},{"location":"docs/bull/bull/introduction/#uis","text":"There are a few third-party UIs that you can use for monitoring: BullMQ Taskforce Bull v3 Taskforce bull-board bull-repl bull-monitor Monitoro Bull <= v2 Matador react-bull Toureiro","title":"UIs"},{"location":"docs/bull/bull/introduction/#_7","text":"With Prometheus Bull Queue Exporter","title":"\u76d1\u6d4b\u548c\u62a5\u8b66"},{"location":"docs/bull/bull/introduction/#_8","text":"Since there are a few job queue solutions, here is a table comparing them: Feature Bullmq-Pro Bullmq Bull Kue Bee Agenda Backend redis redis redis redis redis mongo Observables \u2713 Group Rate Limit \u2713 Group Support \u2713 Parent/Child Dependencies \u2713 \u2713 Priorities \u2713 \u2713 \u2713 \u2713 \u2713 Concurrency \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Delayed jobs \u2713 \u2713 \u2713 \u2713 \u2713 Global events \u2713 \u2713 \u2713 \u2713 Rate Limiter \u2713 \u2713 \u2713 Pause/Resume \u2713 \u2713 \u2713 \u2713 Sandboxed worker \u2713 \u2713 \u2713 Repeatable jobs \u2713 \u2713 \u2713 \u2713 Atomic ops \u2713 \u2713 \u2713 \u2713 Persistence \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 UI \u2713 \u2713 \u2713 \u2713 \u2713 Optimized for Jobs / Messages Jobs / Messages Jobs / Messages Jobs Messages Jobs","title":"\u7279\u5f81\u6bd4\u8f83"},{"location":"docs/bull/bull/introduction/#_9","text":"Bash npm install bull --save or Bash yarn add bull Requirements: Bull requires a Redis version greater than or equal to 2.8.18 .","title":"\u5b89\u88c5"},{"location":"docs/bull/bull/introduction/#typescript","text":"Bash npm install @types/bull --save-dev Bash yarn add --dev @types/bull Definitions are currently maintained in the DefinitelyTyped repo.","title":"Typescript \u5b9a\u4e49"},{"location":"docs/bull/bull/introduction/#_10","text":"We welcome all types of contributions, either code fixes, new features or doc improvements. Code formatting is enforced by prettier . For commits please follow conventional commits convention . All code must pass lint rules and test suites before it can be merged into develop.","title":"\u8d21\u732e"},{"location":"docs/bull/bull/quick-guide/","text":"\u57fa\u672c\u7528\u6cd5 JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" } }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" }); \u4f7f\u7528\u627f\u8bfa \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 return promises \u6765\u4ee3\u66ff done \u56de\u8c03: JavaScript videoQueue . process ( function ( job ) { // don't forget to remove the done callback! // Simply return a promise return fetchVideo ( job . data . url ). then ( transcodeVideo ); // Handles promise rejection return Promise . reject ( new Error ( \"error transcoding\" )); // Passes the value the promise is resolved with to the \"completed\" event return Promise . resolve ({ framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); // same as return Promise . reject ( new Error ( \"some unexpected error\" )); }); \u72ec\u7acb\u7684\u8fdb\u7a0b \u8fdb\u7a0b\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6709\u51e0\u4e2a\u597d\u5904: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u5668\u6587\u4ef6: JavaScript // processor.js module . exports = function ( job ) { // Do some heavy work return Promise . resolve ( result ); }; \u7136\u540e\u50cf\u8fd9\u6837\u5b9a\u4e49\u5904\u7406\u5668: JavaScript // Single process: queue . process ( \"/path/to/my/processor.js\" ); // You can use concurrency as well: queue . process ( 5 , \"/path/to/my/processor.js\" ); // and named processors: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" ); \u91cd\u590d\u7684\u5de5\u4f5c A job can be added to a queue and processed repeatedly according to a cron specification: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); As a tip, check your expressions here to verify they are correct: cron expression generator \u6682\u505c/\u6062\u590d \u961f\u5217\u53ef\u4ee5\u5168\u5c40\u6682\u505c\u548c\u6062\u590d(\u4f20\u5165 true \u6682\u505c\u5904\u7406\u53ea\u9488\u5bf9\u8fd9\u4e2a worker): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now }); \u4e8b\u4ef6 \u961f\u5217\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6\uff0c\u4f8b\u5982\u2026 JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) \u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ec\u89e6\u53d1\u4e8b\u4ef6\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605 events \u53c2\u8003 \u961f\u5217\u6027\u80fd \u961f\u5217\u5f88\u5bb9\u6613\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u5f88\u591a\u961f\u5217\uff0c\u53ea\u9700\u521b\u5efa\u65b0\u7684\u4e0d\u540c\u540d\u79f0\u7684\u961f\u5217: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . \u7136\u800c\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u90fd\u9700\u8981\u65b0\u7684 redis \u8fde\u63a5\uff0c\u68c0\u67e5\u5982\u4f55 \u91cd\u7528\u8fde\u63a5 \uff0c \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5904\u7406\u5668 \u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002 \u96c6\u7fa4\u7684\u652f\u6301 NOTE: \u4ece 3.2.0 \u53ca\u4ee5\u4e0a\u7248\u672c\u5f00\u59cb\uff0c\u5efa\u8bae\u4f7f\u7528\u7ebf\u7a0b\u5904\u7406\u5668\u6765\u4ee3\u66ff\u3002 \u961f\u5217\u662f\u5065\u58ee\u7684\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4e2d\u5e76\u884c\u8fd0\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u5371\u9669\u6216\u961f\u5217\u635f\u574f\u7684\u98ce\u9669\u3002\u67e5\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u96c6\u7fa4\u6765\u8de8\u8fdb\u7a0b\u5e76\u884c\u4f5c\u4e1a: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); } Basic Usage JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" } }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" }); Using promises Alternatively, you can use return promises instead of using the done callback: JavaScript videoQueue . process ( function ( job ) { // don't forget to remove the done callback! // Simply return a promise return fetchVideo ( job . data . url ). then ( transcodeVideo ); // Handles promise rejection return Promise . reject ( new Error ( \"error transcoding\" )); // Passes the value the promise is resolved with to the \"completed\" event return Promise . resolve ({ framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); // same as return Promise . reject ( new Error ( \"some unexpected error\" )); }); Separate processes The process function can also be run in a separate process. This has several advantages: The process is sandboxed so if it crashes it does not affect the worker. You can run blocking code without affecting the queue (jobs will not stall). Much better utilization of multi-core CPUs. Less connections to redis. In order to use this feature just create a separate file with the processor: JavaScript // processor.js module . exports = function ( job ) { // Do some heavy work return Promise . resolve ( result ); }; And define the processor like this: JavaScript // Single process: queue . process ( \"/path/to/my/processor.js\" ); // You can use concurrency as well: queue . process ( 5 , \"/path/to/my/processor.js\" ); // and named processors: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" ); Repeated jobs A job can be added to a queue and processed repeatedly according to a cron specification: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); As a tip, check your expressions here to verify they are correct: cron expression generator Pause / Resume A queue can be paused and resumed globally (pass true to pause processing for just this worker): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now }); Events A queue emits some useful events, for example... JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) For more information on events, including the full list of events that are fired, check out the Events reference Queues performance Queues are cheap, so if you need many of them just create new ones with different names: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . However every queue instance will require new redis connections, check how to reuse connections or you can also use named processors to achieve a similar result. Cluster support NOTE: From version 3.2.0 and above it is recommended to use threaded processors instead. Queues are robust and can be run in parallel in several threads or processes without any risk of hazards or queue corruption. Check this simple example using cluster to parallelize jobs across processes: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); }","title":"\u5feb\u901f\u6307\u5357"},{"location":"docs/bull/bull/quick-guide/#_1","text":"JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" } }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" });","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"docs/bull/bull/quick-guide/#_2","text":"\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 return promises \u6765\u4ee3\u66ff done \u56de\u8c03: JavaScript videoQueue . process ( function ( job ) { // don't forget to remove the done callback! // Simply return a promise return fetchVideo ( job . data . url ). then ( transcodeVideo ); // Handles promise rejection return Promise . reject ( new Error ( \"error transcoding\" )); // Passes the value the promise is resolved with to the \"completed\" event return Promise . resolve ({ framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); // same as return Promise . reject ( new Error ( \"some unexpected error\" )); });","title":"\u4f7f\u7528\u627f\u8bfa"},{"location":"docs/bull/bull/quick-guide/#_3","text":"\u8fdb\u7a0b\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u3002\u8fd9\u6709\u51e0\u4e2a\u597d\u5904: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u5668\u6587\u4ef6: JavaScript // processor.js module . exports = function ( job ) { // Do some heavy work return Promise . resolve ( result ); }; \u7136\u540e\u50cf\u8fd9\u6837\u5b9a\u4e49\u5904\u7406\u5668: JavaScript // Single process: queue . process ( \"/path/to/my/processor.js\" ); // You can use concurrency as well: queue . process ( 5 , \"/path/to/my/processor.js\" ); // and named processors: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" );","title":"\u72ec\u7acb\u7684\u8fdb\u7a0b"},{"location":"docs/bull/bull/quick-guide/#_4","text":"A job can be added to a queue and processed repeatedly according to a cron specification: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); As a tip, check your expressions here to verify they are correct: cron expression generator","title":"\u91cd\u590d\u7684\u5de5\u4f5c"},{"location":"docs/bull/bull/quick-guide/#_5","text":"\u961f\u5217\u53ef\u4ee5\u5168\u5c40\u6682\u505c\u548c\u6062\u590d(\u4f20\u5165 true \u6682\u505c\u5904\u7406\u53ea\u9488\u5bf9\u8fd9\u4e2a worker): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now });","title":"\u6682\u505c/\u6062\u590d"},{"location":"docs/bull/bull/quick-guide/#_6","text":"\u961f\u5217\u4f1a\u53d1\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u4ef6\uff0c\u4f8b\u5982\u2026 JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) \u6709\u5173\u4e8b\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ec\u89e6\u53d1\u4e8b\u4ef6\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u53c2\u9605 events \u53c2\u8003","title":"\u4e8b\u4ef6"},{"location":"docs/bull/bull/quick-guide/#_7","text":"\u961f\u5217\u5f88\u5bb9\u6613\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u9700\u8981\u5f88\u591a\u961f\u5217\uff0c\u53ea\u9700\u521b\u5efa\u65b0\u7684\u4e0d\u540c\u540d\u79f0\u7684\u961f\u5217: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . \u7136\u800c\uff0c\u6bcf\u4e2a\u961f\u5217\u5b9e\u4f8b\u90fd\u9700\u8981\u65b0\u7684 redis \u8fde\u63a5\uff0c\u68c0\u67e5\u5982\u4f55 \u91cd\u7528\u8fde\u63a5 \uff0c \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u547d\u540d\u5904\u7406\u5668 \u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u7ed3\u679c\u3002","title":"\u961f\u5217\u6027\u80fd"},{"location":"docs/bull/bull/quick-guide/#_8","text":"NOTE: \u4ece 3.2.0 \u53ca\u4ee5\u4e0a\u7248\u672c\u5f00\u59cb\uff0c\u5efa\u8bae\u4f7f\u7528\u7ebf\u7a0b\u5904\u7406\u5668\u6765\u4ee3\u66ff\u3002 \u961f\u5217\u662f\u5065\u58ee\u7684\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4e2d\u5e76\u884c\u8fd0\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u5371\u9669\u6216\u961f\u5217\u635f\u574f\u7684\u98ce\u9669\u3002\u67e5\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u96c6\u7fa4\u6765\u8de8\u8fdb\u7a0b\u5e76\u884c\u4f5c\u4e1a: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); }","title":"\u96c6\u7fa4\u7684\u652f\u6301"},{"location":"docs/bull/bull/quick-guide/#basic-usage","text":"JavaScript const Queue = require ( \"bull\" ); const videoQueue = new Queue ( \"video transcoding\" , \"redis://127.0.0.1:6379\" ); const audioQueue = new Queue ( \"audio transcoding\" , { redis : { port : 6379 , host : \"127.0.0.1\" , password : \"foobared\" } }); // Specify Redis connection using object const imageQueue = new Queue ( \"image transcoding\" ); const pdfQueue = new Queue ( \"pdf transcoding\" ); videoQueue . process ( function ( job , done ) { // job.data contains the custom data passed when the job was created // job.id contains id of this job. // transcode video asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); audioQueue . process ( function ( job , done ) { // transcode audio asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { samplerate : 48000 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); imageQueue . process ( function ( job , done ) { // transcode image asynchronously and report progress job . progress ( 42 ); // call done when finished done (); // or give a error if error done ( new Error ( \"error transcoding\" )); // or pass it a result done ( null , { width : 1280 , height : 720 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); }); pdfQueue . process ( function ( job ) { // Processors can also return promises instead of using the done callback return pdfAsyncProcessor (); }); videoQueue . add ({ video : \"http://example.com/video1.mov\" }); audioQueue . add ({ audio : \"http://example.com/audio1.mp3\" }); imageQueue . add ({ image : \"http://example.com/image1.tiff\" });","title":"Basic Usage"},{"location":"docs/bull/bull/quick-guide/#using-promises","text":"Alternatively, you can use return promises instead of using the done callback: JavaScript videoQueue . process ( function ( job ) { // don't forget to remove the done callback! // Simply return a promise return fetchVideo ( job . data . url ). then ( transcodeVideo ); // Handles promise rejection return Promise . reject ( new Error ( \"error transcoding\" )); // Passes the value the promise is resolved with to the \"completed\" event return Promise . resolve ({ framerate : 29.5 /* etc... */ }); // If the job throws an unhandled exception it is also handled correctly throw new Error ( \"some unexpected error\" ); // same as return Promise . reject ( new Error ( \"some unexpected error\" )); });","title":"Using promises"},{"location":"docs/bull/bull/quick-guide/#separate-processes","text":"The process function can also be run in a separate process. This has several advantages: The process is sandboxed so if it crashes it does not affect the worker. You can run blocking code without affecting the queue (jobs will not stall). Much better utilization of multi-core CPUs. Less connections to redis. In order to use this feature just create a separate file with the processor: JavaScript // processor.js module . exports = function ( job ) { // Do some heavy work return Promise . resolve ( result ); }; And define the processor like this: JavaScript // Single process: queue . process ( \"/path/to/my/processor.js\" ); // You can use concurrency as well: queue . process ( 5 , \"/path/to/my/processor.js\" ); // and named processors: queue . process ( \"my processor\" , 5 , \"/path/to/my/processor.js\" );","title":"Separate processes"},{"location":"docs/bull/bull/quick-guide/#repeated-jobs","text":"A job can be added to a queue and processed repeatedly according to a cron specification: JavaScript paymentsQueue . process ( function ( job ) { // Check payments }); // Repeat payment job once every day at 3:15 (am) paymentsQueue . add ( paymentsData , { repeat : { cron : \"15 3 * * *\" } }); As a tip, check your expressions here to verify they are correct: cron expression generator","title":"Repeated jobs"},{"location":"docs/bull/bull/quick-guide/#pause-resume","text":"A queue can be paused and resumed globally (pass true to pause processing for just this worker): JavaScript queue . pause (). then ( function () { // queue is paused now }); queue . resume (). then ( function () { // queue is resumed now });","title":"Pause / Resume"},{"location":"docs/bull/bull/quick-guide/#events","text":"A queue emits some useful events, for example... JavaScript . on ( 'completed' , function ( job , result ) { // Job completed with output result! }) For more information on events, including the full list of events that are fired, check out the Events reference","title":"Events"},{"location":"docs/bull/bull/quick-guide/#queues-performance","text":"Queues are cheap, so if you need many of them just create new ones with different names: JavaScript const userJohn = new Queue ( 'john' ); const userLisa = new Queue ( 'lisa' ); . . . However every queue instance will require new redis connections, check how to reuse connections or you can also use named processors to achieve a similar result.","title":"Queues performance"},{"location":"docs/bull/bull/quick-guide/#cluster-support","text":"NOTE: From version 3.2.0 and above it is recommended to use threaded processors instead. Queues are robust and can be run in parallel in several threads or processes without any risk of hazards or queue corruption. Check this simple example using cluster to parallelize jobs across processes: JavaScript const Queue = require ( \"bull\" ); const cluster = require ( \"cluster\" ); const numWorkers = 8 ; const queue = new Queue ( \"test concurrent queue\" ); if ( cluster . isMaster ) { for ( let i = 0 ; i < numWorkers ; i ++ ) { cluster . fork (); } cluster . on ( \"online\" , function ( worker ) { // Let's create a few jobs for the queue workers for ( let i = 0 ; i < 500 ; i ++ ) { queue . add ({ foo : \"bar\" }); } }); cluster . on ( \"exit\" , function ( worker , code , signal ) { console . log ( \"worker \" + worker . process . pid + \" died\" ); }); } else { queue . process ( function ( job , jobDone ) { console . log ( \"Job done by worker\" , cluster . worker . id , job . id ); jobDone (); }); }","title":"Cluster support"},{"location":"docs/bull/bull/patterns/_index/","text":"\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u7528 Bull \u5b9e\u73b0\u7684\u6709\u7528\u6a21\u5f0f\u7684\u4f8b\u5b50: \u5982\u679c\u60a8\u6709\u4efb\u4f55\u5176\u4ed6\u5e38\u89c1\u7684\u6a21\u5f0f\uff0c\u60a8\u60f3\u6dfb\u52a0\uff0c\u62c9\u8bf7\u6c42\u4ed6\u4eec! \u6d88\u606f\u961f\u5217 \u8fd4\u56de\u5de5\u4f5c\u5b8c\u6210 \u91cd\u7528 redis \u8fde\u63a5 Redis \u96c6\u7fa4 \u8c03\u8bd5 \u81ea\u5b9a\u4e49\u8865\u507f\u7b56\u7565 \u624b\u52a8\u6293\u53d6\u5de5\u4f5c","title":"\u6a21\u5f0f"},{"location":"docs/bull/bull/patterns/custom-backoff-strategy/","text":"When the builtin backoff strategies on retries are not sufficient, a custom strategy can be defined. Custom backoff strategies are defined by a function on the queue. The number of attempts already made to process the job is passed to this function as the first parameter, and the error that the job failed with as the second parameter. The function returns either the time to delay the retry with, 0 to retry immediately or -1 to fail the job immediately. TypeScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { jitter : function ( attemptsMade , err ) { return 5000 + Math . random () * 500 ; }, }, }, }); The new backoff strategy can then be specified on the job, using the name defined above:\\ TypeScript myQueue . add ( { foo : \"bar\" }, { attempts : 3 , backoff : { type : \"jitter\" , }, } ); You may specify options for your strategy: TypeScript const Queue = require ( \"bull\" ); const myQueue = new Queue ( \"Server B\" , { settings : { backoffStrategies : { // truncated binary exponential backoff binaryExponential : function ( attemptsMade , err , options ) { // Options can be undefined, you need to handle it by yourself if ( ! options ) { options = {}; } const delay = options . delay || 1000 ; const truncate = options . truncate || 1000 ; console . error ({ attemptsMade , err , options }); return Math . round ( Math . random () * ( Math . pow ( 2 , Math . max ( attemptsMade , truncate )) - 1 ) * delay ); }, }, }, }); myQueue . add ( { foo : \"bar\" }, { attempts : 10 , backoff : { type : \"binaryExponential\" , options : { delay : 500 , truncate : 5 , }, }, } ); You may base your backoff strategy on the error that the job throws: TypeScript const Queue = require ( \"bull\" ); function MySpecificError () {} const myQueue = new Queue ( \"Server C\" , { settings : { backoffStrategies : { foo : function ( attemptsMade , err ) { if ( err instanceof MySpecificError ) { return 10000 ; } return 1000 ; }, }, }, }); myQueue . process ( function ( job , done ) { if ( job . data . msg === \"Specific Error\" ) { throw new MySpecificError (); } else { throw new Error (); } }); myQueue . add ( { msg : \"Hello\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } ); myQueue . add ( { msg : \"Specific Error\" }, { attempts : 3 , backoff : { type : \"foo\" , }, } ); \\","title":"\u81ea\u5b9a\u4e49\u8865\u507f\u7b56\u7565"},{"location":"docs/bull/bull/patterns/debugging/","text":"To see debug statements set or add bull to the NODE_DEBUG environment variable: Text Only export NODE_DEBUG=bull or: Text Only NODE_DEBUG=bull node ./your-script.js","title":"\u8c03\u8bd5"},{"location":"docs/bull/bull/patterns/manually-fetching-jobs/","text":"If you want the actual job processing to be done in a seperate repo/service than where bull is running, this pattern may be for you. Manually transitioning states for jobs can be done with a few simple methods. Adding a job to the 'waiting' queue. Grab the queue and call add . TypeScript import Queue from \"bull\" ; const queue = new Queue ({ limiter : { max : 5 , duration : 5000 , bounceBack : true , // important }, ... queueOptions , }); queue . add ({ random_attr : \"random_value\" }); Pulling a job from 'waiting' and moving it to 'active'. TypeScript const job : Job = await queue . getNextJob (); Move the job to the 'failed' queue if something goes wrong. TypeScript const ( nextJobData , nextJobId ) = await job . moveToFailed ( { message : 'Call to external service failed!' , }, true , ); Move the job to the 'completed' queue. TypeScript const ( nextJobData , nextJobId ) = await job . moveToCompleted ( 'succeeded' , true ); Return the next job if one is returned. TypeScript if ( nextJobdata ) { return Job . fromJSON ( queue , nextJobData , nextJobId ); } Note By default the lock duration for a job that has been returned by getNextJob or moveToCompleted is 30 seconds, if it takes more time than that the job will be automatically marked as stalled and depending on the max stalled options be moved back to the wait state or marked as failed. In order to avoid this you must use job.extendLock(duration) in order to give you some more time before the lock expires. The recommended is to extend the lock when half the lock time has passsed.","title":"\u624b\u52a8\u6293\u53d6\u5de5\u4f5c"},{"location":"docs/bull/bull/patterns/message-queue/","text":"Bull can also be used for persistent message queues. This is a quite useful feature in some use cases. For example, you can have two servers that need to communicate with each other. By using a queue the servers do not need to be online at the same time, so this creates a very robust communication channel. You can treat add as send and process as receive : Server A: TypeScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server B\" ); const receiveQueue = new Queue ( \"Server A\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"Hello\" }); Server B: TypeScript const Queue = require ( \"bull\" ); const sendQueue = new Queue ( \"Server A\" ); const receiveQueue = new Queue ( \"Server B\" ); receiveQueue . process ( function ( job , done ) { console . log ( \"Received message\" , job . data . msg ); done (); }); sendQueue . add ({ msg : \"World\" });","title":"\u6d88\u606f\u961f\u5217"},{"location":"docs/bull/bull/patterns/redis-cluster/","text":"Bull internals require atomic operations that span different keys. This behavior breaks Redis's rules for cluster configurations. However, it is still possible to use a cluster environment by using the proper bull prefix option as a cluster \"hash tag\". Hash tags are used to guarantee that certain keys are placed in the same hash slot, read more about hash tags in the redis cluster tutorial . A hash tag is defined with brackets. I.e. a key that has a substring inside brackets will use that substring to determine in which hash slot the key will be placed. In summary, to make bull compatible with Redis cluster, use a queue prefix inside brackets. For example: TypeScript const queue = new Queue ( \"cluster\" , { prefix : \"{myprefix}\" , }); If you use several queues in the same cluster, you should use different prefixes so that the queues are evenly placed in the cluster nodes. \\","title":"Redis \u96c6\u7fa4"},{"location":"docs/bull/bull/patterns/redis-cluster/#_1","text":"\\","title":""},{"location":"docs/bull/bull/patterns/returning-job-completions/","text":"\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\uff0c\u4f60\u6709\u4e00\u7ec4\u961f\u5217\u5904\u7406\u5668\uff0c\u5b83\u4eec\u53ea\u662f\u5c3d\u53ef\u80fd\u5feb\u5730\u5904\u7406\u4efb\u52a1\uff0c \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u670d\u52a1\u9700\u8981\u8fd9\u4e2a\u5904\u7406\u5668\u7684\u7ed3\u679c\u5e76\u505a\u4e00\u4e9b\u4e8b\u60c5","title":"\u8fd4\u56de\u5de5\u4f5c\u5b8c\u6210"},{"location":"docs/bull/bull/patterns/reusing-redis-connections/","text":"A standard queue requires 3 connections to the Redis server. In some situations you might want to re-use connections\u2014for example on Heroku where the connection count is restricted. You can do this with the createClient option in the Queue constructor. Notes: bclient connections cannot be re-used , so you should return a new connection each time this is called. client and subscriber connections can be shared and will not be closed when the queue is closed. When you are shutting down the process, first close the queues, then the shared connections (if they are shared). if you are not sharing connections but still using createClient to do some custom connection logic, you may still need to keep a list of all the connections you created so you can manually close them later when the queue shuts down, if you need a graceful shutdown for your process do not set a keyPrefix on the connection you create, use bull's built-in prefix feature if you need a key prefix TypeScript const { REDIS_URL } = process . env ; const Redis = require ( \"ioredis\" ); const client = new Redis ( REDIS_URL ); const subscriber = new Redis ( REDIS_URL ); const opts = { // redisOpts here will contain at least a property of connectionName which will identify the queue based on its name createClient : function ( type , redisOpts ) { switch ( type ) { case \"client\" : return client ; case \"subscriber\" : return subscriber ; case \"bclient\" : return new Redis ( REDIS_URL , redisOpts ); default : throw new Error ( \"Unexpected connection type: \" , type ); } }, }; const queueFoo = new Queue ( \"foobar\" , opts ); const queueQux = new Queue ( \"quxbaz\" , opts );","title":"\u91cd\u7528 Redis \u8fde\u63a5"},{"location":"docs/bull/bull/reference/_index/","text":"Queue Queue#process Queue#add Queue#addBulk Queue#pause Queue#isPaused Queue#resume Queue#whenCurrentJobsFinished Queue#count Queue#removeJobs Queue#empty Queue#clean Queue#obliterate Queue#close Queue#getJob Queue#getJobs Queue#getJobLogs Queue#getRepeatableJobs Queue#removeRepeatable Queue#removeRepeatableByKey Queue#getJobCounts Queue#getCompletedCount Queue#getFailedCount Queue#getDelayedCount Queue#getActiveCount Queue#getWaitingCount Queue#getPausedCount Queue#getWaiting Queue#getActive Queue#getDelayed Queue#getCompleted Queue#getFailed Queue#getWorkers Job Job#progress Job#log Job#getState Job#update Job#remove Job#retry Job#discard Job#promote Job#finished Job#moveToCompleted Job#moveToFailed Events Global events","title":"\u53c2\u8003"},{"location":"docs/bull/bull/reference/events/","text":"A queue emits also some useful events: JavaScript . on ( 'error' , function ( error ) { // An error occured. }) . on ( 'waiting' , function ( jobId ) { // A Job is waiting to be processed as soon as a worker is idling. }); . on ( 'active' , function ( job , jobPromise ) { // A job has started. You can use `jobPromise.cancel()`` to abort it. }) . on ( 'stalled' , function ( job ) { // A job has been marked as stalled. This is useful for debugging job // workers that crash or pause the event loop. }) . on ( 'lock-extension-failed' , function ( job , err ) { // A job failed to extend lock. This will be useful to debug redis // connection issues and jobs getting restarted because workers // are not able to extend locks. }); . on ( 'progress' , function ( job , progress ) { // A job's progress was updated! }) . on ( 'completed' , function ( job , result ) { // A job successfully completed with a `result`. }) . on ( 'failed' , function ( job , err ) { // A job failed with reason `err`! }) . on ( 'paused' , function () { // The queue has been paused. }) . on ( 'resumed' , function ( job ) { // The queue has been resumed. }) . on ( 'cleaned' , function ( jobs , type ) { // Old jobs have been cleaned from the queue. `jobs` is an array of cleaned // jobs, and `type` is the type of jobs cleaned. }); . on ( 'drained' , function () { // Emitted every time the queue has processed all the waiting jobs (even if there can be some delayed jobs not yet processed) }); . on ( 'removed' , function ( job ) { // A job successfully removed. }); Global events Events are local by default \u2014 in other words, they only fire on the listeners that are registered on the given worker. If you need to listen to events globally, for example from other servers across redis, just prefix the event with 'global:' : JavaScript // Will listen locally, just to this queue... queue . on ( 'completed' , listener ) : // Will listen globally, to instances of this queue... queue . on ( 'global:completed' , listener ); When working with global events whose local counterparts pass a Job instance to the event listener callback, notice that global events pass the job's ID instead. If you need to access the Job instance in a global listener, use Queue#getJob to retrieve it. However, remember that if removeOnComplete is enabled when adding the job, the job will no longer be available after completion. Should you need to both access the job and remove it after completion, you can use Job#remove to remove it in the listener. JavaScript // Local events pass the job instance... queue . on ( \"progress\" , function ( job , progress ) { console . log ( `Job ${ job . id } is ${ progress * 100 } % ready!` ); }); queue . on ( \"completed\" , function ( job , result ) { console . log ( `Job ${ job . id } completed! Result: ${ result } ` ); job . remove (); }); // ...whereas global events only pass the job ID: queue . on ( \"global:progress\" , function ( jobId , progress ) { console . log ( `Job ${ jobId } is ${ progress * 100 } % ready!` ); }); queue . on ( \"global:completed\" , function ( jobId , result ) { console . log ( `Job ${ jobId } completed! Result: ${ result } ` ); queue . getJob ( jobId ). then ( function ( job ) { job . remove (); }); });","title":"Events"},{"location":"docs/bull/bull/reference/events/#global-events","text":"Events are local by default \u2014 in other words, they only fire on the listeners that are registered on the given worker. If you need to listen to events globally, for example from other servers across redis, just prefix the event with 'global:' : JavaScript // Will listen locally, just to this queue... queue . on ( 'completed' , listener ) : // Will listen globally, to instances of this queue... queue . on ( 'global:completed' , listener ); When working with global events whose local counterparts pass a Job instance to the event listener callback, notice that global events pass the job's ID instead. If you need to access the Job instance in a global listener, use Queue#getJob to retrieve it. However, remember that if removeOnComplete is enabled when adding the job, the job will no longer be available after completion. Should you need to both access the job and remove it after completion, you can use Job#remove to remove it in the listener. JavaScript // Local events pass the job instance... queue . on ( \"progress\" , function ( job , progress ) { console . log ( `Job ${ job . id } is ${ progress * 100 } % ready!` ); }); queue . on ( \"completed\" , function ( job , result ) { console . log ( `Job ${ job . id } completed! Result: ${ result } ` ); job . remove (); }); // ...whereas global events only pass the job ID: queue . on ( \"global:progress\" , function ( jobId , progress ) { console . log ( `Job ${ jobId } is ${ progress * 100 } % ready!` ); }); queue . on ( \"global:completed\" , function ( jobId , result ) { console . log ( `Job ${ jobId } completed! Result: ${ result } ` ); queue . getJob ( jobId ). then ( function ( job ) { job . remove (); }); });","title":"Global events"},{"location":"docs/bull/bull/reference/job/","text":"A job includes all data needed to perform its execution, as well as the progress method needed to update its progress. The most important property for the user is Job#data that includes the object that was passed to Queue#add , and that is normally used to perform the job. Job#progress TypeScript progress ( progress? : number | object ) : Promise Updates a job progress if called with an argument. Return a promise resolving to the current job's progress if called without argument. Arguments JavaScript progress : number ; Job progress number or any serializable object representing progress or similar . Job#log TypeScript log ( row : string ) : Promise Adds a log row to this job specific job. Logs can be retrieved using Queue#getJobLogs . Job#getState TypeScript getState () : Promise Returns a promise resolving to the current job's status (completed, failed, delayed etc.). Possible returns are: completed, failed, delayed, active, waiting, paused, stuck or null. Please take note that the implementation of this method is not very efficient, nor is it atomic. If your queue does have a very large quantity of jobs, you may want to avoid using this method. Job#update TypeScript update ( data : object ) : Promise Updated a job data field with the give data object. Job#remove TypeScript remove () : Promise Removes a job from the queue and from any lists it may be included in. Job#retry TypeScript retry () : Promise Re-run a job that has failed. Returns a promise that resolves when the job is scheduled for retry. Job#discard TypeScript discard () : Promise Ensure this job is never ran again even if attemptsMade is less than job.attempts . Job#promote TypeScript promote () : Promise Promotes a job that is currently \"delayed\" to the \"waiting\" state and executed as soon as possible. Job#finished TypeScript finished () : Promise Returns a promise that resolves or rejects when the job completes or fails. Job#moveToCompleted TypeScript moveToCompleted ( returnValue : any , ignoreLock : boolean , notFetch? : boolean ) : Promise < string [ Jobdata , JobId ] | null > Moves a job to the completed queue. Pulls a job from 'waiting' to 'active' and returns a tuple containing the next jobs data and id. If no job is in the waiting queue, returns null. Set notFetch to true to avoid prefetching the next job in the queue. Job#moveToFailed TypeScript moveToFailed ( errorInfo : { message : string ; }, ignoreLock? : boolean ) : Promise < string [ Jobdata , JobId ] | null > Moves a job to the failed queue. Pulls a job from 'waiting' to 'active' and returns a tuple containing the next jobs data and id. If no job is in the waiting queue, returns null.","title":"Job"},{"location":"docs/bull/bull/reference/job/#jobprogress","text":"TypeScript progress ( progress? : number | object ) : Promise Updates a job progress if called with an argument. Return a promise resolving to the current job's progress if called without argument.","title":"Job#progress"},{"location":"docs/bull/bull/reference/job/#arguments","text":"JavaScript progress : number ; Job progress number or any serializable object representing progress or similar .","title":"Arguments"},{"location":"docs/bull/bull/reference/job/#joblog","text":"TypeScript log ( row : string ) : Promise Adds a log row to this job specific job. Logs can be retrieved using Queue#getJobLogs .","title":"Job#log"},{"location":"docs/bull/bull/reference/job/#jobgetstate","text":"TypeScript getState () : Promise Returns a promise resolving to the current job's status (completed, failed, delayed etc.). Possible returns are: completed, failed, delayed, active, waiting, paused, stuck or null. Please take note that the implementation of this method is not very efficient, nor is it atomic. If your queue does have a very large quantity of jobs, you may want to avoid using this method.","title":"Job#getState"},{"location":"docs/bull/bull/reference/job/#jobupdate","text":"TypeScript update ( data : object ) : Promise Updated a job data field with the give data object.","title":"Job#update"},{"location":"docs/bull/bull/reference/job/#jobremove","text":"TypeScript remove () : Promise Removes a job from the queue and from any lists it may be included in.","title":"Job#remove"},{"location":"docs/bull/bull/reference/job/#jobretry","text":"TypeScript retry () : Promise Re-run a job that has failed. Returns a promise that resolves when the job is scheduled for retry.","title":"Job#retry"},{"location":"docs/bull/bull/reference/job/#jobdiscard","text":"TypeScript discard () : Promise Ensure this job is never ran again even if attemptsMade is less than job.attempts .","title":"Job#discard"},{"location":"docs/bull/bull/reference/job/#jobpromote","text":"TypeScript promote () : Promise Promotes a job that is currently \"delayed\" to the \"waiting\" state and executed as soon as possible.","title":"Job#promote"},{"location":"docs/bull/bull/reference/job/#jobfinished","text":"TypeScript finished () : Promise Returns a promise that resolves or rejects when the job completes or fails.","title":"Job#finished"},{"location":"docs/bull/bull/reference/job/#jobmovetocompleted","text":"TypeScript moveToCompleted ( returnValue : any , ignoreLock : boolean , notFetch? : boolean ) : Promise < string [ Jobdata , JobId ] | null > Moves a job to the completed queue. Pulls a job from 'waiting' to 'active' and returns a tuple containing the next jobs data and id. If no job is in the waiting queue, returns null. Set notFetch to true to avoid prefetching the next job in the queue.","title":"Job#moveToCompleted"},{"location":"docs/bull/bull/reference/job/#jobmovetofailed","text":"TypeScript moveToFailed ( errorInfo : { message : string ; }, ignoreLock? : boolean ) : Promise < string [ Jobdata , JobId ] | null > Moves a job to the failed queue. Pulls a job from 'waiting' to 'active' and returns a tuple containing the next jobs data and id. If no job is in the waiting queue, returns null.","title":"Job#moveToFailed"},{"location":"docs/bull/bull/reference/queue/","text":"TypeScript Queue ( queueName : string , url? : string , opts? : QueueOptions ) : Queue This is the Queue constructor. It creates a new Queue that is persisted in Redis. Everytime the same queue is instantiated it tries to process all the old jobs that may exist from a previous unfinished session. The optional url argument, allows to specify a redis connection string such as for example: redis://mypassword@myredis.server.com:1234 TypeScript interface QueueOptions { createClient ? ( type : \"client\" | \"subscriber\" | \"bclient\" , config? : Redis.RedisOptions ) : Redis . Redis | Redis . Cluster ; limiter? : RateLimiter ; redis? : RedisOpts ; prefix? : string = \"bull\" ; // prefix for all queue keys. defaultJobOptions? : JobOpts ; settings? : AdvancedSettings ; } TypeScript interface RateLimiter { max : number ; // Max number of jobs processed duration : number ; // per duration in milliseconds bounceBack? : boolean = false ; // When jobs get rate limited, they stay in the waiting queue and are not moved to the delayed queue groupKey? : string ; // allows grouping of jobs with the specified key from the data object passed to the Queue#add (ex. \"network.handle\") } RedisOpts are passed directly to ioredis constructor, check ioredis for details. We document here just the most important ones. TypeScript interface RedisOpts { port? : number = 6379 ; host? : string = localhost ; db? : number = 0 ; password? : string ; } TypeScript interface AdvancedSettings { lockDuration : number = 30000 ; // Key expiration time for job locks. lockRenewTime : number = 15000 ; // Interval on which to acquire the job lock stalledInterval : number = 30000 ; // How often check for stalled jobs (use 0 for never checking). maxStalledCount : number = 1 ; // Max amount of times a stalled job will be re-processed. guardInterval : number = 5000 ; // Poll interval for delayed jobs and added jobs. retryProcessDelay : number = 5000 ; // delay before processing next job in case of internal error. backoffStrategies : {}; // A set of custom backoff strategies keyed by name. drainDelay : number = 5 ; // A timeout for when the queue is in drained state (empty waiting for jobs). isSharedChildPool : boolean = false ; // enables multiple queues on the same instance of child pool to share the same instance. } Custom or Shared IORedis Connections createClient is passed a type to specify the type of connection that Bull is trying to create, and some options that bull would like to set for that connection. You can merge the provided options with some of your own and create an ioredis connection. When type is client or subscriber you can return the same connection for multiple queues, which can reduce the number of connections you open to the redis server. Bull does not close or disconnect these connections when queues are closed, so if you need to have your app do a graceful shutdown, you will need to keep references to these Redis connections somewhere and disconnect them after you shut down all the queues. The bclient connection however is a \"blocking client\" and is used to wait for new jobs on a single queue at a time. For this reason it cannot be shared and a new connection should be returned each time. Advanced Settings Warning: Do not override these advanced settings unless you understand the internals of the queue. lockDuration : Time in milliseconds to acquire the job lock. Set this to a higher value if you find that your jobs are being stalled because your job processor is CPU-intensive and blocking the event loop (see note below about stalled jobs). Set this to a lower value if your jobs are extremely time-sensitive and it might be OK if they get double-processed (due to them be falsly considered stalled). lockRenewTime : Interval in milliseconds on which to acquire the job lock. It is set to lockDuration / 2 by default to give enough buffer to renew the lock each time before the job lock expires. It should never be set to a value larger than lockDuration . Set this to a lower value if you're finding that jobs are becoming stalled due to a CPU-intensive job processor function. Generally you shouldn't change this though. stalledInterval : Interval in milliseconds on which each worker will check for stalled jobs (i.e. unlocked jobs in the active state). See note below about stalled jobs. Set this to a lower value if your jobs are extremely time-sensitive. Set this to a higher value if your Redis CPU usage is high as this check can be expensive. Note that because each worker runs this on its own interval and checks the entire queue, the stalled job actually run much more frequently than this value would imply. maxStalledCount : The maximum number of times a job can be restarted before it will be permamently failed with the error job stalled more than allowable limit . This is set to a default of 1 with the assumption that stalled jobs should be very rare (only due to process crashes) and you want to be on the safer side of not restarting jobs. Set this higher if stalled jobs are common (e.g. processes crash a lot) and it's generally OK to double process jobs. guardInterval : Interval in milliseconds on which the delayed job watchdog will run. When running multiple concurrent workers with delayed tasks, the default value of guardInterval will cause spikes on network bandwidth, cpu usage and memory usage. Each concurrent worker will run the delayed job watchdog. In this case set this value to something much higher, e.g. guardInterval = numberOfWorkers*5000 . Set to a lower value if your Redis connection is unstable and delayed jobs aren't being processed in time. retryProcessDelay : Time in milliseconds in which to wait before trying to process jobs, in case of a Redis error. Set to a lower value on an unstable Redis connection. backoffStrategies : An object containing custom backoff strategies. The key in the object is the name of the strategy and the value is a function that should return the delay in milliseconds. For a full example see Patterns . drainDelay : A timeout for when the queue is in drained state (empty waiting for jobs). It is used when calling queue.getNextJob() , which will pass it to .brpoplpush on the Redis client. JavaScript backoffStrategies : { jitter : function () { return 5000 + Math . random () * 500 ; } } Queue#process TypeScript /** * Consider these as overloaded functions. Since method overloading doesn't exist in javacript * bull recognizes the desired function call by checking the parameters' types. Make sure you * comply with one of the below defined patterns. * * Note: Concurrency defaults to 1 if not specified. */ process ( processor : (( job , done ? ) => Promise < any > ) | string ) process ( concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) Defines a processing function for the jobs in a given Queue. The callback is called every time a job is placed in the queue. It is passed an instance of the job as first argument. If the callback signature contains the second optional done argument, the callback will be passed a done callback to be called after the job has been completed. The done callback can be called with an Error instance, to signal that the job did not complete successfully, or with a result as second argument (e.g.: done(null, result); ) when the job is successful. Errors will be passed as a second argument to the \"failed\" event; results, as a second argument to the \"completed\" event. If, however, the callback signature does not contain the done argument, a promise must be returned to signal job completion. If the promise is rejected, the error will be passed as a second argument to the \"failed\" event. If it is resolved, its value will be the \"completed\" event's second argument. You can specify a concurrency argument. Bull will then call your handler in parallel respecting this maximum value. A process function can also be declared as a separate process. This will make a better use of the available CPU cores and run the jobs in parallel. This is a perfect way to run blocking code. Just specify an absolute path to a processor module. i.e. a file exporting the process function like this: JavaScript // my-processor.js module . exports = function ( job ) { // do some job return value ; }; You can return a value or a promise to signal that the job has been completed. A name argument can be provided so that multiple process functions can be defined per queue. A named process will only process jobs that matches the given name. However, if you define multiple named process functions in one Queue, the defined concurrency for each process function stacks up for the Queue. See the following examples: JavaScript /*** * For each named processor, concurrency stacks up, so any of these three process functions * can run with a concurrency of 125. To avoid this behaviour you need to create an own queue * for each process function. */ const loadBalancerQueue = new Queue ( \"loadbalancer\" ); loadBalancerQueue . process ( \"requestProfile\" , 100 , requestProfile ); loadBalancerQueue . process ( \"sendEmail\" , 25 , sendEmail ); loadBalancerQueue . process ( \"sendInvitation\" , 0 , sendInvite ); const profileQueue = new Queue ( \"profile\" ); // Max concurrency for requestProfile is 100 profileQueue . process ( \"requestProfile\" , 100 , requestProfile ); const emailQueue = new Queue ( \"email\" ); // Max concurrency for sendEmail is 25 emailQueue . process ( \"sendEmail\" , 25 , sendEmail ); Specifying * as the process name will make it the default processor for all named jobs. It is frequently used to process all named jobs from one process function: JavaScript const differentJobsQueue = new Queue ( \"differentJobsQueue\" ); differentJobsQueue . process ( \"*\" , processFunction ); differentJobsQueue . add ( \"jobA\" , data , opts ); differentJobsQueue . add ( \"jobB\" , data , opts ); Note: in order to determine whether job completion is signaled by returning a promise or calling the done callback, Bull looks at the length property of the callback you pass to it. So watch out, as the following won't work: JavaScript // THIS WON'T WORK!! queue . process ( function ( job , done ) { // Oops! done callback here! return Promise . resolve (); }); This, however, will: JavaScript queue . process ( function ( job ) { // No done callback here :) return Promise . resolve (); }); Queue#add TypeScript add ( name? : string , data : object , opts? : JobOpts ) : Promise < Job > Creates a new job and adds it to the queue. If the queue is empty the job will be executed directly, otherwise it will be placed in the queue and executed as soon as possible. An optional name can be added, so that only process functions defined for that name (also called job type) will process the job. Note: You need to define processors for all the named jobs that you add to your queue or the queue will complain that you are missing a processor for the given job, unless you use the * as job name when defining the processor. TypeScript interface JobOpts { priority : number ; // Optional priority value. ranges from 1 (highest priority) to MAX_INT (lowest priority). Note that // using priorities has a slight impact on performance, so do not use it if not required. delay : number ; // An amount of milliseconds to wait until this job can be processed. Note that for accurate delays, both // server and clients should have their clocks synchronized. [optional]. attempts : number ; // The total number of attempts to try the job until it completes. repeat : RepeatOpts ; // Repeat job according to a cron specification, see below for details. backoff : number | BackoffOpts ; // Backoff setting for automatic retries if the job fails, default strategy: `fixed`. // Needs `attempts` to be set. lifo : boolean ; // if true, adds the job to the right of the queue instead of the left (default false) timeout : number ; // The number of milliseconds after which the job should fail with a timeout error [optional] jobId : number | string ; // Override the job ID - by default, the job ID is a unique // integer, but you can use this setting to override it. // If you use this option, it is up to you to ensure the // jobId is unique. If you attempt to add a job with an id that // already exists, it will not be added (see caveat below about repeatable jobs). removeOnComplete : boolean | number | KeepJobs ; // If true, removes the job when it successfully // completes. A number specified the amount of jobs to keep. Default behavior is to keep the job in the completed set. // See KeepJobs if using that interface instead. removeOnFail : boolean | number | KeepJobs ; // If true, removes the job when it fails after all attempts. A number specified the amount of jobs to keep, see KeepJobs if using that interface instead. // Default behavior is to keep the job in the failed set. stackTraceLimit : number ; // Limits the amount of stack trace lines that will be recorded in the stacktrace. } KeepJobs Options TypeScript /** * KeepJobs * * Specify which jobs to keep after finishing. If both age and count are * specified, then the jobs kept will be the ones that satisfies both * properties. */ export interface KeepJobs { /** * Maximum age in *seconds* for job to be kept. */ age? : number ; /** * Maximum count of jobs to be kept. */ count? : number ; } Timeout Implementation It is important to note that jobs are not proactively stopped after the given timeout . The job is marked as failed and the job's promise is rejected, but Bull has no way to stop the processor function externally. If you need to a job to stop processing after it times out, here are a couple suggestions: Have the job itself periodically check job.getStatus() , and exit if the status becomes 'failed' Implement the job as a cancelable promise . If the processor's promise has a cancel() method, it will be called when a job times out, and the job can respond accordingly. (Note: currently this only works for native Promises, see #2203 If you have a way to externally stop a job, add a listener for the failed event and do so there. Repeated Job Details TypeScript interface RepeatOpts { cron? : string ; // Cron string tz? : string ; // Timezone startDate? : Date | string | number ; // Start date when the repeat job should start repeating (only with cron). endDate? : Date | string | number ; // End date when the repeat job should stop repeating. limit? : number ; // Number of times the job should repeat at max. every? : number ; // Repeat every millis (cron setting cannot be used together with this setting.) count? : number ; // The start value for the repeat iteration count. readonly key : string ; // The key for the repeatable job metadata in Redis. } Adding a job with the repeat option set will actually do two things immediately: create a Repeatable Job configuration, and schedule a regular delayed job for the job's first run. This first run will be scheduled \"on the hour\", that is if you create a job that repeats every 15 minutes at 4:07, the job will first run at 4:15, then 4:30, and so on. If startDate is set, the job will not run before startDate , but will still run \"on the hour\". In the previous example, if startDate was set for some day at 6:05, the same day, the first job would run on that day at 6:15. The cron expression uses the cron-parser library, see their docs for more details. The Repeatable Job configuration is not a job, so it will not show up in methods like getJobs() . To manage Repeatable Job configurations, use getRepeatableJobs() and similar. This also means repeated jobs do not participate in evaluating jobId uniqueness - that is, a non-repeatable job can have the same jobId as a Repeatable Job configuration, and two Repeatable Job configurations can have the same jobId as long as they have different repeat options. That is, the following code will result in three jobs being created (one immediate and two delayed): TypeScript await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); // Will not be created, same repeat configuration await queue . add ({}, { jobId : \"example\" , repeat : { every : 10 * 1000 } }); // Will be created, different repeat configuration await queue . add ({}, { jobId : \"example\" }); // Will be created, no regular job with this id await queue . add ({}, { jobId : \"example\" }); // Will not be created, conflicts with previous regular job Backoff Options TypeScript interface BackoffOpts { type : string ; // Backoff type, which can be either `fixed` or `exponential`. A custom backoff strategy can also be specified in `backoffStrategies` on the queue settings. delay : number ; // Backoff delay, in milliseconds. } Queue#addBulk TypeScript addBulk ( jobs : { name? : string , data : object , opts? : JobOpts }[]) : Promise < Job [] > Creates array of jobs and adds them to the queue. They follow the same signature as Queue#add . Queue#pause TypeScript pause ( isLocal? : boolean , doNotWaitActive? : boolean ) : Promise Returns a promise that resolves when the queue is paused. A paused queue will not process new jobs until resumed, but current jobs being processed will continue until they are finalized. The pause can be either global or local. If global, all workers in all queue instances for a given queue will be paused. If local, just this worker will stop processing new jobs after the current lock expires. This can be useful to stop a worker from taking new jobs prior to shutting down. If doNotWaitActive is true , pause will not wait for any active jobs to finish before resolving. Otherwise, pause will wait for active jobs to finish. See Queue#whenCurrentJobsFinished for more information. Pausing a queue that is already paused does nothing. Queue#isPaused TypeScript isPaused ( isLocal? : boolean ) : Promise < boolean > Checks if the queue is paused. Pass true if you need to know if this particular instance is paused. Queue#resume TypeScript resume ( isLocal? : boolean ) : Promise Returns a promise that resolves when the queue is resumed after being paused. The resume can be either local or global. If global, all workers in all queue instances for a given queue will be resumed. If local, only this worker will be resumed. Note that resuming a queue globally will not resume workers that have been paused locally; for those, resume(true) must be called directly on their instances. Resuming a queue that is not paused does nothing. Queue#whenCurrentJobsFinished TypeScript whenCurrentJobsFinished () : Promise < Void > Returns a promise that resolves when all jobs currently being processed by this worker have finished. Queue#count TypeScript count () : Promise < number > Returns a promise that returns the number of jobs in the queue, waiting or delayed. Since there may be other processes adding or processing jobs, this value may be true only for a very small amount of time. Queue#removeJobs TypeScript removeJobs ( pattern : string ) : Promise < void > Removes all the jobs which jobId matches the given pattern. The pattern must follow redis glob-style pattern (syntax)[https://redis.io/commands/keys] Example: JavaScript myQueue . removeJobs ( \"?oo*\" ). then ( function () { console . log ( \"done removing jobs\" ); }); Will remove jobs with ids such as: \"boo\", \"foofighter\", etc. Note: This method does not affect Repeatable Job configurations, instead use removeRepeatable() or removeRepeatableByKey() Queue#empty TypeScript empty () : Promise Drains a queue deleting all the input lists and associated jobs. Note: This function only removes the jobs that are waiting to be processed by the queue or delayed . Jobs in other states (active, failed, completed) and Repeatable Job configurations will remain, and repeatable jobs will continue to be created on schedule. To remove other job statuses, use clean() , and to remove everything including Repeatable Job configurations, use obliterate() . Queue#close TypeScript close () : Promise Closes the underlying Redis client. Use this to perform a graceful shutdown. JavaScript const Queue = require ( \"bull\" ); const queue = Queue ( \"example\" ); const after100 = _ . after ( 100 , function () { queue . close (). then ( function () { console . log ( \"done\" ); }); }); queue . on ( \"completed\" , after100 ); close can be called from anywhere, with one caveat: if called from within a job handler the queue won't close until after the job has been processed, so the following won't work: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (). then ( jobDone ); }); Instead, do this: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (); jobDone (); }); Or this: JavaScript queue . process ( function ( job ) { queue . close (); return handle ( job ). then (...); }); Queue#getJob TypeScript getJob ( jobId : string ) : Promise < Job > Returns a promise that will return the job instance associated with the jobId parameter. If the specified job cannot be located, the promise will be resolved to null . Note: This method does not return Repeatable Job configurations, to do so see getRepeatableJobs() Queue#getJobs TypeScript getJobs ( types : JobStatus [], start? : number , end? : number , asc? : boolean ) : Promise < Job [] > Returns a promise that will return an array of job instances of the given job statuses. Optional parameters for range and ordering are provided. Note: The start and end options are applied per job statuses . For example, if there are 10 jobs in state completed and 10 jobs in state active , getJobs(['completed', 'active'], 0, 4) will yield an array with 10 entries, representing the first 5 completed jobs (0 - 4) and the first 5 active jobs (0 - 4). This method does not return Repeatable Job configurations, to do so see getRepeatableJobs() Queue#getJobLogs TypeScript getJobLogs ( jobId : string , start? : number , end? : number ) : Promise < { logs : string [], count : number } > Returns a object with the logs according to the start and end arguments. The returned count value is the total amount of logs, useful for implementing pagination. Queue#getRepeatableJobs TypeScript getRepeatableJobs ( start? : number , end? : number , asc? : boolean ) : Promise < { key : string , name : string , id : number | string , endDate : Date , tz : string , cron : string , every : number , next : number }[] > Returns a promise that will return an array of Repeatable Job configurations. Optional parameters for range and ordering are provided. Queue#removeRepeatable TypeScript removeRepeatable ( name? : string , repeat : RepeatOpts ) : Promise < void > Removes a given Repeatable Job configuration. The RepeatOpts needs to be the same as the ones used for the job when it was added. Queue#removeRepeatableByKey TypeScript removeRepeatableByKey ( key : string ) : Promise < void > Removes a given Repeatable Job configuration by its key so that no more repeatable jobs will be processed for this particular configuration. There are currently two ways to get the \"key\" of a repeatable job. When first creating the job, queue.add() will return a job object with the key for that job, which you can store for later use: TypeScript const job = await queue . add ( \"remove\" , { example : \"data\" }, { repeat : { every : 1000 } }); // store job.opts.repeat.key somewhere... const repeatableKey = job . opts . repeat . key ; // ...then later... await queue . removeRepeatableByKey ( repeatableKey ); Otherwise, you can list all repeatable jobs with getRepeatableJobs() , find the job you want to remove in the list, and use the key there to remove it: TypeScript await queue . add ( \"remove\" , { example : \"data\" }, { jobId : \"findMe\" , repeat : { every : 1000 } }); // ... then later ... const repeatableJobs = await queue . getRepeatableJobs (); const foundJob = repeatableJobs . find (( job ) => job . id === \"findMe\" ); await queue . removeRepeatableByKey ( foundJob . key ); Queue#getJobCounts TypeScript getJobCounts () : Promise < JobCounts > Returns a promise that will return the job counts for the given queue. ```typescript{ interface JobCounts { waiting: number, active: number, completed: number, failed: number, delayed: number } } Text Only --- ### Queue#getCompletedCount ```ts getCompletedCount() : Promise<number> Returns a promise that will return the completed job counts for the given queue. Queue#getFailedCount TypeScript getFailedCount () : Promise < number > Returns a promise that will return the failed job counts for the given queue. Queue#getDelayedCount TypeScript getDelayedCount () : Promise < number > Returns a promise that will return the delayed job counts for the given queue. Queue#getActiveCount TypeScript getActiveCount () : Promise < number > Returns a promise that will return the active job counts for the given queue. Queue#getWaitingCount TypeScript getWaitingCount () : Promise < number > Returns a promise that will return the waiting job counts for the given queue. Queue#getPausedCount DEPRECATED Since only the queue can be paused, getWaitingCount gives the same result. TypeScript getPausedCount () : Promise < number > Returns a promise that will return the paused job counts for the given queue. Getters The following methods are used to get the jobs that are in certain states. The GetterOpts can be used for configure some aspects from the getters. TypeScript interface GetterOpts excludeData : boolean ; // Exclude the data field of the jobs. Queue#getWaiting TypeScript getWaiting ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the waiting jobs between start and end. Queue#getActive TypeScript getActive ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the active jobs between start and end. Queue#getDelayed TypeScript getDelayed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the delayed jobs between start and end. Queue#getCompleted TypeScript getCompleted ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the completed jobs between start and end. Queue#getFailed TypeScript getFailed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the failed jobs between start and end. Queue#getWorkers TypeScript getWorkers () : Promise < Array < Object >> Returns a promise that will return an array workers currently listening or processing jobs. The object includes the same fields as Redis CLIENT LIST command. Queue#clean TypeScript clean ( grace : number , status? : string , limit? : number ) : Promise < number [] > Tells the queue remove jobs of a specific type created outside of a grace period. Example JavaScript queue . on ( \"cleaned\" , function ( jobs , type ) { console . log ( \"Cleaned %s %s jobs\" , jobs . length , type ); }); //cleans all jobs that completed over 5 seconds ago. await queue . clean ( 5000 ); //clean all jobs that failed over 10 seconds ago. await queue . clean ( 10000 , \"failed\" ); Queue#obliterate TypeScript obliterate ( ops ?: { force : boolean }) : Promise < void > Completely removes a queue with all its data. In order to obliterate a queue there cannot be active jobs, but this behaviour can be overrided with the \"force\" option. Note: since this operation can be quite long in duration depending on how many jobs there are in the queue, it is not performed atomically, instead is performed iterativelly. However the queue is always paused during this process, if the queue gets unpaused during the obliteration by another script, the call will fail with the removed items it managed to remove until the failure. Example JavaScript // Removes everything but only if there are no active jobs await queue . obliterate (); await queue . obliterate ({ force : true });","title":"Queue"},{"location":"docs/bull/bull/reference/queue/#custom-or-shared-ioredis-connections","text":"createClient is passed a type to specify the type of connection that Bull is trying to create, and some options that bull would like to set for that connection. You can merge the provided options with some of your own and create an ioredis connection. When type is client or subscriber you can return the same connection for multiple queues, which can reduce the number of connections you open to the redis server. Bull does not close or disconnect these connections when queues are closed, so if you need to have your app do a graceful shutdown, you will need to keep references to these Redis connections somewhere and disconnect them after you shut down all the queues. The bclient connection however is a \"blocking client\" and is used to wait for new jobs on a single queue at a time. For this reason it cannot be shared and a new connection should be returned each time.","title":"Custom or Shared IORedis Connections"},{"location":"docs/bull/bull/reference/queue/#advanced-settings","text":"Warning: Do not override these advanced settings unless you understand the internals of the queue. lockDuration : Time in milliseconds to acquire the job lock. Set this to a higher value if you find that your jobs are being stalled because your job processor is CPU-intensive and blocking the event loop (see note below about stalled jobs). Set this to a lower value if your jobs are extremely time-sensitive and it might be OK if they get double-processed (due to them be falsly considered stalled). lockRenewTime : Interval in milliseconds on which to acquire the job lock. It is set to lockDuration / 2 by default to give enough buffer to renew the lock each time before the job lock expires. It should never be set to a value larger than lockDuration . Set this to a lower value if you're finding that jobs are becoming stalled due to a CPU-intensive job processor function. Generally you shouldn't change this though. stalledInterval : Interval in milliseconds on which each worker will check for stalled jobs (i.e. unlocked jobs in the active state). See note below about stalled jobs. Set this to a lower value if your jobs are extremely time-sensitive. Set this to a higher value if your Redis CPU usage is high as this check can be expensive. Note that because each worker runs this on its own interval and checks the entire queue, the stalled job actually run much more frequently than this value would imply. maxStalledCount : The maximum number of times a job can be restarted before it will be permamently failed with the error job stalled more than allowable limit . This is set to a default of 1 with the assumption that stalled jobs should be very rare (only due to process crashes) and you want to be on the safer side of not restarting jobs. Set this higher if stalled jobs are common (e.g. processes crash a lot) and it's generally OK to double process jobs. guardInterval : Interval in milliseconds on which the delayed job watchdog will run. When running multiple concurrent workers with delayed tasks, the default value of guardInterval will cause spikes on network bandwidth, cpu usage and memory usage. Each concurrent worker will run the delayed job watchdog. In this case set this value to something much higher, e.g. guardInterval = numberOfWorkers*5000 . Set to a lower value if your Redis connection is unstable and delayed jobs aren't being processed in time. retryProcessDelay : Time in milliseconds in which to wait before trying to process jobs, in case of a Redis error. Set to a lower value on an unstable Redis connection. backoffStrategies : An object containing custom backoff strategies. The key in the object is the name of the strategy and the value is a function that should return the delay in milliseconds. For a full example see Patterns . drainDelay : A timeout for when the queue is in drained state (empty waiting for jobs). It is used when calling queue.getNextJob() , which will pass it to .brpoplpush on the Redis client. JavaScript backoffStrategies : { jitter : function () { return 5000 + Math . random () * 500 ; } }","title":"Advanced Settings"},{"location":"docs/bull/bull/reference/queue/#queueprocess","text":"TypeScript /** * Consider these as overloaded functions. Since method overloading doesn't exist in javacript * bull recognizes the desired function call by checking the parameters' types. Make sure you * comply with one of the below defined patterns. * * Note: Concurrency defaults to 1 if not specified. */ process ( processor : (( job , done ? ) => Promise < any > ) | string ) process ( concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , processor : (( job , done ? ) => Promise < any > ) | string ) process ( name : string , concurrency : number , processor : (( job , done ? ) => Promise < any > ) | string ) Defines a processing function for the jobs in a given Queue. The callback is called every time a job is placed in the queue. It is passed an instance of the job as first argument. If the callback signature contains the second optional done argument, the callback will be passed a done callback to be called after the job has been completed. The done callback can be called with an Error instance, to signal that the job did not complete successfully, or with a result as second argument (e.g.: done(null, result); ) when the job is successful. Errors will be passed as a second argument to the \"failed\" event; results, as a second argument to the \"completed\" event. If, however, the callback signature does not contain the done argument, a promise must be returned to signal job completion. If the promise is rejected, the error will be passed as a second argument to the \"failed\" event. If it is resolved, its value will be the \"completed\" event's second argument. You can specify a concurrency argument. Bull will then call your handler in parallel respecting this maximum value. A process function can also be declared as a separate process. This will make a better use of the available CPU cores and run the jobs in parallel. This is a perfect way to run blocking code. Just specify an absolute path to a processor module. i.e. a file exporting the process function like this: JavaScript // my-processor.js module . exports = function ( job ) { // do some job return value ; }; You can return a value or a promise to signal that the job has been completed. A name argument can be provided so that multiple process functions can be defined per queue. A named process will only process jobs that matches the given name. However, if you define multiple named process functions in one Queue, the defined concurrency for each process function stacks up for the Queue. See the following examples: JavaScript /*** * For each named processor, concurrency stacks up, so any of these three process functions * can run with a concurrency of 125. To avoid this behaviour you need to create an own queue * for each process function. */ const loadBalancerQueue = new Queue ( \"loadbalancer\" ); loadBalancerQueue . process ( \"requestProfile\" , 100 , requestProfile ); loadBalancerQueue . process ( \"sendEmail\" , 25 , sendEmail ); loadBalancerQueue . process ( \"sendInvitation\" , 0 , sendInvite ); const profileQueue = new Queue ( \"profile\" ); // Max concurrency for requestProfile is 100 profileQueue . process ( \"requestProfile\" , 100 , requestProfile ); const emailQueue = new Queue ( \"email\" ); // Max concurrency for sendEmail is 25 emailQueue . process ( \"sendEmail\" , 25 , sendEmail ); Specifying * as the process name will make it the default processor for all named jobs. It is frequently used to process all named jobs from one process function: JavaScript const differentJobsQueue = new Queue ( \"differentJobsQueue\" ); differentJobsQueue . process ( \"*\" , processFunction ); differentJobsQueue . add ( \"jobA\" , data , opts ); differentJobsQueue . add ( \"jobB\" , data , opts ); Note: in order to determine whether job completion is signaled by returning a promise or calling the done callback, Bull looks at the length property of the callback you pass to it. So watch out, as the following won't work: JavaScript // THIS WON'T WORK!! queue . process ( function ( job , done ) { // Oops! done callback here! return Promise . resolve (); }); This, however, will: JavaScript queue . process ( function ( job ) { // No done callback here :) return Promise . resolve (); });","title":"Queue#process"},{"location":"docs/bull/bull/reference/queue/#queueadd","text":"TypeScript add ( name? : string , data : object , opts? : JobOpts ) : Promise < Job > Creates a new job and adds it to the queue. If the queue is empty the job will be executed directly, otherwise it will be placed in the queue and executed as soon as possible. An optional name can be added, so that only process functions defined for that name (also called job type) will process the job. Note: You need to define processors for all the named jobs that you add to your queue or the queue will complain that you are missing a processor for the given job, unless you use the * as job name when defining the processor. TypeScript interface JobOpts { priority : number ; // Optional priority value. ranges from 1 (highest priority) to MAX_INT (lowest priority). Note that // using priorities has a slight impact on performance, so do not use it if not required. delay : number ; // An amount of milliseconds to wait until this job can be processed. Note that for accurate delays, both // server and clients should have their clocks synchronized. [optional]. attempts : number ; // The total number of attempts to try the job until it completes. repeat : RepeatOpts ; // Repeat job according to a cron specification, see below for details. backoff : number | BackoffOpts ; // Backoff setting for automatic retries if the job fails, default strategy: `fixed`. // Needs `attempts` to be set. lifo : boolean ; // if true, adds the job to the right of the queue instead of the left (default false) timeout : number ; // The number of milliseconds after which the job should fail with a timeout error [optional] jobId : number | string ; // Override the job ID - by default, the job ID is a unique // integer, but you can use this setting to override it. // If you use this option, it is up to you to ensure the // jobId is unique. If you attempt to add a job with an id that // already exists, it will not be added (see caveat below about repeatable jobs). removeOnComplete : boolean | number | KeepJobs ; // If true, removes the job when it successfully // completes. A number specified the amount of jobs to keep. Default behavior is to keep the job in the completed set. // See KeepJobs if using that interface instead. removeOnFail : boolean | number | KeepJobs ; // If true, removes the job when it fails after all attempts. A number specified the amount of jobs to keep, see KeepJobs if using that interface instead. // Default behavior is to keep the job in the failed set. stackTraceLimit : number ; // Limits the amount of stack trace lines that will be recorded in the stacktrace. }","title":"Queue#add"},{"location":"docs/bull/bull/reference/queue/#keepjobs-options","text":"TypeScript /** * KeepJobs * * Specify which jobs to keep after finishing. If both age and count are * specified, then the jobs kept will be the ones that satisfies both * properties. */ export interface KeepJobs { /** * Maximum age in *seconds* for job to be kept. */ age? : number ; /** * Maximum count of jobs to be kept. */ count? : number ; }","title":"KeepJobs Options"},{"location":"docs/bull/bull/reference/queue/#timeout-implementation","text":"It is important to note that jobs are not proactively stopped after the given timeout . The job is marked as failed and the job's promise is rejected, but Bull has no way to stop the processor function externally. If you need to a job to stop processing after it times out, here are a couple suggestions: Have the job itself periodically check job.getStatus() , and exit if the status becomes 'failed' Implement the job as a cancelable promise . If the processor's promise has a cancel() method, it will be called when a job times out, and the job can respond accordingly. (Note: currently this only works for native Promises, see #2203 If you have a way to externally stop a job, add a listener for the failed event and do so there.","title":"Timeout Implementation"},{"location":"docs/bull/bull/reference/queue/#repeated-job-details","text":"TypeScript interface RepeatOpts { cron? : string ; // Cron string tz? : string ; // Timezone startDate? : Date | string | number ; // Start date when the repeat job should start repeating (only with cron). endDate? : Date | string | number ; // End date when the repeat job should stop repeating. limit? : number ; // Number of times the job should repeat at max. every? : number ; // Repeat every millis (cron setting cannot be used together with this setting.) count? : number ; // The start value for the repeat iteration count. readonly key : string ; // The key for the repeatable job metadata in Redis. } Adding a job with the repeat option set will actually do two things immediately: create a Repeatable Job configuration, and schedule a regular delayed job for the job's first run. This first run will be scheduled \"on the hour\", that is if you create a job that repeats every 15 minutes at 4:07, the job will first run at 4:15, then 4:30, and so on. If startDate is set, the job will not run before startDate , but will still run \"on the hour\". In the previous example, if startDate was set for some day at 6:05, the same day, the first job would run on that day at 6:15. The cron expression uses the cron-parser library, see their docs for more details. The Repeatable Job configuration is not a job, so it will not show up in methods like getJobs() . To manage Repeatable Job configurations, use getRepeatableJobs() and similar. This also means repeated jobs do not participate in evaluating jobId uniqueness - that is, a non-repeatable job can have the same jobId as a Repeatable Job configuration, and two Repeatable Job configurations can have the same jobId as long as they have different repeat options. That is, the following code will result in three jobs being created (one immediate and two delayed): TypeScript await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); await queue . add ({}, { jobId : \"example\" , repeat : { every : 5 * 1000 } }); // Will not be created, same repeat configuration await queue . add ({}, { jobId : \"example\" , repeat : { every : 10 * 1000 } }); // Will be created, different repeat configuration await queue . add ({}, { jobId : \"example\" }); // Will be created, no regular job with this id await queue . add ({}, { jobId : \"example\" }); // Will not be created, conflicts with previous regular job","title":"Repeated Job Details"},{"location":"docs/bull/bull/reference/queue/#backoff-options","text":"TypeScript interface BackoffOpts { type : string ; // Backoff type, which can be either `fixed` or `exponential`. A custom backoff strategy can also be specified in `backoffStrategies` on the queue settings. delay : number ; // Backoff delay, in milliseconds. }","title":"Backoff Options"},{"location":"docs/bull/bull/reference/queue/#queueaddbulk","text":"TypeScript addBulk ( jobs : { name? : string , data : object , opts? : JobOpts }[]) : Promise < Job [] > Creates array of jobs and adds them to the queue. They follow the same signature as Queue#add .","title":"Queue#addBulk"},{"location":"docs/bull/bull/reference/queue/#queuepause","text":"TypeScript pause ( isLocal? : boolean , doNotWaitActive? : boolean ) : Promise Returns a promise that resolves when the queue is paused. A paused queue will not process new jobs until resumed, but current jobs being processed will continue until they are finalized. The pause can be either global or local. If global, all workers in all queue instances for a given queue will be paused. If local, just this worker will stop processing new jobs after the current lock expires. This can be useful to stop a worker from taking new jobs prior to shutting down. If doNotWaitActive is true , pause will not wait for any active jobs to finish before resolving. Otherwise, pause will wait for active jobs to finish. See Queue#whenCurrentJobsFinished for more information. Pausing a queue that is already paused does nothing.","title":"Queue#pause"},{"location":"docs/bull/bull/reference/queue/#queueispaused","text":"TypeScript isPaused ( isLocal? : boolean ) : Promise < boolean > Checks if the queue is paused. Pass true if you need to know if this particular instance is paused.","title":"Queue#isPaused"},{"location":"docs/bull/bull/reference/queue/#queueresume","text":"TypeScript resume ( isLocal? : boolean ) : Promise Returns a promise that resolves when the queue is resumed after being paused. The resume can be either local or global. If global, all workers in all queue instances for a given queue will be resumed. If local, only this worker will be resumed. Note that resuming a queue globally will not resume workers that have been paused locally; for those, resume(true) must be called directly on their instances. Resuming a queue that is not paused does nothing.","title":"Queue#resume"},{"location":"docs/bull/bull/reference/queue/#queuewhencurrentjobsfinished","text":"TypeScript whenCurrentJobsFinished () : Promise < Void > Returns a promise that resolves when all jobs currently being processed by this worker have finished.","title":"Queue#whenCurrentJobsFinished"},{"location":"docs/bull/bull/reference/queue/#queuecount","text":"TypeScript count () : Promise < number > Returns a promise that returns the number of jobs in the queue, waiting or delayed. Since there may be other processes adding or processing jobs, this value may be true only for a very small amount of time.","title":"Queue#count"},{"location":"docs/bull/bull/reference/queue/#queueremovejobs","text":"TypeScript removeJobs ( pattern : string ) : Promise < void > Removes all the jobs which jobId matches the given pattern. The pattern must follow redis glob-style pattern (syntax)[https://redis.io/commands/keys] Example: JavaScript myQueue . removeJobs ( \"?oo*\" ). then ( function () { console . log ( \"done removing jobs\" ); }); Will remove jobs with ids such as: \"boo\", \"foofighter\", etc. Note: This method does not affect Repeatable Job configurations, instead use removeRepeatable() or removeRepeatableByKey()","title":"Queue#removeJobs"},{"location":"docs/bull/bull/reference/queue/#queueempty","text":"TypeScript empty () : Promise Drains a queue deleting all the input lists and associated jobs. Note: This function only removes the jobs that are waiting to be processed by the queue or delayed . Jobs in other states (active, failed, completed) and Repeatable Job configurations will remain, and repeatable jobs will continue to be created on schedule. To remove other job statuses, use clean() , and to remove everything including Repeatable Job configurations, use obliterate() .","title":"Queue#empty"},{"location":"docs/bull/bull/reference/queue/#queueclose","text":"TypeScript close () : Promise Closes the underlying Redis client. Use this to perform a graceful shutdown. JavaScript const Queue = require ( \"bull\" ); const queue = Queue ( \"example\" ); const after100 = _ . after ( 100 , function () { queue . close (). then ( function () { console . log ( \"done\" ); }); }); queue . on ( \"completed\" , after100 ); close can be called from anywhere, with one caveat: if called from within a job handler the queue won't close until after the job has been processed, so the following won't work: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (). then ( jobDone ); }); Instead, do this: JavaScript queue . process ( function ( job , jobDone ) { handle ( job ); queue . close (); jobDone (); }); Or this: JavaScript queue . process ( function ( job ) { queue . close (); return handle ( job ). then (...); });","title":"Queue#close"},{"location":"docs/bull/bull/reference/queue/#queuegetjob","text":"TypeScript getJob ( jobId : string ) : Promise < Job > Returns a promise that will return the job instance associated with the jobId parameter. If the specified job cannot be located, the promise will be resolved to null . Note: This method does not return Repeatable Job configurations, to do so see getRepeatableJobs()","title":"Queue#getJob"},{"location":"docs/bull/bull/reference/queue/#queuegetjobs","text":"TypeScript getJobs ( types : JobStatus [], start? : number , end? : number , asc? : boolean ) : Promise < Job [] > Returns a promise that will return an array of job instances of the given job statuses. Optional parameters for range and ordering are provided. Note: The start and end options are applied per job statuses . For example, if there are 10 jobs in state completed and 10 jobs in state active , getJobs(['completed', 'active'], 0, 4) will yield an array with 10 entries, representing the first 5 completed jobs (0 - 4) and the first 5 active jobs (0 - 4). This method does not return Repeatable Job configurations, to do so see getRepeatableJobs()","title":"Queue#getJobs"},{"location":"docs/bull/bull/reference/queue/#queuegetjoblogs","text":"TypeScript getJobLogs ( jobId : string , start? : number , end? : number ) : Promise < { logs : string [], count : number } > Returns a object with the logs according to the start and end arguments. The returned count value is the total amount of logs, useful for implementing pagination.","title":"Queue#getJobLogs"},{"location":"docs/bull/bull/reference/queue/#queuegetrepeatablejobs","text":"TypeScript getRepeatableJobs ( start? : number , end? : number , asc? : boolean ) : Promise < { key : string , name : string , id : number | string , endDate : Date , tz : string , cron : string , every : number , next : number }[] > Returns a promise that will return an array of Repeatable Job configurations. Optional parameters for range and ordering are provided.","title":"Queue#getRepeatableJobs"},{"location":"docs/bull/bull/reference/queue/#queueremoverepeatable","text":"TypeScript removeRepeatable ( name? : string , repeat : RepeatOpts ) : Promise < void > Removes a given Repeatable Job configuration. The RepeatOpts needs to be the same as the ones used for the job when it was added.","title":"Queue#removeRepeatable"},{"location":"docs/bull/bull/reference/queue/#queueremoverepeatablebykey","text":"TypeScript removeRepeatableByKey ( key : string ) : Promise < void > Removes a given Repeatable Job configuration by its key so that no more repeatable jobs will be processed for this particular configuration. There are currently two ways to get the \"key\" of a repeatable job. When first creating the job, queue.add() will return a job object with the key for that job, which you can store for later use: TypeScript const job = await queue . add ( \"remove\" , { example : \"data\" }, { repeat : { every : 1000 } }); // store job.opts.repeat.key somewhere... const repeatableKey = job . opts . repeat . key ; // ...then later... await queue . removeRepeatableByKey ( repeatableKey ); Otherwise, you can list all repeatable jobs with getRepeatableJobs() , find the job you want to remove in the list, and use the key there to remove it: TypeScript await queue . add ( \"remove\" , { example : \"data\" }, { jobId : \"findMe\" , repeat : { every : 1000 } }); // ... then later ... const repeatableJobs = await queue . getRepeatableJobs (); const foundJob = repeatableJobs . find (( job ) => job . id === \"findMe\" ); await queue . removeRepeatableByKey ( foundJob . key );","title":"Queue#removeRepeatableByKey"},{"location":"docs/bull/bull/reference/queue/#queuegetjobcounts","text":"TypeScript getJobCounts () : Promise < JobCounts > Returns a promise that will return the job counts for the given queue. ```typescript{ interface JobCounts { waiting: number, active: number, completed: number, failed: number, delayed: number } } Text Only --- ### Queue#getCompletedCount ```ts getCompletedCount() : Promise<number> Returns a promise that will return the completed job counts for the given queue.","title":"Queue#getJobCounts"},{"location":"docs/bull/bull/reference/queue/#queuegetfailedcount","text":"TypeScript getFailedCount () : Promise < number > Returns a promise that will return the failed job counts for the given queue.","title":"Queue#getFailedCount"},{"location":"docs/bull/bull/reference/queue/#queuegetdelayedcount","text":"TypeScript getDelayedCount () : Promise < number > Returns a promise that will return the delayed job counts for the given queue.","title":"Queue#getDelayedCount"},{"location":"docs/bull/bull/reference/queue/#queuegetactivecount","text":"TypeScript getActiveCount () : Promise < number > Returns a promise that will return the active job counts for the given queue.","title":"Queue#getActiveCount"},{"location":"docs/bull/bull/reference/queue/#queuegetwaitingcount","text":"TypeScript getWaitingCount () : Promise < number > Returns a promise that will return the waiting job counts for the given queue.","title":"Queue#getWaitingCount"},{"location":"docs/bull/bull/reference/queue/#queuegetpausedcount","text":"DEPRECATED Since only the queue can be paused, getWaitingCount gives the same result. TypeScript getPausedCount () : Promise < number > Returns a promise that will return the paused job counts for the given queue.","title":"Queue#getPausedCount"},{"location":"docs/bull/bull/reference/queue/#getters","text":"The following methods are used to get the jobs that are in certain states. The GetterOpts can be used for configure some aspects from the getters. TypeScript interface GetterOpts excludeData : boolean ; // Exclude the data field of the jobs.","title":"Getters"},{"location":"docs/bull/bull/reference/queue/#queuegetwaiting","text":"TypeScript getWaiting ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the waiting jobs between start and end.","title":"Queue#getWaiting"},{"location":"docs/bull/bull/reference/queue/#queuegetactive","text":"TypeScript getActive ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the active jobs between start and end.","title":"Queue#getActive"},{"location":"docs/bull/bull/reference/queue/#queuegetdelayed","text":"TypeScript getDelayed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the delayed jobs between start and end.","title":"Queue#getDelayed"},{"location":"docs/bull/bull/reference/queue/#queuegetcompleted","text":"TypeScript getCompleted ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the completed jobs between start and end.","title":"Queue#getCompleted"},{"location":"docs/bull/bull/reference/queue/#queuegetfailed","text":"TypeScript getFailed ( start? : number , end? : number , opts? : GetterOpts ) : Promise < Array < Job >> Returns a promise that will return an array with the failed jobs between start and end.","title":"Queue#getFailed"},{"location":"docs/bull/bull/reference/queue/#queuegetworkers","text":"TypeScript getWorkers () : Promise < Array < Object >> Returns a promise that will return an array workers currently listening or processing jobs. The object includes the same fields as Redis CLIENT LIST command.","title":"Queue#getWorkers"},{"location":"docs/bull/bull/reference/queue/#queueclean","text":"TypeScript clean ( grace : number , status? : string , limit? : number ) : Promise < number [] > Tells the queue remove jobs of a specific type created outside of a grace period.","title":"Queue#clean"},{"location":"docs/bull/bull/reference/queue/#example","text":"JavaScript queue . on ( \"cleaned\" , function ( jobs , type ) { console . log ( \"Cleaned %s %s jobs\" , jobs . length , type ); }); //cleans all jobs that completed over 5 seconds ago. await queue . clean ( 5000 ); //clean all jobs that failed over 10 seconds ago. await queue . clean ( 10000 , \"failed\" );","title":"Example"},{"location":"docs/bull/bull/reference/queue/#queueobliterate","text":"TypeScript obliterate ( ops ?: { force : boolean }) : Promise < void > Completely removes a queue with all its data. In order to obliterate a queue there cannot be active jobs, but this behaviour can be overrided with the \"force\" option. Note: since this operation can be quite long in duration depending on how many jobs there are in the queue, it is not performed atomically, instead is performed iterativelly. However the queue is always paused during this process, if the queue gets unpaused during the obliteration by another script, the call will fail with the removed items it managed to remove until the failure.","title":"Queue#obliterate"},{"location":"docs/bull/bull/reference/queue/#example_1","text":"JavaScript // Removes everything but only if there are no active jobs await queue . obliterate (); await queue . obliterate ({ force : true });","title":"Example"},{"location":"docs/bull/bull-3.x-migration/_index/","text":"","title":"\u8fc1\u79fb"},{"location":"docs/bull/bull-3.x-migration/compatibility-class/","text":"The Queue3 class is targeted to simplify migration of projects based on Bull 3. Though it does not offer 100% API and functional compatibility, upgrading to BullMQ with this class should be easier for users familiar with Bull 3. Differences in interface include fixed order of add() and process() method arguments class instantiation requires use of the new operator interfaces for Queue and Job options and Job class do not have wrappers and used directly there's no done argument expected in process() callback anymore; now the callback must always return a Promise object name property is mandatory in add() method concurrency is moved from process() argument to queue options Functional differences generally include only absence of named processors feature and minor changes in local and global events set. The mandatory name property in add() method can contain any string and getting saved to Redis as is. When job is in progress, you can read this value as job.name ( job.data and job.id are available as usual). See the [link] for details. The all-in-one example: TypeScript import { Job } from \"bullmq\" ; import { Queue3 } from \"bullmq/dist/classes/compat\" ; const queue = new Queue3 ( \"animals\" , { concurrency : 1 }); queue . process ( async ( job : Job ) => { return ` ${ job . name } s ${ job . data . sound } ing` ; }); queue . on ( \"completed\" , ( job : Job , result : any ) => { console . log ( `Job ${ job . id } is completed with result: ${ result } ` ); }); queue . add ( \"cat\" , { sound : \"meow\" }); queue . add ( \"cow\" , { sound : \"moo\" }); queue . add ( \"dog\" , { sound : \"bark\" }); \u0000","title":"\u517c\u5bb9\u6027\u7c7b"},{"location":"docs/bull/bullmq-pro/_index/","text":"","title":"Bullmq Pro"},{"location":"docs/bull/bullmq-pro/install/","text":"In order to install BullMQ Pro you need to use a NPM token from taskforce.sh . With the token at hand just update or create a . npmrc file in your app repository with the following contents: Text Only @taskforcesh:registry=https://npm.taskforce.sh/ //npm.taskforce.sh/:_authToken=${NPM_TASKFORCESH_TOKEN} always-auth=true \"NPM__TASKFORCESH__TOKEN\" is an environment variable pointing to your token. Then just install the @taskforcesh/bullmq-pro package as you would install any other package, with npm, yarn or pnpm: Text Only yarn add @taskforcesh/bullmq-pro In order to use BullMQ Pro just import the Pro versions of the classes. These classes are subclasses of the open source BullMQ library with new functionality: TypeScript import { QueuePro , WorkerPro } from \"@taskforcesh/bullmq-pro\" ; const queue = new QueuePro ( \"myQueue\" ); const worker = new WorkerPro ( \"myQueue\" , async ( job ) => { // Process job });","title":"\u5b89\u88c5"},{"location":"docs/bull/bullmq-pro/introduction/","text":"BullMQ Pro \u662f BullMQ \u7684\u5546\u4e1a\u7248\u672c\u3002\u8be5\u7248\u672c\u5305\u62ec\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\uff0c\u5e76\u63d0\u4f9b\u4e86\u5e93\u4f5c\u8005\u7684\u652f\u6301\u3002 \u8be5\u5305\u662f\u4f5c\u4e3a\u6807\u51c6 BullMQ \u7684\u66ff\u4ee3\u5b89\u88c5\u7684\uff0c\u53ea\u9700\u5b89\u88c5\u4e13\u4e1a\u7248\u5373\u53ef\u83b7\u5f97\u65b0\u7279\u6027\u3002 \u6709\u8d8a\u6765\u8d8a\u591a\u7684\u7279\u6027\u5c06\u5728 BullMQ Pro \u4e2d\u5b9e\u73b0\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b \u8def\u6807 \u6765\u4e86\u89e3\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u4ef7\u683c BullMQ Pro \u662f\u6388\u6743\u6bcf\u4e2a\u7ec4\u7ec7\u4e0e\u65e0\u9650\u4f7f\u7528\u60a8\u7684\u6240\u6709\u9879\u76ee\u3002 \u76ee\u524d\u7684\u4ef7\u683c\u662f 95 \u7f8e\u5143/\u6708\u6216 950 \u7f8e\u5143/\u5e74\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u60a8\u7684\u5e10\u6237\u7684\u201cBullMQ Pro\u201d\u6807\u7b7e\u4e0a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4ee4\u724c\u6765\u514d\u8d39\u8bd5\u7528\u3002","title":"\u4ecb\u7ecd"},{"location":"docs/bull/bullmq-pro/introduction/#_1","text":"BullMQ Pro \u662f\u6388\u6743\u6bcf\u4e2a\u7ec4\u7ec7\u4e0e\u65e0\u9650\u4f7f\u7528\u60a8\u7684\u6240\u6709\u9879\u76ee\u3002 \u76ee\u524d\u7684\u4ef7\u683c\u662f 95 \u7f8e\u5143/\u6708\u6216 950 \u7f8e\u5143/\u5e74\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u60a8\u7684\u5e10\u6237\u7684\u201cBullMQ Pro\u201d\u6807\u7b7e\u4e0a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4ee4\u724c\u6765\u514d\u8d39\u8bd5\u7528\u3002","title":"\u4ef7\u683c"},{"location":"docs/bull/bullmq-pro/observables/","text":"Instead of returning regular promises, you can also return an Observable, this allows for some more advanced uses cases: It makes possible to cleanly cancel a running job. You can define a \"Time to live\" (TTL) so that jobs that take too long time will be automatically cancelled. Since the last value returned by the observable is persisted, you could retry a job and continue where you left of, for example if the job implements a state machine or similar.","title":"\u89c2\u5bdf"},{"location":"docs/bull/bullmq-pro/groups/_index/","text":"Groups allows you to use only one queue yet distribute the jobs among groups so that the jobs are processed one by one relative to the group they belong to. For example, imagine that you have 1 queue for processing video transcoding for all your users, you may have thousands of users in your application. You need to offload the transcoding operation since it is lengthy and CPU consuming. If you have many users that want to transcode many files, then in a non-grouped queue one user could fill the queue with jobs and the rest of the users will need to wait for that user to complete all its jobs before their jobs get processed. Groups resolves this problem since jobs will be processed in a \" round-robin \" fashion among all the users. If you have several workers or a concurrency factor larger than one, jobs will be processed in parallel, but they will be picked up from the groups as mentioned before following a round-robin ordering. Of course you can have as many workers as you want and also scale up/down the amount of workers depending on how many jobs you have waiting in the queue. If you only use grouped jobs in a queue, the waiting jobs list will not grow, instead it will just keep the next job to be processed if any. But you can add non-grouped jobs to the same queue, and they will get precedence from the jobs waiting in their respective groups. {% hint style=\"info\" %} There is no hard limit on the amount of groups that you can have, nor do they have any impact on performance. When a group is empty, the group itself does not consume any resources in Redis. {% endhint %} Another way to see groups is like \"virtual\" queues. So instead of having one queue per \"user\" you have a \"virtual\" queue per user so that all users get their jobs processed in a more predictable way. In order to use the group functionality just use the group property in the job options when adding a job: TypeScript import { QueuePro } from \"@taskforcesh/bullmq-pro\" ; const queue = new QueuePro (); const job1 = await queue . add ( \"test\" , { foo : \"bar1\" }, { group : { id : 1 , }, } ); const job2 = await queue . add ( \"test\" , { foo : \"bar2\" }, { group : { id : 2 , }, } ); In order to process the jobs, just use a pro worker as you normally do with standard workers: TypeScript import { WorkerPro } from \"@taskforcesh/bullmq-pro\" ; const worker = new WorkerPro ( \"test\" , async ( job ) => { // Do something usefull. // You can also do something different depending on the group await doSomethingSpecialForMyGroup ( job . opts . group ); });","title":"Groups"},{"location":"docs/bull/bullmq-pro/groups/rate-limiting/","text":"A useful feature when using groups is to be able to rate limit the groups independently of each other, so you can evenly process the jobs belonging to many groups and still limit how many jobs per group are allowed to be processed by unit of time. The way the rate limiting works is that when the jobs for a given group exceed the maximum amount of jobs per unit of time that particular group gets rate limited. The jobs that belongs to this particular group will not be processed until the rate limit expires. For example \"group 2\" is rate limited in the following chart: While one or more groups are rate limited, the rest of the jobs belonging to non rate limited groups will continue to be consumed normally or until they also get rate limited. The rate limit is configured on the worker instances: TypeScript import { WorkerPro } from '@taskforcesh/bullmq-pro' ; const worker = new WorkerPro ( 'myQueue' , processFn , { groups : { limit : { max : 100 , // Limit to 100 jobs per second per group duration 1000 , } }, connection });","title":"\u901f\u5ea6\u9650\u5236"},{"location":"docs/bull/guide/_index/","text":"","title":"\u6307\u5357"},{"location":"docs/bull/guide/architecture/","text":"\u4e3a\u4e86\u5145\u5206\u5229\u7528 Bull \u961f\u5217\u7684\u6f5c\u529b\uff0c\u7406\u89e3\u4f5c\u4e1a\u7684\u751f\u547d\u5468\u671f\u662f\u5f88\u91cd\u8981\u7684\u3002 From the moment a producer calls the add method on a queue instance, a job enters a lifecycle where it will be in different states, until its completion or failure (although technically a failed job could be retried and get a new lifecycle). When a job is added to a queue it can be in one of two states, it can either be in the \u201cwait\u201d status, which is, in fact, a waiting list, where all jobs must enter before they can be processed, or it can be in a \u201cdelayed\u201d status: a delayed status implies that the job is waiting for some timeout or to be promoted for being processed, however, a delayed job will not be processed directly, instead it will be placed at the beginning of the waiting list and processed as soon as a worker is idle. The next state for a job Is the \u201cactive\u201d state. The active state is represented by a set, and are jobs that are currently being processed, i.e. they are running in the process function explained in the previous chapter. A job can be in the active state for an unlimited amount of time until the process is completed or an exception is thrown so that the job will end in either the \u201ccompleted\u201d or the \u201cfailed\u201d status.","title":"\u4f53\u7cfb\u7ed3\u6784"},{"location":"docs/bull/guide/connections/","text":"\u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528 Queue\uff0c\u8fde\u63a5\u5230 Redis \u5b9e\u4f8b\u662f\u5fc5\u8981\u7684\u3002 BullMQ uses the node module ioredis , and the options you pass to BullMQ are just passed to the constructor of ioredis. If you do not provide any options, it will default to port 6379 and localhost. Every class will consume at least one Redis connection, but it is also possible to reuse connections in some situations. For example, the Queue and Worker classes can accept an existing ioredis instance, and by that reusing that connection, however QueueScheduler and QueueEvents cannot do that because they require blocking connections to Redis, which makes it impossible to reuse them. Some examples: TypeScript import { Queue , Worker } from \"bullmq\" ; // Create a new connection in every instance const myQueue = new Queue ( \"myqueue\" , { connection : { host : \"myredis.taskforce.run\" , port : 32856 , }, }); const myWorker = new Worker ( \"myworker\" , async ( job ) => {}, { connection : { host : \"myredis.taskforce.run\" , port : 32856 , }, }); TypeScript import { Queue , Worker } from \"bullmq\" ; import IORedis from \"ioredis\" ; const connection = new IORedis (); // Reuse the ioredis instance const myQueue = new Queue ( \"myqueue\" , { connection }); const myWorker = new Worker ( \"myworker\" , async ( job ) => {}, { connection }); Note that in the second example, even though the ioredis instance is being reused, the worker will create a duplicated connection that it needs internally to make blocking connections. Please read on the ioredis documentation on how to properly create an instance of IORedis. If you can afford many connections, by all means just use them. Redis connections have quite low overhead, so you should not need to care about reusing connections unless your service provider is imposing you hard limitations. {% hint style=\"danger\" %} Make sure that your redis instance has the setting maxmemory-policy=noeviction in order to avoid automatic removal of keys which would cause unexpected errors in BullMQ {% endhint %}","title":"\u8fde\u63a5"},{"location":"docs/bull/guide/events/","text":"All classes in BullMQ emit useful events that inform on the lifecycles of the jobs that are running in the queue. Every class is an EventEmitter and emits different events. Some examples: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); myQueue . on ( \"waiting\" , ( job : Job ) => { // Job is waiting to be processed. }); TypeScript import { Worker } from \"bullmq\" ; const myWorker = new Worker ( \"Paint\" ); myWorker . on ( \"drained\" , () => { // Queue is drained, no more jobs left }); myWorker . on ( \"completed\" , ( job : Job ) => { // job has completed }); myWorker . on ( \"failed\" , ( job : Job ) => { // job has failed }); The events above are local for the workers that actually completed the jobs, however, in many situations you want to listen to all the events emitted by all the workers in one single place. For this you can use the QueueEvents class: TypeScript import { QueueEvents } from 'bullmq' ; const queueEvents = new QueueEvents ( 'Paint' ); queueEvents . on ( 'completed' , ({ jobId : string }) => { // Called every time a job is completed in any worker. }); queueEvents . on ( 'progress' , ({ jobId , data } : { jobId : string ; data : number | object })) => { // jobId received a progress event }); The QueueEvents class is implemented using Redis streams . This has some nice properties, for example, it provides guarantees that the events are delivered and not lost during disconnections such as it would be the case with standard pub-sub. {% hint style=\"danger\" %} The event stream is auto-trimmed so that its size does not grow too much, by default it is ~10.000 events, but this can be configured with the streams.events.maxLen option. {% endhint %}","title":"\u4e8b\u4ef6"},{"location":"docs/bull/guide/introduction/","text":"BullMQ \u57fa\u4e8e 4 \u4e2a\u7c7b\uff0c\u5b83\u4eec\u4e00\u8d77\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8bb8\u591a\u4e0d\u540c\u7684\u95ee\u9898\u3002 \u8fd9\u4e9b\u7c7b\u662f Queue , Worker , QueueScheduler and QueueEvents . \u60a8\u5e94\u8be5\u77e5\u9053\u7684\u7b2c\u4e00\u4e2a\u7c7b\u662f Queue \u7c7b\u3002 This class represents a queue and can be used for adding jobs to the queue as well as some other basic manipulation such as pausing, cleaning or getting data from the queue. Jobs in BullMQ are basically a user created data structure that can be stored in the queue. Jobs are processed by workers . A Worker is the second class you should be aware about. Workers are instances capable of processing jobs. You can have many workers, either running in the same Node.js process, or in separate processes as well as in different machines. They will all consume jobs from the queue and mark the jobs as completed or failed.","title":"\u4ecb\u7ecd"},{"location":"docs/bull/guide/queuescheduler/","text":"The QueueScheduler is a helper class used to manage stalled and delayed jobs for a given Queue. TypeScript import { QueueScheduler } from \"bullmq\" ; const queueScheduler = new QueueScheduler ( \"test\" ); // Later, when shuting down gracefully await queueScheduler . close (); This class automatically moves delayed jobs back to the waiting queue when it is the right time to process them. It also automatically checks for stalled jobs, i.e., detects jobs that are active but where the worker has either crashed or stopped working properly. Stalled jobs are moved back or failed depending on the settings selected when instantiating the class. {% hint style=\"info\" %} You need at least one QueueScheduler running somewhere for a given queue if you require functionality such as delayed jobs, retries with backoff and rate limiting. {% endhint %} The reason for having this functionality in a separate class instead of in the workers (as in Bull 3.x) is because whereas you may want to have a large number of workers for parallel processing, for the scheduler you probably only want a couple of instances for each queue that requires delayed or stalled checks. One will be enough but you can have more just for redundancy. {% hint style=\"warning\" %} It is ok to have as many QueueScheduler instances as you want, just keep in mind that every instance will perform some bookkeeping so it may create some noticeable CPU and IO usage in your Redis instances. {% endhint %}","title":"QueueScheduler"},{"location":"docs/bull/guide/rate-limiting/","text":"BullMQ provides rate limiting for the queues. It is possible to configure the workers so that they obey a given rate limiting option: TypeScript import { Worker , QueueScheduler } from \"bullmq\" ; const worker = new Worker ( \"painter\" , async ( job ) => paintCar ( job ), { limiter : { max : 10 , duration : 1000 , }, }); const scheduler = new QueueScheduler ( \"painter\" ); {% hint style=\"warning\" %} Jobs that get rate limited will actually end as delayed jobs, so you need at least one QueueScheduler somewhere in your deployment so that jobs are put back to the wait status. {% endhint %} {% hint style=\"info\" %} The rate limiter is global, so if you have for example 10 workers for one queue with the above settings, still only 10 jobs will be processed by second. {% endhint %} Group keys It is also possible to define a rate limiter based on group keys, for example you may want to have a rate limiter per customer instead of a global rate limiter for all customers: TypeScript import { Queue , Worker , QueueScheduler } from \"bullmq\" ; const queue = new Queue ( \"painter\" , { limiter : { groupKey : \"customerId\" , }, }); const worker = new Worker ( \"painter\" , async ( job ) => paintCar ( job ), { limiter : { max : 10 , duration : 1000 , groupKey : \"customerId\" , }, }); const scheduler = new QueueScheduler ( \"painter\" ); // jobs will be rate limited by the value of customerId key: await queue . add ( \"rate limited paint\" , { customerId : \"my-customer-id\" });","title":"\u9650\u901f"},{"location":"docs/bull/guide/rate-limiting/#group-keys","text":"It is also possible to define a rate limiter based on group keys, for example you may want to have a rate limiter per customer instead of a global rate limiter for all customers: TypeScript import { Queue , Worker , QueueScheduler } from \"bullmq\" ; const queue = new Queue ( \"painter\" , { limiter : { groupKey : \"customerId\" , }, }); const worker = new Worker ( \"painter\" , async ( job ) => paintCar ( job ), { limiter : { max : 10 , duration : 1000 , groupKey : \"customerId\" , }, }); const scheduler = new QueueScheduler ( \"painter\" ); // jobs will be rate limited by the value of customerId key: await queue . add ( \"rate limited paint\" , { customerId : \"my-customer-id\" });","title":"Group keys"},{"location":"docs/bull/guide/retrying-failing-jobs/","text":"When a processor throws an exception, the worker will catch it and move the job to the failed set. But sometimes it may be desirable to retry a failed job. BullMQ supports retries of failed jobs using backoff functions. It is possible to use the built in backoff functions or provide custom ones. For BullMQ to reschedule failed jobs, make sure you create a QueueScheduler for your queue. The code below shows how to specify a \"exponential\" backoff function with a 1 second delay as seed value, so it will retry at most 3 times spaced after 1 second, 2 seconds and 4 seconds: TypeScript import { Queue , QueueScheduler } from \"bullmq\" ; const myQueue = new Queue ( \"foo\" ); const myQueueScheduler = new QueueScheduler ( \"foo\" ); await queue . add ( \"test-retry\" , { foo : \"bar\" }, { attempts : 3 , backoff : { type : \"exponential\" , delay : 1000 , }, } ); You can also define it in the queue's defaultJobOptions , and it will apply to all jobs added to the queue, unless overridden. For example: TypeScript import { Queue , QueueScheduler } from \"bullmq\" ; const myQueue = new Queue ( \"foo\" , { defaultJobOptions : { attempts : 3 , backoff : { type : \"exponential\" , delay : 1000 , }, }, }); const myQueueScheduler = new QueueScheduler ( \"foo\" ); await queue . add ( \"test-retry\" , { foo : \"bar\" }); The current built-in backoff functions are \"exponential\" and \"fixed\". With an exponential backoff, it will retry after 2 ^ attempts * delay milliseconds. For example, with a delay of 3000 milliseconds, for the 7th attempt, it will retry 2^7 * 3000 milliseconds = 6.4 minutes after the previous attempt. With a fixed backoff, it will retry after delay milliseconds, so with a delay of 3000 milliseconds, it will retry every attempt 3000 milliseconds after the previous attempt. If you want to define your custom backoff you need to define it at the worker: TypeScript import { Worker } from \"bullmq\" ; const worker = new Worker ( \"foo\" , async ( job ) => doSomeProcessing (), { settings : { backoffStrategies : { custom ( attemptsMade : number ) { return attemptsMade * 1000 ; }, }, }, }); You can then use your \"custom\" strategy when adding jobs: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"foo\" ); await queue . add ( \"test-retry\" , { foo : \"bar\" }, { attempts : 3 , backoff : { type : \"custom\" , }, } ); Stop retrying jobs When a processor throws an exception that is considered as unrecoverable, you should use the UnrecoverableError class. BullMQ supports moving jobs to failed when this error is thrown without retrying to process it. TypeScript import { Worker , UnrecoverableError } from 'bullmq' ; const worker = new Worker ( 'foo' , async job => { doSomeProcessing (); throw new UnrecoverableError ( 'Unrecoverable' ); }, { connection }, }); await queue . add ( 'test-retry' , { foo : 'bar' }, { attempts : 3 , backoff : 1000 , }, );","title":"\u5931\u8d25\u91cd\u8bd5"},{"location":"docs/bull/guide/retrying-failing-jobs/#stop-retrying-jobs","text":"When a processor throws an exception that is considered as unrecoverable, you should use the UnrecoverableError class. BullMQ supports moving jobs to failed when this error is thrown without retrying to process it. TypeScript import { Worker , UnrecoverableError } from 'bullmq' ; const worker = new Worker ( 'foo' , async job => { doSomeProcessing (); throw new UnrecoverableError ( 'Unrecoverable' ); }, { connection }, }); await queue . add ( 'test-retry' , { foo : 'bar' }, { attempts : 3 , backoff : 1000 , }, );","title":"Stop retrying jobs"},{"location":"docs/bull/guide/returning-job-data/","text":"When a worker is done processing, sometimes it is convenient to return some data. This data can then be accessed for example by listening to the \"completed\" event. This return data is available at the job's \"returnvalue\" property. Imagine a simple worker that performs some async processing: TypeScript import { Queue , Worker } from \"bullmq\" ; const myWorker = new Worker ( \"AsyncProc\" , async ( job ) => { const result = await doSomeAsyncProcessing (); return result ; }); {% hint style=\"info\" %} Note, in the example above we could just return directly doSomeAsyncProcessing, we just use a temporal variable to make the example more explicit. {% endhint %} We can now listen to the completed event in order to get the result value: TypeScript import { Job , QueueEvents , Queue } from \"bullmq\" ; const queue = new Queue ( \"AsyncProc\" ); const queueEvents = new QueueEvents ( \"AsyncProc\" ); queueEvents . on ( \"completed\" , async ({ jobId : string }) => { const job = await Job . fromId ( queue , jobId ); console . log ( job . returnvalue ); }); If you want to store the result of the processing function it is still much more robust to do it in the process function itself, that will guarantee that if the job is completed the return value would be stored as well. Storing data on the completed event on the other hand could fail and still the job would complete without detecting the error. Using a \"results\" Queue Another common practice to send jobs results robustly is to have a special \"results\" queue where the results are sent to. The worker for this \"results\" queue can reliably do something with the data such as storing it in a database. This approach is useful for designing robust micro-service architectures, where data is sent between services using queues. Even if the service that processes the result is down at the time the results queue receives the data, the result will still be processed as soon as the service come up online again.","title":"\u8fd4\u56de\u5de5\u4f5c\u6570\u636e"},{"location":"docs/bull/guide/returning-job-data/#using-a-results-queue","text":"Another common practice to send jobs results robustly is to have a special \"results\" queue where the results are sent to. The worker for this \"results\" queue can reliably do something with the data such as storing it in a database. This approach is useful for designing robust micro-service architectures, where data is sent between services using queues. Even if the service that processes the result is down at the time the results queue receives the data, the result will still be processed as soon as the service come up online again.","title":"Using a \"results\" Queue"},{"location":"docs/bull/guide/workers/","text":"Workers are the actual instances that perform some job based on the jobs that are added in the queue. A worker is equivalent to a \"message\" receiver in a traditional message queue. The worker duty is to complete the job, if it succeeds the job will be moved to the \"completed\" status. If the worker throws an exception during its processing, the job will automatically be moved to the \"failed\" status. {% hint style=\"info\" %} Failed jobs can be automatically retried, see Retrying failing jobs {% endhint %} A worker is instantiated with the Worker class, and the work itself will be performed in the process function. Process functions are meant to be asynchronous so either use the \"async\" keyword or return a promise. TypeScript import { Worker , Job } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job : Job ) => { // Do something with job return \"some value\" ; }); Note that a processor can optionally return a value. This value can be retrieved either by getting the job and accessing the \"returnvalue\" property or by listening to the \"completed\" event: TypeScript worker . on ( \"completed\" , ( job : Job , returnvalue : any ) => { // Do something with the return value. }); Inside the worker process function it is also possible to emit progress events. Calling \"job.progress\" you can specify a number or an object if you have more complex needs. The \"progress\" event can be listened in the same way as the \"completed\" event: TypeScript worker . on ( \"progress\" , ( job : Job , progress : number | object ) => { // Do something with the return value. }); Finally, when the process fails with an exception it is possible to listen for the \"failed\" event too: TypeScript worker . on ( \"failed\" , ( job : Job , error : Error ) => { // Do something with the return value. }); It is also possible to listen to global events in order to get notifications of job completions, progress and failures: TypeScript import { QueueEvents } from 'bullmq' ; const queueEvents = new QueueEvents ( 'Paint' ); queueEvents . on ( 'completed' , ({ jobId : string , returnvalue : any }) => { // Called every time a job is completed in any worker. }); queueEvents . on ( 'failed' , ({ jobId : string , failedReason : string }) => { // jobId received a progress event }); queueEvents . on ( 'progress' , ({ jobId : string , data : number | object }) => { // jobId received a progress event }); Stalled jobs Due to the nature of NodeJS, which is (in general) single threaded and consists of an event loop to handle the asynchronous operations, the process function needs to be written carefully so that the CPU is not occupied for a long time. When a job reaches a worker and starts to be processed, BullMQ will place a lock on this job to protect the job from being modified by any other client or worker. At the same time, the worker needs to periodically notify BullMQ that it is still working on the job. {% hint style=\"info\" %} This period is configured with the \"stalledInterval\" setting, which normally you should not need to modify. {% endhint %} However if the CPU is very busy due to the process being very CPU intensive, the worker may not have time to renew the lock and tell the queue that it is still working on the job, then the job will likely be marked as Stalled. A stalled job is moved back to the waiting status and will be processed again by another worker, or if it has reached its maximum number of stalls moved to the failed set. Therefore it is very important to make sure the workers return the control to NodeJS event loop often enough to avoid this kind of problems. Sandboxed processors It is also possible to define workers to run on a separate process, we call this processors for sandboxed, because they run isolated from the rest of the code. Since these workers run the processor in a different process, they will not result in stalled jobs as easily as standard workers, although it is not completely impossible if the CPUs in the system are so overload that there is no practical time for the worker to perform its bookkeeping to avoid stalling. In order to use a sandboxed processor just define the processor in a separate file: TypeScript import { Job } from 'bullmq' ; module .exports = async ( job : Job ) { // Do something with job }; and refer to it in the worker constructor: TypeScript const processorFile = path . join ( __dirname , \"my_procesor.js\" ); worker = new Worker ( queueName , processorFile );","title":"\u5de5\u4eba"},{"location":"docs/bull/guide/workers/#stalled-jobs","text":"Due to the nature of NodeJS, which is (in general) single threaded and consists of an event loop to handle the asynchronous operations, the process function needs to be written carefully so that the CPU is not occupied for a long time. When a job reaches a worker and starts to be processed, BullMQ will place a lock on this job to protect the job from being modified by any other client or worker. At the same time, the worker needs to periodically notify BullMQ that it is still working on the job. {% hint style=\"info\" %} This period is configured with the \"stalledInterval\" setting, which normally you should not need to modify. {% endhint %} However if the CPU is very busy due to the process being very CPU intensive, the worker may not have time to renew the lock and tell the queue that it is still working on the job, then the job will likely be marked as Stalled. A stalled job is moved back to the waiting status and will be processed again by another worker, or if it has reached its maximum number of stalls moved to the failed set. Therefore it is very important to make sure the workers return the control to NodeJS event loop often enough to avoid this kind of problems.","title":"Stalled jobs"},{"location":"docs/bull/guide/workers/#sandboxed-processors","text":"It is also possible to define workers to run on a separate process, we call this processors for sandboxed, because they run isolated from the rest of the code. Since these workers run the processor in a different process, they will not result in stalled jobs as easily as standard workers, although it is not completely impossible if the CPUs in the system are so overload that there is no practical time for the worker to perform its bookkeeping to avoid stalling. In order to use a sandboxed processor just define the processor in a separate file: TypeScript import { Job } from 'bullmq' ; module .exports = async ( job : Job ) { // Do something with job }; and refer to it in the worker constructor: TypeScript const processorFile = path . join ( __dirname , \"my_procesor.js\" ); worker = new Worker ( queueName , processorFile );","title":"Sandboxed processors"},{"location":"docs/bull/guide/flows/_index/","text":"{% hint style=\"info\" %} \u6d41\u662f BullMQ \u4e2d\u4e00\u4e2a\u5168\u65b0\u7684\u7279\u6027\uff0c\u5c3d\u7ba1\u5b83\u662f\u5728\u4e00\u4e2a\u7a33\u5b9a\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u7684\uff0c\u4f46\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u672a\u77e5\u7684\u95ee\u9898\u3002 {% endhint %} BullMQ supports parent - child relationships between jobs. The basic idea is that a parent job will not be moved to the wait status, i.e. can be picked up by a worker, until all its children jobs have been processed successfully. Apart from that, a parent or a child job are no different from regular jobs. This functionality enables the creation of flows where jobs are the node of trees of arbitrary depth. {% hint style=\"warning\" %} Flows are added to a queue using the \"FlowProducer\" class. {% endhint %} In order to create \"flows\" you must use the FlowProducer class. The method \" add \" accepts an object with the following interface: TypeScript interface FlowJob { name : string ; queueName : string ; data? : any ; prefix? : string ; opts? : Omit < JobsOptions , \"parent\" | \"repeat\" > ; children? : FlowJob []; } So we can add a flow like this one: TypeScript import { FlowProducer } from \"bullmq\" ; // A FlowProducer constructor takes an optional \"connection\" // object otherwise it connects to a local redis instance. const flowProducer = new FlowProducer (); const flow = await flowProducer . add ({ name : \"renovate-interior\" , queueName : \"renovate\" , children : [ { name : \"paint\" , data : { place : \"ceiling\" }, queueName : \"steps\" }, { name : \"paint\" , data : { place : \"walls\" }, queueName : \"steps\" }, { name : \"fix\" , data : { place : \"floor\" }, queueName : \"steps\" }, ], }); The above code will add atomically 4 jobs, one to the \"renovate\" queue and 3 to the \"steps\" queue. When the 3 jobs in the \"steps\" queue are completed, the parent job in the \"renovate\" queue will be processed as a regular job. The above call will return instances for all the jobs added to the queue. {% hint style=\"info\" %} Note that the parent queue does not need to be the same queue as the one used for the children. {% endhint %} When the parent job is processed it is possible to access the results generated by its child jobs. For example, lets assume the following worker for the child jobs: TypeScript import { Worker } from \"bullmq\" ; const stepsQueue = new Worker ( \"steps\" , async ( job ) => { await performStep ( job . data ); if ( job . name === \"paint\" ) { return 2500 ; } else if ( job . name === \"fix\" ) { return 1750 ; } }); We can implement a parent worker that sums the costs of the children's jobs using the \" getChildrenValues \" method. This method returns an object with job keys as keys and the result of that given job as a value: TypeScript import { Worker } from \"bullmq\" ; const stepsQueue = new Worker ( \"renovate\" , async ( job ) => { const childrenValues = await job . getChildrenValues (); const totalCosts = Object ( childrenValues ) . values () . reduce (( prev , cur ) => prev + cur , 0 ); await sendInvoice ( totalCosts ); }); It is possible to add as deep job hierarchies as needed, see the following example where jobs are depending on each other, this allows serial execution of jobs: TypeScript import { FlowProducer } from \"bullmq\" ; const flowProducer = new FlowProducer (); const queueName = \"assembly-line\" ; const chain = await flowProducer . add ({ name : \"car\" , data : { step : \"engine\" }, queueName , children : [ { name : \"car\" , data : { step : \"wheels\" }, queueName , children : [{ name : \"car\" , data : { step : \"chassis\" }, queueName }], }, ], }); In this case one job will be processed after the previous one has been completed. {% hint style=\"info\" %} The order of processing would be: 'chassis', 'wheels' and finally 'engine'. {% endhint %} Getters There are some special getters that can be used in order to get jobs related to a flow. First, we have a method in the Job class to get all the dependencies for a given job: TypeScript const dependencies = await job . getDependencies (); it will return all the direct dependencies , i.e. the children of a given job. The Job class also provides another method that we presented above to get all the values produced by the children of a given job: TypeScript const values = await job . getChildrenValues (); Also, a new property is available in the Job class, parentKey, with a fully qualified key for the job parent. Finally, there is also a new state where a job can be in, \"waiting-children\", for parent jobs that have not yet had their children completed: TypeScript const state = await job . getState (); // state will be \"waiting-children\" Provide options Something to take in count that when adding a flow, there is an extra param opts , where you can add your queue options, this is a dictionary of options for the queues that you use in your flow, these options would affect each of the jobs that belongs to the mapped queue options. TypeScript import { FlowProducer } from \"bullmq\" ; const flowProducer = new FlowProducer (); const queueName = \"assembly-line\" ; const chain = await flowProducer . add ( { name : \"car\" , data : { step : \"engine\" }, queueName , children : [ { name : \"car\" , data : { step : \"wheels\" }, queueName , }, ], }, { queuesOptions : { [ queueName ] : { defaultJobOptions : { removeOnComplete : true , }, }, }, } ); Jobs removal BullMQ also provides seamless removal functionality for jobs that are part of a flow. When removing a job that is part of the flow there are several important considerations: If a parent job is removed, all its children will also be removed. If a child job is removed, its parent dependency to said child is also removed, and if the child was the last child in the dependencies list, the parent job will be completed. Since a job can be both a parent and a child in a large flow, both 1 and 2 will occur if removing such a job. If any of the jobs that would be removed happen to be locked, none of the jobs will be removed, and an exception will be thrown. Apart from the considerations above, removing a job can simply be done by either using the Job or the Queue class: TypeScript await job . remove (); // or await queue . remove ( job . id ); Read more: \ud83d\udca1 FlowProducer API Reference \ud83d\udca1 Job API Reference","title":"\u6d41"},{"location":"docs/bull/guide/flows/_index/#getters","text":"There are some special getters that can be used in order to get jobs related to a flow. First, we have a method in the Job class to get all the dependencies for a given job: TypeScript const dependencies = await job . getDependencies (); it will return all the direct dependencies , i.e. the children of a given job. The Job class also provides another method that we presented above to get all the values produced by the children of a given job: TypeScript const values = await job . getChildrenValues (); Also, a new property is available in the Job class, parentKey, with a fully qualified key for the job parent. Finally, there is also a new state where a job can be in, \"waiting-children\", for parent jobs that have not yet had their children completed: TypeScript const state = await job . getState (); // state will be \"waiting-children\"","title":"Getters"},{"location":"docs/bull/guide/flows/_index/#provide-options","text":"Something to take in count that when adding a flow, there is an extra param opts , where you can add your queue options, this is a dictionary of options for the queues that you use in your flow, these options would affect each of the jobs that belongs to the mapped queue options. TypeScript import { FlowProducer } from \"bullmq\" ; const flowProducer = new FlowProducer (); const queueName = \"assembly-line\" ; const chain = await flowProducer . add ( { name : \"car\" , data : { step : \"engine\" }, queueName , children : [ { name : \"car\" , data : { step : \"wheels\" }, queueName , }, ], }, { queuesOptions : { [ queueName ] : { defaultJobOptions : { removeOnComplete : true , }, }, }, } );","title":"Provide options"},{"location":"docs/bull/guide/flows/_index/#jobs-removal","text":"BullMQ also provides seamless removal functionality for jobs that are part of a flow. When removing a job that is part of the flow there are several important considerations: If a parent job is removed, all its children will also be removed. If a child job is removed, its parent dependency to said child is also removed, and if the child was the last child in the dependencies list, the parent job will be completed. Since a job can be both a parent and a child in a large flow, both 1 and 2 will occur if removing such a job. If any of the jobs that would be removed happen to be locked, none of the jobs will be removed, and an exception will be thrown. Apart from the considerations above, removing a job can simply be done by either using the Job or the Queue class: TypeScript await job . remove (); // or await queue . remove ( job . id );","title":"Jobs removal"},{"location":"docs/bull/guide/flows/_index/#read-more","text":"\ud83d\udca1 FlowProducer API Reference \ud83d\udca1 Job API Reference","title":"Read more:"},{"location":"docs/bull/guide/flows/get-flow-tree/","text":"In some situations you need to get a job and all of its children, grandchildren and so on. The pattern to solve this requirement consists on using getFlow method. TypeScript const flow = new FlowProducer ({ connection }); const originalTree = await flow . add ({ name : \"root-job\" , queueName : \"topQueueName\" , data : {}, children : [ { name , data : { idx : 0 , foo : \"bar\" }, queueName : \"childrenQueueName\" , children : [ { name , data : { idx : 4 , foo : \"baz\" }, queueName : \"grandchildrenQueueName\" , }, ], }, { name , data : { idx : 2 , foo : \"foo\" }, queueName : \"childrenQueueName\" , }, { name , data : { idx : 3 , foo : \"bis\" }, queueName : \"childrenQueueName\" , }, ], }); const { job : topJob } = originalTree ; const tree = await flow . getFlow ({ id : topJob.id , queueName : \"topQueueName\" , }); const { children , job } = tree ; {% hint style=\"info\" %} Each child may have a job property and in case they have children as well, they would have children property {% endhint %} You would also may need a way to limit that information if you have many children for one of the job nodes. TypeScript const limitedTree = await flow . getFlow ({ id : topJob.id , queueName : \"topQueueName\" , depth : 1 , // get only the first level of children maxChildren : 2 , // get only 2 children per node }); const { children , job } = limitedTree ;","title":"\u5f97\u5230\u6d41\u6811"},{"location":"docs/bull/guide/jobs/_index/","text":"\u961f\u5217\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u4f5c\u4e1a\uff0c\u8fd9\u4e9b\u4f5c\u4e1a\u51b3\u5b9a\u4e86\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u5904\u7406\u5b83\u4eec\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u63cf\u8ff0\u5b83\u4eec\u3002 \u9700\u8981\u8003\u8651\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u60a8\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u4f5c\u4e1a\u7c7b\u578b\u6df7\u5408\u5728\u540c\u4e00\u4e2a\u961f\u5217\u4e2d\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u6dfb\u52a0 FIFO \u4f5c\u4e1a\uff0c\u5e76\u5728\u4efb\u4f55\u65f6\u5019\u6dfb\u52a0 LIFO \u6216\u5ef6\u8fdf\u4f5c\u4e1a\u3002","title":"Jobs"},{"location":"docs/bull/guide/jobs/adding-bulks/","text":"\u6709\u65f6\u9700\u8981\u4ee5\u539f\u5b50\u7684\u65b9\u5f0f\u6dfb\u52a0\u5927\u91cf\u7684\u4f5c\u4e1a\u3002 \u4f8b\u5982\uff0c\u53ef\u80fd\u6709\u8fd9\u6837\u7684\u8981\u6c42:\u6240\u6709\u4f5c\u4e1a\u90fd\u5fc5\u987b\u653e\u7f6e\u5728\u961f\u5217\u4e2d\uff0c\u6216\u8005\u4e0d\u653e\u7f6e\u4efb\u4f55\u4f5c\u4e1a\u3002 \u6b64\u5916\uff0c\u589e\u52a0\u5927\u91cf\u7684\u5de5\u4f5c\u53ef\u4ee5\u66f4\u5feb\uff0c\u56e0\u4e3a\u5b83\u51cf\u5c11\u4e86\u5230 Redis \u7684\u5f80\u8fd4: TypeScript import { Queue } from \"bullmq\" ; const queue = new Queue ( \"paint\" ); const jobs = await queue . addBulk ([ { name , data : { paint : \"car\" } }, { name , data : { paint : \"house\" } }, { name , data : { paint : \"boat\" } }, ]); \u6b64\u8c03\u7528\u53ea\u80fd\u6210\u529f\u6216\u5931\u8d25\uff0c\u5e76\u4e14\u5c06\u6dfb\u52a0\u6240\u6709\u6216\u4e0d\u6dfb\u52a0\u4f5c\u4e1a\u3002","title":"\u6279\u91cf\u6dfb\u52a0"},{"location":"docs/bull/guide/jobs/delayed/","text":"\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u4f5c\u4e1a\u901a\u5e38\u4f1a\u5728\u6709\u5de5\u4f5c\u4eba\u5458\u53ef\u4ee5\u8c03\u5ea6\u5b83\u4eec\u65f6\u88ab\u5feb\u901f\u5904\u7406\u3002 However, it is also possible to add a delay parameter so that jobs will wait at least that amount of time before being processed. Note that this does not guarantee that the job will be processed at that exact delayed time, it depends on how busy the queue is when the time has passed and how many other delayed jobs are scheduled at that exact time. {% hint style=\"info\" %} Delayed jobs will only be processed if there is at least one QueueScheduler instance configured in the Queue. {% endhint %} This is an example on how to add delayed jobs: TypeScript import { Queue , QueueScheduler } from \"bullmq\" ; const myQueueScheduler = new QueueScheduler ( \"Paint\" ); const myQueue = new Queue ( \"Paint\" ); // Add a job that will be delayed at least 5 seconds. await myQueue . add ( \"house\" , { color : \"white\" }, { delay : 5000 });","title":"Delayed"},{"location":"docs/bull/guide/jobs/fifo/","text":"\u6211\u4eec\u8981\u63cf\u8ff0\u7684\u7b2c\u4e00\u79cd\u7c7b\u578b\u7684\u5de5\u4f5c\u662f FIFO(\u5148\u8fdb\u5148\u51fa)\u7c7b\u578b\u3002 \u8fd9\u662f\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u65f6\u7684\u6807\u51c6\u7c7b\u578b\u3002 \u4f5c\u4e1a\u6309\u7167\u5b83\u4eec\u63d2\u5165\u961f\u5217\u7684\u987a\u5e8f\u8fdb\u884c\u5904\u7406\u3002 \u6b64\u8ba2\u5355\u662f\u5355\u72ec\u4fdd\u5b58\u5728\u5904\u7406\u5668\u7684\u6570\u91cf,\u4e0d\u8fc7\u5982\u679c\u4f60\u6709\u8d85\u8fc7\u4e00\u4e2a\u5de5\u4eba\u6216\u5e76\u53d1\u6027\u5927\u4e8e 1,\u5c3d\u7ba1\u5de5\u4eba\u4eec\u5c06\u5f00\u59cb\u5de5\u4f5c,\u4ed6\u4eec\u53ef\u80fd\u5728\u4e00\u4e2a\u7a0d\u5fae\u4e0d\u540c\u7684\u5b8c\u6210\u8ba2\u5355,\u56e0\u4e3a\u6709\u4e9b\u5de5\u4f5c\u53ef\u80fd\u6bd4\u5176\u4ed6\u4eba\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u3002 TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); // Add a job that will be processed after all others await myQueue . add ( \"wall\" , { color : \"pink\" }); \u5728\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u9009\u9879\u3002 \u4f8b\u5982\uff0c\u5f53\u4f5c\u4e1a\u5b8c\u6210\u6216\u5931\u8d25\u65f6\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u9700\u8981\u4fdd\u7559\u591a\u5c11\u4f5c\u4e1a: TypeScript await myQueue . add ( \"wall\" , { color : \"pink\" }, { removeOnComplete : true , removeOnFail : 1000 }); \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u5b8c\u6210\u7684\u4f5c\u4e1a\u5c06\u88ab\u81ea\u52a8\u5220\u9664\uff0c\u6700\u540e 1000 \u4e2a\u5931\u8d25\u7684\u4f5c\u4e1a\u5c06\u4fdd\u7559\u5728\u961f\u5217\u4e2d\u3002 \u9ed8\u8ba4\u7684\u5de5\u4f5c\u9009\u62e9 \u901a\u5e38\uff0c\u60a8\u4f1a\u5e0c\u671b\u4e3a\u6dfb\u52a0\u5230 Queue \u4e2d\u7684\u6240\u6709\u4f5c\u4e1a\u63d0\u4f9b\u76f8\u540c\u7684\u4f5c\u4e1a\u9009\u9879\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316 Queue \u7c7b\u65f6\u4f7f\u7528 defaultJobOptions \u9009\u9879: TypeScript const queue = new Queue ( 'Paint' , { defaultJobOptions : { removeOnComplete : true , removeOnFail : 1000 });","title":"FIFO"},{"location":"docs/bull/guide/jobs/fifo/#_1","text":"\u901a\u5e38\uff0c\u60a8\u4f1a\u5e0c\u671b\u4e3a\u6dfb\u52a0\u5230 Queue \u4e2d\u7684\u6240\u6709\u4f5c\u4e1a\u63d0\u4f9b\u76f8\u540c\u7684\u4f5c\u4e1a\u9009\u9879\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316 Queue \u7c7b\u65f6\u4f7f\u7528 defaultJobOptions \u9009\u9879: TypeScript const queue = new Queue ( 'Paint' , { defaultJobOptions : { removeOnComplete : true , removeOnFail : 1000 });","title":"\u9ed8\u8ba4\u7684\u5de5\u4f5c\u9009\u62e9"},{"location":"docs/bull/guide/jobs/getters/","text":"\u5f53\u4f5c\u4e1a\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u65f6\uff0c\u5b83\u4eec\u5728\u751f\u547d\u5468\u671f\u4e2d\u5c06\u5904\u4e8e\u4e0d\u540c\u7684\u72b6\u6001\u3002 BullMQ \u63d0\u4f9b\u4e86\u4ece\u4e0d\u540c\u72b6\u6001\u68c0\u7d22\u4fe1\u606f\u548c\u4f5c\u4e1a\u7684\u65b9\u6cd5\u3002 Job Counts It is often necessary to know how many jobs are in a given status: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); const counts = await myQueue . getJobCounts ( \"wait\" , \"completed\" , \"failed\" ); // Returns an object like this { wait: number, completed: number, failed: number } The available status are: completed, failed, delayed, active, wait, paused and repeat. Get Jobs It is also possible to retrieve the jobs with pagination style semantics. For example: TypeScript const completed = await myQueue . getJobs ([ \"completed\" ], 0 , 100 , true ); // returns the oldest 100 jobs","title":"Getters"},{"location":"docs/bull/guide/jobs/getters/#job-counts","text":"It is often necessary to know how many jobs are in a given status: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); const counts = await myQueue . getJobCounts ( \"wait\" , \"completed\" , \"failed\" ); // Returns an object like this { wait: number, completed: number, failed: number } The available status are: completed, failed, delayed, active, wait, paused and repeat.","title":"Job Counts"},{"location":"docs/bull/guide/jobs/getters/#get-jobs","text":"It is also possible to retrieve the jobs with pagination style semantics. For example: TypeScript const completed = await myQueue . getJobs ([ \"completed\" ], 0 , 100 , true ); // returns the oldest 100 jobs","title":"Get Jobs"},{"location":"docs/bull/guide/jobs/job-ids/","text":"BullMQ \u4e2d\u7684\u6240\u6709\u4f5c\u4e1a\u90fd\u9700\u8981\u6709\u552f\u4e00\u7684\u4f5c\u4e1a id\u3002 \u8fd9\u4e9b id \u7528\u4e8e\u5b58\u50a8\u6784\u9020\u4e00\u4e2a\u952e\uff0c\u6570\u636e\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u5e76\u4f5c\u4e3a\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u6b63\u5728\u79fb\u52a8\uff0c\u5b83\u53ef\u4ee5\u5728\u5176\u751f\u547d\u5468\u671f\u7684\u4e0d\u540c\u72b6\u6001\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e1a id \u4f1a\u81ea\u52a8\u751f\u6210\u4e3a\u4e00\u4e2a\u9012\u589e\u7684\u8ba1\u6570\u5668\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u81ea\u5b9a\u4e49 id\u3002 \u80fd\u591f\u6307\u5b9a\u81ea\u5b9a\u4e49 id \u7684\u4e3b\u8981\u539f\u56e0\u662f\u5728\u5e0c\u671b\u907f\u514d \u91cd\u590d\u4f5c\u4e1a \u7684\u60c5\u51b5\u4e0b\u3002 \u7531\u4e8e id \u5fc5\u987b\u662f \u552f\u4e00 \u7684\uff0c\u5982\u679c\u4f60\u6dfb\u52a0\u4e00\u4e2a\u6709 id \u7684\u4f5c\u4e1a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f5c\u4e1a\u5c06\u88ab\u5ffd\u7565\uff0c\u6839\u672c\u4e0d\u4f1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 {% hint style=\"danger\" %} \u4ece\u961f\u5217\u4e2d\u5220\u9664\u7684\u4f5c\u4e1a\uff0c\u65e0\u8bba\u662f\u624b\u52a8\u5220\u9664\u8fd8\u662f\u4f7f\u7528 removeOnComplete/Failed \u7b49\u8bbe\u7f6e\u65f6\uff0c\u90fd\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u91cd\u590d\u7684\u4f5c\u4e1a\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u8981\u4e4b\u524d\u7684\u4f5c\u4e1a\u5df2\u7ecf\u4ece\u961f\u5217\u4e2d\u5220\u9664\uff0c\u5c31\u53ef\u4ee5\u591a\u6b21\u6dfb\u52a0\u76f8\u540c\u7684\u4f5c\u4e1a id\u3002 {% endhint %} \u8981\u6307\u5b9a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u4f5c\u4e1a id\uff0c\u53ea\u9700\u5728\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u65f6\u4f7f\u7528 jobId \u9009\u9879: TypeScript await myQueue . add ( \"wall\" , { color : \"pink\" }, { jobId : customJobId , } );","title":"Job Ids"},{"location":"docs/bull/guide/jobs/lifo/","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ee5\u540e\u8fdb\u5148\u51fa(\u540e\u8fdb\u5148\u51fa)\u7684\u65b9\u5f0f\u5904\u7406\u4f5c\u4e1a\u662f\u6709\u7528\u7684\u3002 \u8fd9\u610f\u5473\u7740\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u6700\u65b0\u4f5c\u4e1a\u5c06\u5728\u65e7\u4f5c\u4e1a\u4e4b\u524d\u5904\u7406\u3002 TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); // Add a job that will be processed before all others await myQueue . add ( \"wall\" , { color : \"pink\" }, { lifo : true });","title":"LIFO"},{"location":"docs/bull/guide/jobs/prioritized/","text":"Jobs can also include a priority option. Using priorities, job's processing order will be affected by the specified priority instead of following a FIFO or LIFO pattern. {% hint style=\"warning\" %} Adding prioritized jobs is a slower operation than the other types of jobs, with a complexity O(n) relative to the number of jobs waiting in the Queue. {% endhint %} Priorities goes from 1 to MAX_INT, whereas lower number is always higher priority than higher numbers. TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); await myQueue . add ( \"wall\" , { color : \"pink\" }, { priority : 10 }); await myQueue . add ( \"wall\" , { color : \"brown\" }, { priority : 5 }); await myQueue . add ( \"wall\" , { color : \"blue\" }, { priority : 7 }); // The wall will be painted first brown, then blue and // finally pink.","title":"\u4f18\u5148"},{"location":"docs/bull/guide/jobs/removing-job/","text":"Sometimes it is necessary to remove a job. For example there could be a job that has bad data. TypeScript import { Queue } from \"bullmq\" ; const queue = new Queue ( \"paint\" ); const job = await queue . add ( \"wall\" , { color : 1 }); await job . remove (); {% hint style=\"info\" %} Locked jobs (in active state) can not be removed. An error will be thrown. {% endhint %} Having a parent job There are 2 possible cases: There are not pending dependencies; in this case the parent is moved to wait status, we may try to process this job. There are pending dependencies; in this case the parent is kept in waiting-children status. Having pending dependencies We may try to remove all its pending descendents first. {% hint style=\"warning\" %} In case one of the children is locked, it will stop the deletion process. {% endhint %}","title":"\u5220\u9664\u5de5\u4f5c"},{"location":"docs/bull/guide/jobs/removing-job/#having-a-parent-job","text":"There are 2 possible cases: There are not pending dependencies; in this case the parent is moved to wait status, we may try to process this job. There are pending dependencies; in this case the parent is kept in waiting-children status.","title":"Having a parent job"},{"location":"docs/bull/guide/jobs/removing-job/#having-pending-dependencies","text":"We may try to remove all its pending descendents first. {% hint style=\"warning\" %} In case one of the children is locked, it will stop the deletion process. {% endhint %}","title":"Having pending dependencies"},{"location":"docs/bull/guide/jobs/repeatable/","text":"\u6709\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684 meta \u4f5c\u4e1a\u53eb\u505a repeatable \u3002 \u8fd9\u4e9b\u4f5c\u4e1a\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff0c\u5373\u4f7f\u60a8\u53ea\u5411\u961f\u5217\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5b83\u4eec\u4e5f\u4f1a\u6839\u636e\u9884\u5b9a\u4e49\u7684\u8c03\u5ea6\u4e0d\u65ad\u91cd\u590d\u3002 \u6dfb\u52a0\u4e00\u4e2a\u5e26\u6709 repeat \u9009\u9879\u96c6\u7684\u4f5c\u4e1a\u5b9e\u9645\u4e0a\u4f1a\u7acb\u5373\u505a\u4e24\u4ef6\u4e8b: \u521b\u5efa\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\uff0c \u5e76\u4e3a\u8be5\u4f5c\u4e1a\u7684\u7b2c\u4e00\u6b21\u8fd0\u884c\u5b89\u6392\u4e00\u4e2a\u5b9a\u671f\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u3002 \u7b2c\u4e00\u6b21\u8fd0\u884c\u5c06\u88ab\u5b89\u6392\u5728\u201c\u5728\u4e00\u4e2a\u5c0f\u65f6\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u521b\u5efa\u4e00\u4e2a\u5728 4:07 \u6bcf 15 \u5206\u949f\u91cd\u590d\u4e00\u6b21\u7684\u4f5c\u4e1a\uff0c\u8be5\u4f5c\u4e1a\u5c06\u9996\u5148\u5728 4:15 \u8fd0\u884c\uff0c\u7136\u540e\u662f 4:30\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u4e0d\u662f\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u663e\u793a\u5728 getJobs() \u8fd9\u6837\u7684\u65b9\u6cd5\u4e2d\u3002 \u8981\u7ba1\u7406\u53ef\u91cd\u590d\u4f5c\u4e1a\u7684\u914d\u7f6e\uff0c\u8bf7\u4f7f\u7528 getRepeatableJobs() \u6216\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u91cd\u590d\u4f5c\u4e1a \u4e0d \u53c2\u4e0e\u8bc4\u4f30 jobId \u7684\u552f\u4e00\u6027\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e0d\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ef\u4ee5\u5177\u6709\u4e0e\u53ef\u91cd\u590d\u4f5c\u4e1a\u76f8\u540c\u7684 jobId \u914d\u7f6e\uff0c\u800c\u4e24\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u914d\u7f6e\u53ef\u4ee5\u5177\u6709\u76f8\u540c\u7684 jobId \uff0c\u53ea\u8981\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u91cd\u590d\u9009\u9879\u3002 \u6bcf\u5f53\u53d6\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u8fdb\u884c\u5904\u7406\u65f6\uff0c\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u5c06\u4ee5\u9002\u5f53\u7684\u5ef6\u8fdf\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u56e0\u6b64\uff0c\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ea\u4e0d\u8fc7\u662f\u6839\u636e\u67d0\u4e9b\u8bbe\u7f6e\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u3002 {% hint style=\"info\" %} \u53ef\u91cd\u590d\u4f5c\u4e1a\u53ea\u662f\u5ef6\u8fdf\u7684\u4f5c\u4e1a\uff0c\u56e0\u6b64\u60a8\u8fd8\u9700\u8981\u4e00\u4e2a QueueScheduler \u5b9e\u4f8b\u6765\u76f8\u5e94\u5730\u8c03\u5ea6\u8fd9\u4e9b\u4f5c\u4e1a\u3002 {% endhint %} \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u53ef\u91cd\u590d\u5bf9\u8c61\u7684\u4f5c\u4e1a\u91cd\u590d\u6a21\u5f0f\uff0c\u4e00\u79cd\u662f\u4f7f\u7528 cron \u8868\u8fbe\u5f0f(\u4f7f\u7528 cron-parser \u7684\"unix cron w/ optional seconds\"\u683c\u5f0f)\uff0c\u53e6\u4e00\u79cd\u662f\u6307\u5b9a\u91cd\u590d\u4e4b\u95f4\u7684\u56fa\u5b9a\u6beb\u79d2\u6570\u3002 TypeScript import { Queue , QueueScheduler } from \"bullmq\" ; const myQueueScheduler = new QueueScheduler ( \"Paint\" ); const myQueue = new Queue ( \"Paint\" ); // \u6bcf\u5929\u51cc\u66683:15\u91cd\u590d\u5de5\u4f5c\u4e00\u6b21 await myQueue . add ( \"submarine\" , { color : \"yellow\" }, { repeat : { cron : \"* 15 3 * * *\" , }, } ); // \u6bcf10\u79d2\u91cd\u590d\u4e00\u6b21\uff0c\u4f46\u4e0d\u8981\u8d85\u8fc7100\u6b21 await myQueue . add ( \"bird\" , { color : \"bird\" }, { repeat : { every : 10000 , limit : 100 , }, } ); \u5173\u4e8e\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\uff0c\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u8003\u8651\u56e0\u7d20: Bull \u8db3\u591f\u806a\u660e\uff0c\u5982\u679c\u91cd\u590d\u7684\u9009\u9879\u662f\u76f8\u540c\u7684\uff0c\u5b83\u4e0d\u4f1a\u6dfb\u52a0\u76f8\u540c\u7684\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u3002 \u5982\u679c\u6ca1\u6709\u5de5\u4eba\u5728\u8fd0\u884c\uff0c\u90a3\u4e48\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u5c06\u4e0d\u4f1a\u5728\u4e0b\u4e00\u6b21\u5de5\u4eba\u5728\u7ebf\u65f6\u7d2f\u79ef\u3002 \u53ef\u4ee5\u5220\u9664\u91cd\u590d\u7684\u5de5\u4f5c\u4f7f\u7528[removeRepeatable] (https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/api/bullmq.queue.removerepeatable.md)\u65b9\u6cd5\u6216(removeRepeatableByKey) (https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/api/bullmq.queue.removerepeatablebykey.md)\u3002 \u6240\u6709\u53ef\u91cd\u590d\u4f5c\u4e1a\u90fd\u6709\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u952e\uff0c\u8be5\u952e\u4fdd\u5b58\u53ef\u91cd\u590d\u4f5c\u4e1a\u672c\u8eab\u7684\u4e00\u4e9b\u5143\u6570\u636e\u3002 \u53ef\u4ee5\u5728\u8c03\u7528 getRepeatableJobs \u7684\u961f\u5217\u4e2d\u68c0\u7d22\u5f53\u524d\u6240\u6709\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\u3002: TypeScript import { Queue } from \"bullmq\" ; const myQueue = new Queue ( \"Paint\" ); const repeatableJobs = await myQueue . getRepeatableJobs (); \u7531\u4e8e\u53ef\u91cd\u590d\u7684\u4f5c\u4e1a\u662f\u5ef6\u8fdf\u7684\u4f5c\u4e1a\uff0c\u91cd\u590d\u662f\u901a\u8fc7\u5728\u5f53\u524d\u4f5c\u4e1a\u5f00\u59cb\u5904\u7406\u4e4b\u524d\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5ef6\u8fdf\u4f5c\u4e1a\u6765\u5b9e\u73b0\u7684\u3002 \u4f5c\u4e1a\u9700\u8981\u552f\u4e00\u7684 id\uff0c\u4ee5\u907f\u514d\u91cd\u590d\uff0c\u8fd9\u610f\u5473\u7740\u6807\u51c6\u7684 jobId \u9009\u9879\u4e0e\u5e38\u89c4\u4f5c\u4e1a\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0d\u540c\u3002 \u5bf9\u4e8e\u53ef\u91cd\u590d\u7684\u4efb\u52a1\uff0cjobId \u7528\u6765\u751f\u6210\u552f\u4e00\u7684 id\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u548c\u9009\u9879\u7684\u53ef\u91cd\u590d\u4efb\u52a1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 jobId \u6765\u751f\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u53ef\u91cd\u590d\u7684\u4efb\u52a1: TypeScript import { Queue , QueueScheduler } from \"bullmq\" ; const myQueueScheduler = new QueueScheduler ( \"Paint\" ); const myQueue = new Queue ( \"Paint\" ); // Repeat job every 10 seconds but no more than 100 times await myQueue . add ( \"bird\" , { color : \"bird\" }, { repeat : { every : 10000 , limit : 100 , }, jobId : \"colibri\" , } ); await myQueue . add ( \"bird\" , { color : \"bird\" }, { repeat : { every : 10000 , limit : 100 , }, jobId : \"pigeon\" , } ); \u7f13\u6162\u7684\u91cd\u590d\u5de5\u4f5c \u6709\u4e00\u79cd\u60c5\u51b5\u503c\u5f97\u4e00\u63d0\uff0c\u5373\u53ef\u91cd\u590d\u9891\u7387\u5927\u4e8e\u5904\u7406\u4f5c\u4e1a\u6240\u9700\u7684\u65f6\u95f4\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u9879\u5de5\u4f5c\u6bcf\u79d2\u949f\u90fd\u5728\u91cd\u590d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de5\u4f5c\u7684\u8fc7\u7a0b\u672c\u8eab\u9700\u8981 5 \u79d2\u949f\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ea\u662f\u5ef6\u8fdf\u7684\u4f5c\u4e1a\uff0c\u56e0\u6b64\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5c31\u4f1a\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 \u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0cworker \u5c06\u62fe\u53d6\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5e76\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\uff0c\u5ef6\u8fdf 1 \u79d2\uff0c\u56e0\u4e3a\u8fd9\u662f\u53ef\u91cd\u590d\u7684\u95f4\u9694\u3002 worker \u5c06\u9700\u8981 5 \u79d2\u6765\u5904\u7406\u8be5\u4f5c\u4e1a\uff0c\u5982\u679c\u53ea\u6709 1 \u4e2a worker \u53ef\u7528\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u5c06\u9700\u8981\u7b49\u5f85\u6574\u6574 5 \u79d2\u624d\u80fd\u88ab\u5904\u7406\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6709 5 \u4e2a\u53ef\u7528\u7684\u5de5\u4eba\uff0c\u90a3\u4e48\u4ed6\u4eec\u5f88\u53ef\u80fd\u80fd\u591f\u4ee5\u671f\u671b\u7684\u6bcf\u79d2\u4e00\u4e2a\u5de5\u4f5c\u7684\u9891\u7387\u5904\u7406\u6240\u6709\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u3002","title":"\u53ef\u91cd\u590d\u7684"},{"location":"docs/bull/guide/jobs/repeatable/#_1","text":"\u6709\u4e00\u79cd\u60c5\u51b5\u503c\u5f97\u4e00\u63d0\uff0c\u5373\u53ef\u91cd\u590d\u9891\u7387\u5927\u4e8e\u5904\u7406\u4f5c\u4e1a\u6240\u9700\u7684\u65f6\u95f4\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u9879\u5de5\u4f5c\u6bcf\u79d2\u949f\u90fd\u5728\u91cd\u590d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de5\u4f5c\u7684\u8fc7\u7a0b\u672c\u8eab\u9700\u8981 5 \u79d2\u949f\u3002 \u5982\u4e0a\u6240\u8ff0\uff0c\u53ef\u91cd\u590d\u4f5c\u4e1a\u53ea\u662f\u5ef6\u8fdf\u7684\u4f5c\u4e1a\uff0c\u56e0\u6b64\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5c31\u4f1a\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\u3002 \u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0cworker \u5c06\u62fe\u53d6\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5e76\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u53ef\u91cd\u590d\u4f5c\u4e1a\uff0c\u5ef6\u8fdf 1 \u79d2\uff0c\u56e0\u4e3a\u8fd9\u662f\u53ef\u91cd\u590d\u7684\u95f4\u9694\u3002 worker \u5c06\u9700\u8981 5 \u79d2\u6765\u5904\u7406\u8be5\u4f5c\u4e1a\uff0c\u5982\u679c\u53ea\u6709 1 \u4e2a worker \u53ef\u7528\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u4f5c\u4e1a\u5c06\u9700\u8981\u7b49\u5f85\u6574\u6574 5 \u79d2\u624d\u80fd\u88ab\u5904\u7406\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6709 5 \u4e2a\u53ef\u7528\u7684\u5de5\u4eba\uff0c\u90a3\u4e48\u4ed6\u4eec\u5f88\u53ef\u80fd\u80fd\u591f\u4ee5\u671f\u671b\u7684\u6bcf\u79d2\u4e00\u4e2a\u5de5\u4f5c\u7684\u9891\u7387\u5904\u7406\u6240\u6709\u53ef\u91cd\u590d\u7684\u5de5\u4f5c\u3002","title":"\u7f13\u6162\u7684\u91cd\u590d\u5de5\u4f5c"},{"location":"docs/bull/guide/jobs/stalled/","text":"{% hint style=\"info\" %} \u53ea\u6709\u5728 Queue \u4e2d\u914d\u7f6e\u4e86\u81f3\u5c11\u4e00\u4e2a QueueScheduler \u5b9e\u4f8b\u65f6\uff0c\u505c\u6b62\u7684\u4f5c\u4e1a\u68c0\u67e5\u624d\u4f1a\u8d77\u4f5c\u7528\u3002 {% endhint %} \u5f53\u4e00\u4e2a\u4f5c\u4e1a\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u6b63\u5728\u88ab\u4e00\u4e2a worker \u5904\u7406\uff0c\u5b83\u9700\u8981\u4e0d\u65ad\u5730\u66f4\u65b0\u961f\u5217\u6765\u901a\u77e5\u8fd9\u4e2a worker \u4ecd\u5728\u5de5\u4f5c\u3002 \u8fd9\u4e2a\u673a\u5236\u53ef\u4ee5\u9632\u6b62\u4e00\u4e2a worker \u5728\u5d29\u6e83\u6216\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u65f6\u6c38\u8fdc\u4fdd\u6301\u4e00\u4e2a\u5de5\u4f5c\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002 \u5f53\u4e00\u4e2a worker \u65e0\u6cd5\u901a\u77e5\u961f\u5217\u5b83\u4ecd\u5728\u5904\u7406\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4f5c\u4e1a\u65f6\uff0c\u8be5\u4f5c\u4e1a\u5c06\u88ab\u79fb\u56de\u7b49\u5f85\u5217\u8868\u6216\u5931\u8d25\u96c6\u3002 \u7136\u540e\uff0c\u6211\u4eec\u8bf4\u4f5c\u4e1a\u5df2\u7ecf\u505c\u6b62\uff0c\u961f\u5217\u5c06\u53d1\u51fa stopped \u4e8b\u4ef6\u3002 {% hint style=\"info\" %} \u6ca1\u6709'stalled'\u72b6\u6001\uff0c\u53ea\u6709\u5f53\u4f5c\u4e1a\u88ab\u81ea\u52a8\u4ece\u6d3b\u52a8\u72b6\u6001\u8f6c\u79fb\u5230\u7b49\u5f85\u72b6\u6001\u65f6\u89e6\u53d1\u7684'stalled'\u4e8b\u4ef6\u3002 {% endhint %} \u4e3a\u4e86\u907f\u514d\u505c\u6ede\u7684\u4efb\u52a1\uff0c\u786e\u4fdd\u4f60\u7684 worker \u4e0d\u4f1a\u8ba9 Node.js \u4e8b\u4ef6\u5faa\u73af\u592a\u5fd9\uff0c\u9ed8\u8ba4\u7684\u6700\u5927\u505c\u6ede\u68c0\u67e5\u6301\u7eed\u65f6\u95f4\u662f 30 \u79d2\uff0c\u6240\u4ee5\u53ea\u8981\u4f60\u4e0d\u6267\u884c\u8d85\u8fc7\u8fd9\u4e2a\u503c\u7684 CPU \u64cd\u4f5c\uff0c\u4f60\u5c31\u4e0d\u4f1a\u5f97\u5230\u505c\u6ede\u7684\u4efb\u52a1\u3002 \u53e6\u4e00\u79cd\u51cf\u5c11\u505c\u6ede\u4f5c\u4e1a\u673a\u4f1a\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6240\u8c13\u7684\u201c\u6c99\u76d2\u201d\u5904\u7406\u5668\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cworker \u5c06\u751f\u6210\u65b0\u7684\u72ec\u7acb\u7684 Node.js \u8fdb\u7a0b\uff0c\u72ec\u7acb\u4e8e\u4e3b\u8fdb\u7a0b\u8fd0\u884c\u3002 {% code title=\"main.ts\" %} TypeScript import { Worker } from \"bullmq\" ; const worker = new Worker ( \"Paint\" , painter ); {% endcode %} {% code title=\"painter.ts\" %} TypeScript export default = ( job ) => { // Paint something } {% endcode %}","title":"\u505c\u6ede\u4e0d\u524d"},{"location":"docs/bull/guide/queues/_index/","text":"Queue \u53ea\u4e0d\u8fc7\u662f\u4e00\u4e2a\u7b49\u5f85\u5904\u7406\u7684\u4f5c\u4e1a\u5217\u8868\u3002 \u4f5c\u4e1a\u53ef\u4ee5\u662f\u5c0f\u7684\uff0c\u6bd4\u5982\u6d88\u606f\uff0c\u8fd9\u6837\u961f\u5217\u53ef\u4ee5\u7528\u4f5c\u6d88\u606f\u4ee3\u7406\uff0c\u4e5f\u53ef\u4ee5\u662f\u5927\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4f5c\u4e1a\u3002 \u961f\u5217\u7531 Queue \u7c7b\u63a7\u5236\u3002\u4e0e BullMQ \u4e2d\u7684\u6240\u6709\u7c7b\u4e00\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7c7b\uff0c\u6709\u5c11\u91cf\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u63a7\u5236\u961f\u5217: TypeScript const queue = new Queue ( \"Cars\" ); {% hint style=\"info\" %} See Connections for details on how to pass Redis details to use by the queue. {% endhint %} When you instance a Queue, BullMQ will just upsert a small \"meta-key\", so if the queue existed before it will just pick it up and you can continue adding jobs to it. The most important method is probably the add method. This method allows you to add jobs to the queue in different fashions: TypeScript await queue . add ( \"paint\" , { colour : \"red\" }); The code above will add a job named paint to the queue, with payload { color: 'red' } . This job will now be stored in Redis in a list waiting for some worker to pick it up and process it. Workers may not be running when you add the job, however as soon as one worker is connected to the queue it will pick the job and process it. When adding a job you can also specify an options object. This options object can dramatically change the behaviour of the added jobs. For example you can add a job that is delayed: TypeScript await queue . add ( \"paint\" , { colour : \"blue\" }, { delay : 5000 }); The job will now wait at least 5 seconds before it is processed. {% hint style=\"danger\" %} In order for delay jobs to work you need to have at least one QueueScheduler somewhere in your infrastructure. Read more here . {% endhint %} There are many other options available such as priorities, backoff settings, lifo behaviour, remove-on-complete policies, etc. Please check the remaining of this guide for more information regarding these options.","title":"\u961f\u5217"},{"location":"docs/bull/guide/queues/removing-jobs/","text":"Currently we have 2 available methods in queue class: Removes all jobs that are waiting or delayed, but not active, completed or failed. TypeScript import { Queue } from \"bullmq\" ; const queue = new Queue ( \"paint\" ); await queue . drain (); {% hint style=\"warning\" %} Parent jobs that belong to the queue being drained will be kept in waiting-children status if they have pending children, but if they do not have any pending children they will just be removed. {% endhint %} {% hint style=\"warning\" %} Parent jobs in queues different from the one being drained will either stay in waiting-children if they have pending children in other queues, or just moved to wait. {% endhint %} Obliterate Completely obliterates a queue and all of its contents. TypeScript import { Queue } from \"bullmq\" ; const queue = new Queue ( \"paint\" ); await queue . obliterate (); {% hint style=\"warning\" %} Parent jobs in queues different from the one being obliterated will either stay in waiting-children if they have pending children in other queues, or just moved to wait. {% endhint %}","title":"Drain"},{"location":"docs/bull/guide/queues/removing-jobs/#obliterate","text":"Completely obliterates a queue and all of its contents. TypeScript import { Queue } from \"bullmq\" ; const queue = new Queue ( \"paint\" ); await queue . obliterate (); {% hint style=\"warning\" %} Parent jobs in queues different from the one being obliterated will either stay in waiting-children if they have pending children in other queues, or just moved to wait. {% endhint %}","title":"Obliterate"},{"location":"docs/bull/guide/workers/_index/","text":"worker \u662f\u6839\u636e\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u4f5c\u4e1a\u6267\u884c\u67d0\u4e9b\u4f5c\u4e1a\u7684\u5b9e\u9645\u5b9e\u4f8b\u3002 worker \u76f8\u5f53\u4e8e\u4f20\u7edf\u6d88\u606f\u961f\u5217\u4e2d\u7684\u201c\u6d88\u606f\u201d\u63a5\u6536\u8005\u3002 worker \u7684\u804c\u8d23\u662f\u5b8c\u6210\u4efb\u52a1\uff0c\u5982\u679c\u4efb\u52a1\u6210\u529f\uff0c\u4efb\u52a1\u5c06\u88ab\u8f6c\u79fb\u5230\u201c\u5b8c\u6210\u201d\u72b6\u6001\u3002 \u5982\u679c worker \u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u8be5\u4f5c\u4e1a\u5c06\u81ea\u52a8\u8f6c\u79fb\u5230\u201c\u5931\u8d25\u201d\u72b6\u6001\u3002 {% hint style=\"info\" %} Failed jobs can be automatically retried, see Retrying failing jobs {% endhint %} A worker is instantiated with the Worker class, and the work itself will be performed in the process function. Process functions are meant to be asynchronous so either use the \"async\" keyword or return a promise. TypeScript import { Worker , Job } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job : Job ) => { // Optionally report some progress job . updateProgress ( 42 ); // Optionally sending an object as progress job . updateProgress ({ foo : \"bar\" }); // Do something with job return \"some value\" ; }); Note that a processor can optionally return a value. This value can be retrieved either by getting the job and accessing the \"returnvalue\" property or by listening to the \"completed\" event: TypeScript worker . on ( \"completed\" , ( job : Job , returnvalue : any ) => { // Do something with the return value. }); Inside the worker process function it is also possible to emit progress events. Calling \"job.progress\" you can specify a number or an object if you have more complex needs. The \"progress\" event can be listened in the same way as the \"completed\" event: TypeScript worker . on ( \"progress\" , ( job : Job , progress : number | object ) => { // Do something with the return value. }); Finally, when the process fails with an exception it is possible to listen for the \"failed\" event too: TypeScript worker . on ( \"failed\" , ( job : Job , error : Error ) => { // Do something with the return value. }); It is also possible to listen to global events in order to get notifications of job completions, progress and failures: TypeScript import { QueueEvents } from 'bullmq' ; const queueEvents = new QueueEvents ( 'Paint' ); queueEvents . on ( 'completed' , ({ jobId : string , returnvalue : any }) => { // Called every time a job is completed in any worker. }); queueEvents . on ( 'failed' , ({ jobId : string , failedReason : string }) => { // jobId received a progress event }); queueEvents . on ( 'progress' , ({ jobId : string , data : number | object }) => { // jobId received a progress event }); Finally, you should attach an error listener to your worker to avoid NodeJS raising an unhandled exception when an error occurs, something like this: TypeScript worker . on ( \"error\" , ( err ) => { // log the error console . error ( err ); }); {% hint style=\"danger\" %} If the error handler is missing, your worker may stop processing jobs when an error is emitted!. More info here . {% endhint %} Typescript typings It is also possible to specify the data types for the Job data and return value using generics: TypeScript const worker = new Worker < MyData , MyReturn > ( queueName , async ( job : Job ) => {});","title":"Workers"},{"location":"docs/bull/guide/workers/_index/#typescript-typings","text":"It is also possible to specify the data types for the Job data and return value using generics: TypeScript const worker = new Worker < MyData , MyReturn > ( queueName , async ( job : Job ) => {});","title":"Typescript typings"},{"location":"docs/bull/guide/workers/concurrency/","text":"There are basically two ways to achieve concurrency with BullMQ. You can run a worker with a concurrency factor larger than 1 (which is the default value), or you can run several workers in different node processes. Concurrency factor The concurrency factor is a worker option that determines how many jobs are allowed to be processed in parallel. This means that the same worker is able to process several jobs in parallel, however the queue guarantees such as \"at-least-once\" and order of processing are still preserved. TypeScript import { Worker , Job } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job : Job ) => { // Do something with job return \"some value\" ; }, { concurrency : 50 } ); Note that the concurrency is only possible when workers perform asynchronous operations such as a call to a database or a external HTTP service, as this is how node supports concurrency natively. If your workers are very CPU intensive it is better to use Sandboxed processors . Multiple workers The other way to achieve concurrency is to provide multiple workers. This is the recommended way to setup bull anyway since besides providing concurrency it also provides higher availability for your workers. You can easily launch a fleet of workers running in many different machines in order to execute the jobs in parallel in a predictable and robust way. {% hint style=\"info\" %} It is not possible to achieve a global concurrency of 1 job at once if you use more than one worker. {% endhint %} You still can (and it is a perfectly good practice), choose a high concurrency factor for every worker, so that the resources of every machine where the worker is running are used more efficiently.","title":"Concurrency"},{"location":"docs/bull/guide/workers/concurrency/#concurrency-factor","text":"The concurrency factor is a worker option that determines how many jobs are allowed to be processed in parallel. This means that the same worker is able to process several jobs in parallel, however the queue guarantees such as \"at-least-once\" and order of processing are still preserved. TypeScript import { Worker , Job } from \"bullmq\" ; const worker = new Worker ( queueName , async ( job : Job ) => { // Do something with job return \"some value\" ; }, { concurrency : 50 } ); Note that the concurrency is only possible when workers perform asynchronous operations such as a call to a database or a external HTTP service, as this is how node supports concurrency natively. If your workers are very CPU intensive it is better to use Sandboxed processors .","title":"Concurrency factor"},{"location":"docs/bull/guide/workers/concurrency/#multiple-workers","text":"The other way to achieve concurrency is to provide multiple workers. This is the recommended way to setup bull anyway since besides providing concurrency it also provides higher availability for your workers. You can easily launch a fleet of workers running in many different machines in order to execute the jobs in parallel in a predictable and robust way. {% hint style=\"info\" %} It is not possible to achieve a global concurrency of 1 job at once if you use more than one worker. {% endhint %} You still can (and it is a perfectly good practice), choose a high concurrency factor for every worker, so that the resources of every machine where the worker is running are used more efficiently.","title":"Multiple workers"},{"location":"docs/bull/guide/workers/graceful-shutdown/","text":"BullMQ supports graceful shutdowns of the workers. This is important so that we can minimize stalled jobs when a worker for some reason must be shutdown. But note that even in the event of an \"ungraceful shutdown\", the stalled mechanism in BullMQ allows for new workers to pick up stalled jobs and continue working on them. {% hint style=\"danger\" %} In order for stalled jobs to be picked up by other workers you need to have a QueueScheduler class running in the system. {% endhint %} In order to perform a shutdown just call the close method: TypeScript await worker . close (); The above call will mark the worker as closing so it will not pick up new jobs, at the same time it will wait for all the current jobs to be processed (or failed). This call will not timeout by itself, so you should make sure that your jobs finalize in a timely maner. If this call fails for some reason or it is not able to complete, the pending jobs will be marked as stalled and processed by other workers (if correct stalled options are configured on the QueueScheduler ).","title":"Graceful shutdown"},{"location":"docs/bull/guide/workers/pausing-queues/","text":"BullMQ supports pausing queues globally or locally. A queue is paused globally when no workers will pick up any jobs from the queue. When you pause a queue, the workers that are currently busy processing a job, will continue working on that job until it completes (or failed), and then will just keep idling until the queue has been unpaused. Pausing a queue is performed by calling the pause method on a queue instance: TypeScript await myQueue . pause (); It is also possible to pause a given worker instance, this is what we call pause locally. This pause works in a similar way as the global pause in the sense that the worker will conclude processing the jobs it has already started but will not process any new ones: TypeScript await myWorker . pause (); The call above will wait for all the jobs currently being processed by this worker, if you do not want to wait for current jobs to complete before the call completes you can pass \"true\" to just pause the worker ignoring any running jobs: Text Only await myWorker.pause(true);","title":"Pausing queues"},{"location":"docs/bull/guide/workers/sandboxed-processors/","text":"It is also possible to define workers to run on a separate process, we call this processors for sandboxed, because they run isolated from the rest of the code. Since these workers run the processor in a different process, they will not result in stalled jobs as easily as standard workers, although it is not completely impossible if the CPUs in the system are so overload that there is no practical time for the worker to perform its bookkeeping to avoid stalling. In order to use a sandboxed processor just define the processor in a separate file: TypeScript import { SandboxedJob } from \"bullmq\" ; module .exports = async ( job : SandboxedJob ) => { // Do something with job }; and refer to it in the worker constructor: TypeScript import { Worker } from \"bullmq\" ; const processorFile = path . join ( __dirname , \"my_procesor.js\" ); worker = new Worker ( queueName , processorFile );","title":"Sandboxed processors"},{"location":"docs/bull/guide/workers/stalled-jobs/","text":"Due to the nature of NodeJS, which is (in general) single threaded and consists of an event loop to handle the asynchronous operations, the process function needs to be written carefully so that the CPU is not occupied for a long time. When a job reaches a worker and starts to be processed, BullMQ will place a lock on this job to protect the job from being modified by any other client or worker. At the same time, the worker needs to periodically notify BullMQ that it is still working on the job. {% hint style=\"info\" %} This period is configured with the \"stalledInterval\" setting, which normally you should not need to modify. {% endhint %} However if the CPU is very busy due to the process being very CPU intensive, the worker may not have time to renew the lock and tell the queue that it is still working on the job, then the job will likely be marked as Stalled. A stalled job is moved back to the waiting status and will be processed again by another worker, or if it has reached its maximum number of stalls moved to the failed set. Therefore it is very important to make sure the workers return the control to NodeJS event loop often enough to avoid this kind of problems.","title":"Stalled Jobs"},{"location":"docs/bull/patterns/_index/","text":"","title":"Patterns"},{"location":"docs/bull/patterns/failing-fast-when-redis-is-down/","text":"By design, BullMQ will reconnect automatically and if you add new jobs to a queue while the queue instance is disconnected from Redis, the add command will not fail, instead the call will keep waiting for a reconnection to occur until it can complete. This behavior is not always desirable; for example, if you have implemented a REST API that results in a call to \"add\", you do not want to keep the HTTP call busy while the \"add\" is waiting for the queue to reconnect to Redis. In this case, you can just pass the option \"enableOfflineQueue: false\", so that \"ioredis\" do not queue the commands and instead throws an exception: TypeScript const myQueue = new Queue ( \"transcoding\" , { connection : { enableOfflineQueue : false , }, }); app . post ( \"/jobs\" , async ( req , res ) => { try { const job = await myQueue . add ( \"myjob\" , { req . body }); res . status ( 201 ). json ( job . id ); } catch ( err ){ res . status ( 503 ). send ( err ); } }) In this way, the caller can catch this temporal error and act upon it, maybe doing some retries or giving up depending on its requirements. {% hint style=\"danger\" %} Currently, there is a limitation in that the Redis instance must at least be online while the queue is being instantiated. {% endhint %}","title":"Failing fast when Redis is down"},{"location":"docs/bull/patterns/flows/","text":"{% hint style=\"warning\" %} The following pattern, although still useful, has been mostly super-seeded by the new Flows functionality {% endhint %} In some situations, you need to execute a flow of actions that each and one of them could fail, it could be database updates, calls to external services, or any other kind of asynchronous call. Sometimes it may not be possible to create an idempotent job that can execute all these actions again in the case one of them failed for any reason, instead we want to be able to only re-execute the action that failed and continue executing the rest of the actions that have not yet been executed. The pattern to solve this issue consists on dividing the flow of actions into one queue for every action. When the first action completes, it places the next action as a job in its correspondent queue.","title":"Flows"},{"location":"docs/bull/patterns/idempotent-jobs/","text":"In order to take advantage from the ability to retry failed jobs , your jobs should be designed with failure in mind. This means that it should not make a difference to the final state of the system if a job can be finished in the first attempt or if it fails and needs to be retried later. This is called Idempotence . To achieve this behaviour, your jobs should be as atomic and simple as possible. Performing many different actions (such as database updates, API calls, ...) at once makes it hard to keep track of the process flow and, if needed, rollback partial progress when an exception occurs. Simpler jobs also means simpler debugging, identifying bottlenecks, etc. If necessary, split complex jobs as described in the flow pattern .","title":"Idempotent jobs"},{"location":"docs/bull/patterns/manually-fetching-jobs/","text":"When a Worker is instantiated, the most common usage is to specify a process function so that the worker will automatically process the jobs that arrive to the queue. Sometimes however it is useful to be able to fetch the jobs manually. Just instantiate the worker without a processor and call getNextJob to fetch the next job: TypeScript const worker = new Worker ( \"my-queue\" ); // Specify a unique token const token = \"my-token\" ; const job = ( await worker . getNextJob ( token )) as Job ; // Access job.data and do something with the job // processJob(job.data) if ( succeeded ) { await job . moveToCompleted ( \"some return value\" , token ); } else { await job . moveToFailed ( new Error ( \"my error message\" ), token ); } await worker . close (); There is an important consideration regarding job \"locks\" when processing manually. Locks avoid other workers to fetch the same job that is being processed by a given worker. The ownership of the lock is determined by the \"token\" that is sent when getting the job. {% hint style=\"info\" %} the lock duration setting is called \"visibility window\" in other queue systems. {% endhint %} Normally a job gets locked as soon as it is fetched from the queue with a max duration of \"lockDuration\" worker option. The default is 30 seconds but can be changed to any value easily, for example, to change it to 60 seconds: TypeScript const worker = new Worker ( \"my-queue\" , null , { lockDuration : 60000 }); When using standard worker processors the lock is renewed automatically after half lock duration time has passed, however, this mechanism does not exist when processing jobs manually, so you need to make sure to process the job faster than the lockDuration to avoid the \"QueueScheduler\" to move the job back to the waiting list of the queue or you can extend the lock for the job manually: TypeScript const job = ( await worker . getNextJob ( token )) as Job ; // Extend the lock 30 more seconds await job . extendLock ( token , 30000 ); Looping through jobs In many cases, you will have an \"infinite\" loop that processes jobs one by one like this example: TypeScript const worker = new Worker ( \"my-queue\" ); const token = \"my-token\" ; let job ; while ( 1 ) { let jobData = null , jobId , success ; if ( job ) { // Use job.data to process this particular job. // and set success variable if succeeded if ( success ) { [ jobData , jobId ] = await job . moveToCompleted ( \"some return value\" , token ); } else { await job . moveToFailed ( new Error ( \"some error message\" ), token ); } if ( jobData ) { job = Job . fromJSON ( worker , jobData , jobId ); } else { job = null ; } } else { if ( ! job ) { job = await worker . getNextJob ( token ); } } }","title":"Manually processing jobs"},{"location":"docs/bull/patterns/manually-fetching-jobs/#looping-through-jobs","text":"In many cases, you will have an \"infinite\" loop that processes jobs one by one like this example: TypeScript const worker = new Worker ( \"my-queue\" ); const token = \"my-token\" ; let job ; while ( 1 ) { let jobData = null , jobId , success ; if ( job ) { // Use job.data to process this particular job. // and set success variable if succeeded if ( success ) { [ jobData , jobId ] = await job . moveToCompleted ( \"some return value\" , token ); } else { await job . moveToFailed ( new Error ( \"some error message\" ), token ); } if ( jobData ) { job = Job . fromJSON ( worker , jobData , jobId ); } else { job = null ; } } else { if ( ! job ) { job = await worker . getNextJob ( token ); } } }","title":"Looping through jobs"},{"location":"docs/bull/patterns/process-step-jobs/","text":"Sometimes, it is useful to break processor function into small pieces that will be processed depending on the previous executed step, we could handle this kind of logic by using switch blocks: TypeScript enum Step { Initial , Second , Finish , } const worker = new Worker ( queueName , async ( job ) => { let step = job . data . step ; while ( step !== Step . Finish ) { switch ( step ) { case Step . Initial : { await doInitialStepStuff (); await job . update ({ step : Step.Second , }); step = Step . Second ; break ; } case Step . Second : { await doSecondStepStuff (); await job . update ({ step : Step.Finish , }); step = Step . Finish ; return Step . Finish ; } default : { throw new Error ( \"invalid step\" ); } } } }, { connection } ); As you can see, we should save the step value; in this case, we are saving it into the job's data. So even in the case of an error, it would be retried in the last step that was saved (in case we use a backoff strategy). Waiting Children A common use case is to add children at runtime and then wait for the children to complete. This could be handled using the moveToWaitingChildren method: TypeScript enum Step { Initial , Second , Third , Finish , } const worker = new Worker ( parentQueueName , async ( job , token ) => { let step = job . data . step ; while ( step !== Step . Finish ) { switch ( step ) { case Step . Initial : { await doInitialStepStuff (); await childrenQueue . add ( \"child-1\" , { foo : \"bar\" }, { parent : { id : job.id , queue : `bull: ${ parentQueueName } ` , }, } ); await job . update ({ step : Step.Second , }); step = Step . Second ; break ; } case Step . Second : { await doSecondStepStuff (); await childrenQueue . add ( \"child-2\" , { foo : \"bar\" }, { parent : { id : job.id , queue : ` ${ job . prefix } : ${ job . queueName } ` , }, } ); await job . update ({ step : Step.Third , }); step = Step . Third ; break ; } case Step . Third : { const shouldWait = await job . moveToWaitingChildren ( token ); if ( ! shouldWait ) { await job . update ({ step : Step.Finish , }); step = Step . Finish ; return Step . Finish ; } break ; } default : { throw new Error ( \"invalid step\" ); } } } }, { connection } ); {% hint style=\"info\" %} Bullmq-Pro: this pattern could be handled by using observables; in that case, we do not need to save next step. {% endhint %}","title":"Process Step jobs"},{"location":"docs/bull/patterns/process-step-jobs/#waiting-children","text":"A common use case is to add children at runtime and then wait for the children to complete. This could be handled using the moveToWaitingChildren method: TypeScript enum Step { Initial , Second , Third , Finish , } const worker = new Worker ( parentQueueName , async ( job , token ) => { let step = job . data . step ; while ( step !== Step . Finish ) { switch ( step ) { case Step . Initial : { await doInitialStepStuff (); await childrenQueue . add ( \"child-1\" , { foo : \"bar\" }, { parent : { id : job.id , queue : `bull: ${ parentQueueName } ` , }, } ); await job . update ({ step : Step.Second , }); step = Step . Second ; break ; } case Step . Second : { await doSecondStepStuff (); await childrenQueue . add ( \"child-2\" , { foo : \"bar\" }, { parent : { id : job.id , queue : ` ${ job . prefix } : ${ job . queueName } ` , }, } ); await job . update ({ step : Step.Third , }); step = Step . Third ; break ; } case Step . Third : { const shouldWait = await job . moveToWaitingChildren ( token ); if ( ! shouldWait ) { await job . update ({ step : Step.Finish , }); step = Step . Finish ; return Step . Finish ; } break ; } default : { throw new Error ( \"invalid step\" ); } } } }, { connection } ); {% hint style=\"info\" %} Bullmq-Pro: this pattern could be handled by using observables; in that case, we do not need to save next step. {% endhint %}","title":"Waiting Children"},{"location":"docs/bull/patterns/producer-consumer/","text":"","title":"Producer - Consumer"},{"location":"docs/bull/patterns/real-time-updates/","text":"","title":"Real time updates"},{"location":"docs/bull/patterns/sender-receiver/","text":"","title":"Sender - Receiver"},{"location":"docs/bull/patterns/throttle-jobs/","text":"Sometimes, you want to update data in reactions to a sequence of events instead at each event. You can enforce jobId to be unique with JobsOptions.jobId?: string . That overrides the job ID - by default, the job ID is a unique integer, but you can use this setting to override it. If you use this option, it is up to you to ensure the jobId is unique. If you attempt to add a job with an id that already exists, it will not be added. Hint: Be careful if using removeOnComplete/removeOnFailed options, since a removed job will not count as existing and a new job with the same job ID would indeed be added to the queue. example: TypeScript import { Job , Queue , QueueScheduler , Worker } from \"bullmq\" ; const myQueueScheduler = new QueueScheduler ( \"Paint\" ); const myQueue = new Queue ( \"Paint\" ); const worker = new Worker ( \"Paint\" , async ( job : Job ) => { console . log ( \"Do something with job\" ); return \"some value\" ; }); worker . on ( \"completed\" , ( job : Job , returnvalue : any ) => { console . log ( \"worker done painting\" , new Date ()); }); worker . on ( \"failed\" , ( job : Job , error : Error ) => { console . error ( \"worker fail painting\" , job , error , new Date ()); }); // Add only one job that will be delayed at least 1 second. myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" }); myQueue . add ( \"house\" , { color : \"white\" }, { delay : 1000 , jobId : \"house\" });","title":"Throttle jobs"},{"location":"docs/bull/patterns/working-with-batches/","text":"","title":"Working with batches"},{"location":"docs/egg-redis/_index/","text":"\u4e3a eggjs \u6846\u67b6\u57fa\u4e8e ioredis Redis \u5ba2\u6237\u7aef(\u652f\u6301 redis \u534f\u8bae) \u5b89\u88c5 Bash $ npm i egg-redis --save redis Plugin for egg, support egg application access to redis. This plugin based on ioredis , if you want to know specific usage, you should refer to the document of ioredis . \u914d\u7f6e Change ${app_root}/config/plugin.js to enable redis plugin: JavaScript exports . redis = { enable : true , package : \"egg-redis\" , }; Configure redis information in ${app_root}/config/config.default.js : Single Client JavaScript config . redis = { client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, }; Multi Clients JavaScript config . redis = { clients : { foo : { // instanceName. See below port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, bar : { port : 6379 , host : \"127.0.0.1\" , password : \"auth\" , db : 1 , }, }, }; Sentinel JavaScript config . redis = { client : { sentinels : [ { // Sentinel instances port : 26379 , // Sentinel port host : \"127.0.0.1\" , // Sentinel host }, ], name : \"mymaster\" , // Master name password : \"auth\" , db : 0 , }, }; No password Redis support no authentication access, but we are highly recommand you to use redis requirepass in redis.conf . Bash $vim /etc/redis/redis.conf requirepass xxxxxxxxxx // xxxxxxxxxx is your password Because it may be cause security risk, refer: https://ruby-china.org/topics/28094 https://zhuoroger.github.io/2016/07/29/redis-sec/ If you want to access redis with no password, use password: null . See ioredis API Documentation for all available options. \u81ea\u5b9a\u4e49 ioredis \u7248\u672c egg-redis using ioredis@4 now, if you want to use other version of ioredis, you can pass the instance by config.redis.Redis : JavaScript // config/config.default.js config . redis = { Redis : require ( \"ioredis\" ), // customize ioredis version, only set when you needed client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, }; weakDependent JavaScript config . redis = { client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , weakDependent : true , // this redis instance won't block app start }, }; \u4f7f\u7528 In controller, you can use app.redis to get the redis instance, check ioredis to see how to use. JavaScript // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"foo\" ); } }; }; \u591a\u5ba2\u6237\u7aef If your Configure with multi clients, you can use app.redis.get(instanceName) to get the specific redis instance and use it like above. JavaScript // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . get ( \"instance1\" ). set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"instance1\" ). get ( \"foo\" ); } }; }; \u5ba2\u6237\u7aef\u4f9d\u8d56\u4e8e Redis \u96c6\u7fa4 Before you start to use Redis Cluster, please checkout the document first, especially confirm cluster-enabled yes in Redis Cluster configuration file. In controller, you also can use app.redis to get the redis instance based on Redis Cluster. JavaScript // app/config/config.default.js exports . redis = { client : { cluster : true , nodes : [ { host : \"127.0.0.1\" , port : \"6379\" , family : \"user\" , password : \"password\" , db : \"db\" , }, { host : \"127.0.0.1\" , port : \"6380\" , family : \"user\" , password : \"password\" , db : \"db\" , }, ], }, }; // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"foo\" ); } }; }; \u95ee\u9898\u4e0e\u5efa\u8bae Please open an issue here .","title":"egg redis"},{"location":"docs/egg-redis/_index/#_1","text":"Bash $ npm i egg-redis --save redis Plugin for egg, support egg application access to redis. This plugin based on ioredis , if you want to know specific usage, you should refer to the document of ioredis .","title":"\u5b89\u88c5"},{"location":"docs/egg-redis/_index/#_2","text":"Change ${app_root}/config/plugin.js to enable redis plugin: JavaScript exports . redis = { enable : true , package : \"egg-redis\" , }; Configure redis information in ${app_root}/config/config.default.js : Single Client JavaScript config . redis = { client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, }; Multi Clients JavaScript config . redis = { clients : { foo : { // instanceName. See below port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, bar : { port : 6379 , host : \"127.0.0.1\" , password : \"auth\" , db : 1 , }, }, }; Sentinel JavaScript config . redis = { client : { sentinels : [ { // Sentinel instances port : 26379 , // Sentinel port host : \"127.0.0.1\" , // Sentinel host }, ], name : \"mymaster\" , // Master name password : \"auth\" , db : 0 , }, }; No password Redis support no authentication access, but we are highly recommand you to use redis requirepass in redis.conf . Bash $vim /etc/redis/redis.conf requirepass xxxxxxxxxx // xxxxxxxxxx is your password Because it may be cause security risk, refer: https://ruby-china.org/topics/28094 https://zhuoroger.github.io/2016/07/29/redis-sec/ If you want to access redis with no password, use password: null . See ioredis API Documentation for all available options.","title":"\u914d\u7f6e"},{"location":"docs/egg-redis/_index/#ioredis","text":"egg-redis using ioredis@4 now, if you want to use other version of ioredis, you can pass the instance by config.redis.Redis : JavaScript // config/config.default.js config . redis = { Redis : require ( \"ioredis\" ), // customize ioredis version, only set when you needed client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , }, }; weakDependent JavaScript config . redis = { client : { port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host password : \"auth\" , db : 0 , weakDependent : true , // this redis instance won't block app start }, };","title":"\u81ea\u5b9a\u4e49 ioredis \u7248\u672c"},{"location":"docs/egg-redis/_index/#_3","text":"In controller, you can use app.redis to get the redis instance, check ioredis to see how to use. JavaScript // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"foo\" ); } }; };","title":"\u4f7f\u7528"},{"location":"docs/egg-redis/_index/#_4","text":"If your Configure with multi clients, you can use app.redis.get(instanceName) to get the specific redis instance and use it like above. JavaScript // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . get ( \"instance1\" ). set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"instance1\" ). get ( \"foo\" ); } }; };","title":"\u591a\u5ba2\u6237\u7aef"},{"location":"docs/egg-redis/_index/#redis","text":"Before you start to use Redis Cluster, please checkout the document first, especially confirm cluster-enabled yes in Redis Cluster configuration file. In controller, you also can use app.redis to get the redis instance based on Redis Cluster. JavaScript // app/config/config.default.js exports . redis = { client : { cluster : true , nodes : [ { host : \"127.0.0.1\" , port : \"6379\" , family : \"user\" , password : \"password\" , db : \"db\" , }, { host : \"127.0.0.1\" , port : \"6380\" , family : \"user\" , password : \"password\" , db : \"db\" , }, ], }, }; // app/controller/home.js module . exports = ( app ) => { return class HomeController extends app . Controller { async index () { const { ctx , app } = this ; // set await app . redis . set ( \"foo\" , \"bar\" ); // get ctx . body = await app . redis . get ( \"foo\" ); } }; };","title":"\u5ba2\u6237\u7aef\u4f9d\u8d56\u4e8e Redis \u96c6\u7fa4"},{"location":"docs/egg-redis/_index/#_5","text":"Please open an issue here .","title":"\u95ee\u9898\u4e0e\u5efa\u8bae"},{"location":"docs/ioredis/TLS/","text":"TLS \u9009\u9879 Redis doesn't support TLS natively, however if the redis server you want to connect to is hosted behind a TLS proxy (e.g. stunnel ) or is offered by a PaaS service that supports TLS connection (e.g. Redis.com ), you can set the tls option: JavaScript const redis = new Redis ({ host : \"localhost\" , tls : { // Refer to `tls.connect()` section in // https://nodejs.org/api/tls.html // for all supported options ca : fs . readFileSync ( \"cert.pem\" ), }, }); Alternatively, specify the connection through a rediss:// URL . JavaScript const redis = new Redis ( \"rediss://redis.my-service.com\" ); TLS \u914d\u7f6e\u6587\u4ef6 To make it easier to configure we provide a few pre-configured TLS profiles that can be specified by setting the tls option to the profile's name or specifying a tls.profile option in case you need to customize some values of the profile. Profiles: RedisCloudFixed : Contains the CA for Redis.com Cloud fixed subscriptions RedisCloudFlexible : Contains the CA for Redis.com Cloud flexible subscriptions JavaScript const redis = new Redis ({ host : \"localhost\" , tls : \"RedisCloudFixed\" , }); const redisWithClientCertificate = new Redis ({ host : \"localhost\" , tls : { profile : \"RedisCloudFixed\" , key : \"123\" , }, });","title":"TLS"},{"location":"docs/ioredis/TLS/#tls","text":"Redis doesn't support TLS natively, however if the redis server you want to connect to is hosted behind a TLS proxy (e.g. stunnel ) or is offered by a PaaS service that supports TLS connection (e.g. Redis.com ), you can set the tls option: JavaScript const redis = new Redis ({ host : \"localhost\" , tls : { // Refer to `tls.connect()` section in // https://nodejs.org/api/tls.html // for all supported options ca : fs . readFileSync ( \"cert.pem\" ), }, }); Alternatively, specify the connection through a rediss:// URL . JavaScript const redis = new Redis ( \"rediss://redis.my-service.com\" );","title":"TLS \u9009\u9879"},{"location":"docs/ioredis/TLS/#tls_1","text":"To make it easier to configure we provide a few pre-configured TLS profiles that can be specified by setting the tls option to the profile's name or specifying a tls.profile option in case you need to customize some values of the profile. Profiles: RedisCloudFixed : Contains the CA for Redis.com Cloud fixed subscriptions RedisCloudFlexible : Contains the CA for Redis.com Cloud flexible subscriptions JavaScript const redis = new Redis ({ host : \"localhost\" , tls : \"RedisCloudFixed\" , }); const redisWithClientCertificate = new Redis ({ host : \"localhost\" , tls : { profile : \"RedisCloudFixed\" , key : \"123\" , }, });","title":"TLS \u914d\u7f6e\u6587\u4ef6"},{"location":"docs/ioredis/_index/","text":"https://github.com/luin/ioredis A robust, performance-focused and full-featured Redis client for Node.js . Supports Redis >= 2.6.12 and (Node.js >= 6). Completely compatible with Redis 6.x. \u7279\u6027 ioredis is a robust, full-featured Redis client that is used in the world's biggest online commerce company Alibaba and many other awesome companies. Full-featured. It supports Cluster , Sentinel , Streams , Pipelining and of course Lua scripting & Pub/Sub (with the support of binary messages). High performance. Delightful API. It works with Node callbacks and Native promises. Transformation of command arguments and replies. Transparent key prefixing. Abstraction for Lua scripting, allowing you to define custom commands. Support for binary data. Support for TLS \ud83d\udd12. Support for offline queue and ready checking. Support for ES6 types, such as Map and Set . Support for GEO commands \ud83d\udccd. Support for Redis ACL. Sophisticated error handling strategy. Support for NAT mapping. Support for autopipelining \u94fe\u63a5 API Documentation Changelog Migrating from node_redis Error Handling \u8d5e\u52a9\u5546 Become a sponsor! Upstash: Serverless Database for Redis Upstash is a Serverless Database with Redis/REST API and durable storage. It is the perfect database for your applications thanks to its per request pricing and low latency data. Start for free in 30 seconds! Medis: Redis GUI for macOS Looking for a Redis GUI for macOS, Windows and Linux? Here's Medis ! Medis is an open-sourced, beautiful, easy-to-use Redis GUI management application. Medis starts with all the basic features you need: Keys viewing/editing SSH Tunnel for connecting with remote servers Terminal for executing custom commands And other awesome features... Medis 1 is open sourced on GitHub Kuber: Kubernetes Dashboard for iOS \u9519\u8bef\u5904\u7406 All the errors returned by the Redis server are instances of ReplyError , which can be accessed via Redis : JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); // This command causes a reply error since the SET command requires two arguments. redis . set ( \"foo\" , ( err ) => { err instanceof Redis . ReplyError ; }); This is the error stack of the ReplyError : Text Only ReplyError: ERR wrong number of arguments for 'set' command at ReplyParser._parseResult (/app/node_modules/ioredis/lib/parsers/javascript.js:60:14) at ReplyParser.execute (/app/node_modules/ioredis/lib/parsers/javascript.js:178:20) at Socket.<anonymous> (/app/node_modules/ioredis/lib/redis/event_handler.js:99:22) at Socket.emit (events.js:97:17) at readableAddChunk (_stream_readable.js:143:16) at Socket.Readable.push (_stream_readable.js:106:10) at TCP.onread (net.js:509:20) By default, the error stack doesn't make any sense because the whole stack happens in the ioredis module itself, not in your code. So it's not easy to find out where the error happens in your code. ioredis provides an option showFriendlyErrorStack to solve the problem. When you enable showFriendlyErrorStack , ioredis will optimize the error stack for you: JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ({ showFriendlyErrorStack : true }); redis . set ( \"foo\" ); And the output will be: Text Only ReplyError: ERR wrong number of arguments for 'set' command at Object.<anonymous> (/app/index.js:3:7) at Module._compile (module.js:446:26) at Object.Module._extensions..js (module.js:464:10) at Module.load (module.js:341:32) at Function.Module._load (module.js:296:12) at Function.Module.runMain (module.js:487:10) at startup (node.js:111:16) at node.js:799:3 This time the stack tells you that the error happens on the third line in your code. Pretty sweet! However, it would decrease the performance significantly to optimize the error stack. So by default, this option is disabled and can only be used for debugging purposes. You shouldn't use this feature in a production environment. \u63d2\u5165\u4f60\u81ea\u5df1\u7684\u627f\u8bfa\u5e93 If you're an advanced user, you may want to plug in your own promise library like bluebird . Just set Redis.Promise to your favorite ES6-style promise constructor and ioredis will use it. JavaScript const Redis = require ( \"ioredis\" ); Redis . Promise = require ( \"bluebird\" ); const redis = new Redis (); // Use bluebird assert . equal ( redis . get (). constructor , require ( \"bluebird\" )); // You can change the Promise implementation at any time: Redis . Promise = global . Promise ; assert . equal ( redis . get (). constructor , global . Promise ); \u8fd0\u884c\u6d4b\u8bd5 Start a Redis server on 127.0.0.1:6379, and then: Bash $ npm test FLUSH ALL will be invoked after each test, so make sure there's no valuable data in it before running tests. If your testing environment does not let you spin up a Redis server ioredis-mock is a drop-in replacement you can use in your tests. It aims to behave identically to ioredis connected to a Redis server so that your integration tests is easier to write and of better quality. \u8c03\u8bd5 You can set the DEBUG env to ioredis:* to print debug info: Bash $ DEBUG = ioredis:* node app.js \u52a0\u5165! I'm happy to receive bug reports, fixes, documentation enhancements, and any other improvements. And since I'm not a native English speaker, if you find any grammar mistakes in the documentation, please also let me know. :) \u6210\u4e3a\u4e00\u4e2a\u8d5e\u52a9\u5546 Open source is hard and time-consuming. If you want to invest in ioredis's future you can become a sponsor and make us spend more time on this library's improvements and new features. Thank you for using ioredis :-) \u8d21\u732e\u8005 \u8fd9\u4e2a\u9879\u76ee\u7684\u5b58\u5728\u8981\u611f\u8c22\u6240\u6709\u505a\u51fa\u8d21\u732e\u7684\u4eba: \u8bb8\u53ef\u8bc1 MIT","title":"ioredis"},{"location":"docs/ioredis/_index/#_1","text":"ioredis is a robust, full-featured Redis client that is used in the world's biggest online commerce company Alibaba and many other awesome companies. Full-featured. It supports Cluster , Sentinel , Streams , Pipelining and of course Lua scripting & Pub/Sub (with the support of binary messages). High performance. Delightful API. It works with Node callbacks and Native promises. Transformation of command arguments and replies. Transparent key prefixing. Abstraction for Lua scripting, allowing you to define custom commands. Support for binary data. Support for TLS \ud83d\udd12. Support for offline queue and ready checking. Support for ES6 types, such as Map and Set . Support for GEO commands \ud83d\udccd. Support for Redis ACL. Sophisticated error handling strategy. Support for NAT mapping. Support for autopipelining","title":"\u7279\u6027"},{"location":"docs/ioredis/_index/#_2","text":"API Documentation Changelog Migrating from node_redis Error Handling","title":"\u94fe\u63a5"},{"location":"docs/ioredis/_index/#_3","text":"Become a sponsor!","title":"\u8d5e\u52a9\u5546"},{"location":"docs/ioredis/_index/#upstash-serverless-database-for-redis","text":"Upstash is a Serverless Database with Redis/REST API and durable storage. It is the perfect database for your applications thanks to its per request pricing and low latency data. Start for free in 30 seconds!","title":"Upstash: Serverless Database for Redis"},{"location":"docs/ioredis/_index/#medis-redis-gui-for-macos","text":"Looking for a Redis GUI for macOS, Windows and Linux? Here's Medis ! Medis is an open-sourced, beautiful, easy-to-use Redis GUI management application. Medis starts with all the basic features you need: Keys viewing/editing SSH Tunnel for connecting with remote servers Terminal for executing custom commands And other awesome features... Medis 1 is open sourced on GitHub","title":"Medis: Redis GUI for macOS"},{"location":"docs/ioredis/_index/#kuber-kubernetes-dashboard-for-ios","text":"","title":"Kuber: Kubernetes Dashboard for iOS"},{"location":"docs/ioredis/_index/#_4","text":"All the errors returned by the Redis server are instances of ReplyError , which can be accessed via Redis : JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); // This command causes a reply error since the SET command requires two arguments. redis . set ( \"foo\" , ( err ) => { err instanceof Redis . ReplyError ; }); This is the error stack of the ReplyError : Text Only ReplyError: ERR wrong number of arguments for 'set' command at ReplyParser._parseResult (/app/node_modules/ioredis/lib/parsers/javascript.js:60:14) at ReplyParser.execute (/app/node_modules/ioredis/lib/parsers/javascript.js:178:20) at Socket.<anonymous> (/app/node_modules/ioredis/lib/redis/event_handler.js:99:22) at Socket.emit (events.js:97:17) at readableAddChunk (_stream_readable.js:143:16) at Socket.Readable.push (_stream_readable.js:106:10) at TCP.onread (net.js:509:20) By default, the error stack doesn't make any sense because the whole stack happens in the ioredis module itself, not in your code. So it's not easy to find out where the error happens in your code. ioredis provides an option showFriendlyErrorStack to solve the problem. When you enable showFriendlyErrorStack , ioredis will optimize the error stack for you: JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis ({ showFriendlyErrorStack : true }); redis . set ( \"foo\" ); And the output will be: Text Only ReplyError: ERR wrong number of arguments for 'set' command at Object.<anonymous> (/app/index.js:3:7) at Module._compile (module.js:446:26) at Object.Module._extensions..js (module.js:464:10) at Module.load (module.js:341:32) at Function.Module._load (module.js:296:12) at Function.Module.runMain (module.js:487:10) at startup (node.js:111:16) at node.js:799:3 This time the stack tells you that the error happens on the third line in your code. Pretty sweet! However, it would decrease the performance significantly to optimize the error stack. So by default, this option is disabled and can only be used for debugging purposes. You shouldn't use this feature in a production environment.","title":"\u9519\u8bef\u5904\u7406"},{"location":"docs/ioredis/_index/#_5","text":"If you're an advanced user, you may want to plug in your own promise library like bluebird . Just set Redis.Promise to your favorite ES6-style promise constructor and ioredis will use it. JavaScript const Redis = require ( \"ioredis\" ); Redis . Promise = require ( \"bluebird\" ); const redis = new Redis (); // Use bluebird assert . equal ( redis . get (). constructor , require ( \"bluebird\" )); // You can change the Promise implementation at any time: Redis . Promise = global . Promise ; assert . equal ( redis . get (). constructor , global . Promise );","title":"\u63d2\u5165\u4f60\u81ea\u5df1\u7684\u627f\u8bfa\u5e93"},{"location":"docs/ioredis/_index/#_6","text":"Start a Redis server on 127.0.0.1:6379, and then: Bash $ npm test FLUSH ALL will be invoked after each test, so make sure there's no valuable data in it before running tests. If your testing environment does not let you spin up a Redis server ioredis-mock is a drop-in replacement you can use in your tests. It aims to behave identically to ioredis connected to a Redis server so that your integration tests is easier to write and of better quality.","title":"\u8fd0\u884c\u6d4b\u8bd5"},{"location":"docs/ioredis/_index/#_7","text":"You can set the DEBUG env to ioredis:* to print debug info: Bash $ DEBUG = ioredis:* node app.js","title":"\u8c03\u8bd5"},{"location":"docs/ioredis/_index/#_8","text":"I'm happy to receive bug reports, fixes, documentation enhancements, and any other improvements. And since I'm not a native English speaker, if you find any grammar mistakes in the documentation, please also let me know. :)","title":"\u52a0\u5165!"},{"location":"docs/ioredis/_index/#_9","text":"Open source is hard and time-consuming. If you want to invest in ioredis's future you can become a sponsor and make us spend more time on this library's improvements and new features. Thank you for using ioredis :-)","title":"\u6210\u4e3a\u4e00\u4e2a\u8d5e\u52a9\u5546"},{"location":"docs/ioredis/_index/#_10","text":"\u8fd9\u4e2a\u9879\u76ee\u7684\u5b58\u5728\u8981\u611f\u8c22\u6240\u6709\u505a\u51fa\u8d21\u732e\u7684\u4eba:","title":"\u8d21\u732e\u8005"},{"location":"docs/ioredis/_index/#_11","text":"MIT","title":"\u8bb8\u53ef\u8bc1"},{"location":"docs/ioredis/cluster/","text":"Redis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes. You can connect to a Redis Cluster like this: JavaScript const Redis = require ( \"ioredis\" ); const cluster = new Redis . Cluster ([ { port : 6380 , host : \"127.0.0.1\" , }, { port : 6381 , host : \"127.0.0.1\" , }, ]); cluster . set ( \"foo\" , \"bar\" ); cluster . get ( \"foo\" , ( err , res ) => { // res === 'bar' }); Cluster constructor accepts two arguments, where: The first argument is a list of nodes of the cluster you want to connect to. Just like Sentinel, the list does not need to enumerate all your cluster nodes, but a few so that if one is unreachable the client will try the next one, and the client will discover other nodes automatically when at least one node is connected. The second argument is the options, where: clusterRetryStrategy : When none of the startup nodes are reachable, clusterRetryStrategy will be invoked. When a number is returned, ioredis will try to reconnect to the startup nodes from scratch after the specified delay (in ms). Otherwise, an error of \"None of startup nodes is available\" will be returned. The default value of this option is: JavaScript function ( times ) { const delay = Math . min ( 100 + times * 2 , 2000 ); return delay ; } It's possible to modify the startupNodes property in order to switch to another set of nodes here: JavaScript function ( times ) { this . startupNodes = [{ port : 6790 , host : '127.0.0.1' }]; return Math . min ( 100 + times * 2 , 2000 ); } dnsLookup : Alternative DNS lookup function ( dns.lookup() is used by default). It may be useful to override this in special cases, such as when AWS ElastiCache used with TLS enabled. enableOfflineQueue : Similar to the enableOfflineQueue option of Redis class. enableReadyCheck : When enabled, \"ready\" event will only be emitted when CLUSTER INFO command reporting the cluster is ready for handling commands. Otherwise, it will be emitted immediately after \"connect\" is emitted. scaleReads : Config where to send the read queries. See below for more details. maxRedirections : When a cluster related error (e.g. MOVED , ASK and CLUSTERDOWN etc.) is received, the client will redirect the command to another node. This option limits the max redirections allowed when sending a command. The default value is 16 . retryDelayOnFailover : If the target node is disconnected when sending a command, ioredis will retry after the specified delay. The default value is 100 . You should make sure retryDelayOnFailover * maxRedirections > cluster-node-timeout to insure that no command will fail during a failover. retryDelayOnClusterDown : When a cluster is down, all commands will be rejected with the error of CLUSTERDOWN . If this option is a number (by default, it is 100 ), the client will resend the commands after the specified time (in ms). retryDelayOnTryAgain : If this option is a number (by default, it is 100 ), the client will resend the commands rejected with TRYAGAIN error after the specified time (in ms). retryDelayOnMoved : By default, this value is 0 (in ms), which means when a MOVED error is received, the client will resend the command instantly to the node returned together with the MOVED error. However, sometimes it takes time for a cluster to become state stabilized after a failover, so adding a delay before resending can prevent a ping pong effect. redisOptions : Default options passed to the constructor of Redis when connecting to a node. slotsRefreshTimeout : Milliseconds before a timeout occurs while refreshing slots from the cluster (default 1000 ). slotsRefreshInterval : Milliseconds between every automatic slots refresh (default 5000 ). Read-write splitting A typical redis cluster contains three or more masters and several slaves for each master. It's possible to scale out redis cluster by sending read queries to slaves and write queries to masters by setting the scaleReads option. scaleReads is \"master\" by default, which means ioredis will never send any queries to slaves. There are other three available options: \"all\": Send write queries to masters and read queries to masters or slaves randomly. \"slave\": Send write queries to masters and read queries to slaves. a custom function(nodes, command): node : Will choose the custom function to select to which node to send read queries (write queries keep being sent to master). The first node in nodes is always the master serving the relevant slots. If the function returns an array of nodes, a random node of that list will be selected. For example: JavaScript const cluster = new Redis . Cluster ( [ /* nodes */ ], { scaleReads : \"slave\" , } ); cluster . set ( \"foo\" , \"bar\" ); // This query will be sent to one of the masters. cluster . get ( \"foo\" , ( err , res ) => { // This query will be sent to one of the slaves. }); NB In the code snippet above, the res may not be equal to \"bar\" because of the lag of replication between the master and slaves. Running commands to multiple nodes Every command will be sent to exactly one node. For commands containing keys, (e.g. GET , SET and HGETALL ), ioredis sends them to the node that serving the keys, and for other commands not containing keys, (e.g. INFO , KEYS and FLUSHDB ), ioredis sends them to a random node. Sometimes you may want to send a command to multiple nodes (masters or slaves) of the cluster, you can get the nodes via Cluster#nodes() method. Cluster#nodes() accepts a parameter role, which can be \"master\", \"slave\" and \"all\" (default), and returns an array of Redis instance. For example: JavaScript // Send `FLUSHDB` command to all slaves: const slaves = cluster . nodes ( \"slave\" ); Promise . all ( slaves . map (( node ) => node . flushdb ())); // Get keys of all the masters: const masters = cluster . nodes ( \"master\" ); Promise . all ( masters . map (( node ) => node . keys ()) . then (( keys ) => { // keys: [['key1', 'key2'], ['key3', 'key4']] }) ); NAT Mapping Sometimes the cluster is hosted within a internal network that can only be accessed via a NAT (Network Address Translation) instance. See Accessing ElastiCache from outside AWS as an example. You can specify nat mapping rules via natMap option: JavaScript const cluster = new Redis . Cluster ( [ { host : \"203.0.113.73\" , port : 30001 , }, ], { natMap : { \"10.0.1.230:30001\" : { host : \"203.0.113.73\" , port : 30001 }, \"10.0.1.231:30001\" : { host : \"203.0.113.73\" , port : 30002 }, \"10.0.1.232:30001\" : { host : \"203.0.113.73\" , port : 30003 }, }, } ); This option is also useful when the cluster is running inside a Docker container. Transaction and pipeline in Cluster mode Almost all features that are supported by Redis are also supported by Redis.Cluster , e.g. custom commands, transaction and pipeline. However there are some differences when using transaction and pipeline in Cluster mode: All keys in a pipeline should belong to slots served by the same node, since ioredis sends all commands in a pipeline to the same node. You can't use multi without pipeline (aka cluster.multi({ pipeline: false }) ). This is because when you call cluster.multi({ pipeline: false }) , ioredis doesn't know which node the multi command should be sent to. When any commands in a pipeline receives a MOVED or ASK error, ioredis will resend the whole pipeline to the specified node automatically if all of the following conditions are satisfied: All errors received in the pipeline are the same. For example, we won't resend the pipeline if we got two MOVED errors pointing to different nodes. All commands executed successfully are readonly commands. This makes sure that resending the pipeline won't have side effects. Pub/Sub Pub/Sub in cluster mode works exactly as the same as in standalone mode. Internally, when a node of the cluster receives a message, it will broadcast the message to the other nodes. ioredis makes sure that each message will only be received once by strictly subscribing one node at the same time. JavaScript const nodes = [ /* nodes */ ]; const pub = new Redis . Cluster ( nodes ); const sub = new Redis . Cluster ( nodes ); sub . on ( \"message\" , ( channel , message ) => { console . log ( channel , message ); }); sub . subscribe ( \"news\" , () => { pub . publish ( \"news\" , \"highlights\" ); }); Events Event Description connect emits when a connection is established to the Redis server. ready emits when CLUSTER INFO reporting the cluster is able to receive commands (if enableReadyCheck is true ) or immediately after connect event (if enableReadyCheck is false). error emits when an error occurs while connecting with a property of lastNodeError representing the last node error received. This event is emitted silently (only emitting if there's at least one listener). close emits when an established Redis server connection has closed. reconnecting emits after close when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting. end emits after close when no more reconnections will be made. +node emits when a new node is connected. -node emits when a node is disconnected. node error emits when an error occurs when connecting to a node. The second argument indicates the address of the node. Password Setting the password option to access password-protected clusters: JavaScript const Redis = require ( \"ioredis\" ); const cluster = new Redis . Cluster ( nodes , { redisOptions : { password : \"your-cluster-password\" , }, }); If some of nodes in the cluster using a different password, you should specify them in the first parameter: JavaScript const Redis = require ( \"ioredis\" ); const cluster = new Redis . Cluster ( [ // Use password \"password-for-30001\" for 30001 { port : 30001 , password : \"password-for-30001\" }, // Don't use password when accessing 30002 { port : 30002 , password : null }, // Other nodes will use \"fallback-password\" ], { redisOptions : { password : \"fallback-password\" , }, } ); Special note: AWS ElastiCache Clusters with TLS AWS ElastiCache for Redis (Clustered Mode) supports TLS encryption. If you use this, you may encounter errors with invalid certificates. To resolve this issue, construct the Cluster with the dnsLookup option as follows: JavaScript const cluster = new Redis . Cluster ( [ { host : \"clustercfg.myCluster.abcdefg.xyz.cache.amazonaws.com\" , port : 6379 , }, ], { dnsLookup : ( address , callback ) => callback ( null , address ), redisOptions : { tls : {}, }, } );","title":"Cluster"},{"location":"docs/ioredis/cluster/#read-write-splitting","text":"A typical redis cluster contains three or more masters and several slaves for each master. It's possible to scale out redis cluster by sending read queries to slaves and write queries to masters by setting the scaleReads option. scaleReads is \"master\" by default, which means ioredis will never send any queries to slaves. There are other three available options: \"all\": Send write queries to masters and read queries to masters or slaves randomly. \"slave\": Send write queries to masters and read queries to slaves. a custom function(nodes, command): node : Will choose the custom function to select to which node to send read queries (write queries keep being sent to master). The first node in nodes is always the master serving the relevant slots. If the function returns an array of nodes, a random node of that list will be selected. For example: JavaScript const cluster = new Redis . Cluster ( [ /* nodes */ ], { scaleReads : \"slave\" , } ); cluster . set ( \"foo\" , \"bar\" ); // This query will be sent to one of the masters. cluster . get ( \"foo\" , ( err , res ) => { // This query will be sent to one of the slaves. }); NB In the code snippet above, the res may not be equal to \"bar\" because of the lag of replication between the master and slaves.","title":"Read-write splitting"},{"location":"docs/ioredis/cluster/#running-commands-to-multiple-nodes","text":"Every command will be sent to exactly one node. For commands containing keys, (e.g. GET , SET and HGETALL ), ioredis sends them to the node that serving the keys, and for other commands not containing keys, (e.g. INFO , KEYS and FLUSHDB ), ioredis sends them to a random node. Sometimes you may want to send a command to multiple nodes (masters or slaves) of the cluster, you can get the nodes via Cluster#nodes() method. Cluster#nodes() accepts a parameter role, which can be \"master\", \"slave\" and \"all\" (default), and returns an array of Redis instance. For example: JavaScript // Send `FLUSHDB` command to all slaves: const slaves = cluster . nodes ( \"slave\" ); Promise . all ( slaves . map (( node ) => node . flushdb ())); // Get keys of all the masters: const masters = cluster . nodes ( \"master\" ); Promise . all ( masters . map (( node ) => node . keys ()) . then (( keys ) => { // keys: [['key1', 'key2'], ['key3', 'key4']] }) );","title":"Running commands to multiple nodes"},{"location":"docs/ioredis/cluster/#nat-mapping","text":"Sometimes the cluster is hosted within a internal network that can only be accessed via a NAT (Network Address Translation) instance. See Accessing ElastiCache from outside AWS as an example. You can specify nat mapping rules via natMap option: JavaScript const cluster = new Redis . Cluster ( [ { host : \"203.0.113.73\" , port : 30001 , }, ], { natMap : { \"10.0.1.230:30001\" : { host : \"203.0.113.73\" , port : 30001 }, \"10.0.1.231:30001\" : { host : \"203.0.113.73\" , port : 30002 }, \"10.0.1.232:30001\" : { host : \"203.0.113.73\" , port : 30003 }, }, } ); This option is also useful when the cluster is running inside a Docker container.","title":"NAT Mapping"},{"location":"docs/ioredis/cluster/#transaction-and-pipeline-in-cluster-mode","text":"Almost all features that are supported by Redis are also supported by Redis.Cluster , e.g. custom commands, transaction and pipeline. However there are some differences when using transaction and pipeline in Cluster mode: All keys in a pipeline should belong to slots served by the same node, since ioredis sends all commands in a pipeline to the same node. You can't use multi without pipeline (aka cluster.multi({ pipeline: false }) ). This is because when you call cluster.multi({ pipeline: false }) , ioredis doesn't know which node the multi command should be sent to. When any commands in a pipeline receives a MOVED or ASK error, ioredis will resend the whole pipeline to the specified node automatically if all of the following conditions are satisfied: All errors received in the pipeline are the same. For example, we won't resend the pipeline if we got two MOVED errors pointing to different nodes. All commands executed successfully are readonly commands. This makes sure that resending the pipeline won't have side effects.","title":"Transaction and pipeline in Cluster mode"},{"location":"docs/ioredis/cluster/#pubsub","text":"Pub/Sub in cluster mode works exactly as the same as in standalone mode. Internally, when a node of the cluster receives a message, it will broadcast the message to the other nodes. ioredis makes sure that each message will only be received once by strictly subscribing one node at the same time. JavaScript const nodes = [ /* nodes */ ]; const pub = new Redis . Cluster ( nodes ); const sub = new Redis . Cluster ( nodes ); sub . on ( \"message\" , ( channel , message ) => { console . log ( channel , message ); }); sub . subscribe ( \"news\" , () => { pub . publish ( \"news\" , \"highlights\" ); });","title":"Pub/Sub"},{"location":"docs/ioredis/cluster/#events","text":"Event Description connect emits when a connection is established to the Redis server. ready emits when CLUSTER INFO reporting the cluster is able to receive commands (if enableReadyCheck is true ) or immediately after connect event (if enableReadyCheck is false). error emits when an error occurs while connecting with a property of lastNodeError representing the last node error received. This event is emitted silently (only emitting if there's at least one listener). close emits when an established Redis server connection has closed. reconnecting emits after close when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting. end emits after close when no more reconnections will be made. +node emits when a new node is connected. -node emits when a node is disconnected. node error emits when an error occurs when connecting to a node. The second argument indicates the address of the node.","title":"Events"},{"location":"docs/ioredis/cluster/#password","text":"Setting the password option to access password-protected clusters: JavaScript const Redis = require ( \"ioredis\" ); const cluster = new Redis . Cluster ( nodes , { redisOptions : { password : \"your-cluster-password\" , }, }); If some of nodes in the cluster using a different password, you should specify them in the first parameter: JavaScript const Redis = require ( \"ioredis\" ); const cluster = new Redis . Cluster ( [ // Use password \"password-for-30001\" for 30001 { port : 30001 , password : \"password-for-30001\" }, // Don't use password when accessing 30002 { port : 30002 , password : null }, // Other nodes will use \"fallback-password\" ], { redisOptions : { password : \"fallback-password\" , }, } );","title":"Password"},{"location":"docs/ioredis/cluster/#special-note-aws-elasticache-clusters-with-tls","text":"AWS ElastiCache for Redis (Clustered Mode) supports TLS encryption. If you use this, you may encounter errors with invalid certificates. To resolve this issue, construct the Cluster with the dnsLookup option as follows: JavaScript const cluster = new Redis . Cluster ( [ { host : \"clustercfg.myCluster.abcdefg.xyz.cache.amazonaws.com\" , port : 6379 , }, ], { dnsLookup : ( address , callback ) => callback ( null , address ), redisOptions : { tls : {}, }, } );","title":"Special note: AWS ElastiCache Clusters with TLS"},{"location":"docs/ioredis/connection/","text":"\u8fde\u63a5\u5230 Redis When a new Redis instance is created, a connection to Redis will be created at the same time. You can specify which Redis to connect to by: JavaScript new Redis (); // Connect to 127.0.0.1:6379 new Redis ( 6380 ); // 127.0.0.1:6380 new Redis ( 6379 , \"192.168.1.1\" ); // 192.168.1.1:6379 new Redis ( \"/tmp/redis.sock\" ); new Redis ({ port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host family : 4 , // 4 (IPv4) or 6 (IPv6) password : \"auth\" , db : 0 , }); You can also specify connection options as a redis:// URL or rediss:// URL when using TLS encryption : JavaScript // Connect to 127.0.0.1:6380, db 4, using password \"authpassword\": new Redis ( \"redis://:authpassword@127.0.0.1:6380/4\" ); // Username can also be passed via URI. // It's worth to noticing that for compatibility reasons `allowUsernameInURI` // need to be provided, otherwise the username part will be ignored. new Redis ( \"redis://username:authpassword@127.0.0.1:6380/4?allowUsernameInURI=true\" ); See API Documentation for all available options. \u81ea\u52a8\u8fde\u63a5 By default, ioredis will try to reconnect when the connection to Redis is lost except when the connection is closed manually by redis.disconnect() or redis.quit() . It's very flexible to control how long to wait to reconnect after disconnection using the retryStrategy option: JavaScript const redis = new Redis ({ // This is the default value of `retryStrategy` retryStrategy ( times ) { const delay = Math . min ( times * 50 , 2000 ); return delay ; }, }); retryStrategy is a function that will be called when the connection is lost. The argument times means this is the nth reconnection being made and the return value represents how long (in ms) to wait to reconnect. When the return value isn't a number, ioredis will stop trying to reconnect, and the connection will be lost forever if the user doesn't call redis.connect() manually. When reconnected, the client will auto subscribe to channels that the previous connection subscribed to. This behavior can be disabled by setting the autoResubscribe option to false . And if the previous connection has some unfulfilled commands (most likely blocking commands such as brpop and blpop ), the client will resend them when reconnected. This behavior can be disabled by setting the autoResendUnfulfilledCommands option to false . By default, all pending commands will be flushed with an error every 20 retry attempts. That makes sure commands won't wait forever when the connection is down. You can change this behavior by setting maxRetriesPerRequest : JavaScript const redis = new Redis ({ maxRetriesPerRequest : 1 , }); Set maxRetriesPerRequest to null to disable this behavior, and every command will wait forever until the connection is alive again (which is the default behavior before ioredis v4). Reconnect on error Besides auto-reconnect when the connection is closed, ioredis supports reconnecting on certain Redis errors using the reconnectOnError option. Here's an example that will reconnect when receiving READONLY error: JavaScript const redis = new Redis ({ reconnectOnError ( err ) { const targetError = \"READONLY\" ; if ( err . message . includes ( targetError )) { // Only reconnect when the error contains \"READONLY\" return true ; // or `return 1;` } }, }); This feature is useful when using Amazon ElastiCache instances with Auto-failover disabled. On these instances, test your reconnectOnError handler by manually promoting the replica node to the primary role using the AWS console. The following writes fail with the error READONLY . Using reconnectOnError , we can force the connection to reconnect on this error in order to connect to the new master. Furthermore, if the reconnectOnError returns 2 , ioredis will resend the failed command after reconnecting. On ElastiCache instances with Auto-failover enabled, reconnectOnError does not execute. Instead of returning a Redis error, AWS closes all connections to the master endpoint until the new primary node is ready. ioredis reconnects via retryStrategy instead of reconnectOnError after about a minute. On ElastiCache instances with Auto-failover enabled, test failover events with the Failover primary option in the AWS console. Connection Events The Redis instance will emit some events about the state of the connection to the Redis server. Event Description connect emits when a connection is established to the Redis server. ready If enableReadyCheck is true , client will emit ready when the server reports that it is ready to receive commands (e.g. finish loading data from disk). Otherwise, ready will be emitted immediately right after the connect event. error emits when an error occurs while connecting. However, ioredis emits all error events silently (only emits when there's at least one listener) so that your application won't crash if you're not listening to the error event. close emits when an established Redis server connection has closed. reconnecting emits after close when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting. end emits after close when no more reconnections will be made, or the connection is failed to establish. wait emits when lazyConnect is set and will wait for the first command to be called before connecting. You can also check out the Redis#status property to get the current connection status. Besides the above connection events, there are several other custom events: Event Description select emits when the database changed. The argument is the new db number.","title":"\u8fde\u63a5"},{"location":"docs/ioredis/connection/#redis","text":"When a new Redis instance is created, a connection to Redis will be created at the same time. You can specify which Redis to connect to by: JavaScript new Redis (); // Connect to 127.0.0.1:6379 new Redis ( 6380 ); // 127.0.0.1:6380 new Redis ( 6379 , \"192.168.1.1\" ); // 192.168.1.1:6379 new Redis ( \"/tmp/redis.sock\" ); new Redis ({ port : 6379 , // Redis port host : \"127.0.0.1\" , // Redis host family : 4 , // 4 (IPv4) or 6 (IPv6) password : \"auth\" , db : 0 , }); You can also specify connection options as a redis:// URL or rediss:// URL when using TLS encryption : JavaScript // Connect to 127.0.0.1:6380, db 4, using password \"authpassword\": new Redis ( \"redis://:authpassword@127.0.0.1:6380/4\" ); // Username can also be passed via URI. // It's worth to noticing that for compatibility reasons `allowUsernameInURI` // need to be provided, otherwise the username part will be ignored. new Redis ( \"redis://username:authpassword@127.0.0.1:6380/4?allowUsernameInURI=true\" ); See API Documentation for all available options.","title":"\u8fde\u63a5\u5230 Redis"},{"location":"docs/ioredis/connection/#_1","text":"By default, ioredis will try to reconnect when the connection to Redis is lost except when the connection is closed manually by redis.disconnect() or redis.quit() . It's very flexible to control how long to wait to reconnect after disconnection using the retryStrategy option: JavaScript const redis = new Redis ({ // This is the default value of `retryStrategy` retryStrategy ( times ) { const delay = Math . min ( times * 50 , 2000 ); return delay ; }, }); retryStrategy is a function that will be called when the connection is lost. The argument times means this is the nth reconnection being made and the return value represents how long (in ms) to wait to reconnect. When the return value isn't a number, ioredis will stop trying to reconnect, and the connection will be lost forever if the user doesn't call redis.connect() manually. When reconnected, the client will auto subscribe to channels that the previous connection subscribed to. This behavior can be disabled by setting the autoResubscribe option to false . And if the previous connection has some unfulfilled commands (most likely blocking commands such as brpop and blpop ), the client will resend them when reconnected. This behavior can be disabled by setting the autoResendUnfulfilledCommands option to false . By default, all pending commands will be flushed with an error every 20 retry attempts. That makes sure commands won't wait forever when the connection is down. You can change this behavior by setting maxRetriesPerRequest : JavaScript const redis = new Redis ({ maxRetriesPerRequest : 1 , }); Set maxRetriesPerRequest to null to disable this behavior, and every command will wait forever until the connection is alive again (which is the default behavior before ioredis v4).","title":"\u81ea\u52a8\u8fde\u63a5"},{"location":"docs/ioredis/connection/#reconnect-on-error","text":"Besides auto-reconnect when the connection is closed, ioredis supports reconnecting on certain Redis errors using the reconnectOnError option. Here's an example that will reconnect when receiving READONLY error: JavaScript const redis = new Redis ({ reconnectOnError ( err ) { const targetError = \"READONLY\" ; if ( err . message . includes ( targetError )) { // Only reconnect when the error contains \"READONLY\" return true ; // or `return 1;` } }, }); This feature is useful when using Amazon ElastiCache instances with Auto-failover disabled. On these instances, test your reconnectOnError handler by manually promoting the replica node to the primary role using the AWS console. The following writes fail with the error READONLY . Using reconnectOnError , we can force the connection to reconnect on this error in order to connect to the new master. Furthermore, if the reconnectOnError returns 2 , ioredis will resend the failed command after reconnecting. On ElastiCache instances with Auto-failover enabled, reconnectOnError does not execute. Instead of returning a Redis error, AWS closes all connections to the master endpoint until the new primary node is ready. ioredis reconnects via retryStrategy instead of reconnectOnError after about a minute. On ElastiCache instances with Auto-failover enabled, test failover events with the Failover primary option in the AWS console.","title":"Reconnect on error"},{"location":"docs/ioredis/connection/#connection-events","text":"The Redis instance will emit some events about the state of the connection to the Redis server. Event Description connect emits when a connection is established to the Redis server. ready If enableReadyCheck is true , client will emit ready when the server reports that it is ready to receive commands (e.g. finish loading data from disk). Otherwise, ready will be emitted immediately right after the connect event. error emits when an error occurs while connecting. However, ioredis emits all error events silently (only emits when there's at least one listener) so that your application won't crash if you're not listening to the error event. close emits when an established Redis server connection has closed. reconnecting emits after close when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting. end emits after close when no more reconnections will be made, or the connection is failed to establish. wait emits when lazyConnect is set and will wait for the first command to be called before connecting. You can also check out the Redis#status property to get the current connection status. Besides the above connection events, there are several other custom events: Event Description select emits when the database changed. The argument is the new db number.","title":"Connection Events"},{"location":"docs/ioredis/lua/","text":"ioredis supports all of the scripting commands such as EVAL , EVALSHA and SCRIPT . However, it's tedious to use in real world scenarios since developers have to take care of script caching and to detect when to use EVAL and when to use EVALSHA . ioredis exposes a defineCommand method to make scripting much easier to use: JavaScript const redis = new Redis (); // This will define a command echo: redis . defineCommand ( \"echo\" , { numberOfKeys : 2 , lua : \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" , }); // Now `echo` can be used just like any other ordinary command, // and ioredis will try to use `EVALSHA` internally when possible for better performance. redis . echo ( \"k1\" , \"k2\" , \"a1\" , \"a2\" , ( err , result ) => { // result === ['k1', 'k2', 'a1', 'a2'] }); // `echoBuffer` is also defined automatically to return buffers instead of strings: redis . echoBuffer ( \"k1\" , \"k2\" , \"a1\" , \"a2\" , ( err , result ) => { // result[0] equals to Buffer.from('k1'); }); // And of course it works with pipeline: redis . pipeline (). set ( \"foo\" , \"bar\" ). echo ( \"k1\" , \"k2\" , \"a1\" , \"a2\" ). exec (); If the number of keys can't be determined when defining a command, you can omit the numberOfKeys property and pass the number of keys as the first argument when you call the command: JavaScript redis . defineCommand ( \"echoDynamicKeyNumber\" , { lua : \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" , }); // Now you have to pass the number of keys as the first argument every time // you invoke the `echoDynamicKeyNumber` command: redis . echoDynamicKeyNumber ( 2 , \"k1\" , \"k2\" , \"a1\" , \"a2\" , ( err , result ) => { // result === ['k1', 'k2', 'a1', 'a2'] });","title":"Lua \u811a\u672c"},{"location":"docs/ioredis/pipelining/","text":"Pipelining If you want to send a batch of commands (e.g. > 5), you can use pipelining to queue the commands in memory and then send them to Redis all at once. This way the performance improves by 50%~300% (See benchmark section ). redis.pipeline() creates a Pipeline instance. You can call any Redis commands on it just like the Redis instance. The commands are queued in memory and flushed to Redis by calling the exec method: JavaScript const pipeline = redis . pipeline (); pipeline . set ( \"foo\" , \"bar\" ); pipeline . del ( \"cc\" ); pipeline . exec (( err , results ) => { // `err` is always null, and `results` is an array of responses // corresponding to the sequence of queued commands. // Each response follows the format `[err, result]`. }); // You can even chain the commands: redis . pipeline () . set ( \"foo\" , \"bar\" ) . del ( \"cc\" ) . exec (( err , results ) => {}); // `exec` also returns a Promise: const promise = redis . pipeline (). set ( \"foo\" , \"bar\" ). get ( \"foo\" ). exec (); promise . then (( result ) => { // result === [[null, 'OK'], [null, 'bar']] }); Each chained command can also have a callback, which will be invoked when the command gets a reply: JavaScript redis . pipeline () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" , ( err , result ) => { // result === 'bar' }) . exec (( err , result ) => { // result[1][1] === 'bar' }); In addition to adding commands to the pipeline queue individually, you can also pass an array of commands and arguments to the constructor: JavaScript redis . pipeline ([ [ \"set\" , \"foo\" , \"bar\" ], [ \"get\" , \"foo\" ], ]) . exec (() => { /* ... */ }); #length property shows how many commands in the pipeline: JavaScript const length = redis . pipeline (). set ( \"foo\" , \"bar\" ). get ( \"foo\" ). length ; // length === 2 Transaction Most of the time, the transaction commands multi & exec are used together with pipeline. Therefore, when multi is called, a Pipeline instance is created automatically by default, so you can use multi just like pipeline : JavaScript redis . multi () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" ) . exec (( err , results ) => { // results === [[null, 'OK'], [null, 'bar']] }); If there's a syntax error in the transaction's command chain (e.g. wrong number of arguments, wrong command name, etc), then none of the commands would be executed, and an error is returned: JavaScript redis . multi () . set ( \"foo\" ) . set ( \"foo\" , \"new value\" ) . exec (( err , results ) => { // err: // { [ReplyError: EXECABORT Transaction discarded because of previous errors.] // name: 'ReplyError', // message: 'EXECABORT Transaction discarded because of previous errors.', // command: { name: 'exec', args: [] }, // previousErrors: // [ { [ReplyError: ERR wrong number of arguments for 'set' command] // name: 'ReplyError', // message: 'ERR wrong number of arguments for \\'set\\' command', // command: [Object] } ] } }); In terms of the interface, multi differs from pipeline in that when specifying a callback to each chained command, the queueing state is passed to the callback instead of the result of the command: JavaScript redis . multi () . set ( \"foo\" , \"bar\" , ( err , result ) => { // result === 'QUEUED' }) . exec ( /* ... */ ); If you want to use transaction without pipeline, pass { pipeline: false } to multi , and every command will be sent to Redis immediately without waiting for an exec invocation: JavaScript redis . multi ({ pipeline : false }); redis . set ( \"foo\" , \"bar\" ); redis . get ( \"foo\" ); redis . exec (( err , result ) => { // result === [[null, 'OK'], [null, 'bar']] }); The constructor of multi also accepts a batch of commands: JavaScript redis . multi ([ [ \"set\" , \"foo\" , \"bar\" ], [ \"get\" , \"foo\" ], ]) . exec (() => { /* ... */ }); Inline transactions are supported by pipeline, which means you can group a subset of commands in the pipeline into a transaction: JavaScript redis . pipeline () . get ( \"foo\" ) . multi () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" ) . exec () . get ( \"foo\" ) . exec (); Autopipelining In standard mode, when you issue multiple commands, ioredis sends them to the server one by one. As described in Redis pipeline documentation, this is a suboptimal use of the network link, especially when such link is not very performant. The TCP and network overhead negatively affects performance. Commands are stuck in the send queue until the previous ones are correctly delivered to the server. This is a problem known as Head-Of-Line blocking (HOL). ioredis supports a feature called \u201cauto pipelining\u201d. It can be enabled by setting the option enableAutoPipelining to true . No other code change is necessary. In auto pipelining mode, all commands issued during an event loop are enqueued in a pipeline automatically managed by ioredis. At the end of the iteration, the pipeline is executed and thus all commands are sent to the server at the same time. This feature can dramatically improve throughput and avoids HOL blocking. In our benchmarks, the improvement was between 35% and 50%. While an automatic pipeline is executing, all new commands will be enqueued in a new pipeline which will be executed as soon as the previous finishes. When using Redis Cluster, one pipeline per node is created. Commands are assigned to pipelines according to which node serves the slot. A pipeline will thus contain commands using different slots but that ultimately are assigned to the same node. Note that the same slot limitation within a single command still holds, as it is a Redis limitation. Example of automatic pipeline enqueuing This sample code uses ioredis with automatic pipeline enabled. JavaScript const Redis = require ( \"./built\" ); const http = require ( \"http\" ); const db = new Redis ({ enableAutoPipelining : true }); const server = http . createServer (( request , response ) => { const key = new URL ( request . url , \"https://localhost:3000/\" ). searchParams . get ( \"key\" ); db . get ( key , ( err , value ) => { response . writeHead ( 200 , { \"Content-Type\" : \"text/plain\" }); response . end ( value ); }); }); server . listen ( 3000 ); When Node receives requests, it schedules them to be processed in one or more iterations of the events loop. All commands issued by requests processing during one iteration of the loop will be wrapped in a pipeline automatically created by ioredis. In the example above, the pipeline will have the following contents: Text Only GET key1 GET key2 GET key3 ... GET keyN When all events in the current loop have been processed, the pipeline is executed and thus all commands are sent to the server at the same time. While waiting for pipeline response from Redis, Node will still be able to process requests. All commands issued by request handler will be enqueued in a new automatically created pipeline. This pipeline will not be sent to the server yet. As soon as a previous automatic pipeline has received all responses from the server, the new pipeline is immediately sent without waiting for the events loop iteration to finish. This approach increases the utilization of the network link, reduces the TCP overhead and idle times and therefore improves throughput. Benchmarks Here's some of the results of our tests for a single node. Each iteration of the test runs 1000 random commands on the server. Samples Result Tolerance default 1000 174.62 op/sec \u00b1 0.45 % enableAutoPipelining=true 1500 233.33 op/sec \u00b1 0.88 % And here's the same test for a cluster of 3 masters and 3 replicas: Samples Result Tolerance default 1000 164.05 op/sec \u00b1 0.42 % enableAutoPipelining=true 3000 235.31 op/sec \u00b1 0.94 %","title":"Pipelining"},{"location":"docs/ioredis/pipelining/#pipelining","text":"If you want to send a batch of commands (e.g. > 5), you can use pipelining to queue the commands in memory and then send them to Redis all at once. This way the performance improves by 50%~300% (See benchmark section ). redis.pipeline() creates a Pipeline instance. You can call any Redis commands on it just like the Redis instance. The commands are queued in memory and flushed to Redis by calling the exec method: JavaScript const pipeline = redis . pipeline (); pipeline . set ( \"foo\" , \"bar\" ); pipeline . del ( \"cc\" ); pipeline . exec (( err , results ) => { // `err` is always null, and `results` is an array of responses // corresponding to the sequence of queued commands. // Each response follows the format `[err, result]`. }); // You can even chain the commands: redis . pipeline () . set ( \"foo\" , \"bar\" ) . del ( \"cc\" ) . exec (( err , results ) => {}); // `exec` also returns a Promise: const promise = redis . pipeline (). set ( \"foo\" , \"bar\" ). get ( \"foo\" ). exec (); promise . then (( result ) => { // result === [[null, 'OK'], [null, 'bar']] }); Each chained command can also have a callback, which will be invoked when the command gets a reply: JavaScript redis . pipeline () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" , ( err , result ) => { // result === 'bar' }) . exec (( err , result ) => { // result[1][1] === 'bar' }); In addition to adding commands to the pipeline queue individually, you can also pass an array of commands and arguments to the constructor: JavaScript redis . pipeline ([ [ \"set\" , \"foo\" , \"bar\" ], [ \"get\" , \"foo\" ], ]) . exec (() => { /* ... */ }); #length property shows how many commands in the pipeline: JavaScript const length = redis . pipeline (). set ( \"foo\" , \"bar\" ). get ( \"foo\" ). length ; // length === 2","title":"Pipelining"},{"location":"docs/ioredis/pipelining/#transaction","text":"Most of the time, the transaction commands multi & exec are used together with pipeline. Therefore, when multi is called, a Pipeline instance is created automatically by default, so you can use multi just like pipeline : JavaScript redis . multi () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" ) . exec (( err , results ) => { // results === [[null, 'OK'], [null, 'bar']] }); If there's a syntax error in the transaction's command chain (e.g. wrong number of arguments, wrong command name, etc), then none of the commands would be executed, and an error is returned: JavaScript redis . multi () . set ( \"foo\" ) . set ( \"foo\" , \"new value\" ) . exec (( err , results ) => { // err: // { [ReplyError: EXECABORT Transaction discarded because of previous errors.] // name: 'ReplyError', // message: 'EXECABORT Transaction discarded because of previous errors.', // command: { name: 'exec', args: [] }, // previousErrors: // [ { [ReplyError: ERR wrong number of arguments for 'set' command] // name: 'ReplyError', // message: 'ERR wrong number of arguments for \\'set\\' command', // command: [Object] } ] } }); In terms of the interface, multi differs from pipeline in that when specifying a callback to each chained command, the queueing state is passed to the callback instead of the result of the command: JavaScript redis . multi () . set ( \"foo\" , \"bar\" , ( err , result ) => { // result === 'QUEUED' }) . exec ( /* ... */ ); If you want to use transaction without pipeline, pass { pipeline: false } to multi , and every command will be sent to Redis immediately without waiting for an exec invocation: JavaScript redis . multi ({ pipeline : false }); redis . set ( \"foo\" , \"bar\" ); redis . get ( \"foo\" ); redis . exec (( err , result ) => { // result === [[null, 'OK'], [null, 'bar']] }); The constructor of multi also accepts a batch of commands: JavaScript redis . multi ([ [ \"set\" , \"foo\" , \"bar\" ], [ \"get\" , \"foo\" ], ]) . exec (() => { /* ... */ }); Inline transactions are supported by pipeline, which means you can group a subset of commands in the pipeline into a transaction: JavaScript redis . pipeline () . get ( \"foo\" ) . multi () . set ( \"foo\" , \"bar\" ) . get ( \"foo\" ) . exec () . get ( \"foo\" ) . exec ();","title":"Transaction"},{"location":"docs/ioredis/pipelining/#autopipelining","text":"In standard mode, when you issue multiple commands, ioredis sends them to the server one by one. As described in Redis pipeline documentation, this is a suboptimal use of the network link, especially when such link is not very performant. The TCP and network overhead negatively affects performance. Commands are stuck in the send queue until the previous ones are correctly delivered to the server. This is a problem known as Head-Of-Line blocking (HOL). ioredis supports a feature called \u201cauto pipelining\u201d. It can be enabled by setting the option enableAutoPipelining to true . No other code change is necessary. In auto pipelining mode, all commands issued during an event loop are enqueued in a pipeline automatically managed by ioredis. At the end of the iteration, the pipeline is executed and thus all commands are sent to the server at the same time. This feature can dramatically improve throughput and avoids HOL blocking. In our benchmarks, the improvement was between 35% and 50%. While an automatic pipeline is executing, all new commands will be enqueued in a new pipeline which will be executed as soon as the previous finishes. When using Redis Cluster, one pipeline per node is created. Commands are assigned to pipelines according to which node serves the slot. A pipeline will thus contain commands using different slots but that ultimately are assigned to the same node. Note that the same slot limitation within a single command still holds, as it is a Redis limitation.","title":"Autopipelining"},{"location":"docs/ioredis/pipelining/#example-of-automatic-pipeline-enqueuing","text":"This sample code uses ioredis with automatic pipeline enabled. JavaScript const Redis = require ( \"./built\" ); const http = require ( \"http\" ); const db = new Redis ({ enableAutoPipelining : true }); const server = http . createServer (( request , response ) => { const key = new URL ( request . url , \"https://localhost:3000/\" ). searchParams . get ( \"key\" ); db . get ( key , ( err , value ) => { response . writeHead ( 200 , { \"Content-Type\" : \"text/plain\" }); response . end ( value ); }); }); server . listen ( 3000 ); When Node receives requests, it schedules them to be processed in one or more iterations of the events loop. All commands issued by requests processing during one iteration of the loop will be wrapped in a pipeline automatically created by ioredis. In the example above, the pipeline will have the following contents: Text Only GET key1 GET key2 GET key3 ... GET keyN When all events in the current loop have been processed, the pipeline is executed and thus all commands are sent to the server at the same time. While waiting for pipeline response from Redis, Node will still be able to process requests. All commands issued by request handler will be enqueued in a new automatically created pipeline. This pipeline will not be sent to the server yet. As soon as a previous automatic pipeline has received all responses from the server, the new pipeline is immediately sent without waiting for the events loop iteration to finish. This approach increases the utilization of the network link, reduces the TCP overhead and idle times and therefore improves throughput.","title":"Example of automatic pipeline enqueuing"},{"location":"docs/ioredis/pipelining/#benchmarks","text":"Here's some of the results of our tests for a single node. Each iteration of the test runs 1000 random commands on the server. Samples Result Tolerance default 1000 174.62 op/sec \u00b1 0.45 % enableAutoPipelining=true 1500 233.33 op/sec \u00b1 0.88 % And here's the same test for a cluster of 3 masters and 3 replicas: Samples Result Tolerance default 1000 164.05 op/sec \u00b1 0.42 % enableAutoPipelining=true 3000 235.31 op/sec \u00b1 0.94 %","title":"Benchmarks"},{"location":"docs/ioredis/pub-sub/","text":"Redis provides several commands for developers to implement the Publish\u2013subscribe pattern . There are two roles in this pattern: publisher and subscriber. Publishers are not programmed to send their messages to specific subscribers. Rather, published messages are characterized into channels, without knowledge of what (if any) subscribers there may be. By leveraging Node.js's built-in events module, ioredis makes pub/sub very straightforward to use. Below is a simple example that consists of two files, one is publisher.js that publishes messages to a channel, the other is subscriber.js that listens for messages on specific channels. JavaScript // publisher.js const Redis = require ( \"ioredis\" ); const redis = new Redis (); setInterval (() => { const message = { foo : Math . random () }; // Publish to my-channel-1 or my-channel-2 randomly. const channel = `my-channel- ${ 1 + Math . round ( Math . random ()) } ` ; // Message can be either a string or a buffer redis . publish ( channel , JSON . stringify ( message )); console . log ( \"Published %s to %s\" , message , channel ); }, 1000 ); JavaScript // subscriber.js const Redis = require ( \"ioredis\" ); const redis = new Redis (); redis . subscribe ( \"my-channel-1\" , \"my-channel-2\" , ( err , count ) => { if ( err ) { // Just like other commands, subscribe() can fail for some reasons, // ex network issues. console . error ( \"Failed to subscribe: %s\" , err . message ); } else { // `count` represents the number of channels this client are currently subscribed to. console . log ( `Subscribed successfully! This client is currently subscribed to ${ count } channels.` ); } }); redis . on ( \"message\" , ( channel , message ) => { console . log ( `Received ${ message } from ${ channel } ` ); }); // There's also an event called 'messageBuffer', which is the same as 'message' except // it returns buffers instead of strings. // It's useful when the messages are binary data. redis . on ( \"messageBuffer\" , ( channel , message ) => { // Both `channel` and `message` are buffers. console . log ( channel , message ); }); It worth noticing that a connection (aka Redis instance) can't play both roles together. More specifically, when a client issues subscribe() or psubscribe() , it enters the \"subscriber\" mode. From that point, only commands that modify the subscription set are valid. Namely, they are: subscribe , psubscribe , unsubscribe , punsubscribe , ping , and quit . When the subscription set is empty (via unsubscribe / punsubscribe ), the connection is put back into the regular mode. If you want to do pub/sub in the same file/process, you should create a separate connection: JavaScript const Redis = require ( \"ioredis\" ); const sub = new Redis (); const pub = new Redis (); sub . subscribe ( /* ... */ ); // From now, `sub` enters the subscriber mode. sub . on ( \"message\" /* ... */ ); setInterval (() => { // `pub` can be used to publish messages, or send other regular commands (e.g. `hgetall`) // because it's not in the subscriber mode. pub . publish ( /* ... */ ); }, 1000 ); PSUBSCRIBE is also supported in a similar way when you want to subscribe all channels whose name matches a pattern: JavaScript redis . psubscribe ( \"pat?ern\" , ( err , count ) => {}); // Event names are \"pmessage\"/\"pmessageBuffer\" instead of \"message/messageBuffer\". redis . on ( \"pmessage\" , ( pattern , channel , message ) => {}); redis . on ( \"pmessageBuffer\" , ( pattern , channel , message ) => {});","title":"Pub/Sub"},{"location":"docs/ioredis/quick-start/","text":"\u5b89\u88c5 Bash $ npm install ioredis \u57fa\u672c\u7528\u6cd5 JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); // uses defaults unless given configuration object // ioredis supports all Redis commands: redis . set ( \"foo\" , \"bar\" ); // returns promise which resolves to string, \"OK\" // the format is: redis[SOME_REDIS_COMMAND_IN_LOWERCASE](ARGUMENTS_ARE_JOINED_INTO_COMMAND_STRING) // the js: ` redis.set(\"mykey\", \"Hello\") ` is equivalent to the cli: ` redis> SET mykey \"Hello\" ` // ioredis supports the node.js callback style redis . get ( \"foo\" , function ( err , result ) { if ( err ) { console . error ( err ); } else { console . log ( result ); // Promise resolves to \"bar\" } }); // Or ioredis returns a promise if the last argument isn't a function redis . get ( \"foo\" ). then ( function ( result ) { console . log ( result ); // Prints \"bar\" }); // Most responses are strings, or arrays of strings redis . zadd ( \"sortedSet\" , 1 , \"one\" , 2 , \"dos\" , 4 , \"quatro\" , 3 , \"three\" ); redis . zrange ( \"sortedSet\" , 0 , 2 , \"WITHSCORES\" ). then (( res ) => console . log ( res )); // Promise resolves to [\"one\", \"1\", \"dos\", \"2\", \"three\", \"3\"] as if the command was ` redis> ZRANGE sortedSet 0 2 WITHSCORES ` // All arguments are passed directly to the redis server: redis . set ( \"key\" , 100 , \"EX\" , 10 ); See the examples/ folder for more examples. Transparent Key Prefixing This feature allows you to specify a string that will automatically be prepended to all the keys in a command, which makes it easier to manage your key namespaces. Warning This feature won't apply to commands like KEYS and SCAN that take patterns rather than actual keys( #239 ), and this feature also won't apply to the replies of commands even if they are key names ( #325 ). JavaScript const fooRedis = new Redis ({ keyPrefix : \"foo:\" }); fooRedis . set ( \"bar\" , \"baz\" ); // Actually sends SET foo:bar baz fooRedis . defineCommand ( \"echo\" , { numberOfKeys : 2 , lua : \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" , }); // Works well with pipelining/transaction fooRedis . pipeline () // Sends SORT foo:list BY foo:weight_*->fieldname . sort ( \"list\" , \"BY\" , \"weight_*->fieldname\" ) // Supports custom commands // Sends EVALSHA xxx foo:k1 foo:k2 a1 a2 . echo ( \"k1\" , \"k2\" , \"a1\" , \"a2\" ) . exec (); Transforming Arguments & Replies Most Redis commands take one or more Strings as arguments, and replies are sent back as a single String or an Array of Strings. However, sometimes you may want something different. For instance, it would be more convenient if the HGETALL command returns a hash (e.g. { key: val1, key2: v2 } ) rather than an array of key values (e.g. [key1, val1, key2, val2] ). ioredis has a flexible system for transforming arguments and replies. There are two types of transformers, argument transformer and reply transformer: JavaScript const Redis = require ( \"ioredis\" ); // Here's the built-in argument transformer converting // hmset('key', { k1: 'v1', k2: 'v2' }) // or // hmset('key', new Map([['k1', 'v1'], ['k2', 'v2']])) // into // hmset('key', 'k1', 'v1', 'k2', 'v2') Redis . Command . setArgumentTransformer ( \"hmset\" , ( args ) => { if ( args . length === 2 ) { if ( typeof Map !== \"undefined\" && args [ 1 ] instanceof Map ) { // utils is a internal module of ioredis return [ args [ 0 ]]. concat ( utils . convertMapToArray ( args [ 1 ])); } if ( typeof args [ 1 ] === \"object\" && args [ 1 ] !== null ) { return [ args [ 0 ]]. concat ( utils . convertObjectToArray ( args [ 1 ])); } } return args ; }); // Here's the built-in reply transformer converting the HGETALL reply // ['k1', 'v1', 'k2', 'v2'] // into // { k1: 'v1', 'k2': 'v2' } Redis . Command . setReplyTransformer ( \"hgetall\" , ( result ) => { if ( Array . isArray ( result )) { const obj = {}; for ( let i = 0 ; i < result . length ; i += 2 ) { obj [ result [ i ]] = result [ i + 1 ]; } return obj ; } return result ; }); There are three built-in transformers, two argument transformers for hmset & mset and a reply transformer for hgetall . Transformers for hmset and hgetall were mentioned above, and the transformer for mset is similar to the one for hmset : JavaScript redis . mset ({ k1 : \"v1\" , k2 : \"v2\" }); redis . get ( \"k1\" , ( err , result ) => { // result === 'v1'; }); redis . mset ( new Map ([ [ \"k3\" , \"v3\" ], [ \"k4\" , \"v4\" ], ]) ); redis . get ( \"k3\" , ( err , result ) => { // result === 'v3'; }); Another useful example of a reply transformer is one that changes hgetall to return array of arrays instead of objects which avoids an unwanted conversation of hash keys to strings when dealing with binary hash keys: JavaScript Redis . Command . setReplyTransformer ( \"hgetall\" , ( result ) => { const arr = []; for ( let i = 0 ; i < result . length ; i += 2 ) { arr . push ([ result [ i ], result [ i + 1 ]]); } return arr ; }); redis . hset ( \"h1\" , Buffer . from ([ 0x01 ]), Buffer . from ([ 0x02 ])); redis . hset ( \"h1\" , Buffer . from ([ 0x03 ]), Buffer . from ([ 0x04 ])); redis . hgetallBuffer ( \"h1\" , ( err , result ) => { // result === [ [ <Buffer 01>, <Buffer 02> ], [ <Buffer 03>, <Buffer 04> ] ]; }); \u76d1\u63a7 Redis supports the MONITOR command, which lets you see all commands received by the Redis server across all client connections, including from other client libraries and other computers. The monitor method returns a monitor instance. After you send the MONITOR command, no other commands are valid on that connection. ioredis will emit a monitor event for every new monitor message that comes across. The callback for the monitor event takes a timestamp from the Redis server and an array of command arguments. Here is a simple example: JavaScript redis . monitor (( err , monitor ) => { monitor . on ( \"monitor\" , ( time , args , source , database ) => {}); }); Here is another example illustrating an async function and monitor.disconnect() : JavaScript async () => { const monitor = await redis . monitor (); monitor . on ( \"monitor\" , console . log ); // Any other tasks monitor . disconnect (); }; Streamify Scanning Redis 2.8 added the SCAN command to incrementally iterate through the keys in the database. It's different from KEYS in that SCAN only returns a small number of elements each call, so it can be used in production without the downside of blocking the server for a long time. However, it requires recording the cursor on the client side each time the SCAN command is called in order to iterate through all the keys correctly. Since it's a relatively common use case, ioredis provides a streaming interface for the SCAN command to make things much easier. A readable stream can be created by calling scanStream : JavaScript const redis = new Redis (); // Create a readable stream (object mode) const stream = redis . scanStream (); stream . on ( \"data\" , ( resultKeys ) => { // `resultKeys` is an array of strings representing key names. // Note that resultKeys may contain 0 keys, and that it will sometimes // contain duplicates due to SCAN's implementation in Redis. for ( let i = 0 ; i < resultKeys . length ; i ++ ) { console . log ( resultKeys [ i ]); } }); stream . on ( \"end\" , () => { console . log ( \"all keys have been visited\" ); }); scanStream accepts an option, with which you can specify the MATCH pattern, the TYPE filter, and the COUNT argument: JavaScript const stream = redis . scanStream ({ // only returns keys following the pattern of `user:*` match : \"user:*\" , // only return objects that match a given type, // (requires Redis >= 6.0) type : \"zset\" , // returns approximately 100 elements per call count : 100 , }); Just like other commands, scanStream has a binary version scanBufferStream , which returns an array of buffers. It's useful when the key names are not utf8 strings. There are also hscanStream , zscanStream and sscanStream to iterate through elements in a hash, zset and set. The interface of each is similar to scanStream except the first argument is the key name: JavaScript const stream = redis . hscanStream ( \"myhash\" , { match : \"age:??\" , }); You can learn more from the Redis documentation . Useful Tips It's pretty common that doing an async task in the data handler. We'd like the scanning process to be paused until the async task to be finished. Stream#pause() and Stream#resume() do the trick. For example if we want to migrate data in Redis to MySQL: JavaScript const stream = redis . scanStream (); stream . on ( \"data\" , ( resultKeys ) => { // Pause the stream from scanning more keys until we've migrated the current keys. stream . pause (); Promise . all ( resultKeys . map ( migrateKeyToMySQL )). then (() => { // Resume the stream here. stream . resume (); }); }); stream . on ( \"end\" , () => { console . log ( \"done migration\" ); }); \u79bb\u7ebf\u961f\u5217 When a command can't be processed by Redis (being sent before the ready event), by default, it's added to the offline queue and will be executed when it can be processed. You can disable this feature by setting the enableOfflineQueue option to false : JavaScript const redis = new Redis ({ enableOfflineQueue : false });","title":"\u5feb\u901f\u5165\u95e8"},{"location":"docs/ioredis/quick-start/#_1","text":"Bash $ npm install ioredis","title":"\u5b89\u88c5"},{"location":"docs/ioredis/quick-start/#_2","text":"JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); // uses defaults unless given configuration object // ioredis supports all Redis commands: redis . set ( \"foo\" , \"bar\" ); // returns promise which resolves to string, \"OK\" // the format is: redis[SOME_REDIS_COMMAND_IN_LOWERCASE](ARGUMENTS_ARE_JOINED_INTO_COMMAND_STRING) // the js: ` redis.set(\"mykey\", \"Hello\") ` is equivalent to the cli: ` redis> SET mykey \"Hello\" ` // ioredis supports the node.js callback style redis . get ( \"foo\" , function ( err , result ) { if ( err ) { console . error ( err ); } else { console . log ( result ); // Promise resolves to \"bar\" } }); // Or ioredis returns a promise if the last argument isn't a function redis . get ( \"foo\" ). then ( function ( result ) { console . log ( result ); // Prints \"bar\" }); // Most responses are strings, or arrays of strings redis . zadd ( \"sortedSet\" , 1 , \"one\" , 2 , \"dos\" , 4 , \"quatro\" , 3 , \"three\" ); redis . zrange ( \"sortedSet\" , 0 , 2 , \"WITHSCORES\" ). then (( res ) => console . log ( res )); // Promise resolves to [\"one\", \"1\", \"dos\", \"2\", \"three\", \"3\"] as if the command was ` redis> ZRANGE sortedSet 0 2 WITHSCORES ` // All arguments are passed directly to the redis server: redis . set ( \"key\" , 100 , \"EX\" , 10 ); See the examples/ folder for more examples.","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"docs/ioredis/quick-start/#transparent-key-prefixing","text":"This feature allows you to specify a string that will automatically be prepended to all the keys in a command, which makes it easier to manage your key namespaces. Warning This feature won't apply to commands like KEYS and SCAN that take patterns rather than actual keys( #239 ), and this feature also won't apply to the replies of commands even if they are key names ( #325 ). JavaScript const fooRedis = new Redis ({ keyPrefix : \"foo:\" }); fooRedis . set ( \"bar\" , \"baz\" ); // Actually sends SET foo:bar baz fooRedis . defineCommand ( \"echo\" , { numberOfKeys : 2 , lua : \"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\" , }); // Works well with pipelining/transaction fooRedis . pipeline () // Sends SORT foo:list BY foo:weight_*->fieldname . sort ( \"list\" , \"BY\" , \"weight_*->fieldname\" ) // Supports custom commands // Sends EVALSHA xxx foo:k1 foo:k2 a1 a2 . echo ( \"k1\" , \"k2\" , \"a1\" , \"a2\" ) . exec ();","title":"Transparent Key Prefixing"},{"location":"docs/ioredis/quick-start/#transforming-arguments-replies","text":"Most Redis commands take one or more Strings as arguments, and replies are sent back as a single String or an Array of Strings. However, sometimes you may want something different. For instance, it would be more convenient if the HGETALL command returns a hash (e.g. { key: val1, key2: v2 } ) rather than an array of key values (e.g. [key1, val1, key2, val2] ). ioredis has a flexible system for transforming arguments and replies. There are two types of transformers, argument transformer and reply transformer: JavaScript const Redis = require ( \"ioredis\" ); // Here's the built-in argument transformer converting // hmset('key', { k1: 'v1', k2: 'v2' }) // or // hmset('key', new Map([['k1', 'v1'], ['k2', 'v2']])) // into // hmset('key', 'k1', 'v1', 'k2', 'v2') Redis . Command . setArgumentTransformer ( \"hmset\" , ( args ) => { if ( args . length === 2 ) { if ( typeof Map !== \"undefined\" && args [ 1 ] instanceof Map ) { // utils is a internal module of ioredis return [ args [ 0 ]]. concat ( utils . convertMapToArray ( args [ 1 ])); } if ( typeof args [ 1 ] === \"object\" && args [ 1 ] !== null ) { return [ args [ 0 ]]. concat ( utils . convertObjectToArray ( args [ 1 ])); } } return args ; }); // Here's the built-in reply transformer converting the HGETALL reply // ['k1', 'v1', 'k2', 'v2'] // into // { k1: 'v1', 'k2': 'v2' } Redis . Command . setReplyTransformer ( \"hgetall\" , ( result ) => { if ( Array . isArray ( result )) { const obj = {}; for ( let i = 0 ; i < result . length ; i += 2 ) { obj [ result [ i ]] = result [ i + 1 ]; } return obj ; } return result ; }); There are three built-in transformers, two argument transformers for hmset & mset and a reply transformer for hgetall . Transformers for hmset and hgetall were mentioned above, and the transformer for mset is similar to the one for hmset : JavaScript redis . mset ({ k1 : \"v1\" , k2 : \"v2\" }); redis . get ( \"k1\" , ( err , result ) => { // result === 'v1'; }); redis . mset ( new Map ([ [ \"k3\" , \"v3\" ], [ \"k4\" , \"v4\" ], ]) ); redis . get ( \"k3\" , ( err , result ) => { // result === 'v3'; }); Another useful example of a reply transformer is one that changes hgetall to return array of arrays instead of objects which avoids an unwanted conversation of hash keys to strings when dealing with binary hash keys: JavaScript Redis . Command . setReplyTransformer ( \"hgetall\" , ( result ) => { const arr = []; for ( let i = 0 ; i < result . length ; i += 2 ) { arr . push ([ result [ i ], result [ i + 1 ]]); } return arr ; }); redis . hset ( \"h1\" , Buffer . from ([ 0x01 ]), Buffer . from ([ 0x02 ])); redis . hset ( \"h1\" , Buffer . from ([ 0x03 ]), Buffer . from ([ 0x04 ])); redis . hgetallBuffer ( \"h1\" , ( err , result ) => { // result === [ [ <Buffer 01>, <Buffer 02> ], [ <Buffer 03>, <Buffer 04> ] ]; });","title":"Transforming Arguments &amp; Replies"},{"location":"docs/ioredis/quick-start/#_3","text":"Redis supports the MONITOR command, which lets you see all commands received by the Redis server across all client connections, including from other client libraries and other computers. The monitor method returns a monitor instance. After you send the MONITOR command, no other commands are valid on that connection. ioredis will emit a monitor event for every new monitor message that comes across. The callback for the monitor event takes a timestamp from the Redis server and an array of command arguments. Here is a simple example: JavaScript redis . monitor (( err , monitor ) => { monitor . on ( \"monitor\" , ( time , args , source , database ) => {}); }); Here is another example illustrating an async function and monitor.disconnect() : JavaScript async () => { const monitor = await redis . monitor (); monitor . on ( \"monitor\" , console . log ); // Any other tasks monitor . disconnect (); };","title":"\u76d1\u63a7"},{"location":"docs/ioredis/quick-start/#streamify-scanning","text":"Redis 2.8 added the SCAN command to incrementally iterate through the keys in the database. It's different from KEYS in that SCAN only returns a small number of elements each call, so it can be used in production without the downside of blocking the server for a long time. However, it requires recording the cursor on the client side each time the SCAN command is called in order to iterate through all the keys correctly. Since it's a relatively common use case, ioredis provides a streaming interface for the SCAN command to make things much easier. A readable stream can be created by calling scanStream : JavaScript const redis = new Redis (); // Create a readable stream (object mode) const stream = redis . scanStream (); stream . on ( \"data\" , ( resultKeys ) => { // `resultKeys` is an array of strings representing key names. // Note that resultKeys may contain 0 keys, and that it will sometimes // contain duplicates due to SCAN's implementation in Redis. for ( let i = 0 ; i < resultKeys . length ; i ++ ) { console . log ( resultKeys [ i ]); } }); stream . on ( \"end\" , () => { console . log ( \"all keys have been visited\" ); }); scanStream accepts an option, with which you can specify the MATCH pattern, the TYPE filter, and the COUNT argument: JavaScript const stream = redis . scanStream ({ // only returns keys following the pattern of `user:*` match : \"user:*\" , // only return objects that match a given type, // (requires Redis >= 6.0) type : \"zset\" , // returns approximately 100 elements per call count : 100 , }); Just like other commands, scanStream has a binary version scanBufferStream , which returns an array of buffers. It's useful when the key names are not utf8 strings. There are also hscanStream , zscanStream and sscanStream to iterate through elements in a hash, zset and set. The interface of each is similar to scanStream except the first argument is the key name: JavaScript const stream = redis . hscanStream ( \"myhash\" , { match : \"age:??\" , }); You can learn more from the Redis documentation . Useful Tips It's pretty common that doing an async task in the data handler. We'd like the scanning process to be paused until the async task to be finished. Stream#pause() and Stream#resume() do the trick. For example if we want to migrate data in Redis to MySQL: JavaScript const stream = redis . scanStream (); stream . on ( \"data\" , ( resultKeys ) => { // Pause the stream from scanning more keys until we've migrated the current keys. stream . pause (); Promise . all ( resultKeys . map ( migrateKeyToMySQL )). then (() => { // Resume the stream here. stream . resume (); }); }); stream . on ( \"end\" , () => { console . log ( \"done migration\" ); });","title":"Streamify Scanning"},{"location":"docs/ioredis/quick-start/#_4","text":"When a command can't be processed by Redis (being sent before the ready event), by default, it's added to the offline queue and will be executed when it can be processed. You can disable this feature by setting the enableOfflineQueue option to false : JavaScript const redis = new Redis ({ enableOfflineQueue : false });","title":"\u79bb\u7ebf\u961f\u5217"},{"location":"docs/ioredis/sentinel/","text":"ioredis supports Sentinel out of the box. It works transparently as all features that work when you connect to a single node also work when you connect to a sentinel group. Make sure to run Redis >= 2.8.12 if you want to use this feature. Sentinels have a default port of 26379. To connect using Sentinel, use: JavaScript const redis = new Redis ({ sentinels : [ { host : \"localhost\" , port : 26379 }, { host : \"localhost\" , port : 26380 }, ], name : \"mymaster\" , }); redis . set ( \"foo\" , \"bar\" ); The arguments passed to the constructor are different from the ones you use to connect to a single node, where: name identifies a group of Redis instances composed of a master and one or more slaves ( mymaster in the example); sentinelPassword (optional) password for Sentinel instances. sentinels are a list of sentinels to connect to. The list does not need to enumerate all your sentinel instances, but a few so that if one is down the client will try the next one. role (optional) with a value of slave will return a random slave from the Sentinel group. preferredSlaves (optional) can be used to prefer a particular slave or set of slaves based on priority. It accepts a function or array. enableTLSForSentinelMode (optional) set to true if connecting to sentinel instances that are encrypted ioredis guarantees that the node you connected to is always a master even after a failover. When a failover happens, instead of trying to reconnect to the failed node (which will be demoted to slave when it's available again), ioredis will ask sentinels for the new master node and connect to it. All commands sent during the failover are queued and will be executed when the new connection is established so that none of the commands will be lost. It's possible to connect to a slave instead of a master by specifying the option role with the value of slave and ioredis will try to connect to a random slave of the specified master, with the guarantee that the connected node is always a slave. If the current node is promoted to master due to a failover, ioredis will disconnect from it and ask the sentinels for another slave node to connect to. If you specify the option preferredSlaves along with role: 'slave' ioredis will attempt to use this value when selecting the slave from the pool of available slaves. The value of preferredSlaves should either be a function that accepts an array of available slaves and returns a single result, or an array of slave values priorities by the lowest prio value first with a default value of 1 . JavaScript // available slaves format const availableSlaves = [{ ip : \"127.0.0.1\" , port : \"31231\" , flags : \"slave\" }]; // preferredSlaves array format let preferredSlaves = [ { ip : \"127.0.0.1\" , port : \"31231\" , prio : 1 }, { ip : \"127.0.0.1\" , port : \"31232\" , prio : 2 }, ]; // preferredSlaves function format preferredSlaves = function ( availableSlaves ) { for ( let i = 0 ; i < availableSlaves . length ; i ++ ) { const slave = availableSlaves [ i ]; if ( slave . ip === \"127.0.0.1\" ) { if ( slave . port === \"31234\" ) { return slave ; } } } // if no preferred slaves are available a random one is used return false ; }; const redis = new Redis ({ sentinels : [ { host : \"127.0.0.1\" , port : 26379 }, { host : \"127.0.0.1\" , port : 26380 }, ], name : \"mymaster\" , role : \"slave\" , preferredSlaves : preferredSlaves , }); Besides the retryStrategy option, there's also a sentinelRetryStrategy in Sentinel mode which will be invoked when all the sentinel nodes are unreachable during connecting. If sentinelRetryStrategy returns a valid delay time, ioredis will try to reconnect from scratch. The default value of sentinelRetryStrategy is: JavaScript function ( times ) { const delay = Math . min ( times * 10 , 1000 ); return delay ; }","title":"Sentinel"},{"location":"docs/ioredis/streams/","text":"\u6d41 Redis v5 introduces a new data type called streams. It doubles as a communication channel for building streaming architectures and as a log-like data structure for persisting data. With ioredis, the usage can be pretty straightforward. Say we have a producer publishes messages to a stream with redis.xadd(\"mystream\", \"*\", \"randomValue\", Math.random()) (You may find the official documentation of Streams as a starter to understand the parameters used), to consume the messages, we'll have a consumer with the following code: JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); const processMessage = ( message ) => { console . log ( \"Id: %s. Data: %O\" , message [ 0 ], message [ 1 ]); }; async function listenForMessage ( lastId = \"$\" ) { // `results` is an array, each element of which corresponds to a key. // Because we only listen to one key (mystream) here, `results` only contains // a single element. See more: https://redis.io/commands/xread#return-value const results = await redis . xread ( \"block\" , 0 , \"STREAMS\" , \"mystream\" , lastId ); const [ key , messages ] = results [ 0 ]; // `key` equals to \"mystream\" messages . forEach ( processMessage ); // Pass the last id of the results to the next round. await listenForMessage ( messages [ messages . length - 1 ][ 0 ]); } listenForMessage (); \u64cd\u4f5c\u4e8c\u8fdb\u5236\u6587\u4ef6 Arguments can be buffers: JavaScript redis . set ( \"foo\" , Buffer . from ( \"bar\" )); And every command has a method that returns a Buffer (by adding a suffix of \"Buffer\" to the command name). To get a buffer instead of a utf8 string: JavaScript redis . getBuffer ( \"foo\" , ( err , result ) => { // result is a buffer. });","title":"\u6d41\u548c\u4e8c\u8fdb\u5236"},{"location":"docs/ioredis/streams/#_1","text":"Redis v5 introduces a new data type called streams. It doubles as a communication channel for building streaming architectures and as a log-like data structure for persisting data. With ioredis, the usage can be pretty straightforward. Say we have a producer publishes messages to a stream with redis.xadd(\"mystream\", \"*\", \"randomValue\", Math.random()) (You may find the official documentation of Streams as a starter to understand the parameters used), to consume the messages, we'll have a consumer with the following code: JavaScript const Redis = require ( \"ioredis\" ); const redis = new Redis (); const processMessage = ( message ) => { console . log ( \"Id: %s. Data: %O\" , message [ 0 ], message [ 1 ]); }; async function listenForMessage ( lastId = \"$\" ) { // `results` is an array, each element of which corresponds to a key. // Because we only listen to one key (mystream) here, `results` only contains // a single element. See more: https://redis.io/commands/xread#return-value const results = await redis . xread ( \"block\" , 0 , \"STREAMS\" , \"mystream\" , lastId ); const [ key , messages ] = results [ 0 ]; // `key` equals to \"mystream\" messages . forEach ( processMessage ); // Pass the last id of the results to the next round. await listenForMessage ( messages [ messages . length - 1 ][ 0 ]); } listenForMessage ();","title":"\u6d41"},{"location":"docs/ioredis/streams/#_2","text":"Arguments can be buffers: JavaScript redis . set ( \"foo\" , Buffer . from ( \"bar\" )); And every command has a method that returns a Buffer (by adding a suffix of \"Buffer\" to the command name). To get a buffer instead of a utf8 string: JavaScript redis . getBuffer ( \"foo\" , ( err , result ) => { // result is a buffer. });","title":"\u64cd\u4f5c\u4e8c\u8fdb\u5236\u6587\u4ef6"},{"location":"docs/lua/_index/","text":"","title":"lua"},{"location":"docs/lua/about/","text":"\u4ec0\u4e48\u662f Lua? Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description. Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping. Lua \u6765\u81ea\u54ea\u91cc? Lua is designed, implemented, and maintained by a team at PUC-Rio, the Pontifical Catholic University of Rio de Janeiro in Brazil. Lua was born and raised in Tecgraf, formerly the Computer Graphics Technology Group of PUC-Rio. Lua is now housed at LabLua, a laboratory of the Department of Computer Science of PUC-Rio. What's in a name? \"Lua\" (pronounced LOO-ah) means \"Moon\" in Portuguese. As such, it is neither an acronym nor an abbreviation, but a noun. More specifically, \"Lua\" is a name, the name of the Earth's moon and the name of the language. Like most names, it should be written in lower case with an initial capital, that is, \"Lua\". Please do not write it as \"LUA\", which is both ugly and confusing, because then it becomes an acronym with different meanings for different people. So, please, write \"Lua\" right! \u52a0\u5165\u793e\u533a There are several meeting places for the Lua community where you can go to learn and help others and contribute in other ways. One of the focal points is the mailing list, which is very active and friendly. You can meet part of the Lua community in person by attending a Lua Workshop. \u652f\u6301 Lua You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle. Lua.org is an Amazon Associate and we get commissions for qualifying purchases made through links in this site. \u4e3a\u4ec0\u4e48\u9009\u62e9 Lua? Lua \u662f\u4e00\u79cd\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u3001\u5065\u58ee\u7684\u8bed\u8a00 Lua has been used in many industrial applications (e.g., Adobe's Photoshop Lightroom), with an emphasis on embedded systems (e.g., the Ginga middleware for digital TV in Brazil) and games (e.g., World of Warcraft and Angry Birds). Lua is currently the leading scripting language in games. Lua has a solid reference manual and there are several books about it. Several versions of Lua have been released and used in real applications since its creation in 1993. Lua featured in HOPL III, the Third ACM SIGPLAN History of Programming Languages Conference, in 2007. Lua won the Front Line Award 2011 from the Game Developers Magazine. Lua \u5feb\u901f\u7684 Lua has a deserved reputation for performance. To claim to be \"as fast as Lua\" is an aspiration of other scripting languages. Several benchmarks show Lua as the fastest language in the realm of interpreted scripting languages. Lua is fast not only in fine-tuned benchmark programs, but in real life too. Substantial fractions of large applications have been written in Lua. If you need even more speed, try LuaJIT, an independent implementation of Lua using a just-in-time compiler. Lua \u662f\u53ef\u79fb\u690d\u7684 Lua is distributed in a small package and builds out-of-the-box in all platforms that have a standard C compiler. Lua runs on all flavors of Unix and Windows, on mobile devices (running Android, iOS, BREW, Symbian, Windows Phone), on embedded microprocessors (such as ARM and Rabbit, for applications like Lego MindStorms), on IBM mainframes, etc. For specific reasons why Lua is a good choice also for constrained devices, read this summary by Mike Pall. See also a poster created by Timm M\u00fcller. Lua \u662f\u53ef\u5d4c\u5165\u7684 Lua is a fast language engine with small footprint that you can embed easily into your application. Lua has a simple and well documented API that allows strong integration with code written in other languages. It is easy to extend Lua with libraries written in other languages. It is also easy to extend programs written in other languages with Lua. Lua has been used to extend programs written not only in C and C++, but also in Java, C#, Smalltalk, Fortran, Ada, Erlang, and even in other scripting languages, such as Perl and Ruby. Lua \u529f\u80fd\u5f3a\u5927(\u4f46\u7b80\u5355) A fundamental concept in the design of Lua is to provide meta-mechanisms for implementing features, instead of providing a host of features directly in the language. For example, although Lua is not a pure object-oriented language, it does provide meta-mechanisms for implementing classes and inheritance. Lua's meta-mechanisms bring an economy of concepts and keep the language small, while allowing the semantics to be extended in unconventional ways. Lua \u662f\u5c0f\u7684 Adding Lua to an application does not bloat it. The tarball for Lua 5.4.3, which contains source code and documentation, takes 350K compressed and 1.3M uncompressed. The source contains around 29000 lines of C. Under 64-bit Linux, the Lua interpreter built with all standard Lua libraries takes 278K and the Lua library takes 466K. Lua \u5f00\u6e90\u7684 Lua is free open-source software, distributed under a very liberal license (the well-known MIT license). It may be used for any purpose, including commercial purposes, at absolutely no cost. Just download it and use it.","title":"\u5173\u4e8e"},{"location":"docs/lua/about/#lua","text":"Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description. Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.","title":"\u4ec0\u4e48\u662f Lua?"},{"location":"docs/lua/about/#lua_1","text":"Lua is designed, implemented, and maintained by a team at PUC-Rio, the Pontifical Catholic University of Rio de Janeiro in Brazil. Lua was born and raised in Tecgraf, formerly the Computer Graphics Technology Group of PUC-Rio. Lua is now housed at LabLua, a laboratory of the Department of Computer Science of PUC-Rio.","title":"Lua \u6765\u81ea\u54ea\u91cc?"},{"location":"docs/lua/about/#whats-in-a-name","text":"\"Lua\" (pronounced LOO-ah) means \"Moon\" in Portuguese. As such, it is neither an acronym nor an abbreviation, but a noun. More specifically, \"Lua\" is a name, the name of the Earth's moon and the name of the language. Like most names, it should be written in lower case with an initial capital, that is, \"Lua\". Please do not write it as \"LUA\", which is both ugly and confusing, because then it becomes an acronym with different meanings for different people. So, please, write \"Lua\" right!","title":"What's in a name?"},{"location":"docs/lua/about/#_1","text":"There are several meeting places for the Lua community where you can go to learn and help others and contribute in other ways. One of the focal points is the mailing list, which is very active and friendly. You can meet part of the Lua community in person by attending a Lua Workshop.","title":"\u52a0\u5165\u793e\u533a"},{"location":"docs/lua/about/#lua_2","text":"You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle. Lua.org is an Amazon Associate and we get commissions for qualifying purchases made through links in this site.","title":"\u652f\u6301 Lua"},{"location":"docs/lua/about/#lua_3","text":"","title":"\u4e3a\u4ec0\u4e48\u9009\u62e9 Lua?"},{"location":"docs/lua/about/#lua_4","text":"Lua has been used in many industrial applications (e.g., Adobe's Photoshop Lightroom), with an emphasis on embedded systems (e.g., the Ginga middleware for digital TV in Brazil) and games (e.g., World of Warcraft and Angry Birds). Lua is currently the leading scripting language in games. Lua has a solid reference manual and there are several books about it. Several versions of Lua have been released and used in real applications since its creation in 1993. Lua featured in HOPL III, the Third ACM SIGPLAN History of Programming Languages Conference, in 2007. Lua won the Front Line Award 2011 from the Game Developers Magazine.","title":"Lua \u662f\u4e00\u79cd\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u3001\u5065\u58ee\u7684\u8bed\u8a00"},{"location":"docs/lua/about/#lua_5","text":"Lua has a deserved reputation for performance. To claim to be \"as fast as Lua\" is an aspiration of other scripting languages. Several benchmarks show Lua as the fastest language in the realm of interpreted scripting languages. Lua is fast not only in fine-tuned benchmark programs, but in real life too. Substantial fractions of large applications have been written in Lua. If you need even more speed, try LuaJIT, an independent implementation of Lua using a just-in-time compiler.","title":"Lua \u5feb\u901f\u7684"},{"location":"docs/lua/about/#lua_6","text":"Lua is distributed in a small package and builds out-of-the-box in all platforms that have a standard C compiler. Lua runs on all flavors of Unix and Windows, on mobile devices (running Android, iOS, BREW, Symbian, Windows Phone), on embedded microprocessors (such as ARM and Rabbit, for applications like Lego MindStorms), on IBM mainframes, etc. For specific reasons why Lua is a good choice also for constrained devices, read this summary by Mike Pall. See also a poster created by Timm M\u00fcller.","title":"Lua \u662f\u53ef\u79fb\u690d\u7684"},{"location":"docs/lua/about/#lua_7","text":"Lua is a fast language engine with small footprint that you can embed easily into your application. Lua has a simple and well documented API that allows strong integration with code written in other languages. It is easy to extend Lua with libraries written in other languages. It is also easy to extend programs written in other languages with Lua. Lua has been used to extend programs written not only in C and C++, but also in Java, C#, Smalltalk, Fortran, Ada, Erlang, and even in other scripting languages, such as Perl and Ruby.","title":"Lua \u662f\u53ef\u5d4c\u5165\u7684"},{"location":"docs/lua/about/#lua_8","text":"A fundamental concept in the design of Lua is to provide meta-mechanisms for implementing features, instead of providing a host of features directly in the language. For example, although Lua is not a pure object-oriented language, it does provide meta-mechanisms for implementing classes and inheritance. Lua's meta-mechanisms bring an economy of concepts and keep the language small, while allowing the semantics to be extended in unconventional ways.","title":"Lua \u529f\u80fd\u5f3a\u5927(\u4f46\u7b80\u5355)"},{"location":"docs/lua/about/#lua_9","text":"Adding Lua to an application does not bloat it. The tarball for Lua 5.4.3, which contains source code and documentation, takes 350K compressed and 1.3M uncompressed. The source contains around 29000 lines of C. Under 64-bit Linux, the Lua interpreter built with all standard Lua libraries takes 278K and the Lua library takes 466K.","title":"Lua \u662f\u5c0f\u7684"},{"location":"docs/lua/about/#lua_10","text":"Lua is free open-source software, distributed under a very liberal license (the well-known MIT license). It may be used for any purpose, including commercial purposes, at absolutely no cost. Just download it and use it.","title":"Lua \u5f00\u6e90\u7684"},{"location":"docs/lua/community/","text":"Meeting places There are several places you can go to meet other people that use Lua. A good starting point is lua-users.org, a collaborative meeting place built for and by Lua users. One of the focal points of the Lua community is our mailing list, which is very active and friendly; it has over 2500 subscribers from all over the world, including several Lua experts and the Lua team. Other meeting places are stackoverflow, the chat room, a Telegram group, a Discord room, and a forum. For discussions in Portuguese, join the Lua BR mailing list and visit pt.stackoverflow. If you want to meet in person, join a user group, find a user group near you, attend a Lua Workshop or a LuaConf. Contributing You can contribute to the community in several ways: answer questions about Lua (in the mailing list, in the chat room, in stackoverflow, and elsewhere), collaborate in the lua-users wiki, answer our survey, add a Lua logo to your web page, tell us about third-party sites related to Lua and papers and theses about Lua, and write tools and libraries for Lua and add them to LuaRocks. Supporting Lua You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can help to spread the word about Lua by buying Lua products at Zazzle. Workshop The main goal of the Lua workshop is to allow the Lua community to get together and meet in person and talk about the Lua language, its uses, and its implementation. Another goal is to help spread the word about Lua to industry and academia, taking advantage of the location of the workshop when possible. If you'd like to organize a Lua workshop, please post a proposal in the mailing list. Past workshops 2018 \u2013 Kaunas, Lithuania 2017 \u2013 San Francisco, California 2016 \u2013 San Francisco, California 2015 \u2013 Stockholm, Sweden 2014 \u2013 Moscow, Russia 2013 \u2013 Toulouse, France 2012 \u2013 Reston, Virginia 2011 \u2013 Frick, Switzerland 2009 \u2013 Rio de Janeiro, Brazil 2008 \u2013 Washington, D.C. 2006 \u2013 Venlo, The Netherlands 2005 \u2013 San Jose, California","title":"\u793e\u533a"},{"location":"docs/lua/community/#meeting-places","text":"There are several places you can go to meet other people that use Lua. A good starting point is lua-users.org, a collaborative meeting place built for and by Lua users. One of the focal points of the Lua community is our mailing list, which is very active and friendly; it has over 2500 subscribers from all over the world, including several Lua experts and the Lua team. Other meeting places are stackoverflow, the chat room, a Telegram group, a Discord room, and a forum. For discussions in Portuguese, join the Lua BR mailing list and visit pt.stackoverflow. If you want to meet in person, join a user group, find a user group near you, attend a Lua Workshop or a LuaConf.","title":"Meeting places"},{"location":"docs/lua/community/#contributing","text":"You can contribute to the community in several ways: answer questions about Lua (in the mailing list, in the chat room, in stackoverflow, and elsewhere), collaborate in the lua-users wiki, answer our survey, add a Lua logo to your web page, tell us about third-party sites related to Lua and papers and theses about Lua, and write tools and libraries for Lua and add them to LuaRocks.","title":"Contributing"},{"location":"docs/lua/community/#supporting-lua","text":"You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can help to spread the word about Lua by buying Lua products at Zazzle.","title":"Supporting Lua"},{"location":"docs/lua/community/#workshop","text":"The main goal of the Lua workshop is to allow the Lua community to get together and meet in person and talk about the Lua language, its uses, and its implementation. Another goal is to help spread the word about Lua to industry and academia, taking advantage of the location of the workshop when possible. If you'd like to organize a Lua workshop, please post a proposal in the mailing list.","title":"Workshop"},{"location":"docs/lua/community/#past-workshops","text":"2018 \u2013 Kaunas, Lithuania 2017 \u2013 San Francisco, California 2016 \u2013 San Francisco, California 2015 \u2013 Stockholm, Sweden 2014 \u2013 Moscow, Russia 2013 \u2013 Toulouse, France 2012 \u2013 Reston, Virginia 2011 \u2013 Frick, Switzerland 2009 \u2013 Rio de Janeiro, Brazil 2008 \u2013 Washington, D.C. 2006 \u2013 Venlo, The Netherlands 2005 \u2013 San Jose, California","title":"Past workshops"},{"location":"docs/lua/docs/","text":"Reference manual The official definition of the Lua language is its reference manual, which describes the syntax and the semantics of Lua, the standard libraries, and the C API. The reference manual for Lua 5.4 is available online in English only. The reference manual for Lua 5.3 is available online in English and Russian. The reference manual for Lua 5.2 is available online in English, Portuguese, and Polish. The reference manual for Lua 5.1 is available online in English, Portuguese, Spanish, German, and Polish. It is also available as a book in English. Technical documentation For more technical information, see the Frequently Asked Questions (FAQ) and some old seminar slides. For detailed technical information on specific topics, see our old series of Lua Technical Notes and the wiki at lua-users.org, specially the tutorial. You may also browse the source code. Papers There are many papers and theses related to Lua. Here are the main ones written by the Lua team. See also the LabLua publications. The main academic paper about Lua discusses the philosophy behind its design: Lua \u2013 an extensible extension language by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Software: Practice & Experience 26 #6 (1996) 635\u2013652. [doi] This paper was awarded the first prize (technological category) in the II Compaq Award for Research and Development in Computer Science in 1997. This award was a joint venture of Compaq Computer in Brazil, the Brazilian Ministry of Science and Technology, and the Brazilian Academy of Sciences. For an overview of how Lua is designed, see A look at the design of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Communications of the ACM 61 #11 (2018) 114\u2013123. [doi \u00b7 video] For a short exposition of the API design, see Passing a language through the eye of a needle by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, ACM Queue 9 #5 (May 2011) 20\u201329. [doi \u00b7 acm] Communications of the ACM 54 #7 (July 2011) 38\u201343. [doi \u00b7 acm] It is also available in Portuguese: Passando uma linguagem pelo buraco de uma agulha por R. Ierusalimschy, L. H. de Figueiredo, W. Celes, ACM Queue 9 #5 (May 2011) 20\u201329. For details on the implementation of Lua, see The implementation of Lua 5.0 by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Journal of Universal Computer Science 11 #7 (2005) 1159\u20131176. [doi \u00b7 slides] For details on the role of first-class functions in Lua, see First-class functions in an imperative world by R. Ierusalimschy, Journal of Universal Computer Science 23 #1 (2017) 112\u2013126. [doi \u00b7 slides] For a discussion of coroutines in Lua, see Coroutines in Lua by A. L. de Moura, N. Rodriguez, R. Ierusalimschy, Journal of Universal Computer Science 10 #7 (2004) 910\u2013925. [doi \u00b7 slides] For a complete history of Lua till 2006, see The evolution of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Proceedings of ACM HOPL III (2007) 2-1\u20132-26. [doi \u00b7 slides] For a history of Lua till 2001, see The evolution of an extension language: a history of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Proceedings of V Brazilian Symposium on Programming Languages (2001) B-14\u2013B-28. [ps] The first paper describing Lua has some historical interest: The design and implementation of a language for extending applications by L. H. de Figueiredo, R. Ierusalimschy, W. Celes, Proceedings of XXI Brazilian Seminar on Software and Hardware (1994) 273\u2013283. [ps] For an early expository article, see Lua: an extensible embedded language by L. H. de Figueiredo, R. Ierusalimschy, W. Celes, Dr. Dobb's Journal 21 #12 (Dec 1996) 26\u201333. [ddj] For introductory texts in Portuguese, see Uma introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o em Lua by R. Ierusalimschy, JAI 2009 (Jul 2009). A linguagem Lua e suas aplica\u00e7\u00f5es em jogos by W. Celes, L. H. Figueiredo, R. Ierusalimschy WJogos 2004 (Oct 2004). [slides] Books Lua books are available at the main online stores and also as e-books at Feisty Duck. When you buy a copy of a book published by Lua.org, you help to support the Lua project. Reference manual The official definition of the Lua language: Lua 5.1 Reference Manual by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Lua.org, August 2006 ISBN 8590379833 The reference manuals for later versions of Lua are available online. Programming in Lua A detailed and authoritative introduction to all aspects of Lua programming, by Lua's chief architect: Programming in Lua by R. Ierusalimschy Lua.org, fourth edition, August 2016 ISBN 8590379868 (also available as an e-book) The fourth edition is aimed at Lua 5.3 and marks a complete reorganization of the text. The first edition is available online. It was aimed at Lua 5.0 and is still largely relevant. The third edition was aimed at Lua 5.2 and remains quite relevant. It is available in English, Portuguese, and Russian: Programming in Lua by Roberto Ierusalimschy Lua.org, third edition, January 2013 ISBN 859037985X (also available as e-book) Programando em Lua por Roberto Ierusalimschy LTC, January 2015 ISBN 9788521626992 Programmirovanie na iazyke Lua by Roberto Ierusalimschy DMK-press, 2014 ISBN 5940747671 The second edition remains relevant and is available in German, Korean, Chinese, and Japanese: Programmieren mit Lua von Roberto Ierusalimschy Open Source Press, September 2006 ISBN 3937514228 Programming in Lua by Roberto Ierusalimschy Insight, June 2007 ISBN 9788991268302 Programming in Lua by Roberto Ierusalimschy Publishing House of Electronic Industry, May 2008 ISBN 9787121061875 Programming in Lua by Roberto Ierusalimschy ASCII Media Works, Aug 2009 ISBN 9784048677974 Lua Programming Gems A collection of articles recording some of the existing wisdom and practice on how to program well in Lua: Lua Programming Gems edited by L. H. de Figueiredo, W. Celes, R. Ierusalimschy, Lua.org, December 2008 ISBN 9788590379843 (also available as e-book) Other books There are also books about Lua written by other authors: Coding With Roblox Lua in 24 Hours: The Official Roblox Guide by Roblox Corporation. Sams Publishing, 2021, ISBN 9780136829423. Coding Roblox Games Made Easy: The ultimate guide to creating games with Roblox Studio and Lua programming by Zander Brumbaugh. Packt Publishing, 2021, ISBN 9781800561991. Initiation \u00e0 la cr\u00e9ation de jeux vid\u00e9o en Lua avec L\u00f6ve2D by Anthony Cardinale. \u00c9ditions D-BookeR, 2020, ISBN 9782822709675. Lua Quick Reference (second edition) by Mitchell. Triple Quasar Books, 2020, ISBN 9780991237951. Developing Games on the Raspberry Pi: App Programming with Lua and L\u00d6VE by Seth Kenlon. Apress, 2019, ISBN 9781484241707. Lua Programming using Roblox by SimTek Game Development. Independently published, 2019, ISBN 9781693427443. Introdu\u00e7\u00e3o \u00e0 linguagem Lua by Jos\u00e9 Augusto N. G. Manzano. Novatec, 2018, ISBN 9788575226681. Lua Quick Start Guide by Gabor Szauer, Packt Publishing, 2018, ISBN 9781789343229. Creating Solid APIs with Lua by Tyler Neylon. O'Reilly Media, 2017, ISBN 9781491986301. Le guide de Lua et ses applications - Manuel d'apprentissage (2e \u00e9dition) by Pierre Chapuis, Etiene Dalcol, Cyril Doillon, Sylvain Fabre, Philippe Lhoste, Hisham Muhammad, and Patrick Rapin. \u00c9ditions D-BookeR, 2016, ISBN 9782822704076. Le guide de Lua et ses applications - Manuel de r\u00e9f\u00e9rence (2e \u00e9dition) by Pierre Chapuis, Cyril Doillon, Sylvain Fabre, Philippe Lhoste, and Patrick Rapin. \u00c9ditions D-BookeR, 2016, ISBN 9782822704083. Lua Game Development Cookbook by Mario Kasuba. Packt Publishing, 2015, ISBN 1849515506. ROBLOX Lua: Scripting for Beginners by Douglas Snipp. CreateSpace, 2015, ISBN 1508728313. Seven More Languages in Seven Weeks: Languages That Are Shaping the Future by Bruce Tate, Ian Dees, Frederic Daoud, Jack Moffitt. Pragmatic Bookshelf, 2014, ISBN 1941222153. Learning Game AI Programming with Lua by David Young. Packt Publishing, 2014, ISBN 1783281332. Lua Programming by Mark Otaris and others, Wikibooks, 2014. Introduction to Programming with Lua and the Corona Game Lab by Robert Cook. Cook's Books, 2014. ASIN B00IQGAC8A. Create Mobile Games with Corona: Build with Lua on iOS and Android by Silvia Domenech. Pragmatic Bookshelf, 2013, ISBN 1937785572. CryENGINE Game Programming with C++, C#, and Lua by Filip Lundgren and Ruan Pearce. Packt Publishing, 2013, ISBN 1849695903. L\u00d6VE for Lua Game Programming by Darmie Akinlaja. Packt Publishing, 2013, ISBN 1782161600. ComputerCraft: Lua Programming in Minecraft by Matthew Monk and Simon Monk. CreateSpace, 2013, ISBN 1481927655. Learn Lua for iOS Game Development by Jayant Varma. Apress, 2012, ISBN 1430246626. Le guide de Lua et ses applications by Cyril Doillon, Sylvain Fabre, Philippe Lhoste, and Patrick Rapin. \u00c9ditions D-BookeR, 2012, ISBN 9782822700054. Lua - Programa\u00e7\u00e3o de Computadores by Jos\u00e9 Augusto N. G. Manzano. self-published, 2012, ISBN 9788591311576. Lua: Einsatz von Lua in Embedded Systems by Claus K\u00fchnel and Daniel Zwirner. Skript Verlag Kuehnel, 2012, ISBN 3907857151. Basic ROBLOX Lua Programming by Brandon John LaRouche. CreateSpace, 2012, ISBN 1475026048. Numerical Methods for Nonlinear Engineering Models by John R. Hauser. Springer, 2009, ISBN 9781402099199. Lua: Einsatz von Lua zur Messwerterfassung by Claus K\u00fchnel and Daniel Zwirner. Skript Verlag Kuehnel, 2009, ISBN 3907857127. Beginning Lua with World of Warcraft Add-ons by Paul Emmerich. Apress, 2009, ISBN 1430223715. First Lua Programming, the most popular application development lightweight script! by Miki Shimizu. Softbank Creative, 2008, ISBN 4777514137. Scripting Language for Game Development and Efficient C/C++ to Implement Embedded Lua by Makoto Hamanaka. Softbank Creative, 2008, ISBN 4797348550. World of Warcraft Programming by James Whitehead II, Bryan McLemore, and Matthew Orlando. Wiley, 2008, ISBN 0470229810. Introduction to Lua programming by Yutaka Ueno. Softbank Creative, 2007, ISBN 4797342722. Beginning Lua Programming by Kurt Jung and Aaron Brown. Wrox, 2007, ISBN 0470069171. Programming Game AI by Example by Mat Buckland. Jones & Bartlett Learning, 2005, ISBN 9781556220784. Game Development with Lua by Paul Schuytema and Mark Manyen. Charles River Media, 2005, ISBN 1584504048. Game Programming with Python, Lua, and Ruby by Tom Gutschmidt. Course Technology PTR, 2003, ISBN 1592000770.","title":"\u6587\u6863"},{"location":"docs/lua/docs/#reference-manual","text":"The official definition of the Lua language is its reference manual, which describes the syntax and the semantics of Lua, the standard libraries, and the C API. The reference manual for Lua 5.4 is available online in English only. The reference manual for Lua 5.3 is available online in English and Russian. The reference manual for Lua 5.2 is available online in English, Portuguese, and Polish. The reference manual for Lua 5.1 is available online in English, Portuguese, Spanish, German, and Polish. It is also available as a book in English.","title":"Reference manual"},{"location":"docs/lua/docs/#technical-documentation","text":"For more technical information, see the Frequently Asked Questions (FAQ) and some old seminar slides. For detailed technical information on specific topics, see our old series of Lua Technical Notes and the wiki at lua-users.org, specially the tutorial. You may also browse the source code.","title":"Technical documentation"},{"location":"docs/lua/docs/#papers","text":"There are many papers and theses related to Lua. Here are the main ones written by the Lua team. See also the LabLua publications. The main academic paper about Lua discusses the philosophy behind its design: Lua \u2013 an extensible extension language by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Software: Practice & Experience 26 #6 (1996) 635\u2013652. [doi] This paper was awarded the first prize (technological category) in the II Compaq Award for Research and Development in Computer Science in 1997. This award was a joint venture of Compaq Computer in Brazil, the Brazilian Ministry of Science and Technology, and the Brazilian Academy of Sciences. For an overview of how Lua is designed, see A look at the design of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Communications of the ACM 61 #11 (2018) 114\u2013123. [doi \u00b7 video] For a short exposition of the API design, see Passing a language through the eye of a needle by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, ACM Queue 9 #5 (May 2011) 20\u201329. [doi \u00b7 acm] Communications of the ACM 54 #7 (July 2011) 38\u201343. [doi \u00b7 acm] It is also available in Portuguese: Passando uma linguagem pelo buraco de uma agulha por R. Ierusalimschy, L. H. de Figueiredo, W. Celes, ACM Queue 9 #5 (May 2011) 20\u201329. For details on the implementation of Lua, see The implementation of Lua 5.0 by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Journal of Universal Computer Science 11 #7 (2005) 1159\u20131176. [doi \u00b7 slides] For details on the role of first-class functions in Lua, see First-class functions in an imperative world by R. Ierusalimschy, Journal of Universal Computer Science 23 #1 (2017) 112\u2013126. [doi \u00b7 slides] For a discussion of coroutines in Lua, see Coroutines in Lua by A. L. de Moura, N. Rodriguez, R. Ierusalimschy, Journal of Universal Computer Science 10 #7 (2004) 910\u2013925. [doi \u00b7 slides] For a complete history of Lua till 2006, see The evolution of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Proceedings of ACM HOPL III (2007) 2-1\u20132-26. [doi \u00b7 slides] For a history of Lua till 2001, see The evolution of an extension language: a history of Lua by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Proceedings of V Brazilian Symposium on Programming Languages (2001) B-14\u2013B-28. [ps] The first paper describing Lua has some historical interest: The design and implementation of a language for extending applications by L. H. de Figueiredo, R. Ierusalimschy, W. Celes, Proceedings of XXI Brazilian Seminar on Software and Hardware (1994) 273\u2013283. [ps] For an early expository article, see Lua: an extensible embedded language by L. H. de Figueiredo, R. Ierusalimschy, W. Celes, Dr. Dobb's Journal 21 #12 (Dec 1996) 26\u201333. [ddj] For introductory texts in Portuguese, see Uma introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o em Lua by R. Ierusalimschy, JAI 2009 (Jul 2009). A linguagem Lua e suas aplica\u00e7\u00f5es em jogos by W. Celes, L. H. Figueiredo, R. Ierusalimschy WJogos 2004 (Oct 2004). [slides]","title":"Papers"},{"location":"docs/lua/docs/#books","text":"Lua books are available at the main online stores and also as e-books at Feisty Duck. When you buy a copy of a book published by Lua.org, you help to support the Lua project. Reference manual The official definition of the Lua language: Lua 5.1 Reference Manual by R. Ierusalimschy, L. H. de Figueiredo, W. Celes, Lua.org, August 2006 ISBN 8590379833 The reference manuals for later versions of Lua are available online. Programming in Lua A detailed and authoritative introduction to all aspects of Lua programming, by Lua's chief architect: Programming in Lua by R. Ierusalimschy Lua.org, fourth edition, August 2016 ISBN 8590379868 (also available as an e-book) The fourth edition is aimed at Lua 5.3 and marks a complete reorganization of the text. The first edition is available online. It was aimed at Lua 5.0 and is still largely relevant. The third edition was aimed at Lua 5.2 and remains quite relevant. It is available in English, Portuguese, and Russian: Programming in Lua by Roberto Ierusalimschy Lua.org, third edition, January 2013 ISBN 859037985X (also available as e-book) Programando em Lua por Roberto Ierusalimschy LTC, January 2015 ISBN 9788521626992 Programmirovanie na iazyke Lua by Roberto Ierusalimschy DMK-press, 2014 ISBN 5940747671 The second edition remains relevant and is available in German, Korean, Chinese, and Japanese: Programmieren mit Lua von Roberto Ierusalimschy Open Source Press, September 2006 ISBN 3937514228 Programming in Lua by Roberto Ierusalimschy Insight, June 2007 ISBN 9788991268302 Programming in Lua by Roberto Ierusalimschy Publishing House of Electronic Industry, May 2008 ISBN 9787121061875 Programming in Lua by Roberto Ierusalimschy ASCII Media Works, Aug 2009 ISBN 9784048677974 Lua Programming Gems A collection of articles recording some of the existing wisdom and practice on how to program well in Lua: Lua Programming Gems edited by L. H. de Figueiredo, W. Celes, R. Ierusalimschy, Lua.org, December 2008 ISBN 9788590379843 (also available as e-book) Other books There are also books about Lua written by other authors: Coding With Roblox Lua in 24 Hours: The Official Roblox Guide by Roblox Corporation. Sams Publishing, 2021, ISBN 9780136829423. Coding Roblox Games Made Easy: The ultimate guide to creating games with Roblox Studio and Lua programming by Zander Brumbaugh. Packt Publishing, 2021, ISBN 9781800561991. Initiation \u00e0 la cr\u00e9ation de jeux vid\u00e9o en Lua avec L\u00f6ve2D by Anthony Cardinale. \u00c9ditions D-BookeR, 2020, ISBN 9782822709675. Lua Quick Reference (second edition) by Mitchell. Triple Quasar Books, 2020, ISBN 9780991237951. Developing Games on the Raspberry Pi: App Programming with Lua and L\u00d6VE by Seth Kenlon. Apress, 2019, ISBN 9781484241707. Lua Programming using Roblox by SimTek Game Development. Independently published, 2019, ISBN 9781693427443. Introdu\u00e7\u00e3o \u00e0 linguagem Lua by Jos\u00e9 Augusto N. G. Manzano. Novatec, 2018, ISBN 9788575226681. Lua Quick Start Guide by Gabor Szauer, Packt Publishing, 2018, ISBN 9781789343229. Creating Solid APIs with Lua by Tyler Neylon. O'Reilly Media, 2017, ISBN 9781491986301. Le guide de Lua et ses applications - Manuel d'apprentissage (2e \u00e9dition) by Pierre Chapuis, Etiene Dalcol, Cyril Doillon, Sylvain Fabre, Philippe Lhoste, Hisham Muhammad, and Patrick Rapin. \u00c9ditions D-BookeR, 2016, ISBN 9782822704076. Le guide de Lua et ses applications - Manuel de r\u00e9f\u00e9rence (2e \u00e9dition) by Pierre Chapuis, Cyril Doillon, Sylvain Fabre, Philippe Lhoste, and Patrick Rapin. \u00c9ditions D-BookeR, 2016, ISBN 9782822704083. Lua Game Development Cookbook by Mario Kasuba. Packt Publishing, 2015, ISBN 1849515506. ROBLOX Lua: Scripting for Beginners by Douglas Snipp. CreateSpace, 2015, ISBN 1508728313. Seven More Languages in Seven Weeks: Languages That Are Shaping the Future by Bruce Tate, Ian Dees, Frederic Daoud, Jack Moffitt. Pragmatic Bookshelf, 2014, ISBN 1941222153. Learning Game AI Programming with Lua by David Young. Packt Publishing, 2014, ISBN 1783281332. Lua Programming by Mark Otaris and others, Wikibooks, 2014. Introduction to Programming with Lua and the Corona Game Lab by Robert Cook. Cook's Books, 2014. ASIN B00IQGAC8A. Create Mobile Games with Corona: Build with Lua on iOS and Android by Silvia Domenech. Pragmatic Bookshelf, 2013, ISBN 1937785572. CryENGINE Game Programming with C++, C#, and Lua by Filip Lundgren and Ruan Pearce. Packt Publishing, 2013, ISBN 1849695903. L\u00d6VE for Lua Game Programming by Darmie Akinlaja. Packt Publishing, 2013, ISBN 1782161600. ComputerCraft: Lua Programming in Minecraft by Matthew Monk and Simon Monk. CreateSpace, 2013, ISBN 1481927655. Learn Lua for iOS Game Development by Jayant Varma. Apress, 2012, ISBN 1430246626. Le guide de Lua et ses applications by Cyril Doillon, Sylvain Fabre, Philippe Lhoste, and Patrick Rapin. \u00c9ditions D-BookeR, 2012, ISBN 9782822700054. Lua - Programa\u00e7\u00e3o de Computadores by Jos\u00e9 Augusto N. G. Manzano. self-published, 2012, ISBN 9788591311576. Lua: Einsatz von Lua in Embedded Systems by Claus K\u00fchnel and Daniel Zwirner. Skript Verlag Kuehnel, 2012, ISBN 3907857151. Basic ROBLOX Lua Programming by Brandon John LaRouche. CreateSpace, 2012, ISBN 1475026048. Numerical Methods for Nonlinear Engineering Models by John R. Hauser. Springer, 2009, ISBN 9781402099199. Lua: Einsatz von Lua zur Messwerterfassung by Claus K\u00fchnel and Daniel Zwirner. Skript Verlag Kuehnel, 2009, ISBN 3907857127. Beginning Lua with World of Warcraft Add-ons by Paul Emmerich. Apress, 2009, ISBN 1430223715. First Lua Programming, the most popular application development lightweight script! by Miki Shimizu. Softbank Creative, 2008, ISBN 4777514137. Scripting Language for Game Development and Efficient C/C++ to Implement Embedded Lua by Makoto Hamanaka. Softbank Creative, 2008, ISBN 4797348550. World of Warcraft Programming by James Whitehead II, Bryan McLemore, and Matthew Orlando. Wiley, 2008, ISBN 0470229810. Introduction to Lua programming by Yutaka Ueno. Softbank Creative, 2007, ISBN 4797342722. Beginning Lua Programming by Kurt Jung and Aaron Brown. Wrox, 2007, ISBN 0470069171. Programming Game AI by Example by Mat Buckland. Jones & Bartlett Learning, 2005, ISBN 9781556220784. Game Development with Lua by Paul Schuytema and Mark Manyen. Charles River Media, 2005, ISBN 1584504048. Game Programming with Python, Lua, and Ruby by Tom Gutschmidt. Course Technology PTR, 2003, ISBN 1592000770.","title":"Books"},{"location":"docs/lua/download/","text":"Source Lua is free software distributed in source code. It may be used for any purpose, including commercial purposes, at absolutely no cost. All versions are available for download. The current version is Lua 5.4 and its current release is Lua 5.4.3. Bash download lua-5.4.3.tar.gz 2021 -03-15, 350K md5: ef63ed2ecfb713646a7fcc583cf5f352 sha1: 1dda2ef23a9828492b4595c0197766de6e784bc7 Tools The main repository of Lua modules is LuaRocks. See also Awesome Lua. Pre-compiled Lua libraries and executables are available at LuaBinaries. The lua-users wiki lists many user-contributed addons for Lua. Giving credit If you use Lua, please give us credit, according to our license. A nice way to give us further credit is to include a Lua logo and a link to our site in a web page for your product. Building Lua is implemented in pure ANSI C and compiles unmodified in all platforms that have an ANSI C compiler. Lua also compiles cleanly as C++. Lua is very easy to build and install. There are detailed instructions in the package but here is a simple terminal session that downloads the current release of Lua and builds it in Linux: Bash curl -R -O http://www.lua.org/ftp/lua-5.4.3.tar.gz tar zxf lua-5.4.3.tar.gz cd lua-5.4.3 make all test If you have trouble building Lua, read the FAQ. If you don't have the time or the inclination to compile Lua yourself, get a binary or try the live demo. Giving credit If you use Lua, please give us credit, according to our license. A nice way to give us further credit is to include a Lua logo and a link to our site in a web page for your product. Supporting Lua You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle.","title":"\u4e0b\u8f7d"},{"location":"docs/lua/download/#source","text":"Lua is free software distributed in source code. It may be used for any purpose, including commercial purposes, at absolutely no cost. All versions are available for download. The current version is Lua 5.4 and its current release is Lua 5.4.3. Bash download lua-5.4.3.tar.gz 2021 -03-15, 350K md5: ef63ed2ecfb713646a7fcc583cf5f352 sha1: 1dda2ef23a9828492b4595c0197766de6e784bc7","title":"Source"},{"location":"docs/lua/download/#tools","text":"The main repository of Lua modules is LuaRocks. See also Awesome Lua. Pre-compiled Lua libraries and executables are available at LuaBinaries. The lua-users wiki lists many user-contributed addons for Lua.","title":"Tools"},{"location":"docs/lua/download/#giving-credit","text":"If you use Lua, please give us credit, according to our license. A nice way to give us further credit is to include a Lua logo and a link to our site in a web page for your product.","title":"Giving credit"},{"location":"docs/lua/download/#building","text":"Lua is implemented in pure ANSI C and compiles unmodified in all platforms that have an ANSI C compiler. Lua also compiles cleanly as C++. Lua is very easy to build and install. There are detailed instructions in the package but here is a simple terminal session that downloads the current release of Lua and builds it in Linux: Bash curl -R -O http://www.lua.org/ftp/lua-5.4.3.tar.gz tar zxf lua-5.4.3.tar.gz cd lua-5.4.3 make all test If you have trouble building Lua, read the FAQ. If you don't have the time or the inclination to compile Lua yourself, get a binary or try the live demo. Giving credit If you use Lua, please give us credit, according to our license. A nice way to give us further credit is to include a Lua logo and a link to our site in a web page for your product.","title":"Building"},{"location":"docs/lua/download/#supporting-lua","text":"You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle.","title":"Supporting Lua"},{"location":"docs/lua/start/","text":"\u6b22\u8fce! Lua is a powerful and fast programming language that is easy to learn and use and to embed into your application. Lua is designed to be a lightweight embeddable scripting language. It is used for all sorts of applications, from games to web applications and image processing. See the about page for details and some reasons why you should choose Lua. See what Lua programs look and feel like in the live demo. \u5b66\u4e60 A good place to start learning Lua is the book Programming in Lua, available in paperback and as an e-book. The first edition is freely available online. See also course notes based on this book. The official definition of the Lua language is given in the reference manual. See the documentation page and the wiki for more. \u83b7\u5f97\u5e2e\u52a9 Our community is friendly and will most probably help you if you need. Just visit the mailing list, the chat room, and stackoverflow. If you need help in Portuguese, join the Lua BR mailing list and visit pt.stackoverflow. See also the FAQ, the community-maintained wiki and LuaFaq, and the much longer uFAQ. \u5de5\u5177 If you need to complement the standard Lua libraries to handle more complex tasks, visit LuaRocks, the main repository of Lua modules. See also Awesome Lua, a curated list of quality Lua packages and resources. The lua-users wiki lists many user-contributed addons for Lua. \u652f\u6301 You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle. \u5b89\u88c5 Use the live demo to play with Lua if you don't want to install anything on your computer. To run Lua programs on your computer, you'll need a standalone Lua interpreter and perhaps some additional Lua libraries. Pre-compiled Lua libraries and executables are available at LuaBinaries. Use your favorite text editor to write your Lua programs. Make sure to save your programs as plain text. If you want an IDE, try ZeroBrane Studio. If you use Windows, try LuaDist, a multi-platform distribution of the Lua that includes batteries. If you use Linux or Mac OS X, Lua is either already installed on your system or there is a Lua package for it. Make sure you get the latest release of Lua (currently 5.4.3). Lua is also quite easy to build from source, as explained below. \u4ece\u4ee3\u7801\u6e90\u5b89\u88c5 Lua is very easy to build and install. Just download it and follow the instructions in the package. Here is a simple terminal session that downloads the current release of Lua and builds it in a Linux system: Bash curl -R -O http://www.lua.org/ftp/lua-5.4.3.tar.gz tar zxf lua-5.4.3.tar.gz cd lua-5.4.3 make all test If you don't have curl, try wget. If you use Windows and want to build Lua from source, there are detailed instructions in the wiki. \u7b7e\u5165 To embed Lua into your C or C++ program, you'll need the Lua headers to compile your program and a Lua library to link with it. If you're getting a ready-made Lua package for your platform, you'll probably need the development package as well. Otherwise, just download Lua and add its source directory to your project.","title":"\u5165\u95e8"},{"location":"docs/lua/start/#_1","text":"Lua is a powerful and fast programming language that is easy to learn and use and to embed into your application. Lua is designed to be a lightweight embeddable scripting language. It is used for all sorts of applications, from games to web applications and image processing. See the about page for details and some reasons why you should choose Lua. See what Lua programs look and feel like in the live demo.","title":"\u6b22\u8fce!"},{"location":"docs/lua/start/#_2","text":"A good place to start learning Lua is the book Programming in Lua, available in paperback and as an e-book. The first edition is freely available online. See also course notes based on this book. The official definition of the Lua language is given in the reference manual. See the documentation page and the wiki for more.","title":"\u5b66\u4e60"},{"location":"docs/lua/start/#_3","text":"Our community is friendly and will most probably help you if you need. Just visit the mailing list, the chat room, and stackoverflow. If you need help in Portuguese, join the Lua BR mailing list and visit pt.stackoverflow. See also the FAQ, the community-maintained wiki and LuaFaq, and the much longer uFAQ.","title":"\u83b7\u5f97\u5e2e\u52a9"},{"location":"docs/lua/start/#_4","text":"If you need to complement the standard Lua libraries to handle more complex tasks, visit LuaRocks, the main repository of Lua modules. See also Awesome Lua, a curated list of quality Lua packages and resources. The lua-users wiki lists many user-contributed addons for Lua.","title":"\u5de5\u5177"},{"location":"docs/lua/start/#_5","text":"You can help to support the Lua project by buying a book published by Lua.org and by making a donation. You can also help to spread the word about Lua by buying Lua products at Zazzle.","title":"\u652f\u6301"},{"location":"docs/lua/start/#_6","text":"Use the live demo to play with Lua if you don't want to install anything on your computer. To run Lua programs on your computer, you'll need a standalone Lua interpreter and perhaps some additional Lua libraries. Pre-compiled Lua libraries and executables are available at LuaBinaries. Use your favorite text editor to write your Lua programs. Make sure to save your programs as plain text. If you want an IDE, try ZeroBrane Studio. If you use Windows, try LuaDist, a multi-platform distribution of the Lua that includes batteries. If you use Linux or Mac OS X, Lua is either already installed on your system or there is a Lua package for it. Make sure you get the latest release of Lua (currently 5.4.3). Lua is also quite easy to build from source, as explained below.","title":"\u5b89\u88c5"},{"location":"docs/lua/start/#_7","text":"Lua is very easy to build and install. Just download it and follow the instructions in the package. Here is a simple terminal session that downloads the current release of Lua and builds it in a Linux system: Bash curl -R -O http://www.lua.org/ftp/lua-5.4.3.tar.gz tar zxf lua-5.4.3.tar.gz cd lua-5.4.3 make all test If you don't have curl, try wget. If you use Windows and want to build Lua from source, there are detailed instructions in the wiki.","title":"\u4ece\u4ee3\u7801\u6e90\u5b89\u88c5"},{"location":"docs/lua/start/#_8","text":"To embed Lua into your C or C++ program, you'll need the Lua headers to compile your program and a Lua library to link with it. If you're getting a ready-made Lua package for your platform, you'll probably need the development package as well. Otherwise, just download Lua and add its source directory to your project.","title":"\u7b7e\u5165"},{"location":"docs/lua/manual/_index/","text":"The reference manual is the official definition of the Lua language. For a complete introduction to Lua programming, see the book Programming in Lua. start \u00b7 contents \u00b7 index \u00b7 other versions Copyright \u00a9 2020\u20132021 Lua.org, PUC-Rio. Freely available under the terms of the Lua license. Contents \u2013 Introduction \u2013 Basic Concepts \u2013 Values and Types \u2013 Environments and the Global Environment \u2013 Error Handling \u2013 Metatables and Metamethods \u2013 Garbage Collection \u2013 Incremental Garbage Collection \u2013 Generational Garbage Collection \u2013 Garbage-Collection Metamethods \u2013 Weak Tables \u2013 Coroutines \u2013 The Language \u2013 Lexical Conventions \u2013 Variables \u2013 Statements \u2013 Blocks \u2013 Chunks \u2013 Assignment \u2013 Control Structures \u2013 For Statement \u2013 Function Calls as Statements \u2013 Local Declarations \u2013 To-be-closed Variables \u2013 Expressions \u2013 Arithmetic Operators \u2013 Bitwise Operators \u2013 Coercions and Conversions \u2013 Relational Operators \u2013 Logical Operators \u2013 Concatenation \u2013 The Length Operator \u2013 Precedence \u2013 Table Constructors \u2013 Function Calls \u2013 Function Definitions \u2013 Visibility Rules \u2013 The Application Program Interface \u2013 The Stack \u2013 Stack Size \u2013 Valid and Acceptable Indices \u2013 Pointers to strings \u2013 C Closures \u2013 Registry \u2013 Error Handling in C \u2013 Status Codes \u2013 Handling Yields in C \u2013 Functions and Types \u2013 The Debug Interface \u2013 The Auxiliary Library 5.1 \u2013 Functions and Types \u2013 The Standard Libraries \u2013 Basic Functions \u2013 Coroutine Manipulation \u2013 Modules \u2013 String Manipulation \u2013 Patterns \u2013 Format Strings for Pack and Unpack \u2013 UTF-8 Support \u2013 Table Manipulation \u2013 Mathematical Functions \u2013 Input and Output Facilities \u2013 Operating System Facilities \u2013 The Debug Library \u2013 Lua Standalone \u2013 Incompatibilities with the Previous Version \u2013 Incompatibilities in the Language \u2013 Incompatibilities in the Libraries \u2013 Incompatibilities in the API \u2013 The Complete Syntax of Lua Index Lua functions basic _G _VERSION assert collectgarbage dofile error getmetatable ipairs load loadfile next pairs pcall print rawequal rawget rawlen rawset require select setmetatable tonumber tostring type warn xpcall coroutine coroutine.close coroutine.create coroutine.isyieldable coroutine.resume coroutine.running coroutine.status coroutine.wrap coroutine.yield debug debug.debug debug.gethook debug.getinfo debug.getlocal debug.getmetatable debug.getregistry debug.getupvalue debug.getuservalue debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.setuservalue debug.traceback debug.upvalueid debug.upvaluejoin io io.close io.flush io.input io.lines io.open io.output io.popen io.read io.stderr io.stdin io.stdout io.tmpfile io.type io.write file:close file:flush file:lines file:read file:seek file:setvbuf file:write math math.abs math.acos math.asin math.atan math.ceil math.cos math.deg math.exp math.floor math.fmod math.huge math.log math.max math.maxinteger math.min math.mininteger math.modf math.pi math.rad math.random math.randomseed math.sin math.sqrt math.tan math.tointeger math.type math.ult os os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname package package.config package.cpath package.loaded package.loadlib package.path package.preload package.searchers package.searchpath string string.byte string.char string.dump string.find string.format string.gmatch string.gsub string.len string.lower string.match string.pack string.packsize string.rep string.reverse string.sub string.unpack string.upper table table.concat table.insert table.move table.pack table.remove table.sort table.unpack utf8 utf8.char utf8.charpattern utf8.codepoint utf8.codes utf8.len utf8.offset metamethods add band bnot bor bxor call close concat div eq gc idiv index le len lt metatable mod mode mul name newindex pairs pow shl shr sub tostring __unm environment variables LUA_CPATH LUA_CPATH_5_4 LUA_INIT LUA_INIT_5_4 LUA_PATH LUA_PATH_5_4 C API lua_Alloc lua_CFunction lua_Debug lua_Hook lua_Integer lua_KContext lua_KFunction lua_Number lua_Reader lua_State lua_Unsigned lua_WarnFunction lua_Writer lua_absindex lua_arith lua_atpanic lua_call lua_callk lua_checkstack lua_close lua_closeslot lua_compare lua_concat lua_copy lua_createtable lua_dump lua_error lua_gc lua_getallocf lua_getextraspace lua_getfield lua_getglobal lua_gethook lua_gethookcount lua_gethookmask lua_geti lua_getinfo lua_getiuservalue lua_getlocal lua_getmetatable lua_getstack lua_gettable lua_gettop lua_getupvalue lua_insert lua_isboolean lua_iscfunction lua_isfunction lua_isinteger lua_islightuserdata lua_isnil lua_isnone lua_isnoneornil lua_isnumber lua_isstring lua_istable lua_isthread lua_isuserdata lua_isyieldable lua_len lua_load lua_newstate lua_newtable lua_newthread lua_newuserdatauv lua_next lua_numbertointeger lua_pcall lua_pcallk lua_pop lua_pushboolean lua_pushcclosure lua_pushcfunction lua_pushfstring lua_pushglobaltable lua_pushinteger lua_pushlightuserdata lua_pushliteral lua_pushlstring lua_pushnil lua_pushnumber lua_pushstring lua_pushthread lua_pushvalue lua_pushvfstring lua_rawequal lua_rawget lua_rawgeti lua_rawgetp lua_rawlen lua_rawset lua_rawseti lua_rawsetp lua_register lua_remove lua_replace lua_resetthread lua_resume lua_rotate lua_setallocf lua_setfield lua_setglobal lua_sethook lua_seti lua_setiuservalue lua_setlocal lua_setmetatable lua_settable lua_settop lua_setupvalue lua_setwarnf lua_status lua_stringtonumber lua_toboolean lua_tocfunction lua_toclose lua_tointeger lua_tointegerx lua_tolstring lua_tonumber lua_tonumberx lua_topointer lua_tostring lua_tothread lua_touserdata lua_type lua_typename lua_upvalueid lua_upvalueindex lua_upvaluejoin lua_version lua_warning lua_xmove lua_yield lua_yieldk auxiliary library luaL_Buffer luaL_Reg luaL_Stream luaL_addchar luaL_addgsub luaL_addlstring luaL_addsize luaL_addstring luaL_addvalue luaL_argcheck luaL_argerror luaL_argexpected luaL_buffaddr luaL_buffinit luaL_buffinitsize luaL_bufflen luaL_buffsub luaL_callmeta luaL_checkany luaL_checkinteger luaL_checklstring luaL_checknumber luaL_checkoption luaL_checkstack luaL_checkstring luaL_checktype luaL_checkudata luaL_checkversion luaL_dofile luaL_dostring luaL_error luaL_execresult luaL_fileresult luaL_getmetafield luaL_getmetatable luaL_getsubtable luaL_gsub luaL_len luaL_loadbuffer luaL_loadbufferx luaL_loadfile luaL_loadfilex luaL_loadstring luaL_newlib luaL_newlibtable luaL_newmetatable luaL_newstate luaL_openlibs luaL_opt luaL_optinteger luaL_optlstring luaL_optnumber luaL_optstring luaL_prepbuffer luaL_prepbuffsize luaL_pushfail luaL_pushresult luaL_pushresultsize luaL_ref luaL_requiref luaL_setfuncs luaL_setmetatable luaL_testudata luaL_tolstring luaL_traceback luaL_typeerror luaL_typename luaL_unref luaL_where standard library luaopen_base luaopen_coroutine luaopen_debug luaopen_io luaopen_math luaopen_os luaopen_package luaopen_string luaopen_table luaopen_utf8 constants LUA_ERRERR LUA_ERRFILE LUA_ERRMEM LUA_ERRRUN LUA_ERRSYNTAX LUA_HOOKCALL LUA_HOOKCOUNT LUA_HOOKLINE LUA_HOOKRET LUA_HOOKTAILCALL LUAL_BUFFERSIZE LUA_MASKCALL LUA_MASKCOUNT LUA_MASKLINE LUA_MASKRET LUA_MAXINTEGER LUA_MININTEGER LUA_MINSTACK LUA_MULTRET LUA_NOREF LUA_OK LUA_OPADD LUA_OPBAND LUA_OPBNOT LUA_OPBOR LUA_OPBXOR LUA_OPDIV LUA_OPEQ LUA_OPIDIV LUA_OPLE LUA_OPLT LUA_OPMOD LUA_OPMUL LUA_OPPOW LUA_OPSHL LUA_OPSHR LUA_OPSUB LUA_OPUNM LUA_REFNIL LUA_REGISTRYINDEX LUA_RIDX_GLOBALS LUA_RIDX_MAINTHREAD LUA_TBOOLEAN LUA_TFUNCTION LUA_TLIGHTUSERDATA LUA_TNIL LUA_TNONE LUA_TNUMBER LUA_TSTRING LUA_TTABLE LUA_TTHREAD LUA_TUSERDATA LUA_USE_APICHECK LUA_YIELD","title":"\u53c2\u8003\u624b\u518c"},{"location":"docs/lua/manual/_index/#contents","text":"\u2013 Introduction \u2013 Basic Concepts \u2013 Values and Types \u2013 Environments and the Global Environment \u2013 Error Handling \u2013 Metatables and Metamethods \u2013 Garbage Collection \u2013 Incremental Garbage Collection \u2013 Generational Garbage Collection \u2013 Garbage-Collection Metamethods \u2013 Weak Tables \u2013 Coroutines \u2013 The Language \u2013 Lexical Conventions \u2013 Variables \u2013 Statements \u2013 Blocks \u2013 Chunks \u2013 Assignment \u2013 Control Structures \u2013 For Statement \u2013 Function Calls as Statements \u2013 Local Declarations \u2013 To-be-closed Variables \u2013 Expressions \u2013 Arithmetic Operators \u2013 Bitwise Operators \u2013 Coercions and Conversions \u2013 Relational Operators \u2013 Logical Operators \u2013 Concatenation \u2013 The Length Operator \u2013 Precedence \u2013 Table Constructors \u2013 Function Calls \u2013 Function Definitions \u2013 Visibility Rules \u2013 The Application Program Interface \u2013 The Stack \u2013 Stack Size \u2013 Valid and Acceptable Indices \u2013 Pointers to strings \u2013 C Closures \u2013 Registry \u2013 Error Handling in C \u2013 Status Codes \u2013 Handling Yields in C \u2013 Functions and Types \u2013 The Debug Interface \u2013 The Auxiliary Library 5.1 \u2013 Functions and Types \u2013 The Standard Libraries \u2013 Basic Functions \u2013 Coroutine Manipulation \u2013 Modules \u2013 String Manipulation \u2013 Patterns \u2013 Format Strings for Pack and Unpack \u2013 UTF-8 Support \u2013 Table Manipulation \u2013 Mathematical Functions \u2013 Input and Output Facilities \u2013 Operating System Facilities \u2013 The Debug Library \u2013 Lua Standalone \u2013 Incompatibilities with the Previous Version \u2013 Incompatibilities in the Language \u2013 Incompatibilities in the Libraries \u2013 Incompatibilities in the API \u2013 The Complete Syntax of Lua","title":"Contents"},{"location":"docs/lua/manual/_index/#index","text":"","title":"Index"},{"location":"docs/lua/manual/_index/#lua-functions","text":"basic _G _VERSION assert collectgarbage dofile error getmetatable ipairs load loadfile next pairs pcall print rawequal rawget rawlen rawset require select setmetatable tonumber tostring type warn xpcall coroutine coroutine.close coroutine.create coroutine.isyieldable coroutine.resume coroutine.running coroutine.status coroutine.wrap coroutine.yield debug debug.debug debug.gethook debug.getinfo debug.getlocal debug.getmetatable debug.getregistry debug.getupvalue debug.getuservalue debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.setuservalue debug.traceback debug.upvalueid debug.upvaluejoin io io.close io.flush io.input io.lines io.open io.output io.popen io.read io.stderr io.stdin io.stdout io.tmpfile io.type io.write file:close file:flush file:lines file:read file:seek file:setvbuf file:write math math.abs math.acos math.asin math.atan math.ceil math.cos math.deg math.exp math.floor math.fmod math.huge math.log math.max math.maxinteger math.min math.mininteger math.modf math.pi math.rad math.random math.randomseed math.sin math.sqrt math.tan math.tointeger math.type math.ult os os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname package package.config package.cpath package.loaded package.loadlib package.path package.preload package.searchers package.searchpath string string.byte string.char string.dump string.find string.format string.gmatch string.gsub string.len string.lower string.match string.pack string.packsize string.rep string.reverse string.sub string.unpack string.upper table table.concat table.insert table.move table.pack table.remove table.sort table.unpack utf8 utf8.char utf8.charpattern utf8.codepoint utf8.codes utf8.len utf8.offset","title":"Lua functions"},{"location":"docs/lua/manual/_index/#metamethods","text":"add band bnot bor bxor call close concat div eq gc idiv index le len lt metatable mod mode mul name newindex pairs pow shl shr sub tostring __unm","title":"metamethods"},{"location":"docs/lua/manual/_index/#environment-variables","text":"LUA_CPATH LUA_CPATH_5_4 LUA_INIT LUA_INIT_5_4 LUA_PATH LUA_PATH_5_4","title":"environment variables"},{"location":"docs/lua/manual/_index/#c-api","text":"lua_Alloc lua_CFunction lua_Debug lua_Hook lua_Integer lua_KContext lua_KFunction lua_Number lua_Reader lua_State lua_Unsigned lua_WarnFunction lua_Writer lua_absindex lua_arith lua_atpanic lua_call lua_callk lua_checkstack lua_close lua_closeslot lua_compare lua_concat lua_copy lua_createtable lua_dump lua_error lua_gc lua_getallocf lua_getextraspace lua_getfield lua_getglobal lua_gethook lua_gethookcount lua_gethookmask lua_geti lua_getinfo lua_getiuservalue lua_getlocal lua_getmetatable lua_getstack lua_gettable lua_gettop lua_getupvalue lua_insert lua_isboolean lua_iscfunction lua_isfunction lua_isinteger lua_islightuserdata lua_isnil lua_isnone lua_isnoneornil lua_isnumber lua_isstring lua_istable lua_isthread lua_isuserdata lua_isyieldable lua_len lua_load lua_newstate lua_newtable lua_newthread lua_newuserdatauv lua_next lua_numbertointeger lua_pcall lua_pcallk lua_pop lua_pushboolean lua_pushcclosure lua_pushcfunction lua_pushfstring lua_pushglobaltable lua_pushinteger lua_pushlightuserdata lua_pushliteral lua_pushlstring lua_pushnil lua_pushnumber lua_pushstring lua_pushthread lua_pushvalue lua_pushvfstring lua_rawequal lua_rawget lua_rawgeti lua_rawgetp lua_rawlen lua_rawset lua_rawseti lua_rawsetp lua_register lua_remove lua_replace lua_resetthread lua_resume lua_rotate lua_setallocf lua_setfield lua_setglobal lua_sethook lua_seti lua_setiuservalue lua_setlocal lua_setmetatable lua_settable lua_settop lua_setupvalue lua_setwarnf lua_status lua_stringtonumber lua_toboolean lua_tocfunction lua_toclose lua_tointeger lua_tointegerx lua_tolstring lua_tonumber lua_tonumberx lua_topointer lua_tostring lua_tothread lua_touserdata lua_type lua_typename lua_upvalueid lua_upvalueindex lua_upvaluejoin lua_version lua_warning lua_xmove lua_yield lua_yieldk","title":"C API"},{"location":"docs/lua/manual/_index/#auxiliary-library","text":"luaL_Buffer luaL_Reg luaL_Stream luaL_addchar luaL_addgsub luaL_addlstring luaL_addsize luaL_addstring luaL_addvalue luaL_argcheck luaL_argerror luaL_argexpected luaL_buffaddr luaL_buffinit luaL_buffinitsize luaL_bufflen luaL_buffsub luaL_callmeta luaL_checkany luaL_checkinteger luaL_checklstring luaL_checknumber luaL_checkoption luaL_checkstack luaL_checkstring luaL_checktype luaL_checkudata luaL_checkversion luaL_dofile luaL_dostring luaL_error luaL_execresult luaL_fileresult luaL_getmetafield luaL_getmetatable luaL_getsubtable luaL_gsub luaL_len luaL_loadbuffer luaL_loadbufferx luaL_loadfile luaL_loadfilex luaL_loadstring luaL_newlib luaL_newlibtable luaL_newmetatable luaL_newstate luaL_openlibs luaL_opt luaL_optinteger luaL_optlstring luaL_optnumber luaL_optstring luaL_prepbuffer luaL_prepbuffsize luaL_pushfail luaL_pushresult luaL_pushresultsize luaL_ref luaL_requiref luaL_setfuncs luaL_setmetatable luaL_testudata luaL_tolstring luaL_traceback luaL_typeerror luaL_typename luaL_unref luaL_where standard library luaopen_base luaopen_coroutine luaopen_debug luaopen_io luaopen_math luaopen_os luaopen_package luaopen_string luaopen_table luaopen_utf8 constants LUA_ERRERR LUA_ERRFILE LUA_ERRMEM LUA_ERRRUN LUA_ERRSYNTAX LUA_HOOKCALL LUA_HOOKCOUNT LUA_HOOKLINE LUA_HOOKRET LUA_HOOKTAILCALL LUAL_BUFFERSIZE LUA_MASKCALL LUA_MASKCOUNT LUA_MASKLINE LUA_MASKRET LUA_MAXINTEGER LUA_MININTEGER LUA_MINSTACK LUA_MULTRET LUA_NOREF LUA_OK LUA_OPADD LUA_OPBAND LUA_OPBNOT LUA_OPBOR LUA_OPBXOR LUA_OPDIV LUA_OPEQ LUA_OPIDIV LUA_OPLE LUA_OPLT LUA_OPMOD LUA_OPMUL LUA_OPPOW LUA_OPSHL LUA_OPSHR LUA_OPSUB LUA_OPUNM LUA_REFNIL LUA_REGISTRYINDEX LUA_RIDX_GLOBALS LUA_RIDX_MAINTHREAD LUA_TBOOLEAN LUA_TFUNCTION LUA_TLIGHTUSERDATA LUA_TNIL LUA_TNONE LUA_TNUMBER LUA_TSTRING LUA_TTABLE LUA_TTHREAD LUA_TUSERDATA LUA_USE_APICHECK LUA_YIELD","title":"auxiliary library"},{"location":"docs/node-redis/_index/","text":"node-redis \u662f Node.js \u7684\u4e00\u4e2a\u73b0\u4ee3\u7684\uff0c\u9ad8\u6027\u80fd Redis \u5ba2\u6237\u7aef,\u5185\u7f6e\u652f\u6301 Redis 6.2 \u547d\u4ee4\u548c\u6a21\u5757\uff0c\u5305\u62ec reresearch \u548c RedisJSON \u3002 \u5b89\u88c5 Bash npm install redis \u65b0\u7684\u63a5\u53e3\u5f88\u5e72\u51c0\u5f88\u9177\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u73b0\u6709\u7684\u4ee3\u7801\u5e93\uff0c\u4f60\u4f1a\u60f3\u8981\u9605\u8bfb \u8fc1\u79fb\u6307\u5357 \u3002 \u4f7f\u7528 \u57fa\u672c\u793a\u4f8b TypeScript import { createClient } from \"redis\" ; ( async () => { const client = createClient (); client . on ( \"error\" , ( err ) => console . log ( \"Redis Client Error\" , err )); await client . connect (); await client . set ( \"key\" , \"value\" ); const value = await client . get ( \"key\" ); })(); \u4e0a\u9762\u7684\u4ee3\u7801\u8fde\u63a5\u5230\u7aef\u53e3 6379 \u4e0a\u7684\u672c\u5730\u4e3b\u673a\u3002 \u8fde\u63a5\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u4e3b\u673a\u6216\u7aef\u53e3\uff0c\u4f7f\u7528\u683c\u5f0f\u4e3a redis[s]://[[username][:password]@][host][:port][/db-number] \u7684\u8fde\u63a5\u5b57\u7b26\u4e32: TypeScript createClient ({ url : \"redis://alice:foobared@awesome.redis.server:6380\" }); \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u79bb\u6563\u53c2\u6570\u3001UNIX \u5957\u63a5\u5b57\u751a\u81f3 TLS \u8fdb\u884c\u8fde\u63a5\u3002 \u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u5ba2\u6237\u7aef\u914d\u7f6e\u6307\u5357 . Redis \u547d\u4ee4 \u5185\u7f6e\u652f\u6301\u6240\u6709\u7684 \u5f00\u7bb1\u5373\u7528\u7684 Redis \u547d\u4ee4 . \u4ed6\u4eec\u4f7f\u7528\u539f\u59cb\u7684 Redis \u547d\u4ee4\u540d( HSET , HGETALL , \u7b49)\u548c\u4e00\u4e2a\u66f4\u53cb\u597d\u7684\u9a7c\u5f0f\u5927\u5c0f\u5199\u7248\u672c( hSet , hGetAll , \u7b49): TypeScript // raw Redis commands await client . HSET ( \"key\" , \"field\" , \"value\" ); await client . HGETALL ( \"key\" ); // friendly JavaScript commands await client . hSet ( \"key\" , \"field\" , \"value\" ); await client . hGetAll ( \"key\" ); \u547d\u4ee4\u7684\u4fee\u9970\u7b26\u662f\u4f7f\u7528 JavaScript \u5bf9\u8c61\u6307\u5b9a\u7684: TypeScript await client . set ( \"key\" , \"value\" , { EX : 10 , NX : true }); \u56de\u590d\u5c06\u88ab\u8f6c\u6362\u6210\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784: TypeScript await client . hGetAll ( \"key\" ); // { field1: 'value1', field2: 'value2' } await client . hVals ( \"key\" ); // ['value1', 'value2'] \u4e0d\u652f\u6301\u7684 Redis \u547d\u4ee4 \u5982\u679c\u4f60\u60f3\u8fd0\u884c\u547d\u4ee4\u548c/\u6216\u4f7f\u7528\u8282\u70b9 Redis \u4e0d\u77e5\u9053\u7684\u53c2\u6570(\u8fd8!)\u4f7f\u7528 sendCommand : TypeScript await client . sendCommand ([ \"SET\" , \"key\" , \"value\" , \"NX\" ]); // 'OK' await client . sendCommand ([ \"HGETALL\" , \"key\" ]); // ['key1', 'field1', 'key2', 'field2'] \u4e8b\u52a1 (Multi/Exec) \u901a\u8fc7\u8c03\u7528 .multi() \u542f\u52a8 \u4e8b\u52a1 , \u7136\u540e\u94fe\u63a5\u4f60\u7684\u547d\u4ee4. \u5f53\u60a8\u5b8c\u6210\u65f6\uff0c\u8c03\u7528 .exec() \uff0c\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u7684\u6570\u7ec4: TypeScript await client . set ( \"another-key\" , \"another-value\" ); const [ setKeyReply , otherKeyValue ] = await client . multi () . set ( \"key\" , \"value\" ) . get ( \"another-key\" ) . exec (); // ['OK', 'another-value'] \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 .watch() \u6765 \u67e5\u770b \u952e\u3002 \u5982\u679c\u4efb\u4f55\u88ab\u76d1\u89c6\u7684\u952e\u53d1\u751f\u53d8\u5316\uff0c\u60a8\u7684\u4e8b\u52a1\u5c06\u4e2d\u6b62\u3002 \u8981\u6df1\u5165\u4e86\u89e3\u4e8b\u52a1\uff0c\u8bf7\u67e5\u770b \u9694\u79bb\u6267\u884c\u6307\u5357 . \u963b\u585e\u7684\u547d\u4ee4 \u901a\u8fc7\u6307\u5b9a isolated \u9009\u9879\uff0c\u53ef\u4ee5\u5728\u65b0\u8fde\u63a5\u4e0a\u8fd0\u884c\u4efb\u4f55\u547d\u4ee4\u3002 \u5f53\u547d\u4ee4\u7684 Promise \u5b8c\u6210\u65f6\uff0c\u65b0\u521b\u5efa\u7684\u8fde\u63a5\u5c06\u5173\u95ed\u3002 \u8fd9\u79cd\u6a21\u5f0f\u5c24\u5176\u9002\u7528\u4e8e\u963b\u585e\u547d\u4ee4\uff0c\u4f8b\u5982 BLPOP \u548c BLMOVE : TypeScript import { commandOptions } from \"redis\" ; const blPopPromise = client . blPop ( commandOptions ({ isolated : true }), \"key\" , 0 ); await client . lPush ( \"key\" , [ \"1\" , \"2\" ]); await blPopPromise ; // '2' \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u9694\u79bb\u6267\u884c\u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b \u6307\u5357 . Pub/Sub \u8ba2\u9605\u901a\u9053\u9700\u8981\u4e13\u7528\u7684\u72ec\u7acb\u8fde\u63a5\u3002 \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7 .duplicate() \u5f97\u5230\u4e00\u4e2a\u73b0\u6709\u7684 Redis \u8fde\u63a5\u3002 TypeScript const subscriber = client . duplicate (); await subscriber . connect (); \u4e00\u65e6\u4f60\u6709\u4e86\u4e00\u4e2a\uff0c\u53ea\u9700\u6309\u9700\u8981\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605: TypeScript await subscriber . subscribe ( \"channel\" , ( message ) => { console . log ( message ); // 'message' }); await subscriber . pSubscribe ( \"channe*\" , ( message , channel ) => { console . log ( message , channel ); // 'message', 'channel' }); await subscriber . unsubscribe ( \"channel\" ); await subscriber . pUnsubscribe ( \"channe*\" ); \u5728\u901a\u9053\u4e0a\u53d1\u5e03\u6d88\u606f: TypeScript await publisher . publish ( \"channel\" , \"message\" ); \u5b83\u8fd8\u652f\u6301\u7f13\u51b2\u533a: TypeScript await subscriber . subscribe ( \"channel\" , ( message ) => { console . log ( message ); // <Buffer 6d 65 73 73 61 67 65> }, true ); await subscriber . pSubscribe ( \"channe*\" , ( message , channel ) => { console . log ( message , channel ); // <Buffer 6d 65 73 73 61 67 65>, <Buffer 63 68 61 6e 6e 65 6c> }, true ); \u626b\u63cf\u8fed\u4ee3\u5668 SCAN \u7ed3\u679c\u53ef\u4ee5\u4f7f\u7528 \u5f02\u6b65\u8fed\u4ee3\u5668 \u5faa\u73af: TypeScript for await ( const key of client . scanIterator ()) { // use the key! await client . get ( key ); } \u8fd9\u4e5f\u9002\u7528\u4e8e HSCAN \uff0c SSCAN \u548c ZSCAN : TypeScript for await ( const { field , value } of client . hScanIterator ( \"hash\" )) { } for await ( const member of client . sScanIterator ( \"set\" )) { } for await ( const { score , value } of client . zScanIterator ( \"sorted-set\" )) { } \u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u6765\u8986\u76d6\u9ed8\u8ba4\u9009\u9879: TypeScript client . scanIterator ({ TYPE : \"string\" , // `SCAN` only MATCH : \"patter*\" , COUNT : 100 , }); Lua \u811a\u672c \u4f7f\u7528 Lua \u811a\u672c \u5b9a\u4e49\u65b0\u7684\u529f\u80fd\u5728 Redis \u670d\u52a1\u5668\u6267\u884c TypeScript import { createClient , defineScript } from \"redis\" ; ( async () => { const client = createClient ({ scripts : { add : defineScript ({ NUMBER_OF_KEYS : 1 , SCRIPT : 'local val = redis.pcall(\"GET\", KEYS[1]);' + \"return val + ARGV[1];\" , transformArguments ( key : string , toAdd : number ) : Array < string > { return [ key , toAdd . toString ()]; }, transformReply ( reply : number ) : number { return reply ; }, }), }, }); await client . connect (); await client . set ( \"key\" , \"1\" ); await client . add ( \"key\" , 2 ); // 3 })(); \u65ad\u5f00 There are two functions that disconnect a client from the Redis server. In most scenarios you should use .quit() to ensure that pending commands are sent to Redis before closing a connection. .QUIT() / .quit() Gracefully close a client's connection to Redis, by sending the QUIT command to the server. Before quitting, the client executes any remaining commands in its queue, and will receive replies from Redis for each of them. TypeScript const [ ping , get , quit ] = await Promise . all ([ client . ping (), client . get ( \"key\" ), client . quit (), ]); // ['PONG', null, 'OK'] try { await client . get ( \"key\" ); } catch ( err ) { // ClosedClient Error } .disconnect() Forcibly close a client's connection to Redis immediately. Calling disconnect will not send further pending commands to the Redis server, or wait for or parse outstanding responses. TypeScript await client . disconnect (); \u81ea\u52a8\u6d41\u6c34\u7ebf Node Redis will automatically pipeline requests that are made during the same \"tick\". TypeScript client . set ( \"Tm9kZSBSZWRpcw==\" , \"users:1\" ); client . sAdd ( \"users:1:tokens\" , \"Tm9kZSBSZWRpcw==\" ); Of course, if you don't do something with your Promises you're certain to get unhandled Promise exceptions . To take advantage of auto-pipelining and handle your Promises, use Promise.all() . TypeScript await Promise . all ([ client . set ( \"Tm9kZSBSZWRpcw==\" , \"users:1\" ), client . sAdd ( \"users:1:tokens\" , \"Tm9kZSBSZWRpcw==\" ), ]); \u805a\u7c7b Check out the Clustering Guide when using Node Redis to connect to a Redis Cluster. \u4e8b\u4ef6 The Node Redis client class is an Nodejs EventEmitter and it emits an event each time the network status changes: Event name Scenes Parameters connect The client is initiating a connection to the server. undefined ready The client successfully initiated the connection to the server. undefined end The client disconnected the connection to the server via .quit() or .disconnect() . undefined error When a network error has occurred, such as unable to connect to the server or the connection closed unexpectedly. The error object, such as SocketClosedUnexpectedlyError: Socket closed unexpectedly or Error: connect ECONNREFUSED [IP]:[PORT] reconnecting The client is trying to reconnect to the server. undefined The client will not emit any other events beyond those listed above. \u652f\u6301 Redis \u7248\u672c Node Redis is supported with the following versions of Redis: Version Supported 6.2.z 6.0.z 5.y.z < 5.0 Node Redis should work with older versions of Redis, but it is not fully tested and we cannot offer support. \u5305 Name Description redis @node-redis/client @node-redis/json Redis JSON commands @node-redis/search Redis Search commands \u8d21\u732e If you'd like to contribute, check out the contributing guide . Thank you to all the people who already contributed to Node Redis! \u8bc1\u4e66 This repository is licensed under the \"MIT\" license. See LICENSE .","title":"Node Redis"},{"location":"docs/node-redis/_index/#_1","text":"Bash npm install redis \u65b0\u7684\u63a5\u53e3\u5f88\u5e72\u51c0\u5f88\u9177\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u73b0\u6709\u7684\u4ee3\u7801\u5e93\uff0c\u4f60\u4f1a\u60f3\u8981\u9605\u8bfb \u8fc1\u79fb\u6307\u5357 \u3002","title":"\u5b89\u88c5"},{"location":"docs/node-redis/_index/#_2","text":"","title":"\u4f7f\u7528"},{"location":"docs/node-redis/_index/#_3","text":"TypeScript import { createClient } from \"redis\" ; ( async () => { const client = createClient (); client . on ( \"error\" , ( err ) => console . log ( \"Redis Client Error\" , err )); await client . connect (); await client . set ( \"key\" , \"value\" ); const value = await client . get ( \"key\" ); })(); \u4e0a\u9762\u7684\u4ee3\u7801\u8fde\u63a5\u5230\u7aef\u53e3 6379 \u4e0a\u7684\u672c\u5730\u4e3b\u673a\u3002 \u8fde\u63a5\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u4e3b\u673a\u6216\u7aef\u53e3\uff0c\u4f7f\u7528\u683c\u5f0f\u4e3a redis[s]://[[username][:password]@][host][:port][/db-number] \u7684\u8fde\u63a5\u5b57\u7b26\u4e32: TypeScript createClient ({ url : \"redis://alice:foobared@awesome.redis.server:6380\" }); \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u79bb\u6563\u53c2\u6570\u3001UNIX \u5957\u63a5\u5b57\u751a\u81f3 TLS \u8fdb\u884c\u8fde\u63a5\u3002 \u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u5ba2\u6237\u7aef\u914d\u7f6e\u6307\u5357 .","title":"\u57fa\u672c\u793a\u4f8b"},{"location":"docs/node-redis/_index/#redis","text":"\u5185\u7f6e\u652f\u6301\u6240\u6709\u7684 \u5f00\u7bb1\u5373\u7528\u7684 Redis \u547d\u4ee4 . \u4ed6\u4eec\u4f7f\u7528\u539f\u59cb\u7684 Redis \u547d\u4ee4\u540d( HSET , HGETALL , \u7b49)\u548c\u4e00\u4e2a\u66f4\u53cb\u597d\u7684\u9a7c\u5f0f\u5927\u5c0f\u5199\u7248\u672c( hSet , hGetAll , \u7b49): TypeScript // raw Redis commands await client . HSET ( \"key\" , \"field\" , \"value\" ); await client . HGETALL ( \"key\" ); // friendly JavaScript commands await client . hSet ( \"key\" , \"field\" , \"value\" ); await client . hGetAll ( \"key\" ); \u547d\u4ee4\u7684\u4fee\u9970\u7b26\u662f\u4f7f\u7528 JavaScript \u5bf9\u8c61\u6307\u5b9a\u7684: TypeScript await client . set ( \"key\" , \"value\" , { EX : 10 , NX : true }); \u56de\u590d\u5c06\u88ab\u8f6c\u6362\u6210\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784: TypeScript await client . hGetAll ( \"key\" ); // { field1: 'value1', field2: 'value2' } await client . hVals ( \"key\" ); // ['value1', 'value2']","title":"Redis \u547d\u4ee4"},{"location":"docs/node-redis/_index/#redis_1","text":"\u5982\u679c\u4f60\u60f3\u8fd0\u884c\u547d\u4ee4\u548c/\u6216\u4f7f\u7528\u8282\u70b9 Redis \u4e0d\u77e5\u9053\u7684\u53c2\u6570(\u8fd8!)\u4f7f\u7528 sendCommand : TypeScript await client . sendCommand ([ \"SET\" , \"key\" , \"value\" , \"NX\" ]); // 'OK' await client . sendCommand ([ \"HGETALL\" , \"key\" ]); // ['key1', 'field1', 'key2', 'field2']","title":"\u4e0d\u652f\u6301\u7684 Redis \u547d\u4ee4"},{"location":"docs/node-redis/_index/#multiexec","text":"\u901a\u8fc7\u8c03\u7528 .multi() \u542f\u52a8 \u4e8b\u52a1 , \u7136\u540e\u94fe\u63a5\u4f60\u7684\u547d\u4ee4. \u5f53\u60a8\u5b8c\u6210\u65f6\uff0c\u8c03\u7528 .exec() \uff0c\u60a8\u5c06\u5f97\u5230\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u7684\u6570\u7ec4: TypeScript await client . set ( \"another-key\" , \"another-value\" ); const [ setKeyReply , otherKeyValue ] = await client . multi () . set ( \"key\" , \"value\" ) . get ( \"another-key\" ) . exec (); // ['OK', 'another-value'] \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 .watch() \u6765 \u67e5\u770b \u952e\u3002 \u5982\u679c\u4efb\u4f55\u88ab\u76d1\u89c6\u7684\u952e\u53d1\u751f\u53d8\u5316\uff0c\u60a8\u7684\u4e8b\u52a1\u5c06\u4e2d\u6b62\u3002 \u8981\u6df1\u5165\u4e86\u89e3\u4e8b\u52a1\uff0c\u8bf7\u67e5\u770b \u9694\u79bb\u6267\u884c\u6307\u5357 .","title":"\u4e8b\u52a1 (Multi/Exec)"},{"location":"docs/node-redis/_index/#_4","text":"\u901a\u8fc7\u6307\u5b9a isolated \u9009\u9879\uff0c\u53ef\u4ee5\u5728\u65b0\u8fde\u63a5\u4e0a\u8fd0\u884c\u4efb\u4f55\u547d\u4ee4\u3002 \u5f53\u547d\u4ee4\u7684 Promise \u5b8c\u6210\u65f6\uff0c\u65b0\u521b\u5efa\u7684\u8fde\u63a5\u5c06\u5173\u95ed\u3002 \u8fd9\u79cd\u6a21\u5f0f\u5c24\u5176\u9002\u7528\u4e8e\u963b\u585e\u547d\u4ee4\uff0c\u4f8b\u5982 BLPOP \u548c BLMOVE : TypeScript import { commandOptions } from \"redis\" ; const blPopPromise = client . blPop ( commandOptions ({ isolated : true }), \"key\" , 0 ); await client . lPush ( \"key\" , [ \"1\" , \"2\" ]); await blPopPromise ; // '2' \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u9694\u79bb\u6267\u884c\u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b \u6307\u5357 .","title":"\u963b\u585e\u7684\u547d\u4ee4"},{"location":"docs/node-redis/_index/#pubsub","text":"\u8ba2\u9605\u901a\u9053\u9700\u8981\u4e13\u7528\u7684\u72ec\u7acb\u8fde\u63a5\u3002 \u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7 .duplicate() \u5f97\u5230\u4e00\u4e2a\u73b0\u6709\u7684 Redis \u8fde\u63a5\u3002 TypeScript const subscriber = client . duplicate (); await subscriber . connect (); \u4e00\u65e6\u4f60\u6709\u4e86\u4e00\u4e2a\uff0c\u53ea\u9700\u6309\u9700\u8981\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605: TypeScript await subscriber . subscribe ( \"channel\" , ( message ) => { console . log ( message ); // 'message' }); await subscriber . pSubscribe ( \"channe*\" , ( message , channel ) => { console . log ( message , channel ); // 'message', 'channel' }); await subscriber . unsubscribe ( \"channel\" ); await subscriber . pUnsubscribe ( \"channe*\" ); \u5728\u901a\u9053\u4e0a\u53d1\u5e03\u6d88\u606f: TypeScript await publisher . publish ( \"channel\" , \"message\" ); \u5b83\u8fd8\u652f\u6301\u7f13\u51b2\u533a: TypeScript await subscriber . subscribe ( \"channel\" , ( message ) => { console . log ( message ); // <Buffer 6d 65 73 73 61 67 65> }, true ); await subscriber . pSubscribe ( \"channe*\" , ( message , channel ) => { console . log ( message , channel ); // <Buffer 6d 65 73 73 61 67 65>, <Buffer 63 68 61 6e 6e 65 6c> }, true );","title":"Pub/Sub"},{"location":"docs/node-redis/_index/#_5","text":"SCAN \u7ed3\u679c\u53ef\u4ee5\u4f7f\u7528 \u5f02\u6b65\u8fed\u4ee3\u5668 \u5faa\u73af: TypeScript for await ( const key of client . scanIterator ()) { // use the key! await client . get ( key ); } \u8fd9\u4e5f\u9002\u7528\u4e8e HSCAN \uff0c SSCAN \u548c ZSCAN : TypeScript for await ( const { field , value } of client . hScanIterator ( \"hash\" )) { } for await ( const member of client . sScanIterator ( \"set\" )) { } for await ( const { score , value } of client . zScanIterator ( \"sorted-set\" )) { } \u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u6765\u8986\u76d6\u9ed8\u8ba4\u9009\u9879: TypeScript client . scanIterator ({ TYPE : \"string\" , // `SCAN` only MATCH : \"patter*\" , COUNT : 100 , });","title":"\u626b\u63cf\u8fed\u4ee3\u5668"},{"location":"docs/node-redis/_index/#lua","text":"\u4f7f\u7528 Lua \u811a\u672c \u5b9a\u4e49\u65b0\u7684\u529f\u80fd\u5728 Redis \u670d\u52a1\u5668\u6267\u884c TypeScript import { createClient , defineScript } from \"redis\" ; ( async () => { const client = createClient ({ scripts : { add : defineScript ({ NUMBER_OF_KEYS : 1 , SCRIPT : 'local val = redis.pcall(\"GET\", KEYS[1]);' + \"return val + ARGV[1];\" , transformArguments ( key : string , toAdd : number ) : Array < string > { return [ key , toAdd . toString ()]; }, transformReply ( reply : number ) : number { return reply ; }, }), }, }); await client . connect (); await client . set ( \"key\" , \"1\" ); await client . add ( \"key\" , 2 ); // 3 })();","title":"Lua \u811a\u672c"},{"location":"docs/node-redis/_index/#_6","text":"There are two functions that disconnect a client from the Redis server. In most scenarios you should use .quit() to ensure that pending commands are sent to Redis before closing a connection.","title":"\u65ad\u5f00"},{"location":"docs/node-redis/_index/#quitquit","text":"Gracefully close a client's connection to Redis, by sending the QUIT command to the server. Before quitting, the client executes any remaining commands in its queue, and will receive replies from Redis for each of them. TypeScript const [ ping , get , quit ] = await Promise . all ([ client . ping (), client . get ( \"key\" ), client . quit (), ]); // ['PONG', null, 'OK'] try { await client . get ( \"key\" ); } catch ( err ) { // ClosedClient Error }","title":".QUIT()/.quit()"},{"location":"docs/node-redis/_index/#disconnect","text":"Forcibly close a client's connection to Redis immediately. Calling disconnect will not send further pending commands to the Redis server, or wait for or parse outstanding responses. TypeScript await client . disconnect ();","title":".disconnect()"},{"location":"docs/node-redis/_index/#_7","text":"Node Redis will automatically pipeline requests that are made during the same \"tick\". TypeScript client . set ( \"Tm9kZSBSZWRpcw==\" , \"users:1\" ); client . sAdd ( \"users:1:tokens\" , \"Tm9kZSBSZWRpcw==\" ); Of course, if you don't do something with your Promises you're certain to get unhandled Promise exceptions . To take advantage of auto-pipelining and handle your Promises, use Promise.all() . TypeScript await Promise . all ([ client . set ( \"Tm9kZSBSZWRpcw==\" , \"users:1\" ), client . sAdd ( \"users:1:tokens\" , \"Tm9kZSBSZWRpcw==\" ), ]);","title":"\u81ea\u52a8\u6d41\u6c34\u7ebf"},{"location":"docs/node-redis/_index/#_8","text":"Check out the Clustering Guide when using Node Redis to connect to a Redis Cluster.","title":"\u805a\u7c7b"},{"location":"docs/node-redis/_index/#_9","text":"The Node Redis client class is an Nodejs EventEmitter and it emits an event each time the network status changes: Event name Scenes Parameters connect The client is initiating a connection to the server. undefined ready The client successfully initiated the connection to the server. undefined end The client disconnected the connection to the server via .quit() or .disconnect() . undefined error When a network error has occurred, such as unable to connect to the server or the connection closed unexpectedly. The error object, such as SocketClosedUnexpectedlyError: Socket closed unexpectedly or Error: connect ECONNREFUSED [IP]:[PORT] reconnecting The client is trying to reconnect to the server. undefined The client will not emit any other events beyond those listed above.","title":"\u4e8b\u4ef6"},{"location":"docs/node-redis/_index/#redis_2","text":"Node Redis is supported with the following versions of Redis: Version Supported 6.2.z 6.0.z 5.y.z < 5.0 Node Redis should work with older versions of Redis, but it is not fully tested and we cannot offer support.","title":"\u652f\u6301 Redis \u7248\u672c"},{"location":"docs/node-redis/_index/#_10","text":"Name Description redis @node-redis/client @node-redis/json Redis JSON commands @node-redis/search Redis Search commands","title":"\u5305"},{"location":"docs/node-redis/_index/#_11","text":"If you'd like to contribute, check out the contributing guide . Thank you to all the people who already contributed to Node Redis!","title":"\u8d21\u732e"},{"location":"docs/node-redis/_index/#_12","text":"This repository is licensed under the \"MIT\" license. See LICENSE .","title":"\u8bc1\u4e66"},{"location":"docs/redlock/_index/","text":"","title":"Redis \u9501"},{"location":"docs/redlock/node-redlock/","text":"Redlock \u8fd9\u662f\u5206\u5e03\u5f0f redis \u9501\u7684 redlock \u7b97\u6cd5\u7684 node.js \u5b9e\u73b0\u3002 \u5b83\u5728\u5355 redis \u548c\u591a redis \u73af\u5883\u4e2d\u90fd\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u4fdd\u8bc1\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u591a\u4e2a\u72ec\u7acb\u7684 redis \u5b9e\u4f8b\u6216\u96c6\u7fa4\u63d0\u4f9b\u5bb9\u9519\u6027\u3002 \u9ad8\u53ef\u7528\u6027\u7684\u5efa\u8bae Use at least 3 independent servers or clusters Use an odd number of independent redis servers for most installations Use an odd number of independent redis clusters for massive installations When possible, distribute redis nodes across different physical machines \u4f7f\u7528\u96c6\u7fa4/\u54e8\u5175 Please make sure to use a client with built-in cluster support, such as ioredis . It is completely possible to use a single redis cluster or sentinal configuration by passing one preconfigured client to redlock. While you do gain high availability and vastly increased throughput under this scheme, the failure modes are a bit different, and it becomes theoretically possible that a lock is acquired twice: Assume you are using eventually-consistent redis replication, and you acquire a lock for a resource. Immediately after acquiring your lock, the redis master for that shard crashes. Redis does its thing and fails over to the slave which hasn't yet synced your lock. If another process attempts to acquire a lock for the same resource, it will succeed! This is why redlock allows you to specify multiple independent nodes/clusters: by requiring consensus between them, we can safely take out or fail-over a minority of nodes without invalidating active locks. To learn more about the the algorithm, check out the redis distlock page . \u6211\u600e\u4e48\u68c0\u67e5\u4e1c\u897f\u662f\u5426\u4e0a\u9501\u4e86? Redlock cannot tell you with certainty if a resource is currently locked. For example, if you are on the smaller side of a network partition you will fail to acquire a lock, but you don't know if the lock exists on the other side; all you know is that you can't guarantee exclusivity on yours. That said, for many tasks it's sufficient to attempt a lock with retryCount=0 , and treat a failure as the resource being \"locked\" or (more correctly) \"unavailable\", With retryCount=-1 there will be unlimited retries until the lock is aquired. \u5b89\u88c5 Bash npm install --save redlock \u914d\u7f6e Redlock can use node redis , ioredis or any other compatible redis library to keep its client connections. A redlock object is instantiated with an array of at least one redis client and an optional options object. Properties of the Redlock object should NOT be changed after it is first used, as doing so could have unintended consequences for live locks. JavaScript var client1 = require ( \"redis\" ). createClient ( 6379 , \"redis1.example.com\" ); var client2 = require ( \"redis\" ). createClient ( 6379 , \"redis2.example.com\" ); var client3 = require ( \"redis\" ). createClient ( 6379 , \"redis3.example.com\" ); var Redlock = require ( \"redlock\" ); var redlock = new Redlock ( // you should have one client for each independent redis node // or cluster [ client1 , client2 , client3 ], { // the expected clock drift; for more details // see http://redis.io/topics/distlock driftFactor : 0.01 , // multiplied by lock ttl to determine drift time // the max number of times Redlock will attempt // to lock a resource before erroring retryCount : 10 , // the time in ms between attempts retryDelay : 200 , // time in ms // the max time in ms randomly added to retries // to improve performance under high contention // see https://www.awsarchitectureblog.com/2015/03/backoff.html retryJitter : 200 , // time in ms } ); \u9519\u8bef\u5904\u7406 Because redlock is designed for high availability, it does not care if a minority of redis instances/clusters fail at an operation. If you want to write logs or take another action when a redis client fails, you can listen for the clientError event: JavaScript // ... redlock . on ( \"clientError\" , function ( err ) { console . error ( \"A redis error has occurred:\" , err ); }); // ... \u4f7f\u7528(\u627f\u8bfa\u98ce\u683c) \u9501\u5b9a\u4e0e\u89e3\u9501 JavaScript // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked in milliseconds, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; redlock . lock ( resource , ttl ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); }); \u9501\u5b9a\u548c\u6269\u5c55 JavaScript redlock . lock ( \"locks:account:322456\" , 1000 ). then ( function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); }); }); \u4f7f\u7528(\u788e\u6e23\u673a\u98ce\u683c) \u9501\u5b9a\u4e0e\u89e3\u9501 JavaScript var using = require ( \"bluebird\" ). using ; // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; // if we weren't able to reach redis, your lock will eventually // expire, but you probably want to do something like log that // an error occurred; if you don't pass a handler, this error // will be ignored function unlockErrorHandler ( err ) { console . error ( err ); } using ( redlock . disposer ( resource , ttl , unlockErrorHandler ), function ( lock ) { // ...do something here... }); // <-- unlock is automatically handled by bluebird \u9501\u5b9a\u548c\u6269\u5c55 JavaScript using ( redlock . disposer ( \"locks:account:322456\" , 1000 , unlockErrorHandler ), function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( extended ) { // Note that redlock modifies the original lock, // so the vars `lock` and `extended` point to the // exact same object // ...do something here... }); } ); // <-- unlock is automatically handled by bluebird \u4f7f\u7528(\u56de\u8c03\u98ce\u683c) \u9501\u5b9a\u4e0e\u89e3\u9501 JavaScript // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; redlock . lock ( resource , ttl , function ( err , lock ) { // we failed to lock the resource if ( err ) { // ... } // we have the lock else { // ...do something here... // unlock your resource when you are done lock . unlock ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); } }); \u9501\u5b9a\u548c\u6269\u5c55 JavaScript redlock . lock ( \"locks:account:322456\" , 1000 , function ( err , lock ) { // we failed to lock the resource if ( err ) { // ... } // we have the lock else { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called lock . extend ( 1000 , function ( err , lock ) { // we failed to extend the lock on the resource if ( err ) { // ... } // ...do something here... // unlock your resource when you are done lock . unlock (); }); } }); \u9501\u5b9a\u591a\u4e2a\u8d44\u6e90 Multiple resources can be locked by providing an Array of strings to Redlock.prototype.lock call. Internally a single attempt is made to redis by evaluating script which executes lock statements. For more details about atomicity of scripts please see redis reference . There are however some limitations of which you need to be aware of: When requesting a lock it will fail if any of requested resources is already set If lock attempt fails for any resource (due to whatever reason) an attempt for removing already set resources is made. However there are no guarantees that it will succeed ( redis doesn't provide them) Releasing lock will fail if any of requested resources is missing Extending lock will fail if any of requested resources is missing Example: JavaScript redlock . lock ( [ \"locks:account:322456\" , \"locks:account:322457\" , \"locks:account:322458\" ], 1000 ) . then ( function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); }); }); API \u6587\u6863 Redlock.prototype.lock(resource, ttl, ?callback) => Promise<Lock> resource (string or string[]) resource(s) to be locked ttl (number) time in ms until the lock expires callback (function) callback returning: err (Error) lock (Lock) Redlock.prototype.unlock(lock, ?callback) => Promise lock (Lock) lock to be released callback (function) callback returning: err (Error) Redlock.prototype.extend(lock, ttl, ?callback) => Promise<Lock> lock (Lock) lock to be extended ttl (number) time in ms to extend the lock's expiration callback (function) callback returning: err (Error) lock (Lock) Redlock.prototype.disposer(resource, ttl, ?unlockErrorHandler) resource (string or string[]) resource(s) to be locked ttl (number) time in ms to extend the lock's expiration callback (function) error handler called with: err (Error) Redlock.prototype.quit(?callback) => Promise<*[]> callback (function) error handler called with: err (Error) *[] results of calling .quit() on each client Lock.prototype.unlock(?callback) => Promise callback (function) callback returning: err (Error) Lock.prototype.extend(ttl, ?callback) => Promise<Lock> ttl (number) time from now in ms to set as the lock's new expiration callback (function) callback returning: err (Error) lock (Lock)","title":"Node Redlock"},{"location":"docs/redlock/node-redlock/#redlock","text":"\u8fd9\u662f\u5206\u5e03\u5f0f redis \u9501\u7684 redlock \u7b97\u6cd5\u7684 node.js \u5b9e\u73b0\u3002 \u5b83\u5728\u5355 redis \u548c\u591a redis \u73af\u5883\u4e2d\u90fd\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u4fdd\u8bc1\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u591a\u4e2a\u72ec\u7acb\u7684 redis \u5b9e\u4f8b\u6216\u96c6\u7fa4\u63d0\u4f9b\u5bb9\u9519\u6027\u3002","title":"Redlock"},{"location":"docs/redlock/node-redlock/#_1","text":"Use at least 3 independent servers or clusters Use an odd number of independent redis servers for most installations Use an odd number of independent redis clusters for massive installations When possible, distribute redis nodes across different physical machines","title":"\u9ad8\u53ef\u7528\u6027\u7684\u5efa\u8bae"},{"location":"docs/redlock/node-redlock/#_2","text":"Please make sure to use a client with built-in cluster support, such as ioredis . It is completely possible to use a single redis cluster or sentinal configuration by passing one preconfigured client to redlock. While you do gain high availability and vastly increased throughput under this scheme, the failure modes are a bit different, and it becomes theoretically possible that a lock is acquired twice: Assume you are using eventually-consistent redis replication, and you acquire a lock for a resource. Immediately after acquiring your lock, the redis master for that shard crashes. Redis does its thing and fails over to the slave which hasn't yet synced your lock. If another process attempts to acquire a lock for the same resource, it will succeed! This is why redlock allows you to specify multiple independent nodes/clusters: by requiring consensus between them, we can safely take out or fail-over a minority of nodes without invalidating active locks. To learn more about the the algorithm, check out the redis distlock page .","title":"\u4f7f\u7528\u96c6\u7fa4/\u54e8\u5175"},{"location":"docs/redlock/node-redlock/#_3","text":"Redlock cannot tell you with certainty if a resource is currently locked. For example, if you are on the smaller side of a network partition you will fail to acquire a lock, but you don't know if the lock exists on the other side; all you know is that you can't guarantee exclusivity on yours. That said, for many tasks it's sufficient to attempt a lock with retryCount=0 , and treat a failure as the resource being \"locked\" or (more correctly) \"unavailable\", With retryCount=-1 there will be unlimited retries until the lock is aquired.","title":"\u6211\u600e\u4e48\u68c0\u67e5\u4e1c\u897f\u662f\u5426\u4e0a\u9501\u4e86?"},{"location":"docs/redlock/node-redlock/#_4","text":"Bash npm install --save redlock","title":"\u5b89\u88c5"},{"location":"docs/redlock/node-redlock/#_5","text":"Redlock can use node redis , ioredis or any other compatible redis library to keep its client connections. A redlock object is instantiated with an array of at least one redis client and an optional options object. Properties of the Redlock object should NOT be changed after it is first used, as doing so could have unintended consequences for live locks. JavaScript var client1 = require ( \"redis\" ). createClient ( 6379 , \"redis1.example.com\" ); var client2 = require ( \"redis\" ). createClient ( 6379 , \"redis2.example.com\" ); var client3 = require ( \"redis\" ). createClient ( 6379 , \"redis3.example.com\" ); var Redlock = require ( \"redlock\" ); var redlock = new Redlock ( // you should have one client for each independent redis node // or cluster [ client1 , client2 , client3 ], { // the expected clock drift; for more details // see http://redis.io/topics/distlock driftFactor : 0.01 , // multiplied by lock ttl to determine drift time // the max number of times Redlock will attempt // to lock a resource before erroring retryCount : 10 , // the time in ms between attempts retryDelay : 200 , // time in ms // the max time in ms randomly added to retries // to improve performance under high contention // see https://www.awsarchitectureblog.com/2015/03/backoff.html retryJitter : 200 , // time in ms } );","title":"\u914d\u7f6e"},{"location":"docs/redlock/node-redlock/#_6","text":"Because redlock is designed for high availability, it does not care if a minority of redis instances/clusters fail at an operation. If you want to write logs or take another action when a redis client fails, you can listen for the clientError event: JavaScript // ... redlock . on ( \"clientError\" , function ( err ) { console . error ( \"A redis error has occurred:\" , err ); }); // ...","title":"\u9519\u8bef\u5904\u7406"},{"location":"docs/redlock/node-redlock/#_7","text":"","title":"\u4f7f\u7528(\u627f\u8bfa\u98ce\u683c)"},{"location":"docs/redlock/node-redlock/#_8","text":"JavaScript // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked in milliseconds, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; redlock . lock ( resource , ttl ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); });","title":"\u9501\u5b9a\u4e0e\u89e3\u9501"},{"location":"docs/redlock/node-redlock/#_9","text":"JavaScript redlock . lock ( \"locks:account:322456\" , 1000 ). then ( function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); }); });","title":"\u9501\u5b9a\u548c\u6269\u5c55"},{"location":"docs/redlock/node-redlock/#_10","text":"","title":"\u4f7f\u7528(\u788e\u6e23\u673a\u98ce\u683c)"},{"location":"docs/redlock/node-redlock/#_11","text":"JavaScript var using = require ( \"bluebird\" ). using ; // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; // if we weren't able to reach redis, your lock will eventually // expire, but you probably want to do something like log that // an error occurred; if you don't pass a handler, this error // will be ignored function unlockErrorHandler ( err ) { console . error ( err ); } using ( redlock . disposer ( resource , ttl , unlockErrorHandler ), function ( lock ) { // ...do something here... }); // <-- unlock is automatically handled by bluebird","title":"\u9501\u5b9a\u4e0e\u89e3\u9501"},{"location":"docs/redlock/node-redlock/#_12","text":"JavaScript using ( redlock . disposer ( \"locks:account:322456\" , 1000 , unlockErrorHandler ), function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( extended ) { // Note that redlock modifies the original lock, // so the vars `lock` and `extended` point to the // exact same object // ...do something here... }); } ); // <-- unlock is automatically handled by bluebird","title":"\u9501\u5b9a\u548c\u6269\u5c55"},{"location":"docs/redlock/node-redlock/#_13","text":"","title":"\u4f7f\u7528(\u56de\u8c03\u98ce\u683c)"},{"location":"docs/redlock/node-redlock/#_14","text":"JavaScript // the string identifier for the resource you want to lock var resource = \"locks:account:322456\" ; // the maximum amount of time you want the resource locked, // keeping in mind that you can extend the lock up until // the point when it expires var ttl = 1000 ; redlock . lock ( resource , ttl , function ( err , lock ) { // we failed to lock the resource if ( err ) { // ... } // we have the lock else { // ...do something here... // unlock your resource when you are done lock . unlock ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); } });","title":"\u9501\u5b9a\u4e0e\u89e3\u9501"},{"location":"docs/redlock/node-redlock/#_15","text":"JavaScript redlock . lock ( \"locks:account:322456\" , 1000 , function ( err , lock ) { // we failed to lock the resource if ( err ) { // ... } // we have the lock else { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called lock . extend ( 1000 , function ( err , lock ) { // we failed to extend the lock on the resource if ( err ) { // ... } // ...do something here... // unlock your resource when you are done lock . unlock (); }); } });","title":"\u9501\u5b9a\u548c\u6269\u5c55"},{"location":"docs/redlock/node-redlock/#_16","text":"Multiple resources can be locked by providing an Array of strings to Redlock.prototype.lock call. Internally a single attempt is made to redis by evaluating script which executes lock statements. For more details about atomicity of scripts please see redis reference . There are however some limitations of which you need to be aware of: When requesting a lock it will fail if any of requested resources is already set If lock attempt fails for any resource (due to whatever reason) an attempt for removing already set resources is made. However there are no guarantees that it will succeed ( redis doesn't provide them) Releasing lock will fail if any of requested resources is missing Extending lock will fail if any of requested resources is missing Example: JavaScript redlock . lock ( [ \"locks:account:322456\" , \"locks:account:322457\" , \"locks:account:322458\" ], 1000 ) . then ( function ( lock ) { // ...do something here... // if you need more time, you can continue to extend // the lock as long as you never let it expire // this will extend the lock so that it expires // approximitely 1s from when `extend` is called return lock . extend ( 1000 ). then ( function ( lock ) { // ...do something here... // unlock your resource when you are done return lock . unlock (). catch ( function ( err ) { // we weren't able to reach redis; your lock will eventually // expire, but you probably want to log this error console . error ( err ); }); }); });","title":"\u9501\u5b9a\u591a\u4e2a\u8d44\u6e90"},{"location":"docs/redlock/node-redlock/#api","text":"","title":"API \u6587\u6863"},{"location":"docs/redlock/node-redlock/#redlockprototypelockresource-ttl-callback-promiselock","text":"resource (string or string[]) resource(s) to be locked ttl (number) time in ms until the lock expires callback (function) callback returning: err (Error) lock (Lock)","title":"Redlock.prototype.lock(resource, ttl, ?callback) =&gt; Promise&lt;Lock&gt;"},{"location":"docs/redlock/node-redlock/#redlockprototypeunlocklock-callback-promise","text":"lock (Lock) lock to be released callback (function) callback returning: err (Error)","title":"Redlock.prototype.unlock(lock, ?callback) =&gt; Promise"},{"location":"docs/redlock/node-redlock/#redlockprototypeextendlock-ttl-callback-promiselock","text":"lock (Lock) lock to be extended ttl (number) time in ms to extend the lock's expiration callback (function) callback returning: err (Error) lock (Lock)","title":"Redlock.prototype.extend(lock, ttl, ?callback) =&gt; Promise&lt;Lock&gt;"},{"location":"docs/redlock/node-redlock/#redlockprototypedisposerresource-ttl-unlockerrorhandler","text":"resource (string or string[]) resource(s) to be locked ttl (number) time in ms to extend the lock's expiration callback (function) error handler called with: err (Error)","title":"Redlock.prototype.disposer(resource, ttl, ?unlockErrorHandler)"},{"location":"docs/redlock/node-redlock/#redlockprototypequitcallback-promise","text":"callback (function) error handler called with: err (Error) *[] results of calling .quit() on each client","title":"Redlock.prototype.quit(?callback) =&gt; Promise&lt;*[]&gt;"},{"location":"docs/redlock/node-redlock/#lockprototypeunlockcallback-promise","text":"callback (function) callback returning: err (Error)","title":"Lock.prototype.unlock(?callback) =&gt; Promise"},{"location":"docs/redlock/node-redlock/#lockprototypeextendttl-callback-promiselock","text":"ttl (number) time from now in ms to set as the lock's new expiration callback (function) callback returning: err (Error) lock (Lock)","title":"Lock.prototype.extend(ttl, ?callback) =&gt; Promise&lt;Lock&gt;"},{"location":"docs/redlock/node-redlock5.api/","text":"acquire \u8fd9\u4e2a\u65b9\u6cd5\u5728 duration \u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u5185\u83b7\u53d6\u8d44\u6e90\u4e0a\u7684\u9501\u3002 extend \u6b64\u65b9\u6cd5\u901a\u8fc7\u63d0\u4f9b\u7684 duration \u6269\u5c55\u6709\u6548\u9501\u3002 TypeScript import { randomBytes , createHash } from \"crypto\" ; import { EventEmitter } from \"events\" ; // AbortController became available as a global in node version 16. // Once version 14 reaches its end-of-life, this can be removed. import PolyfillAbortController from \"node-abort-controller\" ; import { Redis as IORedisClient } from \"ioredis\" ; type Client = IORedisClient ; // Define script constants. const ACQUIRE_SCRIPT = ` -- Return 0 if an entry already exists. for i, key in ipairs(KEYS) do if redis.call(\"exists\", key) == 1 then return 0 end end -- Create an entry for each provided key. for i, key in ipairs(KEYS) do redis.call(\"set\", key, ARGV[1], \"PX\", ARGV[2]) end -- Return the number of entries added. return #KEYS ` ; const EXTEND_SCRIPT = ` -- Return 0 if an entry exists with a *different* lock value. for i, key in ipairs(KEYS) do if redis.call(\"get\", key) ~= ARGV[1] then return 0 end end -- Update the entry for each provided key. for i, key in ipairs(KEYS) do redis.call(\"set\", key, ARGV[1], \"PX\", ARGV[2]) end -- Return the number of entries updated. return #KEYS ` ; const RELEASE_SCRIPT = ` local count = 0 for i, key in ipairs(KEYS) do -- Only remove entries for *this* lock value. if redis.call(\"get\", key) == ARGV[1] then redis.pcall(\"del\", key) count = count + 1 end end -- Return the number of entries removed. return count ` ; export type ClientExecutionResult = | { client : Client ; vote : \"for\" ; value : number ; } | { client : Client ; vote : \"against\" ; error : Error ; }; /* * This object contains a summary of results. */ export type ExecutionStats = { readonly membershipSize : number ; readonly quorumSize : number ; readonly votesFor : Set < Client > ; readonly votesAgainst : Map < Client , Error > ; }; /* * This object contains a summary of results. Because the result of an attempt * can sometimes be determined before all requests are finished, each attempt * contains a Promise that will resolve ExecutionStats once all requests are * finished. A rejection of these promises should be considered undefined * behavior and should cause a crash. */ export type ExecutionResult = { attempts : ReadonlyArray < Promise < ExecutionStats >> ; }; /** * */ export interface Settings { readonly driftFactor : number ; readonly retryCount : number ; readonly retryDelay : number ; readonly retryJitter : number ; readonly automaticExtensionThreshold : number ; } // Define default settings. const defaultSettings : Readonly < Settings > = { driftFactor : 0.01 , retryCount : 10 , retryDelay : 200 , retryJitter : 100 , automaticExtensionThreshold : 500 , }; // Modifyng this object is forbidden. Object . freeze ( defaultSettings ); /* * This error indicates a failure due to the existence of another lock for one * or more of the requested resources. */ export class ResourceLockedError extends Error { constructor ( public readonly message : string ) { super (); this . name = \"ResourceLockedError\" ; } } /* * This error indicates a failure of an operation to pass with a quorum. */ export class ExecutionError extends Error { constructor ( public readonly message : string , public readonly attempts : ReadonlyArray < Promise < ExecutionStats >> ) { super (); this . name = \"ExecutionError\" ; } } TypeScript /* * An object of this type is returned when a resource is successfully locked. It * contains convenience methods `release` and `extend` which perform the * associated Redlock method on itself. */ export class Lock { constructor ( public readonly redlock : Redlock , public readonly resources : string [], public readonly value : string , public readonly attempts : ReadonlyArray < Promise < ExecutionStats >> , public expiration : number ) {} async release () : Promise < ExecutionResult > { return this . redlock . release ( this ); } async extend ( duration : number ) : Promise < Lock > { return this . redlock . extend ( this , duration ); } } type RedlockAbortSignal = AbortSignal & { error? : Error }; TypeScript /** * A redlock object is instantiated with an array of at least one redis client * and an optional `options` object. Properties of the Redlock object should NOT * be changed after it is first used, as doing so could have unintended * consequences for live locks. */ export default class Redlock extends EventEmitter { public readonly clients : Set < Client > ; public readonly settings : Settings ; public readonly scripts : { readonly acquireScript : { value : string ; hash : string }; readonly extendScript : { value : string ; hash : string }; readonly releaseScript : { value : string ; hash : string }; }; public constructor ( clients : Iterable < Client > , settings : Partial < Settings > = {}, scripts : { readonly acquireScript? : string | (( script : string ) => string ); readonly extendScript? : string | (( script : string ) => string ); readonly releaseScript? : string | (( script : string ) => string ); } = {} ) { super (); // Prevent crashes on error events. this . on ( \"error\" , () => { // Because redlock is designed for high availability, it does not care if // a minority of redis instances/clusters fail at an operation. // // However, it can be helpful to monitor and log such cases. Redlock emits // an \"error\" event whenever it encounters an error, even if the error is // ignored in its normal operation. // // This function serves to prevent node's default behavior of crashing // when an \"error\" event is emitted in the absence of listeners. }); // Create a new array of client, to ensure no accidental mutation. this . clients = new Set ( clients ); if ( this . clients . size === 0 ) { throw new Error ( \"Redlock must be instantiated with at least one redis client.\" ); } // Customize the settings for this instance. this . settings = { driftFactor : typeof settings . driftFactor === \"number\" ? settings.driftFactor : defaultSettings.driftFactor , retryCount : typeof settings . retryCount === \"number\" ? settings.retryCount : defaultSettings.retryCount , retryDelay : typeof settings . retryDelay === \"number\" ? settings.retryDelay : defaultSettings.retryDelay , retryJitter : typeof settings . retryJitter === \"number\" ? settings.retryJitter : defaultSettings.retryJitter , automaticExtensionThreshold : typeof settings . automaticExtensionThreshold === \"number\" ? settings.automaticExtensionThreshold : defaultSettings.automaticExtensionThreshold , }; // Use custom scripts and script modifiers. const acquireScript = typeof scripts . acquireScript === \"function\" ? scripts . acquireScript ( ACQUIRE_SCRIPT ) : ACQUIRE_SCRIPT ; const extendScript = typeof scripts . extendScript === \"function\" ? scripts . extendScript ( EXTEND_SCRIPT ) : EXTEND_SCRIPT ; const releaseScript = typeof scripts . releaseScript === \"function\" ? scripts . releaseScript ( RELEASE_SCRIPT ) : RELEASE_SCRIPT ; this . scripts = { acquireScript : { value : acquireScript , hash : this._hash ( acquireScript ), }, extendScript : { value : extendScript , hash : this._hash ( extendScript ), }, releaseScript : { value : releaseScript , hash : this._hash ( releaseScript ), }, }; } /** * Generate a sha1 hash compatible with redis evalsha. */ private _hash ( value : string ) : string { return createHash ( \"sha1\" ). update ( value ). digest ( \"hex\" ); } /** * Generate a cryptographically random string. */ private _random () : string { return randomBytes ( 16 ). toString ( \"hex\" ); } /** * This method runs `.quit()` on all client connections. */ public async quit () : Promise < void > { const results = []; for ( const client of this . clients ) { results . push ( client . quit ()); } await Promise . all ( results ); } /** * \u8fd9\u4e2a\u65b9\u6cd5\u5728 `duration` \u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u5185\u83b7\u53d6\u8d44\u6e90\u4e0a\u7684\u9501\u3002 */ public async acquire ( resources : string [], duration : number , settings? : Settings ) : Promise < Lock > { const start = Date . now (); const value = this . _random (); try { const { attempts } = await this . _execute ( this . scripts . acquireScript , resources , [ value , duration ], settings ); // Add 2 milliseconds to the drift to account for Redis expires precision, // which is 1 ms, plus the configured allowable drift factor. const drift = Math . round ( ( settings ? . driftFactor ?? this . settings . driftFactor ) * duration ) + 2 ; return new Lock ( this , resources , value , attempts , start + duration - drift ); } catch ( error ) { // If there was an error acquiring the lock, release any partial lock // state that may exist on a minority of clients. await this . _execute ( this . scripts . releaseScript , resources , [ value ], { retryCount : 0 , }). catch (() => { // Any error here will be ignored. }); throw error ; } } /** * This method unlocks the provided lock from all servers still persisting it. * It will fail with an error if it is unable to release the lock on a quorum * of nodes, but will make no attempt to restore the lock in the case of a * failure to release. It is safe to re-attempt a release or to ignore the * error, as the lock will automatically expire after its timeout. */ public async release ( lock : Lock , settings? : Partial < Settings > ) : Promise < ExecutionResult > { // Immediately invalidate the lock. lock . expiration = 0 ; // Attempt to release the lock. return this . _execute ( this . scripts . releaseScript , lock . resources , [ lock . value ], settings ); } /** * This method extends a valid lock by the provided `duration`. */ public async extend ( existing : Lock , duration : number , settings? : Partial < Settings > ) : Promise < Lock > { const start = Date . now (); // The lock has already expired. if ( existing . expiration < Date . now ()) { throw new ExecutionError ( \"Cannot extend an already-expired lock.\" , []); } const { attempts } = await this . _execute ( this . scripts . extendScript , existing . resources , [ existing . value , duration ], settings ); // Invalidate the existing lock. existing . expiration = 0 ; // Add 2 milliseconds to the drift to account for Redis expires precision, // which is 1 ms, plus the configured allowable drift factor. const drift = Math . round ( ( settings ? . driftFactor ?? this . settings . driftFactor ) * duration ) + 2 ; const replacement = new Lock ( this , existing . resources , existing . value , attempts , start + duration - drift ); return replacement ; } /** * Execute a script on all clients. The resulting promise is resolved or * rejected as soon as this quorum is reached; the resolution or rejection * will contains a `stats` property that is resolved once all votes are in. */ private async _execute ( script : { value : string ; hash : string }, keys : string [], args : ( string | number )[], _settings? : Partial < Settings > ) : Promise < ExecutionResult > { const settings = _settings ? { ... this . settings , ... _settings , } : this . settings ; const maxAttempts = settings . retryCount + 1 ; const attempts : Promise < ExecutionStats > [] = []; while ( true ) { const { vote , stats } = await this . _attemptOperation ( script , keys , args ); attempts . push ( stats ); // The operation acheived a quorum in favor. if ( vote === \"for\" ) { return { attempts }; } // Wait before reattempting. if ( attempts . length < maxAttempts ) { await new Promise (( resolve ) => { setTimeout ( resolve , Math . max ( 0 , settings . retryDelay + Math . floor (( Math . random () * 2 - 1 ) * settings . retryJitter ) ), undefined ); }); } else { throw new ExecutionError ( \"The operation was unable to acheive a quorum during its retry window.\" , attempts ); } } } private async _attemptOperation ( script : { value : string ; hash : string }, keys : string [], args : ( string | number )[] ) : Promise < | { vote : \"for\" ; stats : Promise < ExecutionStats > } | { vote : \"against\" ; stats : Promise < ExecutionStats > } > { return await new Promise (( resolve ) => { const clientResults = []; for ( const client of this . clients ) { clientResults . push ( this . _attemptOperationOnClient ( client , script , keys , args ) ); } const stats : ExecutionStats = { membershipSize : clientResults.length , quorumSize : Math.floor ( clientResults . length / 2 ) + 1 , votesFor : new Set < Client > (), votesAgainst : new Map < Client , Error > (), }; let done : () => void ; const statsPromise = new Promise < typeof stats > (( resolve ) => { done = () => resolve ( stats ); }); // This is the expected flow for all successful and unsuccessful requests. const onResultResolve = ( clientResult : ClientExecutionResult ) : void => { switch ( clientResult . vote ) { case \"for\" : stats . votesFor . add ( clientResult . client ); break ; case \"against\" : stats . votesAgainst . set ( clientResult . client , clientResult . error ); break ; } // A quorum has determined a success. if ( stats . votesFor . size === stats . quorumSize ) { resolve ({ vote : \"for\" , stats : statsPromise , }); } // A quorum has determined a failure. if ( stats . votesAgainst . size === stats . quorumSize ) { resolve ({ vote : \"against\" , stats : statsPromise , }); } // All votes are in. if ( stats . votesFor . size + stats . votesAgainst . size === stats . membershipSize ) { done (); } }; // This is unexpected and should crash to prevent undefined behavior. const onResultReject = ( error : Error ) : void => { throw error ; }; for ( const result of clientResults ) { result . then ( onResultResolve , onResultReject ); } }); } private async _attemptOperationOnClient ( client : Client , script : { value : string ; hash : string }, keys : string [], args : ( string | number )[] ) : Promise < ClientExecutionResult > { try { let result : number ; try { // Attempt to evaluate the script by its hash. const shaResult = ( await client . evalsha ( script . hash , keys . length , [ ... keys , ... args , ])) as unknown ; if ( typeof shaResult !== \"number\" ) { throw new Error ( `Unexpected result of type ${ typeof shaResult } returned from redis.` ); } result = shaResult ; } catch ( error ) { // If the redis server does not already have the script cached, // reattempt the request with the script's raw text. if ( ! ( error instanceof Error ) || ! error . message . startsWith ( \"NOSCRIPT\" ) ) { throw error ; } const rawResult = ( await client . eval ( script . value , keys . length , [ ... keys , ... args , ])) as unknown ; if ( typeof rawResult !== \"number\" ) { throw new Error ( `Unexpected result of type ${ typeof rawResult } returned from redis.` ); } result = rawResult ; } // One or more of the resources was already locked. if ( result !== keys . length ) { throw new ResourceLockedError ( `The operation was applied to: ${ result } of the ${ keys . length } requested resources.` ); } return { vote : \"for\" , client , value : result , }; } catch ( error ) { if ( ! ( error instanceof Error )) { throw new Error ( `Unexpected type ${ typeof error } thrown with value: ${ error } ` ); } // Emit the error on the redlock instance for observability. this . emit ( \"error\" , error ); return { vote : \"against\" , client , error , }; } } /** * Wrap and execute a routine in the context of an auto-extending lock, * returning a promise of the routine's value. In the case that auto-extension * fails, an AbortSignal will be updated to indicate that abortion of the * routine is in order, and to pass along the encountered error. * * @example * ```ts * await redlock.using([senderId, recipientId], 5000, { retryCount: 5 }, async (signal) => { * const senderBalance = await getBalance(senderId); * const recipientBalance = await getBalance(recipientId); * * if (senderBalance < amountToSend) { * throw new Error(\"Insufficient balance.\"); * } * * // The abort signal will be true if: * // 1. the above took long enough that the lock needed to be extended * // 2. redlock was unable to extend the lock * // * // In such a case, exclusivity can no longer be guaranteed for further * // operations, and should be handled as an exceptional case. * if (signal.aborted) { * throw signal.error; * } * * await setBalances([ * {id: senderId, balance: senderBalance - amountToSend}, * {id: recipientId, balance: recipientBalance + amountToSend}, * ]); * }); * ``` */ public async using < T > ( resources : string [], duration : number , settings : Partial < Settings > , routine ?: ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > ; public async using < T > ( resources : string [], duration : number , routine : ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > ; public async using < T > ( resources : string [], duration : number , settingsOrRoutine : | undefined | Partial < Settings > | (( signal : RedlockAbortSignal ) => Promise < T > ), optionalRoutine ?: ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > { const settings = settingsOrRoutine && typeof settingsOrRoutine !== \"function\" ? { ... this . settings , ... settingsOrRoutine , } : this . settings ; const routine = optionalRoutine ?? settingsOrRoutine ; if ( typeof routine !== \"function\" ) { throw new Error ( \"INVARIANT: routine is not a function.\" ); } if ( settings . automaticExtensionThreshold > duration - 100 ) { throw new Error ( \"A lock `duration` must be at least 100ms greater than the `automaticExtensionThreshold` setting.\" ); } // The AbortController/AbortSignal pattern allows the routine to be notified // of a failure to extend the lock, and subsequent expiration. In the event // of an abort, the error object will be made available at `signal.error`. const controller = typeof AbortController === \"undefined\" ? new PolyfillAbortController () : new AbortController (); const signal = controller . signal as RedlockAbortSignal ; function queue () : void { timeout = setTimeout ( () => ( extension = extend ()), lock . expiration - Date . now () - settings . automaticExtensionThreshold ); } async function extend () : Promise < void > { timeout = undefined ; try { lock = await lock . extend ( duration ); queue (); } catch ( error ) { if ( lock . expiration > Date . now ()) { return ( extension = extend ()); } signal . error = error instanceof Error ? error : new Error ( ` ${ error } ` ); controller . abort (); } } let timeout : undefined | NodeJS . Timeout ; let extension : undefined | Promise < void > ; let lock = await this . acquire ( resources , duration , settings ); queue (); try { return await routine ( signal ); } finally { // Clean up the timer. if ( timeout ) { clearTimeout ( timeout ); timeout = undefined ; } // Wait for an in-flight extension to finish. if ( extension ) { await extension . catch (() => { // An error here doesn't matter at all, because the routine has // already completed, and a release will be attempted regardless. The // only reason for waiting here is to prevent possible contention // between the extension and release. }); } await lock . release (); } } }","title":"Node Redlock5 API"},{"location":"docs/redlock/node-redlock5.api/#acquire","text":"\u8fd9\u4e2a\u65b9\u6cd5\u5728 duration \u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u5185\u83b7\u53d6\u8d44\u6e90\u4e0a\u7684\u9501\u3002","title":"acquire"},{"location":"docs/redlock/node-redlock5.api/#extend","text":"\u6b64\u65b9\u6cd5\u901a\u8fc7\u63d0\u4f9b\u7684 duration \u6269\u5c55\u6709\u6548\u9501\u3002 TypeScript import { randomBytes , createHash } from \"crypto\" ; import { EventEmitter } from \"events\" ; // AbortController became available as a global in node version 16. // Once version 14 reaches its end-of-life, this can be removed. import PolyfillAbortController from \"node-abort-controller\" ; import { Redis as IORedisClient } from \"ioredis\" ; type Client = IORedisClient ; // Define script constants. const ACQUIRE_SCRIPT = ` -- Return 0 if an entry already exists. for i, key in ipairs(KEYS) do if redis.call(\"exists\", key) == 1 then return 0 end end -- Create an entry for each provided key. for i, key in ipairs(KEYS) do redis.call(\"set\", key, ARGV[1], \"PX\", ARGV[2]) end -- Return the number of entries added. return #KEYS ` ; const EXTEND_SCRIPT = ` -- Return 0 if an entry exists with a *different* lock value. for i, key in ipairs(KEYS) do if redis.call(\"get\", key) ~= ARGV[1] then return 0 end end -- Update the entry for each provided key. for i, key in ipairs(KEYS) do redis.call(\"set\", key, ARGV[1], \"PX\", ARGV[2]) end -- Return the number of entries updated. return #KEYS ` ; const RELEASE_SCRIPT = ` local count = 0 for i, key in ipairs(KEYS) do -- Only remove entries for *this* lock value. if redis.call(\"get\", key) == ARGV[1] then redis.pcall(\"del\", key) count = count + 1 end end -- Return the number of entries removed. return count ` ; export type ClientExecutionResult = | { client : Client ; vote : \"for\" ; value : number ; } | { client : Client ; vote : \"against\" ; error : Error ; }; /* * This object contains a summary of results. */ export type ExecutionStats = { readonly membershipSize : number ; readonly quorumSize : number ; readonly votesFor : Set < Client > ; readonly votesAgainst : Map < Client , Error > ; }; /* * This object contains a summary of results. Because the result of an attempt * can sometimes be determined before all requests are finished, each attempt * contains a Promise that will resolve ExecutionStats once all requests are * finished. A rejection of these promises should be considered undefined * behavior and should cause a crash. */ export type ExecutionResult = { attempts : ReadonlyArray < Promise < ExecutionStats >> ; }; /** * */ export interface Settings { readonly driftFactor : number ; readonly retryCount : number ; readonly retryDelay : number ; readonly retryJitter : number ; readonly automaticExtensionThreshold : number ; } // Define default settings. const defaultSettings : Readonly < Settings > = { driftFactor : 0.01 , retryCount : 10 , retryDelay : 200 , retryJitter : 100 , automaticExtensionThreshold : 500 , }; // Modifyng this object is forbidden. Object . freeze ( defaultSettings ); /* * This error indicates a failure due to the existence of another lock for one * or more of the requested resources. */ export class ResourceLockedError extends Error { constructor ( public readonly message : string ) { super (); this . name = \"ResourceLockedError\" ; } } /* * This error indicates a failure of an operation to pass with a quorum. */ export class ExecutionError extends Error { constructor ( public readonly message : string , public readonly attempts : ReadonlyArray < Promise < ExecutionStats >> ) { super (); this . name = \"ExecutionError\" ; } } TypeScript /* * An object of this type is returned when a resource is successfully locked. It * contains convenience methods `release` and `extend` which perform the * associated Redlock method on itself. */ export class Lock { constructor ( public readonly redlock : Redlock , public readonly resources : string [], public readonly value : string , public readonly attempts : ReadonlyArray < Promise < ExecutionStats >> , public expiration : number ) {} async release () : Promise < ExecutionResult > { return this . redlock . release ( this ); } async extend ( duration : number ) : Promise < Lock > { return this . redlock . extend ( this , duration ); } } type RedlockAbortSignal = AbortSignal & { error? : Error }; TypeScript /** * A redlock object is instantiated with an array of at least one redis client * and an optional `options` object. Properties of the Redlock object should NOT * be changed after it is first used, as doing so could have unintended * consequences for live locks. */ export default class Redlock extends EventEmitter { public readonly clients : Set < Client > ; public readonly settings : Settings ; public readonly scripts : { readonly acquireScript : { value : string ; hash : string }; readonly extendScript : { value : string ; hash : string }; readonly releaseScript : { value : string ; hash : string }; }; public constructor ( clients : Iterable < Client > , settings : Partial < Settings > = {}, scripts : { readonly acquireScript? : string | (( script : string ) => string ); readonly extendScript? : string | (( script : string ) => string ); readonly releaseScript? : string | (( script : string ) => string ); } = {} ) { super (); // Prevent crashes on error events. this . on ( \"error\" , () => { // Because redlock is designed for high availability, it does not care if // a minority of redis instances/clusters fail at an operation. // // However, it can be helpful to monitor and log such cases. Redlock emits // an \"error\" event whenever it encounters an error, even if the error is // ignored in its normal operation. // // This function serves to prevent node's default behavior of crashing // when an \"error\" event is emitted in the absence of listeners. }); // Create a new array of client, to ensure no accidental mutation. this . clients = new Set ( clients ); if ( this . clients . size === 0 ) { throw new Error ( \"Redlock must be instantiated with at least one redis client.\" ); } // Customize the settings for this instance. this . settings = { driftFactor : typeof settings . driftFactor === \"number\" ? settings.driftFactor : defaultSettings.driftFactor , retryCount : typeof settings . retryCount === \"number\" ? settings.retryCount : defaultSettings.retryCount , retryDelay : typeof settings . retryDelay === \"number\" ? settings.retryDelay : defaultSettings.retryDelay , retryJitter : typeof settings . retryJitter === \"number\" ? settings.retryJitter : defaultSettings.retryJitter , automaticExtensionThreshold : typeof settings . automaticExtensionThreshold === \"number\" ? settings.automaticExtensionThreshold : defaultSettings.automaticExtensionThreshold , }; // Use custom scripts and script modifiers. const acquireScript = typeof scripts . acquireScript === \"function\" ? scripts . acquireScript ( ACQUIRE_SCRIPT ) : ACQUIRE_SCRIPT ; const extendScript = typeof scripts . extendScript === \"function\" ? scripts . extendScript ( EXTEND_SCRIPT ) : EXTEND_SCRIPT ; const releaseScript = typeof scripts . releaseScript === \"function\" ? scripts . releaseScript ( RELEASE_SCRIPT ) : RELEASE_SCRIPT ; this . scripts = { acquireScript : { value : acquireScript , hash : this._hash ( acquireScript ), }, extendScript : { value : extendScript , hash : this._hash ( extendScript ), }, releaseScript : { value : releaseScript , hash : this._hash ( releaseScript ), }, }; } /** * Generate a sha1 hash compatible with redis evalsha. */ private _hash ( value : string ) : string { return createHash ( \"sha1\" ). update ( value ). digest ( \"hex\" ); } /** * Generate a cryptographically random string. */ private _random () : string { return randomBytes ( 16 ). toString ( \"hex\" ); } /** * This method runs `.quit()` on all client connections. */ public async quit () : Promise < void > { const results = []; for ( const client of this . clients ) { results . push ( client . quit ()); } await Promise . all ( results ); } /** * \u8fd9\u4e2a\u65b9\u6cd5\u5728 `duration` \u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u5185\u83b7\u53d6\u8d44\u6e90\u4e0a\u7684\u9501\u3002 */ public async acquire ( resources : string [], duration : number , settings? : Settings ) : Promise < Lock > { const start = Date . now (); const value = this . _random (); try { const { attempts } = await this . _execute ( this . scripts . acquireScript , resources , [ value , duration ], settings ); // Add 2 milliseconds to the drift to account for Redis expires precision, // which is 1 ms, plus the configured allowable drift factor. const drift = Math . round ( ( settings ? . driftFactor ?? this . settings . driftFactor ) * duration ) + 2 ; return new Lock ( this , resources , value , attempts , start + duration - drift ); } catch ( error ) { // If there was an error acquiring the lock, release any partial lock // state that may exist on a minority of clients. await this . _execute ( this . scripts . releaseScript , resources , [ value ], { retryCount : 0 , }). catch (() => { // Any error here will be ignored. }); throw error ; } } /** * This method unlocks the provided lock from all servers still persisting it. * It will fail with an error if it is unable to release the lock on a quorum * of nodes, but will make no attempt to restore the lock in the case of a * failure to release. It is safe to re-attempt a release or to ignore the * error, as the lock will automatically expire after its timeout. */ public async release ( lock : Lock , settings? : Partial < Settings > ) : Promise < ExecutionResult > { // Immediately invalidate the lock. lock . expiration = 0 ; // Attempt to release the lock. return this . _execute ( this . scripts . releaseScript , lock . resources , [ lock . value ], settings ); } /** * This method extends a valid lock by the provided `duration`. */ public async extend ( existing : Lock , duration : number , settings? : Partial < Settings > ) : Promise < Lock > { const start = Date . now (); // The lock has already expired. if ( existing . expiration < Date . now ()) { throw new ExecutionError ( \"Cannot extend an already-expired lock.\" , []); } const { attempts } = await this . _execute ( this . scripts . extendScript , existing . resources , [ existing . value , duration ], settings ); // Invalidate the existing lock. existing . expiration = 0 ; // Add 2 milliseconds to the drift to account for Redis expires precision, // which is 1 ms, plus the configured allowable drift factor. const drift = Math . round ( ( settings ? . driftFactor ?? this . settings . driftFactor ) * duration ) + 2 ; const replacement = new Lock ( this , existing . resources , existing . value , attempts , start + duration - drift ); return replacement ; } /** * Execute a script on all clients. The resulting promise is resolved or * rejected as soon as this quorum is reached; the resolution or rejection * will contains a `stats` property that is resolved once all votes are in. */ private async _execute ( script : { value : string ; hash : string }, keys : string [], args : ( string | number )[], _settings? : Partial < Settings > ) : Promise < ExecutionResult > { const settings = _settings ? { ... this . settings , ... _settings , } : this . settings ; const maxAttempts = settings . retryCount + 1 ; const attempts : Promise < ExecutionStats > [] = []; while ( true ) { const { vote , stats } = await this . _attemptOperation ( script , keys , args ); attempts . push ( stats ); // The operation acheived a quorum in favor. if ( vote === \"for\" ) { return { attempts }; } // Wait before reattempting. if ( attempts . length < maxAttempts ) { await new Promise (( resolve ) => { setTimeout ( resolve , Math . max ( 0 , settings . retryDelay + Math . floor (( Math . random () * 2 - 1 ) * settings . retryJitter ) ), undefined ); }); } else { throw new ExecutionError ( \"The operation was unable to acheive a quorum during its retry window.\" , attempts ); } } } private async _attemptOperation ( script : { value : string ; hash : string }, keys : string [], args : ( string | number )[] ) : Promise < | { vote : \"for\" ; stats : Promise < ExecutionStats > } | { vote : \"against\" ; stats : Promise < ExecutionStats > } > { return await new Promise (( resolve ) => { const clientResults = []; for ( const client of this . clients ) { clientResults . push ( this . _attemptOperationOnClient ( client , script , keys , args ) ); } const stats : ExecutionStats = { membershipSize : clientResults.length , quorumSize : Math.floor ( clientResults . length / 2 ) + 1 , votesFor : new Set < Client > (), votesAgainst : new Map < Client , Error > (), }; let done : () => void ; const statsPromise = new Promise < typeof stats > (( resolve ) => { done = () => resolve ( stats ); }); // This is the expected flow for all successful and unsuccessful requests. const onResultResolve = ( clientResult : ClientExecutionResult ) : void => { switch ( clientResult . vote ) { case \"for\" : stats . votesFor . add ( clientResult . client ); break ; case \"against\" : stats . votesAgainst . set ( clientResult . client , clientResult . error ); break ; } // A quorum has determined a success. if ( stats . votesFor . size === stats . quorumSize ) { resolve ({ vote : \"for\" , stats : statsPromise , }); } // A quorum has determined a failure. if ( stats . votesAgainst . size === stats . quorumSize ) { resolve ({ vote : \"against\" , stats : statsPromise , }); } // All votes are in. if ( stats . votesFor . size + stats . votesAgainst . size === stats . membershipSize ) { done (); } }; // This is unexpected and should crash to prevent undefined behavior. const onResultReject = ( error : Error ) : void => { throw error ; }; for ( const result of clientResults ) { result . then ( onResultResolve , onResultReject ); } }); } private async _attemptOperationOnClient ( client : Client , script : { value : string ; hash : string }, keys : string [], args : ( string | number )[] ) : Promise < ClientExecutionResult > { try { let result : number ; try { // Attempt to evaluate the script by its hash. const shaResult = ( await client . evalsha ( script . hash , keys . length , [ ... keys , ... args , ])) as unknown ; if ( typeof shaResult !== \"number\" ) { throw new Error ( `Unexpected result of type ${ typeof shaResult } returned from redis.` ); } result = shaResult ; } catch ( error ) { // If the redis server does not already have the script cached, // reattempt the request with the script's raw text. if ( ! ( error instanceof Error ) || ! error . message . startsWith ( \"NOSCRIPT\" ) ) { throw error ; } const rawResult = ( await client . eval ( script . value , keys . length , [ ... keys , ... args , ])) as unknown ; if ( typeof rawResult !== \"number\" ) { throw new Error ( `Unexpected result of type ${ typeof rawResult } returned from redis.` ); } result = rawResult ; } // One or more of the resources was already locked. if ( result !== keys . length ) { throw new ResourceLockedError ( `The operation was applied to: ${ result } of the ${ keys . length } requested resources.` ); } return { vote : \"for\" , client , value : result , }; } catch ( error ) { if ( ! ( error instanceof Error )) { throw new Error ( `Unexpected type ${ typeof error } thrown with value: ${ error } ` ); } // Emit the error on the redlock instance for observability. this . emit ( \"error\" , error ); return { vote : \"against\" , client , error , }; } } /** * Wrap and execute a routine in the context of an auto-extending lock, * returning a promise of the routine's value. In the case that auto-extension * fails, an AbortSignal will be updated to indicate that abortion of the * routine is in order, and to pass along the encountered error. * * @example * ```ts * await redlock.using([senderId, recipientId], 5000, { retryCount: 5 }, async (signal) => { * const senderBalance = await getBalance(senderId); * const recipientBalance = await getBalance(recipientId); * * if (senderBalance < amountToSend) { * throw new Error(\"Insufficient balance.\"); * } * * // The abort signal will be true if: * // 1. the above took long enough that the lock needed to be extended * // 2. redlock was unable to extend the lock * // * // In such a case, exclusivity can no longer be guaranteed for further * // operations, and should be handled as an exceptional case. * if (signal.aborted) { * throw signal.error; * } * * await setBalances([ * {id: senderId, balance: senderBalance - amountToSend}, * {id: recipientId, balance: recipientBalance + amountToSend}, * ]); * }); * ``` */ public async using < T > ( resources : string [], duration : number , settings : Partial < Settings > , routine ?: ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > ; public async using < T > ( resources : string [], duration : number , routine : ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > ; public async using < T > ( resources : string [], duration : number , settingsOrRoutine : | undefined | Partial < Settings > | (( signal : RedlockAbortSignal ) => Promise < T > ), optionalRoutine ?: ( signal : RedlockAbortSignal ) => Promise < T > ) : Promise < T > { const settings = settingsOrRoutine && typeof settingsOrRoutine !== \"function\" ? { ... this . settings , ... settingsOrRoutine , } : this . settings ; const routine = optionalRoutine ?? settingsOrRoutine ; if ( typeof routine !== \"function\" ) { throw new Error ( \"INVARIANT: routine is not a function.\" ); } if ( settings . automaticExtensionThreshold > duration - 100 ) { throw new Error ( \"A lock `duration` must be at least 100ms greater than the `automaticExtensionThreshold` setting.\" ); } // The AbortController/AbortSignal pattern allows the routine to be notified // of a failure to extend the lock, and subsequent expiration. In the event // of an abort, the error object will be made available at `signal.error`. const controller = typeof AbortController === \"undefined\" ? new PolyfillAbortController () : new AbortController (); const signal = controller . signal as RedlockAbortSignal ; function queue () : void { timeout = setTimeout ( () => ( extension = extend ()), lock . expiration - Date . now () - settings . automaticExtensionThreshold ); } async function extend () : Promise < void > { timeout = undefined ; try { lock = await lock . extend ( duration ); queue (); } catch ( error ) { if ( lock . expiration > Date . now ()) { return ( extension = extend ()); } signal . error = error instanceof Error ? error : new Error ( ` ${ error } ` ); controller . abort (); } } let timeout : undefined | NodeJS . Timeout ; let extension : undefined | Promise < void > ; let lock = await this . acquire ( resources , duration , settings ); queue (); try { return await routine ( signal ); } finally { // Clean up the timer. if ( timeout ) { clearTimeout ( timeout ); timeout = undefined ; } // Wait for an in-flight extension to finish. if ( extension ) { await extension . catch (() => { // An error here doesn't matter at all, because the routine has // already completed, and a release will be attempted regardless. The // only reason for waiting here is to prevent possible contention // between the extension and release. }); } await lock . release (); } } }","title":"extend"},{"location":"docs/redlock/node-redlock5/","text":"\u8fd9\u662f\u5206\u5e03\u5f0f redis \u9501\u7684 redlock \u7b97\u6cd5\u7684 node.js \u5b9e\u73b0\u3002 \u5b83\u5728\u5355 redis \u548c\u591a redis \u73af\u5883\u4e2d\u90fd\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u4fdd\u8bc1\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u591a\u4e2a\u72ec\u7acb\u7684 redis \u5b9e\u4f8b\u6216\u96c6\u7fa4\u63d0\u4f9b\u5bb9\u9519\u6027\u3002 \u9ad8\u53ef\u7528\u6027\u7684\u5efa\u8bae \u81f3\u5c11\u4f7f\u7528 3 \u4e2a\u72ec\u7acb\u7684\u670d\u52a1\u5668\u6216\u96c6\u7fa4 \u5927\u591a\u6570\u5b89\u88c5\u4f7f\u7528\u5947\u6570\u4e2a\u72ec\u7acb redis server \u4f7f\u7528\u5947\u6570\u4e2a\u72ec\u7acb redis clusters \u8fdb\u884c\u5927\u89c4\u6a21\u5b89\u88c5 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5c06 redis \u8282\u70b9\u5206\u5e03\u5230\u4e0d\u540c\u7684\u7269\u7406\u673a\u5668\u4e0a \u4f7f\u7528\u96c6\u7fa4/\u54e8\u5175 \u8bf7\u786e\u4fdd\u4f7f\u7528\u5185\u7f6e\u96c6\u7fa4\u652f\u6301\u7684\u5ba2\u6237\u7aef\uff0c\u5982 ioredis . \u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u9884\u5148\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u5230 redlock\uff0c\u4f7f\u7528 single redis \u96c6\u7fa4\u6216 sentinal \u914d\u7f6e\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u3002 \u867d\u7136\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u786e\u5b9e\u83b7\u5f97\u4e86\u9ad8\u53ef\u7528\u6027\u5e76\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\uff0c\u4f46\u6545\u969c\u6a21\u5f0f\u7565\u6709\u4e0d\u540c\uff0c\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u9501\u53ef\u80fd\u88ab\u83b7\u53d6\u4e24\u6b21: \u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528\u6700\u7ec8\u4e00\u81f4\u7684 redis \u590d\u5236\uff0c\u5e76\u4e14\u60a8\u83b7\u5f97\u4e86\u8d44\u6e90\u7684\u9501\u3002 \u5728\u83b7\u5f97\u4f60\u7684\u9501\u540e\uff0credis \u7684\u788e\u7247\u4e3b\u673a\u7acb\u5373\u5d29\u6e83\u3002 Redis \u505a\u4e86\u5b83\u7684\u4e8b\u60c5\uff0c\u5e76\u628a\u5b83\u7684\u6545\u969c\u8f6c\u79fb\u5230\u8fd8\u6ca1\u6709\u540c\u6b65\u4f60\u7684\u9501\u7684 slave \u4e0a\u3002 \u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u83b7\u53d6\u76f8\u540c\u8d44\u6e90\u7684\u9501\uff0c\u5b83\u5c06\u6210\u529f! \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 redlock \u5141\u8bb8\u4f60\u6307\u5b9a\u591a\u4e2a\u72ec\u7acb\u7684\u8282\u70b9/\u96c6\u7fa4: \u901a\u8fc7\u8981\u6c42\u5b83\u4eec\u4e4b\u95f4\u8fbe\u6210\u4e00\u81f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u53d6\u51fa\u6216\u6545\u969c\u8f6c\u79fb\u5c11\u6570\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u4f7f\u6d3b\u52a8\u9501\u5931\u6548\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u7684\u7b97\u6cd5\uff0c\u8bf7\u67e5\u770b redis distlock \u9875\u9762 . \u6211\u600e\u4e48\u68c0\u67e5\u4e1c\u897f\u662f\u5426\u4e0a\u9501\u4e86? \u7ea2\u9501\u7684\u76ee\u7684\u662f\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u63d0\u4f9b\u8d44\u6e90\u7684\u72ec\u5360\u6027\u4fdd\u8bc1\uff0c\u800c\u4e0d\u662f\u7528\u6765\u62a5\u544a\u8d44\u6e90\u7684\u6240\u6709\u6743\u72b6\u6001\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u5206\u533a\u7684\u8f83\u5c0f\u4e00\u7aef\uff0c\u60a8\u5c06\u65e0\u6cd5\u83b7\u5f97\u9501\uff0c\u4f46\u60a8\u4e0d\u77e5\u9053\u53e6\u4e00\u7aef\u662f\u5426\u5b58\u5728\u9501;\u4f60\u53ea\u77e5\u9053\u4f60\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u7684\u72ec\u5bb6\u7ecf\u8425\u6743\u3002 \u91cd\u8bd5\u884c\u4e3a\u4f7f\u60c5\u51b5\u66f4\u52a0\u590d\u6742\uff0c\u5728\u83b7\u53d6\u591a\u4e2a\u8d44\u6e90\u4e0a\u7684\u9501\u65f6\u66f4\u662f\u5982\u6b64\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u8bb8\u591a\u4efb\u52a1\u6765\u8bf4\uff0c\u5c1d\u8bd5\u4f7f\u7528 retryCount=0 \u9501\u5b9a\u5c31\u8db3\u591f\u4e86\uff0c \u5e76\u5c06\u5931\u8d25\u89c6\u4e3a\u8d44\u6e90\u88ab locked \u6216(\u66f4\u51c6\u786e\u5730\u8bf4) unavailable \u3002 \u6ce8\u610f\uff0c\u4f7f\u7528' retryCount=-1 '\u5c06\u6709\u65e0\u9650\u7684\u91cd\u8bd5\uff0c\u76f4\u5230\u83b7\u5f97\u9501\u3002 \u5b89\u88c5 Bash npm install --save redlock \u914d\u7f6e Redlock \u88ab\u8bbe\u8ba1\u6210\u4f7f\u7528 ioredis \u6765\u4fdd\u6301\u5b83\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u548c\u5904\u7406\u96c6\u7fa4\u534f\u8bae\u3002 \u4e00\u4e2a redlock \u5bf9\u8c61\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81f3\u5c11\u4e00\u4e2a redis \u5ba2\u6237\u7aef\u548c\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\u7684\u6570\u7ec4\u3002 Redlock \u5bf9\u8c61\u7684\u5c5e\u6027\u4e0d\u5e94\u8be5\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u540e\u66f4\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u5bf9\u6d3b\u9501\u4ea7\u751f\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\u3002 TypeScript import Client from \"ioredis\" ; import Redlock from \"./redlock\" ; const redisA = new Client ({ host : \"a.redis.example.com\" }); const redisB = new Client ({ host : \"b.redis.example.com\" }); const redisC = new Client ({ host : \"c.redis.example.com\" }); const redlock = new Redlock ( // You should have one client for each independent redis node // or cluster. [ redisA , redisB , redisC ], { // The expected clock drift; for more details see: // http://redis.io/topics/distlock driftFactor : 0.01 , // multiplied by lock ttl to determine drift time // The max number of times Redlock will attempt to lock a resource // before erroring. retryCount : 10 , // the time in ms between attempts retryDelay : 200 , // time in ms // the max time in ms randomly added to retries // to improve performance under high contention // see https://www.awsarchitectureblog.com/2015/03/backoff.html retryJitter : 200 , // time in ms // The minimum remaining time on a lock before an extension is automatically // attempted with the `using` API. automaticExtensionThreshold : 500 , // time in ms } ); \u9519\u8bef\u5904\u7406 \u56e0\u4e3a redlock \u662f\u4e3a\u9ad8\u53ef\u7528\u6027\u800c\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u5b83\u5e76\u4e0d\u5173\u5fc3\u662f\u5426\u6709\u5c11\u6570 redis \u5b9e\u4f8b/\u96c6\u7fa4\u5728\u64cd\u4f5c\u4e2d\u5931\u8d25\u3002 \u4f46\u662f\uff0c\u76d1\u89c6\u548c\u8bb0\u5f55\u8fd9\u79cd\u60c5\u51b5\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002 \u5f53 Redlock \u9047\u5230\u9519\u8bef\u65f6\uff0c\u5b83\u4f1a\u89e6\u53d1\u4e00\u4e2a error \u4e8b\u4ef6\uff0c\u5373\u4f7f\u8be5\u9519\u8bef\u5728\u6b63\u5e38\u64cd\u4f5c\u4e2d\u88ab\u5ffd\u7565\u3002 TypeScript redlock . on ( \"error\" , ( error ) => { // \u5ffd\u7565\u8d44\u6e90\u5728\u5ba2\u6237\u7aef\u663e\u5f0f\u6807\u8bb0\u4e3a\u9501\u5b9a\u7684\u60c5\u51b5\u3002 if ( error instanceof ResourceLockedError ) { return ; } // \u65e5\u5fd7\u5176\u4ed6\u6240\u6709\u9519\u8bef. console . error ( error ); }); \u6b64\u5916\uff0c Lock \u548c ExecutionError \u7c7b\u7684 attempt \u5c5e\u6027\u4e0a\u63d0\u4f9b\u4e86 per-attempt \u548c per-client \u7edf\u8ba1\u4fe1\u606f(\u5305\u62ec\u9519\u8bef)\u3002 \u4f7f\u7528 using \u65b9\u6cd5\u5728\u81ea\u52a8\u6269\u5c55\u9501\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u88c5\u5e76\u6267\u884c\u4f8b\u7a0b\uff0c\u8fd4\u56de\u4f8b\u7a0b\u503c\u7684\u627f\u8bfa\u3002 \u5728\u81ea\u52a8\u6269\u5c55\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u66f4\u65b0\u4e00\u4e2a AbortSignal \uff0c\u4ee5\u8868\u660e\u8be5\u4f8b\u7a0b\u7684\u7ec8\u6b62\u662f\u6b63\u786e\u7684\uff0c\u5e76\u5c06\u9047\u5230\u7684\u9519\u8bef\u4f20\u9012\u4e0b\u53bb\u3002 TypeScript await redlock . using ([ senderId , recipientId ], 5000 , async ( signal ) => { // Do something... await something (); // \u786e\u4fdd\u4efb\u4f55\u5fc5\u8981\u7684\u9501\u6269\u5c55\u6ca1\u6709\u5931\u8d25\u3002 if ( signal . aborted ) throw signal . error ; // Do something else... await somethingElse (); }); \u6216\u8005\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u548c\u91ca\u653e\u9501: TypeScript // Acquire a lock. let lock = await redlock . acquire ([ \"a\" ], 5000 ); // Do something... await something (); // Extend the lock. lock = await lock . extend ( 5000 ); // Do something else... await somethingElse (); // Release the lock. await lock . release (); API \u8bf7\u67e5\u770b(\u975e\u5e38\u7b80\u6d01\u7684)\u6e90\u4ee3\u7801\u6216 TypeScript \u5b9a\u4e49\uff0c\u4e86\u89e3 API \u7684\u8be6\u7ec6\u5206\u89e3\u3002","title":"Node Redlock5"},{"location":"docs/redlock/node-redlock5/#_1","text":"\u81f3\u5c11\u4f7f\u7528 3 \u4e2a\u72ec\u7acb\u7684\u670d\u52a1\u5668\u6216\u96c6\u7fa4 \u5927\u591a\u6570\u5b89\u88c5\u4f7f\u7528\u5947\u6570\u4e2a\u72ec\u7acb redis server \u4f7f\u7528\u5947\u6570\u4e2a\u72ec\u7acb redis clusters \u8fdb\u884c\u5927\u89c4\u6a21\u5b89\u88c5 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5c06 redis \u8282\u70b9\u5206\u5e03\u5230\u4e0d\u540c\u7684\u7269\u7406\u673a\u5668\u4e0a","title":"\u9ad8\u53ef\u7528\u6027\u7684\u5efa\u8bae"},{"location":"docs/redlock/node-redlock5/#_2","text":"\u8bf7\u786e\u4fdd\u4f7f\u7528\u5185\u7f6e\u96c6\u7fa4\u652f\u6301\u7684\u5ba2\u6237\u7aef\uff0c\u5982 ioredis . \u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u9884\u5148\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u5230 redlock\uff0c\u4f7f\u7528 single redis \u96c6\u7fa4\u6216 sentinal \u914d\u7f6e\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u3002 \u867d\u7136\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u786e\u5b9e\u83b7\u5f97\u4e86\u9ad8\u53ef\u7528\u6027\u5e76\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u541e\u5410\u91cf\uff0c\u4f46\u6545\u969c\u6a21\u5f0f\u7565\u6709\u4e0d\u540c\uff0c\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u4e00\u4e2a\u9501\u53ef\u80fd\u88ab\u83b7\u53d6\u4e24\u6b21: \u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528\u6700\u7ec8\u4e00\u81f4\u7684 redis \u590d\u5236\uff0c\u5e76\u4e14\u60a8\u83b7\u5f97\u4e86\u8d44\u6e90\u7684\u9501\u3002 \u5728\u83b7\u5f97\u4f60\u7684\u9501\u540e\uff0credis \u7684\u788e\u7247\u4e3b\u673a\u7acb\u5373\u5d29\u6e83\u3002 Redis \u505a\u4e86\u5b83\u7684\u4e8b\u60c5\uff0c\u5e76\u628a\u5b83\u7684\u6545\u969c\u8f6c\u79fb\u5230\u8fd8\u6ca1\u6709\u540c\u6b65\u4f60\u7684\u9501\u7684 slave \u4e0a\u3002 \u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u83b7\u53d6\u76f8\u540c\u8d44\u6e90\u7684\u9501\uff0c\u5b83\u5c06\u6210\u529f! \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 redlock \u5141\u8bb8\u4f60\u6307\u5b9a\u591a\u4e2a\u72ec\u7acb\u7684\u8282\u70b9/\u96c6\u7fa4: \u901a\u8fc7\u8981\u6c42\u5b83\u4eec\u4e4b\u95f4\u8fbe\u6210\u4e00\u81f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u53d6\u51fa\u6216\u6545\u969c\u8f6c\u79fb\u5c11\u6570\u8282\u70b9\uff0c\u800c\u4e0d\u4f1a\u4f7f\u6d3b\u52a8\u9501\u5931\u6548\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u7684\u7b97\u6cd5\uff0c\u8bf7\u67e5\u770b redis distlock \u9875\u9762 .","title":"\u4f7f\u7528\u96c6\u7fa4/\u54e8\u5175"},{"location":"docs/redlock/node-redlock5/#_3","text":"\u7ea2\u9501\u7684\u76ee\u7684\u662f\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u63d0\u4f9b\u8d44\u6e90\u7684\u72ec\u5360\u6027\u4fdd\u8bc1\uff0c\u800c\u4e0d\u662f\u7528\u6765\u62a5\u544a\u8d44\u6e90\u7684\u6240\u6709\u6743\u72b6\u6001\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u7f51\u7edc\u5206\u533a\u7684\u8f83\u5c0f\u4e00\u7aef\uff0c\u60a8\u5c06\u65e0\u6cd5\u83b7\u5f97\u9501\uff0c\u4f46\u60a8\u4e0d\u77e5\u9053\u53e6\u4e00\u7aef\u662f\u5426\u5b58\u5728\u9501;\u4f60\u53ea\u77e5\u9053\u4f60\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u7684\u72ec\u5bb6\u7ecf\u8425\u6743\u3002 \u91cd\u8bd5\u884c\u4e3a\u4f7f\u60c5\u51b5\u66f4\u52a0\u590d\u6742\uff0c\u5728\u83b7\u53d6\u591a\u4e2a\u8d44\u6e90\u4e0a\u7684\u9501\u65f6\u66f4\u662f\u5982\u6b64\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u8bb8\u591a\u4efb\u52a1\u6765\u8bf4\uff0c\u5c1d\u8bd5\u4f7f\u7528 retryCount=0 \u9501\u5b9a\u5c31\u8db3\u591f\u4e86\uff0c \u5e76\u5c06\u5931\u8d25\u89c6\u4e3a\u8d44\u6e90\u88ab locked \u6216(\u66f4\u51c6\u786e\u5730\u8bf4) unavailable \u3002 \u6ce8\u610f\uff0c\u4f7f\u7528' retryCount=-1 '\u5c06\u6709\u65e0\u9650\u7684\u91cd\u8bd5\uff0c\u76f4\u5230\u83b7\u5f97\u9501\u3002","title":"\u6211\u600e\u4e48\u68c0\u67e5\u4e1c\u897f\u662f\u5426\u4e0a\u9501\u4e86?"},{"location":"docs/redlock/node-redlock5/#_4","text":"Bash npm install --save redlock","title":"\u5b89\u88c5"},{"location":"docs/redlock/node-redlock5/#_5","text":"Redlock \u88ab\u8bbe\u8ba1\u6210\u4f7f\u7528 ioredis \u6765\u4fdd\u6301\u5b83\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u548c\u5904\u7406\u96c6\u7fa4\u534f\u8bae\u3002 \u4e00\u4e2a redlock \u5bf9\u8c61\u5b9e\u4f8b\u5316\u4e00\u4e2a\u81f3\u5c11\u4e00\u4e2a redis \u5ba2\u6237\u7aef\u548c\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\u7684\u6570\u7ec4\u3002 Redlock \u5bf9\u8c61\u7684\u5c5e\u6027\u4e0d\u5e94\u8be5\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u540e\u66f4\u6539\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u5bf9\u6d3b\u9501\u4ea7\u751f\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\u3002 TypeScript import Client from \"ioredis\" ; import Redlock from \"./redlock\" ; const redisA = new Client ({ host : \"a.redis.example.com\" }); const redisB = new Client ({ host : \"b.redis.example.com\" }); const redisC = new Client ({ host : \"c.redis.example.com\" }); const redlock = new Redlock ( // You should have one client for each independent redis node // or cluster. [ redisA , redisB , redisC ], { // The expected clock drift; for more details see: // http://redis.io/topics/distlock driftFactor : 0.01 , // multiplied by lock ttl to determine drift time // The max number of times Redlock will attempt to lock a resource // before erroring. retryCount : 10 , // the time in ms between attempts retryDelay : 200 , // time in ms // the max time in ms randomly added to retries // to improve performance under high contention // see https://www.awsarchitectureblog.com/2015/03/backoff.html retryJitter : 200 , // time in ms // The minimum remaining time on a lock before an extension is automatically // attempted with the `using` API. automaticExtensionThreshold : 500 , // time in ms } );","title":"\u914d\u7f6e"},{"location":"docs/redlock/node-redlock5/#_6","text":"\u56e0\u4e3a redlock \u662f\u4e3a\u9ad8\u53ef\u7528\u6027\u800c\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u5b83\u5e76\u4e0d\u5173\u5fc3\u662f\u5426\u6709\u5c11\u6570 redis \u5b9e\u4f8b/\u96c6\u7fa4\u5728\u64cd\u4f5c\u4e2d\u5931\u8d25\u3002 \u4f46\u662f\uff0c\u76d1\u89c6\u548c\u8bb0\u5f55\u8fd9\u79cd\u60c5\u51b5\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002 \u5f53 Redlock \u9047\u5230\u9519\u8bef\u65f6\uff0c\u5b83\u4f1a\u89e6\u53d1\u4e00\u4e2a error \u4e8b\u4ef6\uff0c\u5373\u4f7f\u8be5\u9519\u8bef\u5728\u6b63\u5e38\u64cd\u4f5c\u4e2d\u88ab\u5ffd\u7565\u3002 TypeScript redlock . on ( \"error\" , ( error ) => { // \u5ffd\u7565\u8d44\u6e90\u5728\u5ba2\u6237\u7aef\u663e\u5f0f\u6807\u8bb0\u4e3a\u9501\u5b9a\u7684\u60c5\u51b5\u3002 if ( error instanceof ResourceLockedError ) { return ; } // \u65e5\u5fd7\u5176\u4ed6\u6240\u6709\u9519\u8bef. console . error ( error ); }); \u6b64\u5916\uff0c Lock \u548c ExecutionError \u7c7b\u7684 attempt \u5c5e\u6027\u4e0a\u63d0\u4f9b\u4e86 per-attempt \u548c per-client \u7edf\u8ba1\u4fe1\u606f(\u5305\u62ec\u9519\u8bef)\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"docs/redlock/node-redlock5/#_7","text":"using \u65b9\u6cd5\u5728\u81ea\u52a8\u6269\u5c55\u9501\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u88c5\u5e76\u6267\u884c\u4f8b\u7a0b\uff0c\u8fd4\u56de\u4f8b\u7a0b\u503c\u7684\u627f\u8bfa\u3002 \u5728\u81ea\u52a8\u6269\u5c55\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u66f4\u65b0\u4e00\u4e2a AbortSignal \uff0c\u4ee5\u8868\u660e\u8be5\u4f8b\u7a0b\u7684\u7ec8\u6b62\u662f\u6b63\u786e\u7684\uff0c\u5e76\u5c06\u9047\u5230\u7684\u9519\u8bef\u4f20\u9012\u4e0b\u53bb\u3002 TypeScript await redlock . using ([ senderId , recipientId ], 5000 , async ( signal ) => { // Do something... await something (); // \u786e\u4fdd\u4efb\u4f55\u5fc5\u8981\u7684\u9501\u6269\u5c55\u6ca1\u6709\u5931\u8d25\u3002 if ( signal . aborted ) throw signal . error ; // Do something else... await somethingElse (); }); \u6216\u8005\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u548c\u91ca\u653e\u9501: TypeScript // Acquire a lock. let lock = await redlock . acquire ([ \"a\" ], 5000 ); // Do something... await something (); // Extend the lock. lock = await lock . extend ( 5000 ); // Do something else... await somethingElse (); // Release the lock. await lock . release ();","title":"\u4f7f\u7528"},{"location":"docs/redlock/node-redlock5/#api","text":"\u8bf7\u67e5\u770b(\u975e\u5e38\u7b80\u6d01\u7684)\u6e90\u4ee3\u7801\u6216 TypeScript \u5b9a\u4e49\uff0c\u4e86\u89e3 API \u7684\u8be6\u7ec6\u5206\u89e3\u3002","title":"API"},{"location":"docs/redlock/warlock/","text":"https://github.com/thedeveloper/warlock Battle-hardened distributed locking using redis. Requirements node-redis compatible with v0.10 Redis v2.6.12 or above. If you're running a Redis version from v2.6.0 to v2.6.11 inclusive use v0.0.7 of this module. Install Text Only npm install node-redis-warlock Usage JavaScript const Warlock = require ( \"node-redis-warlock\" ); const Redis = require ( \"redis\" ); // Establish a redis client and pass it to warlock const redis = Redis . createClient (); const warlock = Warlock ( redis ); // Set a lock const key = \"test-lock\" ; const ttl = 10000 ; // Lifetime of the lock warlock . lock ( key , ttl , ( err , unlock ) => { if ( err ) { // Something went wrong and we weren't able to set a lock return ; } if ( typeof unlock === \"function\" ) { // If the lock is set successfully by this process, an unlock function is passed to our callback. // Do the work that required lock protection, and then unlock() when finished... // // do stuff... // unlock (); } else { // Otherwise, the lock was not established by us so we must decide what to do // Perhaps wait a bit & retry... } }); // set a lock optimistically const key = \"opt-lock\" ; const ttl = 10000 ; const maxAttempts = 4 ; // Max number of times to try setting the lock before erroring const wait = 1000 ; // Time to wait before another attempt if lock already in place warlock . optimistic ( key , ttl , maxAttempts , wait , ( err , unlock ) => {}); // unlock using the lock id var key = \"test-lock-2\" ; var ttl = 10000 ; let lockId ; warlock . lock ( key , ttl , ( err , _ , id ) => { lockId = id ; }); // each client who knows the lockId can release the lock warlock . unlock ( key , lockId , ( err , result ) => { if ( result == 1 ) { // unlocked successfully } }); // change a lock's ttl var key = \"touch-lock\" ; var ttl = 10000 ; var ttl2 = 20000 ; warlock . lock ( key , ttl , function ( err , unlock , id ) { warlock . touch ( key , id , ttl2 , function ( err ) {}); }); ProTips Read my Distributed locks using Redis article and Redis' author's A proposal for more reliable locks using Redis to learn more about the theory of distributed locks using Redis.","title":"warlock"},{"location":"docs/redlock/warlock/#requirements","text":"node-redis compatible with v0.10 Redis v2.6.12 or above. If you're running a Redis version from v2.6.0 to v2.6.11 inclusive use v0.0.7 of this module.","title":"Requirements"},{"location":"docs/redlock/warlock/#install","text":"Text Only npm install node-redis-warlock","title":"Install"},{"location":"docs/redlock/warlock/#usage","text":"JavaScript const Warlock = require ( \"node-redis-warlock\" ); const Redis = require ( \"redis\" ); // Establish a redis client and pass it to warlock const redis = Redis . createClient (); const warlock = Warlock ( redis ); // Set a lock const key = \"test-lock\" ; const ttl = 10000 ; // Lifetime of the lock warlock . lock ( key , ttl , ( err , unlock ) => { if ( err ) { // Something went wrong and we weren't able to set a lock return ; } if ( typeof unlock === \"function\" ) { // If the lock is set successfully by this process, an unlock function is passed to our callback. // Do the work that required lock protection, and then unlock() when finished... // // do stuff... // unlock (); } else { // Otherwise, the lock was not established by us so we must decide what to do // Perhaps wait a bit & retry... } }); // set a lock optimistically const key = \"opt-lock\" ; const ttl = 10000 ; const maxAttempts = 4 ; // Max number of times to try setting the lock before erroring const wait = 1000 ; // Time to wait before another attempt if lock already in place warlock . optimistic ( key , ttl , maxAttempts , wait , ( err , unlock ) => {}); // unlock using the lock id var key = \"test-lock-2\" ; var ttl = 10000 ; let lockId ; warlock . lock ( key , ttl , ( err , _ , id ) => { lockId = id ; }); // each client who knows the lockId can release the lock warlock . unlock ( key , lockId , ( err , result ) => { if ( result == 1 ) { // unlocked successfully } }); // change a lock's ttl var key = \"touch-lock\" ; var ttl = 10000 ; var ttl2 = 20000 ; warlock . lock ( key , ttl , function ( err , unlock , id ) { warlock . touch ( key , id , ttl2 , function ( err ) {}); });","title":"Usage"},{"location":"docs/redlock/warlock/#protips","text":"Read my Distributed locks using Redis article and Redis' author's A proposal for more reliable locks using Redis to learn more about the theory of distributed locks using Redis.","title":"ProTips"},{"location":"docs/streams/","text":"\u6d41\uff08Streams\uff09 Redis \u6d41\u4ecb\u7ecd Redis \u6d41\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u4ec5\u8ffd\u52a0\u65e5\u5fd7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u6d41\u5b9e\u65f6\u8bb0\u5f55\u5e76\u540c\u65f6\u8054\u5408\u4e8b\u4ef6\u3002 Redis \u6d41\u7528\u4f8b\u7684\u4f8b\u5b50\u5305\u62ec: \u4e8b\u4ef6\u6765\u6e90(\u4f8b\u5982\uff0c\u8ddf\u8e2a\u7528\u6237\u64cd\u4f5c\u3001\u70b9\u51fb\u7b49) \u4f20\u611f\u5668\u76d1\u6d4b(\u4f8b\u5982\uff0c\u73b0\u573a\u8bbe\u5907\u7684\u8bfb\u6570) \u901a\u77e5(\u4f8b\u5982\uff0c\u5728\u5355\u72ec\u7684\u6d41\u4e2d\u5b58\u50a8\u6bcf\u4e2a\u7528\u6237\u7684\u901a\u77e5\u8bb0\u5f55) Redis \u4e3a\u6bcf\u4e2a\u6d41\u6761\u76ee\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 ID\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b id \u7a0d\u540e\u68c0\u7d22\u5b83\u4eec\u76f8\u5173\u8054\u7684\u6761\u76ee\uff0c\u6216\u8005\u8bfb\u53d6\u548c\u5904\u7406\u6d41\u4e2d\u7684\u6240\u6709\u540e\u7eed\u6761\u76ee\u3002 Redis \u6d41\u652f\u6301\u591a\u79cd\u4fee\u526a\u7b56\u7565(\u9632\u6b62\u6d41\u65e0\u754c\u589e\u957f)\u548c\u591a\u79cd\u6d88\u8d39\u7b56\u7565(\u53c2\u89c1 XREAD \u3001 XREADGROUP \u548c XRANGE )\u3002 \u4f8b\u5b50 \u5411\u4e00\u4e2a\u6d41\u4e2d\u6dfb\u52a0\u51e0\u4e2a\u6e29\u5ea6\u8bfb\u6570 Bash > XADD temperatures:us-ny:10007 * temp_f 87 .2 pressure 29 .69 humidity 46 \"1658354918398-0\" > XADD temperatures:us-ny:10007 * temp_f 83 .1 pressure 29 .21 humidity 46 .5 \"1658354934941-0\" > XADD temperatures:us-ny:10007 * temp_f 81 .9 pressure 28 .37 humidity 43 .7 \"1658354957524-0\" \u8bfb\u53d6\u4ece ID 1658354934941-0 \u5f00\u59cb\u7684\u524d\u4e24\u4e2a\u6d41\u9879: Bash > XRANGE temperatures:us-ny:10007 1658354934941 -0 + COUNT 2 1 ) 1 ) \"1658354934941-0\" 2 ) 1 ) \"temp_f\" 2 ) \"83.1\" 3 ) \"pressure\" 4 ) \"29.21\" 5 ) \"humidity\" 6 ) \"46.5\" 2 ) 1 ) \"1658354957524-0\" 2 ) 1 ) \"temp_f\" 2 ) \"81.9\" 3 ) \"pressure\" 4 ) \"28.37\" 5 ) \"humidity\" 6 ) \"43.7\" \u8bfb\u53d6\u6700\u591a 100 \u4e2a\u65b0\u7684\u6d41\u6761\u76ee\uff0c\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\uff0c\u5982\u679c\u6ca1\u6709\u6761\u76ee\u88ab\u5199\u5165\uff0c\u963b\u585e\u6700\u591a 300 \u6beb\u79d2: Bash > XREAD COUNT 100 BLOCK 300 STREAMS temperatures:us-ny:10007 $ ( nil ) \u57fa\u672c\u547d\u4ee4 XADD \u5411\u6d41\u4e2d\u6dfb\u52a0\u65b0\u6761\u76ee\u3002 XREAD \u8bfb\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u6761\u76ee\uff0c\u4ece\u7ed9\u5b9a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6309\u65f6\u95f4\u5411\u524d\u79fb\u52a8\u3002 XRANGE \u8fd4\u56de\u4e24\u4e2a\u63d0\u4f9b\u7684\u6761\u76ee id \u4e4b\u95f4\u7684\u6761\u76ee\u8303\u56f4\u3002 XLEN \u8fd4\u56de\u6d41\u7684\u957f\u5ea6\u3002 \u8bf7\u53c2\u9605\u6d41 \u547d\u4ee4\u7684\u5b8c\u6574\u5217\u8868 \u3002 \u6027\u80fd \u5411\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\u662f O(1)\u3002 \u8bbf\u95ee\u4efb\u4f55\u5355\u4e2a\u6761\u76ee\u90fd\u662f O(n)\uff0c\u5176\u4e2d n \u662f ID \u7684\u957f\u5ea6\u3002 \u7531\u4e8e\u6d41 id \u901a\u5e38\u5f88\u77ed\u4e14\u957f\u5ea6\u56fa\u5b9a\uff0c\u8fd9\u6709\u6548\u5730\u51cf\u5c11\u4e86\u67e5\u627e\u65f6\u95f4\u3002 \u6709\u5173\u539f\u56e0\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u6ce8\u610f\u6d41\u662f\u4f5c\u4e3a \u57fa\u6811 \u5b9e\u73b0\u7684\u3002 \u7b80\u5355\u5730\u8bf4\uff0cRedis \u6d41\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u63d2\u5165\u548c\u8bfb\u53d6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1\u6bcf\u4e2a\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e86\u89e3\u66f4\u591a Redis \u6d41\u6559\u7a0b \u7528\u8bb8\u591a\u4f8b\u5b50\u89e3\u91ca\u4e86 Redis \u6d41\u3002 Redis \u6d41\u89e3\u91ca \u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4ecb\u7ecd\u5728 Redis \u6d41\u3002 Redis \u5927\u5b66\u7684 RU202 \u662f\u4e00\u95e8\u514d\u8d39\u7684\u5728\u7ebf\u8bfe\u7a0b\uff0c\u4e13\u95e8\u9488\u5bf9 Redis \u6d41\u3002 \u53cd\u9988 \u5982\u679c\u60a8\u5728\u6b64\u9875\u9762\u4e0a\u53d1\u73b0\u4e86\u95ee\u9898\uff0c\u6216\u8005\u6709\u6539\u8fdb\u5efa\u8bae\uff0c\u8bf7\u63d0\u4ea4\u5408\u5e76\u6216\u5728\u5b58\u50a8\u5e93\u4e2d\u6253\u5f00\u95ee\u9898\u7684\u8bf7\u6c42\u3002","title":"\u6d41\uff08Streams\uff09"},{"location":"docs/streams/#streams","text":"Redis \u6d41\u4ecb\u7ecd Redis \u6d41\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u4ec5\u8ffd\u52a0\u65e5\u5fd7\u7684\u6570\u636e\u7ed3\u6784\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u6d41\u5b9e\u65f6\u8bb0\u5f55\u5e76\u540c\u65f6\u8054\u5408\u4e8b\u4ef6\u3002 Redis \u6d41\u7528\u4f8b\u7684\u4f8b\u5b50\u5305\u62ec: \u4e8b\u4ef6\u6765\u6e90(\u4f8b\u5982\uff0c\u8ddf\u8e2a\u7528\u6237\u64cd\u4f5c\u3001\u70b9\u51fb\u7b49) \u4f20\u611f\u5668\u76d1\u6d4b(\u4f8b\u5982\uff0c\u73b0\u573a\u8bbe\u5907\u7684\u8bfb\u6570) \u901a\u77e5(\u4f8b\u5982\uff0c\u5728\u5355\u72ec\u7684\u6d41\u4e2d\u5b58\u50a8\u6bcf\u4e2a\u7528\u6237\u7684\u901a\u77e5\u8bb0\u5f55) Redis \u4e3a\u6bcf\u4e2a\u6d41\u6761\u76ee\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 ID\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b id \u7a0d\u540e\u68c0\u7d22\u5b83\u4eec\u76f8\u5173\u8054\u7684\u6761\u76ee\uff0c\u6216\u8005\u8bfb\u53d6\u548c\u5904\u7406\u6d41\u4e2d\u7684\u6240\u6709\u540e\u7eed\u6761\u76ee\u3002 Redis \u6d41\u652f\u6301\u591a\u79cd\u4fee\u526a\u7b56\u7565(\u9632\u6b62\u6d41\u65e0\u754c\u589e\u957f)\u548c\u591a\u79cd\u6d88\u8d39\u7b56\u7565(\u53c2\u89c1 XREAD \u3001 XREADGROUP \u548c XRANGE )\u3002","title":"\u6d41\uff08Streams\uff09"},{"location":"docs/streams/#_1","text":"\u5411\u4e00\u4e2a\u6d41\u4e2d\u6dfb\u52a0\u51e0\u4e2a\u6e29\u5ea6\u8bfb\u6570 Bash > XADD temperatures:us-ny:10007 * temp_f 87 .2 pressure 29 .69 humidity 46 \"1658354918398-0\" > XADD temperatures:us-ny:10007 * temp_f 83 .1 pressure 29 .21 humidity 46 .5 \"1658354934941-0\" > XADD temperatures:us-ny:10007 * temp_f 81 .9 pressure 28 .37 humidity 43 .7 \"1658354957524-0\" \u8bfb\u53d6\u4ece ID 1658354934941-0 \u5f00\u59cb\u7684\u524d\u4e24\u4e2a\u6d41\u9879: Bash > XRANGE temperatures:us-ny:10007 1658354934941 -0 + COUNT 2 1 ) 1 ) \"1658354934941-0\" 2 ) 1 ) \"temp_f\" 2 ) \"83.1\" 3 ) \"pressure\" 4 ) \"29.21\" 5 ) \"humidity\" 6 ) \"46.5\" 2 ) 1 ) \"1658354957524-0\" 2 ) 1 ) \"temp_f\" 2 ) \"81.9\" 3 ) \"pressure\" 4 ) \"28.37\" 5 ) \"humidity\" 6 ) \"43.7\" \u8bfb\u53d6\u6700\u591a 100 \u4e2a\u65b0\u7684\u6d41\u6761\u76ee\uff0c\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\uff0c\u5982\u679c\u6ca1\u6709\u6761\u76ee\u88ab\u5199\u5165\uff0c\u963b\u585e\u6700\u591a 300 \u6beb\u79d2: Bash > XREAD COUNT 100 BLOCK 300 STREAMS temperatures:us-ny:10007 $ ( nil )","title":"\u4f8b\u5b50"},{"location":"docs/streams/#_2","text":"XADD \u5411\u6d41\u4e2d\u6dfb\u52a0\u65b0\u6761\u76ee\u3002 XREAD \u8bfb\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u6761\u76ee\uff0c\u4ece\u7ed9\u5b9a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6309\u65f6\u95f4\u5411\u524d\u79fb\u52a8\u3002 XRANGE \u8fd4\u56de\u4e24\u4e2a\u63d0\u4f9b\u7684\u6761\u76ee id \u4e4b\u95f4\u7684\u6761\u76ee\u8303\u56f4\u3002 XLEN \u8fd4\u56de\u6d41\u7684\u957f\u5ea6\u3002 \u8bf7\u53c2\u9605\u6d41 \u547d\u4ee4\u7684\u5b8c\u6574\u5217\u8868 \u3002","title":"\u57fa\u672c\u547d\u4ee4"},{"location":"docs/streams/#_3","text":"\u5411\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\u662f O(1)\u3002 \u8bbf\u95ee\u4efb\u4f55\u5355\u4e2a\u6761\u76ee\u90fd\u662f O(n)\uff0c\u5176\u4e2d n \u662f ID \u7684\u957f\u5ea6\u3002 \u7531\u4e8e\u6d41 id \u901a\u5e38\u5f88\u77ed\u4e14\u957f\u5ea6\u56fa\u5b9a\uff0c\u8fd9\u6709\u6548\u5730\u51cf\u5c11\u4e86\u67e5\u627e\u65f6\u95f4\u3002 \u6709\u5173\u539f\u56e0\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u6ce8\u610f\u6d41\u662f\u4f5c\u4e3a \u57fa\u6811 \u5b9e\u73b0\u7684\u3002 \u7b80\u5355\u5730\u8bf4\uff0cRedis \u6d41\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u63d2\u5165\u548c\u8bfb\u53d6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1\u6bcf\u4e2a\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u6027\u80fd"},{"location":"docs/streams/#_4","text":"Redis \u6d41\u6559\u7a0b \u7528\u8bb8\u591a\u4f8b\u5b50\u89e3\u91ca\u4e86 Redis \u6d41\u3002 Redis \u6d41\u89e3\u91ca \u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4ecb\u7ecd\u5728 Redis \u6d41\u3002 Redis \u5927\u5b66\u7684 RU202 \u662f\u4e00\u95e8\u514d\u8d39\u7684\u5728\u7ebf\u8bfe\u7a0b\uff0c\u4e13\u95e8\u9488\u5bf9 Redis \u6d41\u3002","title":"\u4e86\u89e3\u66f4\u591a"},{"location":"docs/streams/#_5","text":"\u5982\u679c\u60a8\u5728\u6b64\u9875\u9762\u4e0a\u53d1\u73b0\u4e86\u95ee\u9898\uff0c\u6216\u8005\u6709\u6539\u8fdb\u5efa\u8bae\uff0c\u8bf7\u63d0\u4ea4\u5408\u5e76\u6216\u5728\u5b58\u50a8\u5e93\u4e2d\u6253\u5f00\u95ee\u9898\u7684\u8bf7\u6c42\u3002","title":"\u53cd\u9988"},{"location":"docs/streams/nestjs-redis-streams/","text":"@tamimaj/nestjs-redis-streams https://github.com/tamimaj/nestjs-redis-streams { width=\"300\" } \u4f7f\u7528 ioredis \u5e93\u7684 NestJS \u7684 Redis \u6d41\u4f20\u8f93\u7b56\u7565\u3002 Notice \u672c\u5e93\u53ef\u4ee5\u4f5c\u4e3a\u8ba2\u9605\u8005\u5728NestJS\u5fae\u670d\u52a1\u4e2d\u4f7f\u7528\u3002 \u7136\u800c\uff0c\u8be5\u7b56\u7565\u7684\u5ba2\u6237\u7aef\u8fd8\u6ca1\u6709\u5b9e\u73b0\u3002 \u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 liaoliaots/nestjs-redis \u7b49\u4efb\u4f55\u5ba2\u6237\u673a\u6a21\u5757\u4f5c\u4e3aXADD\u6d41\u7684\u53d1\u5e03\u5668\u3002 \u7279\u6027 \u7528 TypeScript \u7f16\u7801\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u6765\u542c\u6d41\u3002 \u628a\u4f60\u7684\u5904\u7406\u5668\u63d2\u5165\u4f60\u7684\u63a7\u5236\u5668\uff0c\u4f60\u7684\u6d41\u6d88\u606f\u5c31\u4f1a\u5728\u90a3\u91cc\u7740\u9646\u3002 \u5e95\u5c42\u4f7f\u7528\u6765\u81ea Redis \u7684 XREADGROUP \u547d\u4ee4\u3002 \u81ea\u52a8\u6d88\u8d39\u7ec4\u4e3a\u60a8\u7684\u6d41\u521b\u5efa\uff0c\u5728\u542f\u52a8\u4e4b\u524d\u5f00\u59cb\u6536\u542c\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u54cd\u5e94\u4e00\u4e2a\u6d41(\u6216\u591a\u4e2a\u6d41)\u3002 \u81ea\u52a8 XACK \u548c\u5165\u7ad9\u6d88\u606f id \u8ddf\u8e2a\u3002 \u5e93\u5141\u8bb8\u60a8\u56de\u590d\u7136\u540e\u786e\u8ba4\uff0c\u6216\u76f4\u63a5\u786e\u8ba4\u3002 \u5185\u7f6e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002 \u81ea\u5b9a\u4e49\u53ef\u63d2\u62d4\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002 \u5b89\u88c5 with npm Bash npm install --save @tamimaj/nestjs-redis-streams with yarn Bash yarn add @tamimaj/nestjs-redis-streams \u5982\u4f55\u4f7f\u7528? \u5728\u4f60\u7684 main.ts \u4e2d\u3002\u50cf\u8fd9\u6837\u521d\u59cb\u5316\u81ea\u5b9a\u4e49\u7b56\u7565: TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import { RedisStreamStrategy } from \"@tamimaj/nestjs-redis-streams\" ; async function bootstrap () { const app = await NestFactory . createMicroservice ( AppModule , { strategy : new RedisStreamStrategy ({ // optional. All ioredis options + url. connection : { url : \"0.0.0.0:6379\" , // host: 'localhost', // port: 6379, // password: '123456', // etc... }, // mandatory. streams : { block : 5000 , consumer : \"users-1\" , consumerGroup : \"users\" , }, // optional. See our example main.ts file for more details... // serialization: {}, }), }); await app . listen (); } bootstrap (); \u5728\u5176\u4e2d\u4e00\u4e2a\u63a7\u5236\u5668\u4e2d\uff0c\u60a8\u8981\u5904\u7406\u6765\u81ea\u6d41\u7684\u6d88\u606f\u3002 \u4f7f\u7528\u6211\u4eec\u7684\u88c5\u9970\u5668 @RedisStreamHandler(\"users-1\") \u544a\u8bc9\u5e93\u6ce8\u518c\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u5e76\u76d1\u542c users-1 \u6d41\uff0c\u6bcf\u5f53\u5b83\u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u5c06\u4e0e\u6570\u636e\u548c\u521b\u5efa\u7684\u6d88\u606f\u4e0a\u4e0b\u6587\u4e00\u8d77\u88ab\u8c03\u7528\u3002 TypeScript import { Ctx , MessagePattern , Payload } from \"@nestjs/microservices\" ; import { RedisStreamHandler , StreamResponse , RedisStreamContext } from \"@tamimaj/nestjs-redis-streams\" ; export class UsersEventHandlers { @RedisStreamHandler ( \"users:create\" ) // stream name. async handleUserCreate ( @Payload () data : any , @Ctx () ctx : RedisStreamContext ) { console . log ( \"Handler users:create called with payload: \" , data ); console . log ( \"Headers: \" , ctx . getMessageHeaders ()); return [ { payload : { // optional headers to override or add new headers keys. // everything except data is considered headers for our serialization. correlationId : \"THE BEST CORRELATION ID EVER\" , extraKey : \"Whatever1234\" , // data is the only mandatory key. for our serializer/deserializer. data : { name : \"Tamim\" , lastName : \"Abbas\" }, }, stream : \"user:created\" , }, ] as StreamResponse ; // return [] as StreamResponse; // return null; } } \u4f60\u4ece\u4f60\u7684\u5904\u7406\u5668\u8fd4\u56de\u7684\u4e1c\u897f\u544a\u8bc9\u5e93\u505a\u4ec0\u4e48: \u5982\u679c\u60a8\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\u6216\u8fd4\u56de null :\u5e93\u5c06\u4e0d\u4f1a\u53d1\u5e03\u4efb\u4f55\u6d41\uff0c\u4e5f\u4e0d\u4f1a\u786e\u8ba4\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u3002 \u5982\u679c\u8fd4\u56de\u7a7a\u6570\u7ec4:\u5e93\u5c06\u53ea\u786e\u8ba4\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u3002 \u5982\u679c\u60a8\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4:\u5e93\u5c06\u4ee5\u6d41\u7684\u5f62\u5f0f\u53d1\u5e03\u8fd9\u4e9b\u6709\u6548\u8d1f\u8f7d\uff0c\u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u8fdb\u884c\u786e\u8ba4\u3002 \u9ed8\u8ba4\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u662f\u5982\u4f55\u5de5\u4f5c\u7684? \u6211\u4eec\u5df2\u7ecf\u8bbe\u8ba1\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u903b\u8f91\uff0c\u4f7f\u5176\u5bf9\u4f01\u4e1a\u5fae\u670d\u52a1\u4f53\u7cfb\u7ed3\u6784\u6709\u7528\u3002 \u6211\u4eec\u8bb0\u4f4f\u4e86\u5934\u548c\u5143\u6570\u636e\u7684\u7528\u4f8b\uff0c\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u6216\u8005\u552f\u4e00\u5730\u8ddf\u8e2a\u6765\u81ea\u65e5\u5fd7\u670d\u52a1(\u5982 datdog)\u7684\u6d88\u606f\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u4fe1\u606f\u8bbe\u8ba1\u6210\u4e24\u90e8\u5206\u3002 \u5934\u6587\u4ef6\u90e8\u5206\u548c\u6570\u636e\u90e8\u5206\u3002 \u6d88\u606f\u7684\u5934\u90e8\u5206\u53ea\u662f\u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u5316\u5b58\u50a8\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u3002 \u8fd9\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u641c\u7d22\u65e5\u5fd7\u670d\u52a1\u4e2d\u7684 id\u3002 \u6570\u636e\u90e8\u5206\u662f\u4e00\u4e2a\u5355\u952e data \uff0c\u5b83\u6709\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u503c\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5b58\u50a8\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u6570\u636e\u3002\u7c7b\u4f3c\u4e8e post \u8bf7\u6c42\u7684\u4e3b\u4f53\u3002 \u8be5\u6570\u636e\u503c\u88ab JSON \u5b57\u7b26\u4e32\u5316\u5e76\u5b58\u50a8\u5728\u6d41\u6d88\u606f\u4e2d\u3002 \u5e76\u4e14\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668 JSON \u89e3\u6790\u5b83\u5e76\u5c06\u5b83\u8f6c\u53d1\u7ed9\u5904\u7406\u7a0b\u5e8f\u3002 \u5e93\u6d41\u548c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u6b65\u9aa4\u3002 \u5728\u76d1\u542c\u65f6\u6536\u5230\u6d88\u606f\u3002 \u521b\u5efa\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5b58\u50a8\u5165\u7ad9\u6d88\u606f\u7684 id\u3001\u4f7f\u7528\u8005\u7ec4\u3001\u4f7f\u7528\u8005\u548c\u6d41\u540d\u79f0\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a inboundContext \u3002 \u539f\u59cb\u6d88\u606f\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\u88ab\u8f6c\u53d1\u5230\u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668\u6216\u60a8\u7684\u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5668\u3002 \u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668\u63a5\u53d7\u8fd9\u4e9b\u952e/\u503c\uff0c\u5e76\u5c06\u9664\u201cdata\u201d\u952e\u5916\u7684\u6240\u6709\u5185\u5bb9\u90fd\u89c6\u4e3a\u5934\u6587\u4ef6\u3002 \u53cd\u5e8f\u5217\u5316\u5668\u901a\u8fc7\u8c03\u7528 inboundContext.setMessageHeaders(headers) \u5c06\u6240\u6709\u7684\u62a5\u5934\u5b58\u50a8\u5728\u5165\u7ad9\u4e0a\u4e0b\u6587\u4e2d; \u7136\u540e\u53cd\u5e8f\u5217\u5316\u5668\u89e3\u6790 data \u503c\u7684\u5b57\u7b26\u4e32\u5316 JSON \u5e76\u8fd4\u56de\u5b83\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a\u6709\u6548\u8f7d\u8377\u3002 \u73b0\u5728\uff0c\u6709\u6548\u8d1f\u8f7d\u5230\u8fbe\u4ece\u53cd\u5e8f\u5217\u5316\u5668\u8fd4\u56de\u7684\u76f8\u5e94\u6d41\u5904\u7406\u7a0b\u5e8f\u3002 \u6d41\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u8d1f\u8f7d+\u5165\u7ad9\u4e0a\u4e0b\u6587(\u5982\u679c\u60a8\u9700\u8981\u8bfb\u53d6\u5b58\u50a8\u7684\u62a5\u5934\u3001\u6d88\u8d39\u8005\u7ec4\u3001\u5165\u7ad9\u6d88\u606f id \u7b49)\u3002 \u5904\u7406\u7a0b\u5e8f\u5e94\u8be5\u6267\u884c\u4e00\u4e9b\u4e1a\u52a1\u903b\u8f91\uff0c\u7136\u540e\u8fd4\u56de: \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de null \u6216\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\uff0c\u6d41\u5c06\u5728\u8fd9\u91cc\u7ed3\u675f\u3002\u6ca1\u6709\u786e\u8ba4\u5c06\u53d1\u751f\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u6d41\u5c06\u53d1\u5e03\u4f5c\u4e3a\u56de\u5e94\u3002 \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7a7a\u6570\u7ec4\uff0c\u5e93\u5c06\u53ea\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\uff0c\u800c\u4e0d\u4f1a\u53d1\u5e03\u4efb\u4f55\u6d41\u4f5c\u4e3a\u8fd4\u56de\u54cd\u5e94\u3002 \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4\uff0c\u5e93\u5c06\u53d1\u5e03\u8fd9\u4e9b\u6d41\uff0c\u7136\u540e\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\u3002 \u7ee7\u7eed\u4e0b\u9762\u7684\u6d41\u7a0b\u2026 \u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4\u3002 \u73b0\u5728\uff0c\u6bcf\u4e2a\u6709\u6548\u8d1f\u8f7d\u5bf9\u8c61\u90fd\u88ab\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u6216\u60a8\u7684\u5e26\u6709\u5165\u7ad9\u4e0a\u4e0b\u6587\u7684\u5e8f\u5217\u5316\u5668\u3002 \u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u63a5\u53d7\u6709\u6548\u8d1f\u8f7d\u5bf9\u8c61\u5e76\u63d0\u53d6\u6570\u636e\u952e\uff0c\u5e76\u5c06\u4efb\u4f55\u5176\u4ed6\u952e\u89c6\u4e3a\u6807\u5934\u3002\u8fd9\u4e9b\u6807\u5934\u8986\u76d6\u4fdd\u5b58\u5728\u5165\u7ad9\u4e0a\u4e0b\u6587\u4e2d\u7684\u6807\u5934\u6216\u6269\u5c55\u5b83\u4eec\u3002 \u5e8f\u5217\u5316\u7a0b\u5e8f\u5c06\u5165\u7ad9\u4e0a\u4e0b\u6587\u7684\u62a5\u5934\u4e0e\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684\u4efb\u4f55\u53ef\u9009\u62a5\u5934\u5408\u5e76\u3002 \u5e8f\u5217\u5316\u5668\u5c06\u5bf9\u6570\u636e\u952e\u7684\u5bf9\u8c61\u8fdb\u884c\u5b57\u7b26\u4e32\u5316\uff0c\u5e76\u4f7f\u5176\u968f\u65f6\u51c6\u5907\u597d\u3002 \u7136\u540e\uff0c\u5e8f\u5217\u5316\u5668\u5c06\u5b57\u7b26\u4e32\u5316\u6240\u6709\u7684\u5934\u952e/\u503c\uff0c\u5e76\u4f7f\u6240\u6709\u7684\u5185\u5bb9\u5728 Redis Stream \u63a5\u53d7\u7684\u683c\u5f0f\uff0c\u5373 [headersKey1, headersValue1, key2, value2\uff0c\u2026]\uff0c data, stringifiedJSON] \u3002 \u5c06\u51c6\u5907\u597d\u7684\u6570\u7ec4\u8fd4\u56de\u5230\u5e93\u3002 \u5e93\u5c06\u901a\u8fc7\u6765\u81ea Redis \u7684 XADD \u547d\u4ee4\u5c06\u6bcf\u4e2a\u6709\u6548\u8f7d\u8377\u53d1\u5e03\u5230\u76f8\u5e94\u7684\u6d41\u4e2d\u3002 \u7136\u540e\uff0c\u5c06\u4ece Redis \u901a\u8fc7 XACK \u547d\u4ee4\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\u3002 \u6d41\u7684\u7ed3\u675f\u3002\u56de\u53bb\u542c\u2026\u2026 \u68c0\u67e5\u6211\u4eec\u7684\u793a\u4f8b\uff0c\u4e86\u89e3\u5982\u4f55\u8bfb\u53d6\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u4ee5\u53ca\u8fd4\u56de\u7684\u6709\u6548\u8d1f\u8f7d\u7684\u8bed\u6cd5\u3002 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668/\u53cd\u5e8f\u5217\u5316\u5668? \u6211\u4eec\u5728\u4e0a\u9762\u63d0\u5230\u7684\u6d41\u4e2d\u5b9a\u4e49\u4e86\u5b54\u6765\u4f7f\u7528\u60a8\u7684\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668/\u53cd\u5e8f\u5217\u5316\u5668\u3002 \u4f60\u53ef\u4ee5\u5728 main.ts \u6587\u4ef6\u4e2d\u521d\u59cb\u5316\u7b56\u7565\u65f6\u63d0\u4f9b\u5b83\u4eec\u3002 \u4f7f\u7528\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u9009\u9879\u7684\u952e: serialization: {serializer, deserializer} \u53cd\u5e8f\u5217\u5316\u5668\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4ece Redis \u63a5\u6536\u7684\u884c\u6d88\u606f\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5c06\u6807\u9898\u5b58\u50a8\u5728\u90a3\u91cc\u3002 \u5e8f\u5217\u5316\u5668\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4ece\u6d41\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684\u6709\u6548\u8d1f\u8f7d\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u4ece\u4e2d\u63d0\u53d6\u6d88\u606f\u5934\u5e76\u5728\u53d1\u5e03\u54cd\u5e94\u6d88\u606f\u4e4b\u524d\u5c06\u5b83\u4eec\u9644\u52a0\u56de\u54cd\u5e94\u6d88\u606f\u3002 \u68c0\u67e5\u6211\u4eec\u7684\u4f8b\u5b50 main.ts \u6587\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u8bc4\u8bba\u4e86\u4e00\u4e9b\u9505\u7089\u677f\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u3002","title":"@tamimaj/nestjs-redis-streams"},{"location":"docs/streams/nestjs-redis-streams/#tamimajnestjs-redis-streams","text":"https://github.com/tamimaj/nestjs-redis-streams { width=\"300\" } \u4f7f\u7528 ioredis \u5e93\u7684 NestJS \u7684 Redis \u6d41\u4f20\u8f93\u7b56\u7565\u3002 Notice \u672c\u5e93\u53ef\u4ee5\u4f5c\u4e3a\u8ba2\u9605\u8005\u5728NestJS\u5fae\u670d\u52a1\u4e2d\u4f7f\u7528\u3002 \u7136\u800c\uff0c\u8be5\u7b56\u7565\u7684\u5ba2\u6237\u7aef\u8fd8\u6ca1\u6709\u5b9e\u73b0\u3002 \u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 liaoliaots/nestjs-redis \u7b49\u4efb\u4f55\u5ba2\u6237\u673a\u6a21\u5757\u4f5c\u4e3aXADD\u6d41\u7684\u53d1\u5e03\u5668\u3002","title":"@tamimaj/nestjs-redis-streams"},{"location":"docs/streams/nestjs-redis-streams/#_1","text":"\u7528 TypeScript \u7f16\u7801\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u6765\u542c\u6d41\u3002 \u628a\u4f60\u7684\u5904\u7406\u5668\u63d2\u5165\u4f60\u7684\u63a7\u5236\u5668\uff0c\u4f60\u7684\u6d41\u6d88\u606f\u5c31\u4f1a\u5728\u90a3\u91cc\u7740\u9646\u3002 \u5e95\u5c42\u4f7f\u7528\u6765\u81ea Redis \u7684 XREADGROUP \u547d\u4ee4\u3002 \u81ea\u52a8\u6d88\u8d39\u7ec4\u4e3a\u60a8\u7684\u6d41\u521b\u5efa\uff0c\u5728\u542f\u52a8\u4e4b\u524d\u5f00\u59cb\u6536\u542c\u3002 \u7b80\u5355\u7684\u65b9\u6cd5\u54cd\u5e94\u4e00\u4e2a\u6d41(\u6216\u591a\u4e2a\u6d41)\u3002 \u81ea\u52a8 XACK \u548c\u5165\u7ad9\u6d88\u606f id \u8ddf\u8e2a\u3002 \u5e93\u5141\u8bb8\u60a8\u56de\u590d\u7136\u540e\u786e\u8ba4\uff0c\u6216\u76f4\u63a5\u786e\u8ba4\u3002 \u5185\u7f6e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002 \u81ea\u5b9a\u4e49\u53ef\u63d2\u62d4\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002","title":"\u7279\u6027"},{"location":"docs/streams/nestjs-redis-streams/#_2","text":"with npm Bash npm install --save @tamimaj/nestjs-redis-streams with yarn Bash yarn add @tamimaj/nestjs-redis-streams","title":"\u5b89\u88c5"},{"location":"docs/streams/nestjs-redis-streams/#_3","text":"","title":"\u5982\u4f55\u4f7f\u7528?"},{"location":"docs/streams/nestjs-redis-streams/#maints","text":"TypeScript import { NestFactory } from \"@nestjs/core\" ; import { AppModule } from \"./app.module\" ; import { RedisStreamStrategy } from \"@tamimaj/nestjs-redis-streams\" ; async function bootstrap () { const app = await NestFactory . createMicroservice ( AppModule , { strategy : new RedisStreamStrategy ({ // optional. All ioredis options + url. connection : { url : \"0.0.0.0:6379\" , // host: 'localhost', // port: 6379, // password: '123456', // etc... }, // mandatory. streams : { block : 5000 , consumer : \"users-1\" , consumerGroup : \"users\" , }, // optional. See our example main.ts file for more details... // serialization: {}, }), }); await app . listen (); } bootstrap ();","title":"\u5728\u4f60\u7684main.ts\u4e2d\u3002\u50cf\u8fd9\u6837\u521d\u59cb\u5316\u81ea\u5b9a\u4e49\u7b56\u7565:"},{"location":"docs/streams/nestjs-redis-streams/#_4","text":"\u4f7f\u7528\u6211\u4eec\u7684\u88c5\u9970\u5668 @RedisStreamHandler(\"users-1\") \u544a\u8bc9\u5e93\u6ce8\u518c\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u5e76\u76d1\u542c users-1 \u6d41\uff0c\u6bcf\u5f53\u5b83\u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u5c06\u4e0e\u6570\u636e\u548c\u521b\u5efa\u7684\u6d88\u606f\u4e0a\u4e0b\u6587\u4e00\u8d77\u88ab\u8c03\u7528\u3002 TypeScript import { Ctx , MessagePattern , Payload } from \"@nestjs/microservices\" ; import { RedisStreamHandler , StreamResponse , RedisStreamContext } from \"@tamimaj/nestjs-redis-streams\" ; export class UsersEventHandlers { @RedisStreamHandler ( \"users:create\" ) // stream name. async handleUserCreate ( @Payload () data : any , @Ctx () ctx : RedisStreamContext ) { console . log ( \"Handler users:create called with payload: \" , data ); console . log ( \"Headers: \" , ctx . getMessageHeaders ()); return [ { payload : { // optional headers to override or add new headers keys. // everything except data is considered headers for our serialization. correlationId : \"THE BEST CORRELATION ID EVER\" , extraKey : \"Whatever1234\" , // data is the only mandatory key. for our serializer/deserializer. data : { name : \"Tamim\" , lastName : \"Abbas\" }, }, stream : \"user:created\" , }, ] as StreamResponse ; // return [] as StreamResponse; // return null; } }","title":"\u5728\u5176\u4e2d\u4e00\u4e2a\u63a7\u5236\u5668\u4e2d\uff0c\u60a8\u8981\u5904\u7406\u6765\u81ea\u6d41\u7684\u6d88\u606f\u3002"},{"location":"docs/streams/nestjs-redis-streams/#_5","text":"\u5982\u679c\u60a8\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\u6216\u8fd4\u56de null :\u5e93\u5c06\u4e0d\u4f1a\u53d1\u5e03\u4efb\u4f55\u6d41\uff0c\u4e5f\u4e0d\u4f1a\u786e\u8ba4\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u3002 \u5982\u679c\u8fd4\u56de\u7a7a\u6570\u7ec4:\u5e93\u5c06\u53ea\u786e\u8ba4\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u3002 \u5982\u679c\u60a8\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4:\u5e93\u5c06\u4ee5\u6d41\u7684\u5f62\u5f0f\u53d1\u5e03\u8fd9\u4e9b\u6709\u6548\u8d1f\u8f7d\uff0c\u7136\u540e\u5c06\u63a5\u6536\u5230\u7684\u6d41\u6d88\u606f\u8fdb\u884c\u786e\u8ba4\u3002","title":"\u4f60\u4ece\u4f60\u7684\u5904\u7406\u5668\u8fd4\u56de\u7684\u4e1c\u897f\u544a\u8bc9\u5e93\u505a\u4ec0\u4e48:"},{"location":"docs/streams/nestjs-redis-streams/#_6","text":"\u6211\u4eec\u5df2\u7ecf\u8bbe\u8ba1\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u903b\u8f91\uff0c\u4f7f\u5176\u5bf9\u4f01\u4e1a\u5fae\u670d\u52a1\u4f53\u7cfb\u7ed3\u6784\u6709\u7528\u3002 \u6211\u4eec\u8bb0\u4f4f\u4e86\u5934\u548c\u5143\u6570\u636e\u7684\u7528\u4f8b\uff0c\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u6216\u8005\u552f\u4e00\u5730\u8ddf\u8e2a\u6765\u81ea\u65e5\u5fd7\u670d\u52a1(\u5982 datdog)\u7684\u6d88\u606f\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u4fe1\u606f\u8bbe\u8ba1\u6210\u4e24\u90e8\u5206\u3002 \u5934\u6587\u4ef6\u90e8\u5206\u548c\u6570\u636e\u90e8\u5206\u3002 \u6d88\u606f\u7684\u5934\u90e8\u5206\u53ea\u662f\u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u5316\u5b58\u50a8\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u3002 \u8fd9\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u641c\u7d22\u65e5\u5fd7\u670d\u52a1\u4e2d\u7684 id\u3002 \u6570\u636e\u90e8\u5206\u662f\u4e00\u4e2a\u5355\u952e data \uff0c\u5b83\u6709\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u503c\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5b58\u50a8\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u6570\u636e\u3002\u7c7b\u4f3c\u4e8e post \u8bf7\u6c42\u7684\u4e3b\u4f53\u3002 \u8be5\u6570\u636e\u503c\u88ab JSON \u5b57\u7b26\u4e32\u5316\u5e76\u5b58\u50a8\u5728\u6d41\u6d88\u606f\u4e2d\u3002 \u5e76\u4e14\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668 JSON \u89e3\u6790\u5b83\u5e76\u5c06\u5b83\u8f6c\u53d1\u7ed9\u5904\u7406\u7a0b\u5e8f\u3002","title":"\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u662f\u5982\u4f55\u5de5\u4f5c\u7684?"},{"location":"docs/streams/nestjs-redis-streams/#_7","text":"\u5728\u76d1\u542c\u65f6\u6536\u5230\u6d88\u606f\u3002 \u521b\u5efa\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5b58\u50a8\u5165\u7ad9\u6d88\u606f\u7684 id\u3001\u4f7f\u7528\u8005\u7ec4\u3001\u4f7f\u7528\u8005\u548c\u6d41\u540d\u79f0\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a inboundContext \u3002 \u539f\u59cb\u6d88\u606f\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\u88ab\u8f6c\u53d1\u5230\u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668\u6216\u60a8\u7684\u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5668\u3002 \u6211\u4eec\u7684\u53cd\u5e8f\u5217\u5316\u5668\u63a5\u53d7\u8fd9\u4e9b\u952e/\u503c\uff0c\u5e76\u5c06\u9664\u201cdata\u201d\u952e\u5916\u7684\u6240\u6709\u5185\u5bb9\u90fd\u89c6\u4e3a\u5934\u6587\u4ef6\u3002 \u53cd\u5e8f\u5217\u5316\u5668\u901a\u8fc7\u8c03\u7528 inboundContext.setMessageHeaders(headers) \u5c06\u6240\u6709\u7684\u62a5\u5934\u5b58\u50a8\u5728\u5165\u7ad9\u4e0a\u4e0b\u6587\u4e2d; \u7136\u540e\u53cd\u5e8f\u5217\u5316\u5668\u89e3\u6790 data \u503c\u7684\u5b57\u7b26\u4e32\u5316 JSON \u5e76\u8fd4\u56de\u5b83\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a\u6709\u6548\u8f7d\u8377\u3002 \u73b0\u5728\uff0c\u6709\u6548\u8d1f\u8f7d\u5230\u8fbe\u4ece\u53cd\u5e8f\u5217\u5316\u5668\u8fd4\u56de\u7684\u76f8\u5e94\u6d41\u5904\u7406\u7a0b\u5e8f\u3002 \u6d41\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u8d1f\u8f7d+\u5165\u7ad9\u4e0a\u4e0b\u6587(\u5982\u679c\u60a8\u9700\u8981\u8bfb\u53d6\u5b58\u50a8\u7684\u62a5\u5934\u3001\u6d88\u8d39\u8005\u7ec4\u3001\u5165\u7ad9\u6d88\u606f id \u7b49)\u3002 \u5904\u7406\u7a0b\u5e8f\u5e94\u8be5\u6267\u884c\u4e00\u4e9b\u4e1a\u52a1\u903b\u8f91\uff0c\u7136\u540e\u8fd4\u56de: \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de null \u6216\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\uff0c\u6d41\u5c06\u5728\u8fd9\u91cc\u7ed3\u675f\u3002\u6ca1\u6709\u786e\u8ba4\u5c06\u53d1\u751f\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u6d41\u5c06\u53d1\u5e03\u4f5c\u4e3a\u56de\u5e94\u3002 \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7a7a\u6570\u7ec4\uff0c\u5e93\u5c06\u53ea\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\uff0c\u800c\u4e0d\u4f1a\u53d1\u5e03\u4efb\u4f55\u6d41\u4f5c\u4e3a\u8fd4\u56de\u54cd\u5e94\u3002 \u5982\u679c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4\uff0c\u5e93\u5c06\u53d1\u5e03\u8fd9\u4e9b\u6d41\uff0c\u7136\u540e\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\u3002 \u7ee7\u7eed\u4e0b\u9762\u7684\u6d41\u7a0b\u2026 \u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u6548\u8d1f\u8f7d\u7684\u6570\u7ec4\u3002 \u73b0\u5728\uff0c\u6bcf\u4e2a\u6709\u6548\u8d1f\u8f7d\u5bf9\u8c61\u90fd\u88ab\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u6216\u60a8\u7684\u5e26\u6709\u5165\u7ad9\u4e0a\u4e0b\u6587\u7684\u5e8f\u5217\u5316\u5668\u3002 \u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u63a5\u53d7\u6709\u6548\u8d1f\u8f7d\u5bf9\u8c61\u5e76\u63d0\u53d6\u6570\u636e\u952e\uff0c\u5e76\u5c06\u4efb\u4f55\u5176\u4ed6\u952e\u89c6\u4e3a\u6807\u5934\u3002\u8fd9\u4e9b\u6807\u5934\u8986\u76d6\u4fdd\u5b58\u5728\u5165\u7ad9\u4e0a\u4e0b\u6587\u4e2d\u7684\u6807\u5934\u6216\u6269\u5c55\u5b83\u4eec\u3002 \u5e8f\u5217\u5316\u7a0b\u5e8f\u5c06\u5165\u7ad9\u4e0a\u4e0b\u6587\u7684\u62a5\u5934\u4e0e\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684\u4efb\u4f55\u53ef\u9009\u62a5\u5934\u5408\u5e76\u3002 \u5e8f\u5217\u5316\u5668\u5c06\u5bf9\u6570\u636e\u952e\u7684\u5bf9\u8c61\u8fdb\u884c\u5b57\u7b26\u4e32\u5316\uff0c\u5e76\u4f7f\u5176\u968f\u65f6\u51c6\u5907\u597d\u3002 \u7136\u540e\uff0c\u5e8f\u5217\u5316\u5668\u5c06\u5b57\u7b26\u4e32\u5316\u6240\u6709\u7684\u5934\u952e/\u503c\uff0c\u5e76\u4f7f\u6240\u6709\u7684\u5185\u5bb9\u5728 Redis Stream \u63a5\u53d7\u7684\u683c\u5f0f\uff0c\u5373 [headersKey1, headersValue1, key2, value2\uff0c\u2026]\uff0c data, stringifiedJSON] \u3002 \u5c06\u51c6\u5907\u597d\u7684\u6570\u7ec4\u8fd4\u56de\u5230\u5e93\u3002 \u5e93\u5c06\u901a\u8fc7\u6765\u81ea Redis \u7684 XADD \u547d\u4ee4\u5c06\u6bcf\u4e2a\u6709\u6548\u8f7d\u8377\u53d1\u5e03\u5230\u76f8\u5e94\u7684\u6d41\u4e2d\u3002 \u7136\u540e\uff0c\u5c06\u4ece Redis \u901a\u8fc7 XACK \u547d\u4ee4\u786e\u8ba4\u5165\u7ad9\u6d88\u606f\u3002 \u6d41\u7684\u7ed3\u675f\u3002\u56de\u53bb\u542c\u2026\u2026 \u68c0\u67e5\u6211\u4eec\u7684\u793a\u4f8b\uff0c\u4e86\u89e3\u5982\u4f55\u8bfb\u53d6\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u4ee5\u53ca\u8fd4\u56de\u7684\u6709\u6548\u8d1f\u8f7d\u7684\u8bed\u6cd5\u3002","title":"\u5e93\u6d41\u548c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u6b65\u9aa4\u3002"},{"location":"docs/streams/nestjs-redis-streams/#_8","text":"\u6211\u4eec\u5728\u4e0a\u9762\u63d0\u5230\u7684\u6d41\u4e2d\u5b9a\u4e49\u4e86\u5b54\u6765\u4f7f\u7528\u60a8\u7684\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668/\u53cd\u5e8f\u5217\u5316\u5668\u3002 \u4f60\u53ef\u4ee5\u5728 main.ts \u6587\u4ef6\u4e2d\u521d\u59cb\u5316\u7b56\u7565\u65f6\u63d0\u4f9b\u5b83\u4eec\u3002 \u4f7f\u7528\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u9009\u9879\u7684\u952e: serialization: {serializer, deserializer} \u53cd\u5e8f\u5217\u5316\u5668\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4ece Redis \u63a5\u6536\u7684\u884c\u6d88\u606f\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5c06\u6807\u9898\u5b58\u50a8\u5728\u90a3\u91cc\u3002 \u5e8f\u5217\u5316\u5668\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4ece\u6d41\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684\u6709\u6548\u8d1f\u8f7d\u548c\u5165\u7ad9\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u4ece\u4e2d\u63d0\u53d6\u6d88\u606f\u5934\u5e76\u5728\u53d1\u5e03\u54cd\u5e94\u6d88\u606f\u4e4b\u524d\u5c06\u5b83\u4eec\u9644\u52a0\u56de\u54cd\u5e94\u6d88\u606f\u3002 \u68c0\u67e5\u6211\u4eec\u7684\u4f8b\u5b50 main.ts \u6587\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u8bc4\u8bba\u4e86\u4e00\u4e9b\u9505\u7089\u677f\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u3002","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5668/\u53cd\u5e8f\u5217\u5316\u5668?"},{"location":"docs/streams/streams-tutorial/","text":"\u5982\u679c\u4f60\u662f\u6d41\u7684\u65b0\u624b\uff0c\u8bf7\u67e5\u770b Redis streams \u4ecb\u7ecd \u3002\u8981\u4e86\u89e3\u66f4\u5168\u9762\u7684\u6559\u7a0b\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002 \u7b80\u4ecb Redis 5.0 \u4e2d\u5f15\u5165\u4e86 Redis \u6d41\u6570\u636e\u7c7b\u578b\u3002 Streams \u5bf9\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u5efa\u6a21\uff0c\u4f46\u4e5f\u5b9e\u73b0\u4e86\u4e00\u4e9b\u64cd\u4f5c\uff0c\u4ee5\u514b\u670d\u5178\u578b\u7684\u4ec5\u8ffd\u52a0\u65e5\u5fd7\u7684\u4e00\u4e9b\u9650\u5236\u3002 \u8fd9\u5305\u62ec O(1)\u65f6\u95f4\u5185\u7684\u968f\u673a\u8bbf\u95ee\u548c\u590d\u6742\u7684\u6d88\u8d39\u7b56\u7565\uff0c\u5982\u6d88\u8d39\u96c6\u7fa4\u3002 \u6d41\u57fa\u7840\u77e5\u8bc6 \u6d41\u662f\u4e00\u79cd\u53ea\u80fd\u8ffd\u52a0\u7684\u6570\u636e\u7ed3\u6784\u3002\u540d\u4e3a XADD \u7684\u57fa\u672c\u5199\u547d\u4ee4\u5c06\u4e00\u4e2a\u65b0\u6761\u76ee\u8ffd\u52a0\u5230\u6307\u5b9a\u7684\u6d41\u3002 \u6bcf\u4e2a\u6d41\u6761\u76ee\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bb5\u503c\u5bf9\u7ec4\u6210\uff0c\u6709\u70b9\u50cf\u8bb0\u5f55\u6216 Redis \u6563\u5217: Text Only > XADD mystream * sensor-id 1234 temperature 19.8 1518951480106-0 \u4e0a\u8ff0\u5bf9 XADD \u547d\u4ee4\u7684\u8c03\u7528\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u6761\u76ee ID(\u5373\u547d\u4ee4\u8fd4\u56de\u7684\u6761\u76ee ID)\u5c06\u6761\u76ee sensor-id: 1234, temperature: 19.8 \u6dfb\u52a0\u5230\u952e mystream \u5904\u7684\u6d41\u4e2d\uff0c\u5177\u4f53\u4e3a 1518951480106-0 \u3002 \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u952e\u540d mystream \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6807\u8bc6\u6d41\u4e2d\u6bcf\u4e2a\u6761\u76ee\u7684\u6761\u76ee ID\u3002 \u7136\u800c\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e86 * \uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u670d\u52a1\u5668\u4e3a\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u65b0\u7684 ID\u3002\u6bcf\u4e2a\u65b0 ID \u90fd\u662f\u5355\u8c03\u589e\u52a0\u7684\uff0c\u6240\u4ee5\u66f4\u7b80\u5355\u5730\u8bf4\uff0c\u4e0e\u6240\u6709\u8fc7\u53bb\u7684\u6761\u76ee\u76f8\u6bd4\uff0c\u6bcf\u4e2a\u65b0\u6dfb\u52a0\u7684\u6761\u76ee\u5c06\u5177\u6709\u66f4\u9ad8\u7684 ID\u3002 \u7531\u670d\u52a1\u5668\u81ea\u52a8\u751f\u6210 ID \u51e0\u4e4e\u603b\u662f\u60a8\u60f3\u8981\u7684\uff0c\u800c\u663e\u5f0f\u6307\u5b9a ID \u7684\u539f\u56e0\u5f88\u5c11\u3002 \u6211\u4eec\u7a0d\u540e\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u6bcf\u4e2a Stream \u6761\u76ee\u90fd\u6709\u4e00\u4e2a ID\uff0c\u8fd9\u662f\u4e0e\u65e5\u5fd7\u6587\u4ef6\u7684\u53e6\u4e00\u4e2a\u76f8\u4f3c\u4e4b\u5904\uff0c\u5176\u4e2d\u53ef\u4ee5\u4f7f\u7528\u884c\u53f7\u6216\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\u91cf\u6765\u6807\u8bc6\u7ed9\u5b9a\u7684\u6761\u76ee\u3002 \u56de\u5230\u6211\u4eec\u7684 XADD \u793a\u4f8b\uff0c\u5728\u952e\u540d\u548c ID \u4e4b\u540e\uff0c\u4e0b\u4e00\u4e2a\u53c2\u6570\u662f\u7ec4\u6210\u6d41\u6761\u76ee\u7684\u5b57\u6bb5\u503c\u5bf9\u3002 \u53ef\u4ee5\u4f7f\u7528 XLEN \u547d\u4ee4\u6765\u83b7\u53d6\u6d41\u4e2d\u9879\u76ee\u7684\u6570\u91cf: Text Only > XLEN mystream (integer) 1 \u6761\u76ee ID \u7531 XADD \u547d\u4ee4\u8fd4\u56de\u7684\u6761\u76ee ID\uff0c\u4ee5\u53ca\u552f\u4e00\u6807\u8bc6\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210: Text Only <millisecondsTime>-<sequenceNumber> \u6beb\u79d2\u65f6\u95f4\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u751f\u6210\u6d41 ID \u7684\u672c\u5730 Redis \u8282\u70b9\u4e2d\u7684\u672c\u5730\u65f6\u95f4\uff0c\u4f46\u662f\uff0c\u5982\u679c\u5f53\u524d\u7684\u6beb\u79d2\u65f6\u95f4\u6070\u597d\u5c0f\u4e8e\u4e4b\u524d\u7684\u8f93\u5165\u65f6\u95f4\uff0c\u5219\u4f7f\u7528\u4e4b\u524d\u7684\u8f93\u5165\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u65f6\u949f\u5411\u540e\u8df3\u8f6c\uff0c\u5355\u8c03\u9012\u589e\u7684 ID \u5c5e\u6027\u4ecd\u7136\u4fdd\u6301\u3002 \u5e8f\u5217\u53f7\u7528\u4e8e\u5728\u540c\u4e00\u6beb\u79d2\u5185\u521b\u5efa\u7684\u6761\u76ee\u3002 \u7531\u4e8e\u5e8f\u5217\u53f7\u662f 64 \u4f4d\u5bbd\u7684\uff0c\u5b9e\u9645\u4e0a\u5728\u540c\u4e00\u6beb\u79d2\u5185\u53ef\u4ee5\u751f\u6210\u7684\u6761\u76ee\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u8fd9\u79cd ID \u7684\u683c\u5f0f\u4e4d\u4e00\u770b\u53ef\u80fd\u5f88\u5947\u602a\uff0c\u6e29\u548c\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u60f3\uff0c\u4e3a\u4ec0\u4e48\u65f6\u95f4\u662f ID \u7684\u4e00\u90e8\u5206\u3002 \u539f\u56e0\u662f Redis \u6d41\u652f\u6301 ID \u8303\u56f4\u67e5\u8be2\u3002 \u56e0\u4e3a ID \u4e0e\u6761\u76ee\u751f\u6210\u7684\u65f6\u95f4\u76f8\u5173\uff0c\u8fd9\u63d0\u4f9b\u4e86\u67e5\u8be2\u65f6\u95f4\u8303\u56f4\u7684\u80fd\u529b\uff0c\u57fa\u672c\u4e0a\u662f\u514d\u8d39\u7684\u3002\u6211\u4eec\u5c06\u5f88\u5feb\u5728\u4ecb\u7ecd XRANGE \u547d\u4ee4\u65f6\u770b\u5230\u8fd9\u4e00\u70b9\u3002 \u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u7528\u6237\u9700\u8981\u589e\u91cf ID\uff0c\u8fd9\u4e9b ID \u4e0e\u65f6\u95f4\u65e0\u5173\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u5916\u90e8\u7cfb\u7edf ID \u76f8\u5173\uff0c\u5982\u524d\u6240\u8ff0\uff0c XADD \u547d\u4ee4\u53ef\u4ee5\u91c7\u7528\u663e\u5f0f ID\uff0c\u800c\u4e0d\u662f\u89e6\u53d1\u81ea\u52a8\u751f\u6210\u7684 * \u901a\u914d\u7b26 ID\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a: Text Only > XADD somestream 0-1 field value 0-1 > XADD somestream 0-2 foo bar 0-2 \u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f ID \u662f 0-1\uff0c\u547d\u4ee4\u4e0d\u63a5\u53d7\u7b49\u4e8e\u6216\u5c0f\u4e8e\u524d\u4e00\u4e2a ID \u7684 ID: Text Only > XADD somestream 0-1 foo bar (error) ERR The ID specified in XADD is equal or smaller than the target stream top item \u5982\u679c\u4f60\u8fd0\u884c\u7684\u662f Redis 7 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u4f60\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7531\u6beb\u79d2\u90e8\u5206\u7ec4\u6210\u7684\u663e\u5f0f ID\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cID \u7684\u5e8f\u5217\u90e8\u5206\u5c06\u81ea\u52a8\u751f\u6210\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5: Text Only > XADD somestream 0-* baz qux 0-3 \u4ece\u6d41\u4e2d\u83b7\u53d6\u6570\u636e \u73b0\u5728\u6211\u4eec\u7ec8\u4e8e\u80fd\u591f\u901a\u8fc7 XADD \u5728\u6d41\u4e2d\u6dfb\u52a0\u6761\u76ee\u4e86\u3002 \u7136\u800c\uff0c\u867d\u7136\u5411\u6d41\u8ffd\u52a0\u6570\u636e\u662f\u5f88\u660e\u663e\u7684\uff0c\u4f46\u4e3a\u4e86\u63d0\u53d6\u6570\u636e\u800c\u67e5\u8be2\u6d41\u7684\u65b9\u6cd5\u5374\u4e0d\u90a3\u4e48\u660e\u663e\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u4ee5\u65e5\u5fd7\u6587\u4ef6\u4e3a\u4f8b\uff0c\u4e00\u4e2a\u660e\u663e\u7684\u65b9\u6cd5\u662f\u6a21\u4eff\u6211\u4eec\u901a\u5e38\u4f7f\u7528 Unix \u547d\u4ee4 tail -f \u6240\u505a\u7684\u4e8b\u60c5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u76d1\u542c\uff0c\u4ee5\u4fbf\u83b7\u5f97\u9644\u52a0\u5230\u6d41\u4e2d\u7684\u65b0\u6d88\u606f\u3002 \u6ce8\u610f\uff0c\u4e0e Redis \u7684\u963b\u585e\u5217\u8868\u64cd\u4f5c\u4e0d\u540c\uff0c\u5728 Redis \u4e2d\uff0c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5143\u7d20\u5c06\u5230\u8fbe\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8be5\u5ba2\u6237\u7aef\u5728 pop style \u64cd\u4f5c\u4e2d\u963b\u585e\uff0c\u5982 BLPOP \uff0c\u5bf9\u4e8e\u6d41\uff0c\u6211\u4eec\u5e0c\u671b\u591a\u4e2a\u6d88\u8d39\u8005\u770b\u5230\u65b0\u6d88\u606f\u8ffd\u52a0\u5230\u6d41\u4e2d(\u4e0e\u8bb8\u591a tail -f \u8fdb\u7a0b\u53ef\u4ee5\u770b\u5230\u6dfb\u52a0\u5230\u65e5\u5fd7\u4e2d\u7684\u5185\u5bb9\u76f8\u540c)\u3002 \u4f7f\u7528\u4f20\u7edf\u672f\u8bed\uff0c\u6211\u4eec\u5e0c\u671b\u6d41\u80fd\u591f\u5c06\u6d88\u606f\u6247\u51fa\u5230\u591a\u4e2a\u5ba2\u6237\u7aef\u3002 \u7136\u800c\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u6f5c\u5728\u7684\u8bbf\u95ee\u6a21\u5f0f\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4ee5\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u770b\u5f85\u6d41:\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\u5b58\u50a8\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9644\u52a0\u65b0\u6d88\u606f\u4e5f\u5f88\u6709\u7528\uff0c\u4f46\u53e6\u4e00\u79cd\u81ea\u7136\u7684\u67e5\u8be2\u6a21\u5f0f\u662f\u6309\u65f6\u95f4\u8303\u56f4\u83b7\u53d6\u6d88\u606f\uff0c\u6216\u8005\u4f7f\u7528\u6e38\u6807\u8fed\u4ee3\u6d88\u606f\u4ee5\u589e\u91cf\u5730\u68c0\u67e5\u6240\u6709\u5386\u53f2\u8bb0\u5f55\u3002 \u8fd9\u7edd\u5bf9\u662f\u53e6\u4e00\u79cd\u6709\u7528\u7684\u8bbf\u95ee\u6a21\u5f0f\u3002 \u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ece\u6d88\u8d39\u8005\u7684\u89d2\u5ea6\u6765\u770b\u4e00\u4e2a\u6d41\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u8bbf\u95ee\u8be5\u6d41\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6d88\u606f\u6d41\uff0c\u8be5\u6d88\u606f\u6d41\u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u6b63\u5728\u5904\u7406\u6b64\u7c7b\u6d88\u606f\u7684\u6d88\u8d39\u8005\uff0c\u4ee5\u4fbf\u6d88\u8d39\u7ec4\u53ea\u80fd\u770b\u5230\u5230\u8fbe\u5355\u4e2a\u6d41\u4e2d\u7684\u6d88\u606f\u7684\u5b50\u96c6\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8de8\u4e0d\u540c\u7684\u4f7f\u7528\u8005\u6269\u5c55\u6d88\u606f\u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u5355\u4e2a\u4f7f\u7528\u8005\u5904\u7406\u6240\u6709\u6d88\u606f:\u6bcf\u4e2a\u4f7f\u7528\u8005\u53ea\u9700\u8981\u5904\u7406\u4e0d\u540c\u7684\u6d88\u606f\u3002 \u8fd9\u57fa\u672c\u4e0a\u5c31\u662f Kafka (TM)\u5bf9\u6d88\u8d39\u7ec4\u6240\u505a\u7684\u3002 \u901a\u8fc7\u6d88\u8d39\u7ec4\u9605\u8bfb\u4fe1\u606f\u662f\u53e6\u4e00\u79cd\u4ece Redis \u6d41\u4e2d\u9605\u8bfb\u7684\u6709\u8da3\u6a21\u5f0f\u3002 Redis Streams \u901a\u8fc7\u4e0d\u540c\u7684\u547d\u4ee4\u652f\u6301\u4e0a\u8ff0\u6240\u6709\u4e09\u79cd\u67e5\u8be2\u6a21\u5f0f\u3002 \u4e0b\u4e00\u8282\u5c06\u5c55\u793a\u6240\u6709\u8fd9\u4e9b\u67e5\u8be2\uff0c\u4ece\u6700\u7b80\u5355\u3001\u6700\u76f4\u63a5\u7684\u7528\u6cd5\u5f00\u59cb:\u8303\u56f4\u67e5\u8be2\u3002 \u6309\u8303\u56f4\u67e5\u8be2:XRANGE \u548c XREVRANGE \u8981\u6309\u8303\u56f4\u67e5\u8be2\u6d41\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e24\u4e2a id\uff0c start \u548c end \u3002 \u8fd4\u56de\u7684\u8303\u56f4\u5c06\u5305\u62ec\u8d77\u59cb\u6216\u7ed3\u675f\u4e3a ID \u7684\u5143\u7d20\uff0c\u56e0\u6b64\u8303\u56f4\u662f\u5305\u542b\u7684\u3002 \u4e24\u4e2a\u7279\u6b8a ID - \u548c + \u5206\u522b\u8868\u793a\u53ef\u80fd\u7684\u6700\u5c0f ID \u548c\u6700\u5927 ID\u3002 Text Only > XRANGE mystream - + 1) 1) 1518951480106-0 2) 1) \"sensor-id\" 2) \"1234\" 3) \"temperature\" 4) \"19.8\" 2) 1) 1518951482479-0 2) 1) \"sensor-id\" 2) \"9999\" 3) \"temperature\" 4) \"18.2\" \u8fd4\u56de\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f\u7531\u4e24\u4e2a\u9879\u7ec4\u6210\u7684\u6570\u7ec4:ID \u548c\u5b57\u6bb5\u503c\u5bf9\u5217\u8868\u3002 \u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0c\u6761\u76ee id \u4e0e\u65f6\u95f4\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a - \u5b57\u7b26\u5de6\u4fa7\u7684\u90e8\u5206\u662f\u521b\u5efa\u6d41\u6761\u76ee\u7684\u672c\u5730\u8282\u70b9\u5728\u6761\u76ee\u88ab\u521b\u5efa\u65f6\u7684 Unix \u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)(\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u6d41\u662f\u901a\u8fc7\u5b8c\u5168\u6307\u5b9a\u7684 XADD \u547d\u4ee4\u590d\u5236\u7684\uff0c\u56e0\u6b64\u526f\u672c\u5c06\u5177\u6709\u4e0e\u4e3b\u8282\u70b9\u76f8\u540c\u7684 id)\u3002 \u8fd9\u610f\u5473\u7740\u6211\u53ef\u4ee5\u4f7f\u7528 XRANGE \u67e5\u8be2\u4e00\u4e2a\u65f6\u95f4\u8303\u56f4\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u53ef\u80fd\u60f3\u8981\u7701\u7565 ID \u7684\u5e8f\u5217\u90e8\u5206:\u5982\u679c\u7701\u7565\uff0c\u5728\u8303\u56f4\u7684\u5f00\u59cb\u90e8\u5206\u5b83\u5c06\u88ab\u5047\u8bbe\u4e3a 0\uff0c\u800c\u5728\u7ed3\u675f\u90e8\u5206\u5b83\u5c06\u88ab\u5047\u8bbe\u4e3a\u53ef\u7528\u7684\u6700\u5927\u5e8f\u5217\u53f7\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ea\u9700\u4f7f\u7528 Unix \u65f6\u95f4\u7684\u4e24\u6beb\u79d2\u67e5\u8be2\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u4e00\u79cd\u5305\u5bb9\u7684\u65b9\u5f0f\u83b7\u5f97\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u751f\u6210\u7684\u6240\u6709\u6761\u76ee\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u60f3\u67e5\u8be2\u4e00\u4e2a 2 \u6beb\u79d2\u7684\u5468\u671f\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528: Text Only > XRANGE mystream 1518951480106 1518951480107 1) 1) 1518951480106-0 2) 1) \"sensor-id\" 2) \"1234\" 3) \"temperature\" 4) \"19.8\" \u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u6211\u53ea\u6709\u4e00\u4e2a\u6761\u76ee\uff0c\u4f46\u662f\u5728\u771f\u5b9e\u7684\u6570\u636e\u96c6\u4e2d\uff0c\u6211\u53ef\u4ee5\u67e5\u8be2\u5c0f\u65f6\u7684\u8303\u56f4\uff0c\u6216\u8005\u5728\u4ec5\u4ec5\u4e24\u6beb\u79d2\u5185\u6709\u8bb8\u591a\u9879\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c XRANGE \u5728\u672b\u5c3e\u652f\u6301\u53ef\u9009\u7684 COUNT \u9009\u9879\u3002 \u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u8ba1\u6570\uff0c\u6211\u53ef\u4ee5\u53ea\u83b7\u53d6\u524d N \u9879\u3002\u5982\u679c\u6211\u60f3\u8981\u66f4\u591a\uff0c\u6211\u53ef\u4ee5\u8fd4\u56de\u6700\u540e\u4e00\u4e2a ID\uff0c\u5c06\u5e8f\u5217\u90e8\u5206\u589e\u52a0 1\uff0c\u7136\u540e\u518d\u6b21\u67e5\u8be2\u3002 \u8ba9\u6211\u4eec\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u770b\u770b\u3002 \u6211\u4eec\u5f00\u59cb\u7528 XADD \u6dfb\u52a0 10 \u4e2a\u6761\u76ee(\u6211\u4e0d\u4f1a\u5c55\u793a\u8fd9\u4e2a\uff0c\u5047\u8bbe\u6d41 mystream \u586b\u5145\u4e86 10 \u4e2a\u6761\u76ee)\u3002 \u4e3a\u4e86\u5f00\u59cb\u6211\u7684\u8fed\u4ee3\uff0c\u6bcf\u4e2a\u547d\u4ee4\u83b7\u5f97 2 \u4e2a\u9879\u76ee\uff0c\u6211\u4ece\u5b8c\u6574\u7684\u8303\u56f4\u5f00\u59cb\uff0c\u4f46\u8ba1\u6570\u4e3a 2\u3002 Text Only > XRANGE mystream - + COUNT 2 1) 1) 1519073278252-0 2) 1) \"foo\" 2) \"value_1\" 2) 1) 1519073279157-0 2) 1) \"foo\" 2) \"value_2\" \u4e3a\u4e86\u7ee7\u7eed\u8fed\u4ee3\u63a5\u4e0b\u6765\u7684\u4e24\u9879\uff0c\u6211\u5fc5\u987b\u9009\u62e9\u8fd4\u56de\u7684\u6700\u540e\u4e00\u4e2a ID\uff0c\u5373 1519073279157-0 \uff0c\u5e76\u5728\u5b83\u524d\u9762\u6dfb\u52a0\u524d\u7f00 ( \u3002 \u4ea7\u751f\u7684\u72ec\u5360\u8303\u56f4\u95f4\u9694\uff0c\u5728\u672c\u4f8b\u4e2d\u662f (1519073279157-0 \uff0c\u73b0\u5728\u53ef\u4ee5\u7528\u4f5c\u4e0b\u4e00\u4e2a XRANGE \u8c03\u7528\u7684\u65b0\u7684 start \u53c2\u6570: Text Only > XRANGE mystream (1519073279157-0 + COUNT 2 1) 1) 1519073280281-0 2) 1) \"foo\" 2) \"value_3\" 2) 1) 1519073281432-0 2) 1) \"foo\" 2) \"value_4\" \u7b49\u7b49\u3002\u7531\u4e8e XRANGE \u7684\u590d\u6742\u5ea6\u662f O(log(N)) \u6765\u5bfb\u627e\uff0c\u7136\u540e O(M) \u6765\u8fd4\u56de M \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u5728\u6570\u91cf\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5bf9\u6570\uff0c\u8fd9\u610f\u5473\u7740\u8fed\u4ee3\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u5feb\u901f\u7684\u3002 \u56e0\u6b64 XRANGE \u5b9e\u9645\u4e0a\u4e5f\u662f streams iterator \uff0c\u4e0d\u9700\u8981 XSCAN \u547d\u4ee4\u3002 \u547d\u4ee4 XREVRANGE \u76f8\u5f53\u4e8e XRANGE \uff0c\u4f46\u6309\u5012\u5e8f\u8fd4\u56de\u5143\u7d20\uff0c\u56e0\u6b64 XREVRANGE \u7684\u5b9e\u9645\u7528\u9014\u662f\u68c0\u67e5\u6d41\u4e2d\u7684\u6700\u540e\u4e00\u9879\u662f\u4ec0\u4e48: Text Only > XREVRANGE mystream + - COUNT 1 1) 1) 1519073287312-0 2) 1) \"foo\" 2) \"value_10\" \u6ce8\u610f\uff0c XREVRANGE \u547d\u4ee4\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u63a5\u53d7 start \u548c stop \u53c2\u6570\u3002 \u7528 XREAD \u76d1\u542c\u65b0\u9879 \u5f53\u6211\u4eec\u4e0d\u60f3\u5728\u6d41\u4e2d\u6309\u8303\u56f4\u8bbf\u95ee\u9879\u65f6\uff0c\u901a\u5e38\u6211\u4eec\u60f3\u8981\u7684\u662f\u8ba2\u9605\u5230\u8fbe\u6d41\u7684\u65b0\u9879\u3002 \u8fd9\u4e2a\u6982\u5ff5\u53ef\u80fd\u51fa\u73b0\u4e0e Redis Pub/Sub \u76f8\u5173\uff0c\u5728\u90a3\u91cc\u4f60\u8ba2\u9605\u4e00\u4e2a\u9891\u9053\uff0c\u6216 Redis \u963b\u585e\u5217\u8868\uff0c\u5728\u90a3\u91cc\u4f60\u7b49\u5f85\u4e00\u4e2a\u952e\u83b7\u5f97\u65b0\u7684\u5143\u7d20\u6765\u83b7\u53d6\uff0c\u4f46\u5728\u4f60\u6d88\u8d39\u6d41\u7684\u65b9\u5f0f\u6709\u57fa\u672c\u7684\u533a\u522b: \u4e00\u4e2a\u6d41\u53ef\u4ee5\u6709\u591a\u4e2a\u5ba2\u6237\u7aef(\u6d88\u8d39\u8005)\u7b49\u5f85\u6570\u636e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u65b0\u9879\u76ee\u5c06\u88ab\u4ea4\u4ed8\u7ed9\u6b63\u5728\u7b49\u5f85\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6570\u636e\u7684 \u6bcf\u4e2a\u6d88\u8d39\u8005 \u3002 \u8fd9\u79cd\u884c\u4e3a\u4e0d\u540c\u4e8e\u963b\u585e\u5217\u8868\uff0c\u5728\u963b\u585e\u5217\u8868\u4e2d\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u5c06\u83b7\u5f97\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u7136\u800c\uff0c\u5411\u591a\u4e2a\u6d88\u8d39\u8005\u5c55\u5f00\u7684\u80fd\u529b\u7c7b\u4f3c\u4e8e Pub/Sub\u3002 \u5728 Pub/Sub \u6a21\u5f0f\u4e0b\uff0c\u6d88\u606f\u88ab\u89e6\u53d1\u540e\u5c31\u4f1a\u88ab \u5fd8\u8bb0 \uff0c\u800c\u4e14\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u88ab\u5b58\u50a8\uff0c\u800c\u5728\u4f7f\u7528\u963b\u585e\u5217\u8868\u65f6\uff0c\u5f53\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6d88\u606f\u65f6\u5c31\u4f1a\u4ece\u5217\u8868\u4e2d \u5f39\u51fa (\u6709\u6548\u5730\u5220\u9664)\uff0c\u6d41\u4ee5\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002 \u6240\u6709\u6d88\u606f\u90fd\u65e0\u9650\u671f\u5730\u8ffd\u52a0\u5230\u6d41\u4e2d(\u9664\u975e\u7528\u6237\u663e\u5f0f\u5730\u8981\u6c42\u5220\u9664\u6761\u76ee):\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u5c06\u901a\u8fc7\u8bb0\u4f4f\u6240\u63a5\u6536\u5230\u7684\u6700\u540e\u4e00\u6761\u6d88\u606f\u7684 ID \u4ece\u5176\u89d2\u5ea6\u77e5\u9053\u4ec0\u4e48\u662f\u65b0\u6d88\u606f\u3002 \u6d41\u6d88\u8d39\u7ec4\u63d0\u4f9b\u4e86 Pub/Sub \u6216\u963b\u585e\u5217\u8868\u65e0\u6cd5\u5b9e\u73b0\u7684\u63a7\u5236\u7ea7\u522b\uff0c\u901a\u8fc7\u5bf9\u540c\u4e00\u6d41\u7684\u4e0d\u540c\u7ec4\u3001\u5df2\u5904\u7406\u9879\u76ee\u7684\u660e\u786e\u786e\u8ba4\u3001\u68c0\u67e5\u5f85\u5904\u7406\u9879\u76ee\u7684\u80fd\u529b\u3001\u58f0\u660e\u672a\u5904\u7406\u6d88\u606f\u7684\u80fd\u529b\u4ee5\u53ca\u6bcf\u4e2a\u5ba2\u6237\u673a\u7684\u4e00\u81f4\u5386\u53f2\u53ef\u89c1\u6027(\u4ec5\u80fd\u67e5\u770b\u6d88\u606f\u7684\u79c1\u6709\u8fc7\u53bb\u5386\u53f2)\u3002 \u63d0\u4f9b\u76d1\u542c\u5230\u8fbe\u6d41\u7684\u65b0\u6d88\u606f\u80fd\u529b\u7684\u547d\u4ee4\u79f0\u4e3a XREAD \u3002 \u5b83\u6bd4 XRANGE \u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5f00\u59cb\u5c55\u793a\u7b80\u5355\u7684\u8868\u5355\uff0c\u7a0d\u540e\u5c06\u63d0\u4f9b\u6574\u4e2a\u547d\u4ee4\u5e03\u5c40\u3002 Bash > XREAD COUNT 2 STREAMS mystream 0 1 ) 1 ) \"mystream\" 2 ) 1 ) 1 ) 1519073278252 -0 2 ) 1 ) \"foo\" 2 ) \"value_1\" 2 ) 1 ) 1519073279157 -0 2 ) 1 ) \"foo\" 2 ) \"value_2\" \u4ee5\u4e0a\u662f XREAD \u7684\u975e\u963b\u585e\u5f62\u5f0f\u3002 \u6ce8\u610f\uff0c COUNT \u9009\u9879\u4e0d\u662f\u5fc5\u9009\u7684\uff0c\u5b9e\u9645\u4e0a\u8be5\u547d\u4ee4\u7684\u552f\u4e00\u5fc5\u9009\u9009\u9879\u662f STREAMS \u9009\u9879\uff0c\u5b83\u6307\u5b9a\u952e\u7684\u5217\u8868\u4ee5\u53ca\u8c03\u7528\u65b9\u5df2\u7ecf\u770b\u5230\u7684\u6bcf\u4e2a\u6d41\u7684\u76f8\u5e94\u6700\u5927 ID\uff0c\u56e0\u6b64\u8be5\u547d\u4ee4\u5c06\u53ea\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b ID \u5927\u4e8e\u6211\u4eec\u6307\u5b9a\u7684\u6d88\u606f\u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6211\u4eec\u5199\u4e86 STREAMS mystream 0 \uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b mystream \u4e2d\u7684\u6240\u6709\u6d88\u606f\u7684 ID \u5927\u4e8e 0-0 \u3002 \u6b63\u5982\u60a8\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u6240\u770b\u5230\u7684\uff0c\u8be5\u547d\u4ee4\u8fd4\u56de\u952e\u540d\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u952e\u8c03\u7528\u6b64\u547d\u4ee4\uff0c\u4ee5\u4fbf\u540c\u65f6\u4ece\u4e0d\u540c\u7684\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u6211\u53ef\u4ee5\u5199\uff0c\u4f8b\u5982: STREAMS mystream otherstream 0 0 \u3002 \u6ce8\u610f\uff0c\u5728 STREAMS \u9009\u9879\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u952e\u540d\uff0c\u7136\u540e\u662f id\u3002 \u56e0\u6b64\uff0c STREAMS \u9009\u9879\u5fc5\u987b\u603b\u662f\u6700\u540e\u4e00\u4e2a\u3002 \u9664\u4e86 XREAD \u53ef\u4ee5\u4e00\u6b21\u8bbf\u95ee\u591a\u4e2a\u6d41\uff0c\u5e76\u4e14\u6211\u4eec\u80fd\u591f\u6307\u5b9a\u6211\u4eec\u62e5\u6709\u7684\u6700\u540e\u4e00\u4e2a ID \u6765\u83b7\u53d6\u66f4\u65b0\u7684\u6d88\u606f\u4e4b\u5916\uff0c\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u5f62\u5f0f\u4e2d\uff0c\u547d\u4ee4\u6240\u505a\u7684\u4e8b\u60c5\u4e0e XRANGE \u5e76\u6ca1\u6709\u592a\u5927\u7684\u4e0d\u540c\u3002 \u7136\u800c\uff0c\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a BLOCK \u53c2\u6570\uff0c\u8f7b\u677e\u5730\u5c06 XREAD \u8f6c\u6362\u4e3a blocking \u547d\u4ee4 : Bash > XREAD BLOCK 0 STREAMS mystream $ \u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9664\u4e86\u5220\u9664 COUNT \u4e4b\u5916\uff0c\u6211\u8fd8\u6307\u5b9a\u4e86\u65b0\u7684 BLOCK \u9009\u9879\uff0c\u5176\u8d85\u65f6\u65f6\u95f4\u4e3a 0 \u6beb\u79d2(\u8fd9\u610f\u5473\u7740\u6c38\u4e0d\u8d85\u65f6)\u3002 \u6b64\u5916\uff0c\u6211\u6ca1\u6709\u4e3a\u6d41 mystream \u4f20\u9012\u666e\u901a ID\uff0c\u800c\u662f\u4f20\u9012\u4e86\u7279\u6b8a ID $ \u3002 \u8fd9\u4e2a\u7279\u6b8a\u7684 ID \u610f\u5473\u7740 XREAD \u5e94\u8be5\u4f7f\u7528 mystream \u6d41\u4e2d\u5df2\u7ecf\u5b58\u50a8\u7684\u6700\u5927 ID \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a ID\uff0c\u8fd9\u6837\u6211\u4eec\u5c06\u53ea\u4ece\u5f00\u59cb\u76d1\u542c\u7684\u65f6\u95f4\u5f00\u59cb\u63a5\u6536 \u65b0 \u6d88\u606f\u3002 \u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7c7b\u4f3c\u4e8e Unix \u7684 tail -f \u547d\u4ee4\u3002 Note \u6ce8\u610f\uff0c\u5f53\u4f7f\u7528 BLOCK \u9009\u9879\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u7279\u6b8a ID $ \u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6709\u6548\u7684 ID\u3002 \u5982\u679c\u547d\u4ee4\u80fd\u591f\u7acb\u5373\u5904\u7406\u6211\u4eec\u7684\u8bf7\u6c42\u800c\u4e0d\u963b\u585e\uff0c\u5b83\u5c31\u4f1a\u8fd9\u6837\u505a\uff0c\u5426\u5219\u5c31\u4f1a\u963b\u585e\u3002 \u901a\u5e38\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4ece\u65b0\u7684\u6761\u76ee\u5f00\u59cb\u4f7f\u7528\u6d41\uff0c\u6211\u4eec\u4ece ID $ \u5f00\u59cb\uff0c\u7136\u540e\u7ee7\u7eed\u4f7f\u7528\u63a5\u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u6d88\u606f\u7684 ID \u8fdb\u884c\u4e0b\u4e00\u4e2a\u8c03\u7528\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u963b\u585e\u5f62\u5f0f\u7684 XREAD \u4e5f\u80fd\u591f\u76d1\u542c\u591a\u4e2a\u6d41\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u591a\u4e2a\u952e\u540d\u3002 \u5982\u679c\u56e0\u4e3a\u81f3\u5c11\u6709\u4e00\u4e2a\u6d41\u7684\u5143\u7d20\u5927\u4e8e\u6211\u4eec\u6307\u5b9a\u7684\u5bf9\u5e94 ID\uff0c\u6240\u4ee5\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u8bf7\u6c42\uff0c\u90a3\u4e48\u5b83\u5c06\u8fd4\u56de\u7ed3\u679c\u3002 \u5426\u5219\uff0c\u8be5\u547d\u4ee4\u5c06\u963b\u585e\u5e76\u8fd4\u56de\u83b7\u53d6\u65b0\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u6d41\u7684\u9879(\u6839\u636e\u6307\u5b9a\u7684 ID)\u3002 \u4e0e\u963b\u585e\u5217\u8868\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u4ece\u7b49\u5f85\u6570\u636e\u7684\u5ba2\u6237\u673a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u963b\u585e\u6d41\u8bfb\u53d6\u662f\u516c\u5e73\u7684\uff0c\u56e0\u4e3a\u8bed\u4e49\u662f FIFO \u98ce\u683c\u7684\u3002 \u5f53\u6709\u65b0\u9879\u53ef\u7528\u65f6\uff0c\u4e3a\u7ed9\u5b9a\u6d41\u963b\u585e\u7684\u7b2c\u4e00\u4e2a\u5ba2\u6237\u7aef\u5c06\u6700\u5148\u88ab\u89e3\u9664\u963b\u585e\u3002 XREAD \u9664\u4e86 COUNT \u548c BLOCK \u4e4b\u5916\u6ca1\u6709\u5176\u4ed6\u9009\u9879\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u547d\u4ee4\uff0c\u5177\u6709\u5c06\u6d88\u8d39\u8005\u9644\u52a0\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u6d41\u7684\u7279\u5b9a\u76ee\u7684\u3002 \u4f7f\u7528\u6d88\u8d39\u7ec4 API \u53ef\u4ee5\u4f7f\u7528\u66f4\u5f3a\u5927\u7684\u529f\u80fd\u6765\u6d88\u8d39\u6d41\uff0c\u4f46\u662f\u901a\u8fc7\u6d88\u8d39\u7ec4\u8bfb\u53d6\u662f\u7531\u53e6\u4e00\u4e2a\u540d\u4e3a XREADGROUP \u7684\u547d\u4ee4\u5b9e\u73b0\u7684\uff0c\u8fd9\u5c06\u5728\u672c\u6307\u5357\u7684\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002 \u6d88\u8d39\u7ec4 \u5f53\u624b\u5934\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u6765\u81ea\u4e0d\u540c\u5ba2\u6237\u673a\u7684\u76f8\u540c\u6d41\u65f6\uff0c\u90a3\u4e48 XREAD \u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u79cd fan-out \u5230 N \u4e2a\u5ba2\u6237\u673a\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u8fd8\u4f7f\u7528\u526f\u672c\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u8bfb\u53d6\u53ef\u4f38\u7f29\u6027\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u505a\u7684\u4e0d\u662f\u5411\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u76f8\u540c\u7684\u6d88\u606f\u6d41\uff0c\u800c\u662f\u5411\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u6765\u81ea\u540c\u4e00\u6d88\u606f\u6d41\u7684\u4e0d\u540c\u7684\u6d88\u606f\u5b50\u96c6\u3002 \u4e00\u4e2a\u5f88\u660e\u663e\u7684\u4f8b\u5b50\u662f\u5904\u7406\u901f\u5ea6\u8f83\u6162\u7684\u6d88\u606f:\u8ba9 N \u4e2a\u4e0d\u540c\u7684\u5de5\u4f5c\u8005\u63a5\u6536\u6d41\u7684\u4e0d\u540c\u90e8\u5206\u7684\u80fd\u529b\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u5c06\u4e0d\u540c\u7684\u6d88\u606f\u8def\u7531\u5230\u51c6\u5907\u505a\u66f4\u591a\u5de5\u4f5c\u7684\u4e0d\u540c\u5de5\u4f5c\u8005\u6765\u6269\u5c55\u6d88\u606f\u5904\u7406\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6709\u4e09\u4e2a\u6d88\u8d39\u8005 C1\u3001C2\u3001C3 \u548c\u4e00\u4e2a\u5305\u542b\u6d88\u606f 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\u8981\u7684\u662f\u6309\u7167\u4e0b\u9762\u7684\u56fe\u8868\u63d0\u4f9b\u6d88\u606f: Text Only 1 -> C1 2 -> C2 3 -> C3 4 -> C1 5 -> C2 6 -> C3 7 -> C1 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0cRedis \u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505a \u6d88\u8d39\u7ec4 \u7684\u6982\u5ff5\u3002 \u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u770b\uff0cRedis \u6d88\u8d39\u7ec4\u4e0e Kafka (TM)\u6d88\u8d39\u7ec4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u7406\u89e3\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002 \u7136\u800c\u5b83\u4eec\u5728\u529f\u80fd\u4e0a\u662f\u76f8\u4f3c\u7684\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u4fdd\u7559 Kafka (TM)\u7684\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u6700\u521d\u666e\u53ca\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u4e00\u4e2a\u6d88\u8d39\u7ec4\u5c31\u50cf\u4e00\u4e2a\u4ece\u6d41\u4e2d\u83b7\u53d6\u6570\u636e\u7684 \u4f2a\u6d88\u8d39\u8005 \uff0c\u5b9e\u9645\u4e0a\u670d\u52a1\u4e8e\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u63d0\u4f9b\u4e00\u5b9a\u7684\u4fdd\u8bc1: \u6bcf\u4e2a\u6d88\u606f\u90fd\u63d0\u4f9b\u7ed9\u4e0d\u540c\u7684\u4f7f\u7528\u8005\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u5c06\u76f8\u540c\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u591a\u4e2a\u4f7f\u7528\u8005\u3002 \u5728\u6d88\u8d39\u7ec4\u4e2d\uff0c\u6d88\u8d39\u8005\u662f\u901a\u8fc7\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\uff0c\u5ba2\u6237\u7aef\u5b9e\u73b0\u6d88\u8d39\u8005\u5fc5\u987b\u9009\u62e9\u8be5\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u5373\u4f7f\u5728\u65ad\u5f00\u8fde\u63a5\u4e4b\u540e\uff0c\u6d41\u6d88\u8d39\u7ec4\u4ecd\u7136\u4fdd\u7559\u6240\u6709\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5ba2\u6237\u673a\u5c06\u518d\u6b21\u58f0\u660e\u81ea\u5df1\u662f\u540c\u4e00\u4e2a\u6d88\u8d39\u8005\u3002 \u7136\u800c\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u7531\u5ba2\u6237\u673a\u63d0\u4f9b\u552f\u4e00\u7684\u6807\u8bc6\u7b26\u3002 \u6bcf\u4e2a\u6d88\u8d39\u7ec4\u90fd\u6709 \u7b2c\u4e00\u4e2a ID \u4ece\u672a\u4f7f\u7528 \u7684\u6982\u5ff5\uff0c\u56e0\u6b64\uff0c\u5f53\u6d88\u8d39\u8005\u8bf7\u6c42\u65b0\u6d88\u606f\u65f6\uff0c\u5b83\u53ef\u4ee5\u53ea\u63d0\u4f9b\u4ee5\u524d\u6ca1\u6709\u4f20\u9012\u7684\u6d88\u606f\u3002 \u7136\u800c\uff0c\u4f7f\u7528\u6d88\u606f\u9700\u8981\u4f7f\u7528\u7279\u5b9a\u547d\u4ee4\u663e\u5f0f\u786e\u8ba4\u3002 Redis \u5c06\u786e\u8ba4\u89e3\u91ca\u4e3a:\u6b64\u6d88\u606f\u5df2\u88ab\u6b63\u786e\u5904\u7406\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5176\u4ece\u6d88\u8d39\u7ec4\u4e2d\u5220\u9664\u3002 \u4e00\u4e2a\u6d88\u8d39\u7ec4\u8ddf\u8e2a\u5f53\u524d\u6302\u8d77\u7684\u6240\u6709\u6d88\u606f\uff0c\u5373\u4ea4\u4ed8\u7ed9\u6d88\u8d39\u7ec4\u4e2d\u7684\u67d0\u4e2a\u6d88\u8d39\u8005\u4f46\u5c1a\u672a\u88ab\u786e\u8ba4\u4e3a\u5df2\u5904\u7406\u7684\u6d88\u606f\u3002 \u7531\u4e8e\u8fd9\u4e2a\u7279\u6027\uff0c\u5728\u8bbf\u95ee\u6d41\u7684\u6d88\u606f\u5386\u53f2\u8bb0\u5f55\u65f6\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005 \u5c06\u53ea\u770b\u5230\u4ea4\u4ed8\u7ed9\u5b83\u7684\u6d88\u606f \u3002 \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u6d88\u8d39\u7ec4\u53ef\u4ee5\u88ab\u60f3\u8c61\u6210\u6d41\u7684 \u67d0\u79cd\u72b6\u6001 : Text Only +----------------------------------------+ | consumer_group_name: mygroup | | consumer_group_stream: somekey | | last_delivered_id: 1292309234234-92 | | | | consumers: | | \"consumer-1\" with pending messages | | 1292309234234-4 | | 1292309234232-8 | | \"consumer-42\" with pending messages | | ... (and so forth) | +----------------------------------------+ \u5982\u679c\u60a8\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e00\u4e2a\u6d88\u8d39\u7ec4\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u5b83\u5982\u4f55\u80fd\u591f\u53ea\u5411\u6d88\u8d39\u8005\u63d0\u4f9b\u4ed6\u4eec\u7684\u5f85\u5b9a\u6d88\u606f\u7684\u5386\u53f2\uff0c\u4ee5\u53ca\u6d88\u8d39\u8005\u8bf7\u6c42\u65b0\u6d88\u606f\u65f6\u5982\u4f55\u53ea\u5f97\u5230\u5927\u4e8e last_delivered_id \u7684\u6d88\u606f id\u3002 \u540c\u65f6\uff0c\u5982\u679c\u60a8\u5c06\u6d88\u8d39\u7ec4\u89c6\u4e3a Redis \u6d41\u7684\u8f85\u52a9\u6570\u636e\u7ed3\u6784\uff0c\u5f88\u660e\u663e\uff0c\u5355\u4e2a\u6d41\u53ef\u4ee5\u6709\u591a\u4e2a\u6d88\u8d39\u7ec4\uff0c\u8fd9\u4e9b\u6d88\u8d39\u7ec4\u5177\u6709\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u96c6\u3002 \u5b9e\u9645\u4e0a\uff0c\u540c\u4e00\u4e2a\u6d41\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 XREAD \u8ba9\u5ba2\u6237\u7aef\u5728\u6ca1\u6709\u6d88\u8d39\u7ec4\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u9605\u8bfb\uff0c\u5e76\u8ba9\u5ba2\u6237\u7aef\u5728\u4e0d\u540c\u6d88\u8d39\u7ec4\u4e2d\u901a\u8fc7 XREADGROUP \u8fdb\u884c\u9605\u8bfb\u3002 \u73b0\u5728\u662f\u65f6\u5019\u653e\u5927\u770b\u770b\u57fa\u672c\u7684\u6d88\u8d39\u7ec4\u547d\u4ee4\u4e86\u3002\u5b83\u4eec\u5982\u4e0b: XGROUP \u7528\u4e8e\u521b\u5efa\u3001\u9500\u6bc1\u548c\u7ba1\u7406\u6d88\u8d39\u7ec4\u3002 XREADGROUP \u7528\u4e8e\u901a\u8fc7\u6d88\u8d39\u7ec4\u4ece\u6d41\u4e2d\u8bfb\u53d6\u3002 XACK \u5141\u8bb8\u4f7f\u7528\u8005\u5c06\u6302\u8d77\u7684\u6d88\u606f\u6807\u8bb0\u4e3a\u5df2\u6b63\u786e\u5904\u7406\u7684\u547d\u4ee4\u3002 \u521b\u5efa\u6d88\u8d39\u7ec4 \u5047\u8bbe\u6211\u6709\u4e00\u4e2a\u6d41\u7c7b\u578b\u7684 mystream \u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u7ec4\uff0c\u6211\u53ea\u9700\u8981\u505a\u4ee5\u4e0b: Text Only > XGROUP CREATE mystream mygroup $ OK \u6b63\u5982\u4f60\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\u770b\u5230\u7684\uff0c\u5f53\u521b\u5efa\u6d88\u8d39\u7ec4\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a ID\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f $ \u3002 \u8fd9\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5728\u5176\u4ed6\u72b6\u6001\u4e2d\uff0c\u6d88\u8d39\u7ec4\u5fc5\u987b\u77e5\u9053\u5728\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u8fde\u63a5\u65f6\u4e0b\u4e00\u6b65\u8981\u670d\u52a1\u4ec0\u4e48\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u521a\u521b\u5efa\u7ec4\u65f6\uff0c \u6700\u540e\u4e00\u4e2a\u6d88\u606f ID \u662f\u4ec0\u4e48\u3002 \u5982\u679c\u6211\u4eec\u50cf\u4ee5\u524d\u90a3\u6837\u63d0\u4f9b $ \uff0c\u90a3\u4e48\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u53ea\u6709\u5230\u8fbe\u6d41\u7684\u65b0\u6d88\u606f\u624d\u4f1a\u63d0\u4f9b\u7ed9\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u3002 \u5982\u679c\u6211\u4eec\u6307\u5b9a 0 \uff0c\u6d88\u8d39\u7ec4\u5c06\u4f7f\u7528\u6d41\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u6240\u6709\u6d88\u606f\u3002 \u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u5176\u4ed6\u6709\u6548 ID\u3002 \u60a8\u6240\u77e5\u9053\u7684\u662f\uff0c\u6d88\u8d39\u7ec4\u5c06\u5f00\u59cb\u4f20\u9012\u5927\u4e8e\u60a8\u6307\u5b9a\u7684 ID \u7684\u6d88\u606f\u3002 \u56e0\u4e3a $ \u610f\u5473\u7740\u6d41\u4e2d\u5f53\u524d\u6700\u5927\u7684 ID\uff0c\u56e0\u6b64\u6307\u5b9a $ \u5c06\u53ea\u4ea7\u751f\u4f7f\u7528\u65b0\u6d88\u606f\u7684\u6548\u679c\u3002 XGROUP CREATE \u4e5f\u652f\u6301\u81ea\u52a8\u521b\u5efa\u6d41\uff0c\u5982\u679c\u5b83\u4e0d\u5b58\u5728\uff0c\u4f7f\u7528\u53ef\u9009\u7684 MKSTREAM \u5b50\u547d\u4ee4\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u53c2\u6570: Text Only > XGROUP CREATE newstream mygroup $ MKSTREAM OK \u65e2\u7136\u5df2\u7ecf\u521b\u5efa\u4e86\u6d88\u8d39\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5c1d\u8bd5\u4f7f\u7528 XREADGROUP \u547d\u4ee4\u901a\u8fc7\u6d88\u8d39\u7ec4\u8bfb\u53d6\u6d88\u606f\u3002 \u6211\u4eec\u5c06\u8bfb\u53d6\u6765\u81ea\u6d88\u8d39\u8005\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5c06\u8c03\u7528 Alice \u548c Bob\uff0c\u4ee5\u67e5\u770b\u7cfb\u7edf\u5c06\u5982\u4f55\u5411 Alice \u6216 Bob \u8fd4\u56de\u4e0d\u540c\u7684\u6d88\u606f\u3002 XREADGROUP \u975e\u5e38\u7c7b\u4f3c\u4e8e XREAD \uff0c\u5e76\u63d0\u4f9b\u76f8\u540c\u7684 BLOCK \u9009\u9879\uff0c\u5426\u5219\u5b83\u662f\u4e00\u4e2a\u540c\u6b65\u547d\u4ee4\u3002 \u4f46\u662f\uff0c\u6709\u4e00\u4e2a\u5fc5\u987b\u59cb\u7ec8\u6307\u5b9a\u7684\u5f3a\u5236\u9009\u9879\uff0c\u5373 GROUP \uff0c\u5b83\u6709\u4e24\u4e2a\u53c2\u6570:\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u548c\u8bd5\u56fe\u8bfb\u53d6\u7684\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u3002 \u9009\u9879 COUNT \u4e5f\u88ab\u652f\u6301\uff0c\u5b83\u4e0e XREAD \u4e2d\u7684\u9009\u9879\u76f8\u540c\u3002 \u5728\u4ece\u6d41\u4e2d\u8bfb\u53d6\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5728\u91cc\u9762\u653e\u5165\u4e00\u4e9b\u6d88\u606f: Text Only > XADD mystream * message apple 1526569495631-0 > XADD mystream * message orange 1526569498055-0 > XADD mystream * message strawberry 1526569506935-0 > XADD mystream * message apricot 1526569535168-0 > XADD mystream * message banana 1526569544280-0 Note \u8fd9\u91cc message \u662f\u5b57\u6bb5\u540d\uff0cfruit \u662f\u76f8\u5173\u503c\uff0c\u8bb0\u4f4f\u6d41\u9879\u662f\u5c0f\u578b\u5b57\u5178\u3002 \u662f\u65f6\u5019\u8bd5\u7740\u7528\u6d88\u8d39\u7fa4\u6765\u9605\u8bfb\u4e00\u4e9b\u4e1c\u897f\u4e86: Text Only > XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream > 1) 1) \"mystream\" 2) 1) 1) 1526569495631-0 2) 1) \"message\" 2) \"apple\" XREADGROUP \u7684\u56de\u590d\u5c31\u50cf XREAD \u7684\u56de\u590d\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\u4e0a\u9762\u63d0\u4f9b\u7684 GROUP <group-name> <consumer-name> \u3002 \u5b83\u58f0\u660e\u6211\u60f3\u4f7f\u7528\u6d88\u8d39\u7ec4 mygroup \u4ece\u6d41\u4e2d\u8bfb\u53d6\uff0c\u6211\u662f\u6d88\u8d39\u7ec4 Alice \u3002 \u6bcf\u5f53\u4f7f\u7528\u8005\u5bf9\u6d88\u8d39\u7ec4\u6267\u884c\u64cd\u4f5c\u65f6\uff0c\u5b83\u5fc5\u987b\u6307\u5b9a\u5b83\u7684\u540d\u79f0\uff0c\u5728\u7ec4\u4e2d\u552f\u4e00\u6807\u8bc6\u8fd9\u4e2a\u4f7f\u7528\u8005\u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u884c\u4e2d\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7ec6\u8282\uff0c\u5728\u5f3a\u5236\u6027\u7684 STREAMS \u9009\u9879\u4e4b\u540e\uff0c\u952e mystream \u8bf7\u6c42\u7684 ID \u662f\u7279\u6b8a ID > \u3002 \u8fd9\u4e2a\u7279\u6b8a ID \u53ea\u5728\u6d88\u8d39\u7ec4\u7684\u4e0a\u4e0b\u6587\u4e2d\u6709\u6548\uff0c\u5b83\u7684\u610f\u601d\u662f: \u6d88\u606f\u8fc4\u4eca\u4e3a\u6b62\u4ece\u672a\u4f20\u9012\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005 \u3002 \u8fd9\u51e0\u4e4e\u603b\u662f\u60a8\u60f3\u8981\u7684\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u771f\u5b9e\u7684 ID\uff0c\u4f8b\u5982 0 \u6216\u4efb\u4f55\u5176\u4ed6\u6709\u6548\u7684 ID\uff0c\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4ece XREADGROUP \u8bf7\u6c42\u53ea\u5411\u6211\u4eec\u63d0\u4f9b\u6302\u8d77\u6d88\u606f \u7684 \u5386\u53f2\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5728\u7ec4\u4e2d\u770b\u5230\u65b0\u6d88\u606f\u3002\u6240\u4ee5\u57fa\u672c\u4e0a XREADGROUP \u57fa\u4e8e\u6211\u4eec\u6307\u5b9a\u7684 ID \u6709\u4ee5\u4e0b\u884c\u4e3a: \u5982\u679c ID \u662f\u7279\u6b8a ID > \uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u5c06\u53ea\u8fd4\u56de\u8fc4\u4eca\u4e3a\u6b62\u4ece\u672a\u4ea4\u4ed8\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005\u7684\u65b0\u6d88\u606f\uff0c\u5e76\u4e14\u4f5c\u4e3a\u526f\u4f5c\u7528\uff0c\u5c06\u66f4\u65b0\u6d88\u8d39\u7ec4\u7684 \u6700\u540e\u4e00\u4e2a ID \u3002 \u5982\u679c\u8be5 ID \u662f\u4efb\u4f55\u5176\u4ed6\u6709\u6548\u7684\u6570\u5b57 ID\uff0c\u5219\u8be5\u547d\u4ee4\u5c06\u5141\u8bb8\u6211\u4eec\u8bbf\u95ee\u6302\u8d77\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f20\u9012\u5230\u6307\u5b9a\u6d88\u8d39\u8005(\u901a\u8fc7\u63d0\u4f9b\u7684\u540d\u79f0\u6807\u8bc6)\u7684\u6d88\u606f\u96c6\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0cXACK \u4ece\u672a\u786e\u8ba4\u8fc7\u8fd9\u4e9b\u6d88\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u6d4b\u8bd5\u6b64\u884c\u4e3a\uff0c\u6307\u5b9a ID \u4e3a 0\uff0c\u4e0d\u5e26\u4efb\u4f55 COUNT \u9009\u9879:\u6211\u4eec\u53ea\u4f1a\u770b\u5230\u552f\u4e00\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u5173\u4e8e\u82f9\u679c\u7684\u6d88\u606f: Text Only > XREADGROUP GROUP mygroup Alice STREAMS mystream 0 1) 1) \"mystream\" 1) 1) 1) 1526569495631-0 1) 1) \"message\" 1) \"apple\" \u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u786e\u8ba4\u6d88\u606f\u5df2\u88ab\u5904\u7406\uff0c\u5b83\u5c06\u4e0d\u518d\u662f\u5f85\u5904\u7406\u6d88\u606f\u5386\u53f2\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7cfb\u7edf\u5c06\u4e0d\u518d\u62a5\u544a\u4efb\u4f55\u5185\u5bb9: Text Only > XACK mystream mygroup 1526569495631-0 (integer) 1 > XREADGROUP GROUP mygroup Alice STREAMS mystream 0 1) 1) \"mystream\" 2) (empty list or set) \u5982\u679c\u4f60\u8fd8\u4e0d\u77e5\u9053 XACK \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4e0d\u8981\u62c5\u5fc3\uff0c\u5b83\u7684\u601d\u60f3\u53ea\u662f\u5904\u7406\u8fc7\u7684\u6d88\u606f\u4e0d\u518d\u662f\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u7684\u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206\u3002 \u73b0\u5728\u8f6e\u5230\u9c8d\u52c3\u8bfb\u4e86: Text Only > XREADGROUP GROUP mygroup Bob COUNT 2 STREAMS mystream > 1) 1) \"mystream\" 2) 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" 2) 1) 1526569506935-0 2) 1) \"message\" 2) \"strawberry\" Bob \u6700\u591a\u8bf7\u6c42\u4e24\u6761\u6d88\u606f\uff0c\u5e76\u4e14\u6b63\u5728\u901a\u8fc7\u540c\u4e00\u4e2a\u7ec4 mygroup \u8fdb\u884c\u9605\u8bfb\u3002 \u6240\u4ee5 Redis \u53ea\u62a5\u544a\u65b0\u6d88\u606f\u3002 \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c apple \u6d88\u606f\u6ca1\u6709\u88ab\u4f20\u9012\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u4f20\u9012\u7ed9\u4e86 Alice\uff0c\u6240\u4ee5 Bob \u5f97\u5230\u4e86\u6a58\u5b50\u548c\u8349\u8393\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u8fd9\u6837\uff0cAlice\u3001Bob \u548c\u7ec4\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u6d88\u8d39\u8005\u90fd\u80fd\u591f\u4ece\u540c\u4e00\u6d41\u4e2d\u8bfb\u53d6\u4e0d\u540c\u7684\u6d88\u606f\uff0c\u8bfb\u53d6\u5c1a\u672a\u5904\u7406\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u6216\u8005\u5c06\u6d88\u606f\u6807\u8bb0\u4e3a\u5df2\u5904\u7406\u3002 \u8fd9\u5141\u8bb8\u521b\u5efa\u4e0d\u540c\u7684\u62d3\u6251\u548c\u8bed\u4e49\u6765\u4f7f\u7528\u6765\u81ea\u6d41\u7684\u6d88\u606f\u3002 \u6709\u51e0\u4ef6\u4e8b\u9700\u8981\u8bb0\u4f4f: \u6d88\u8d39\u8005\u5728\u7b2c\u4e00\u6b21\u88ab\u63d0\u53ca\u65f6\u5c31\u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u521b\u5efa\u3002 \u5373\u4f7f\u4f7f\u7528 XREADGROUP \uff0c\u60a8\u4e5f\u53ef\u4ee5\u540c\u65f6\u4ece\u591a\u4e2a\u952e\u4e2d\u8bfb\u53d6\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u60a8\u9700\u8981\u5728\u6bcf\u4e2a\u6d41\u4e2d\u521b\u5efa\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u6d88\u8d39\u7ec4\u3002\u8fd9\u4e0d\u662f\u5e38\u89c1\u7684\u9700\u6c42\uff0c\u4f46\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8be5\u7279\u6027\u5728\u6280\u672f\u4e0a\u662f\u53ef\u7528\u7684\u3002 XREADGROUP \u662f\u4e00\u4e2a\u5199\u547d\u4ee4\uff0c\u56e0\u4e3a\u5373\u4f7f\u5b83\u4ece\u6d41\u4e2d\u8bfb\u53d6\uff0c\u4f5c\u4e3a\u8bfb\u53d6\u7684\u526f\u4f5c\u7528\uff0c\u6d88\u8d39\u7ec4\u4e5f\u4f1a\u88ab\u4fee\u6539\uff0c\u56e0\u6b64\u53ea\u80fd\u5728\u4e3b\u5b9e\u4f8b\u4e0a\u8c03\u7528\u5b83\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 Ruby \u8bed\u8a00\u7f16\u5199\u7684\u4f7f\u7528\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\u5b9e\u73b0\u793a\u4f8b\u3002 Ruby \u4ee3\u7801\u7684\u76ee\u6807\u662f\u8ba9\u51e0\u4e4e\u6240\u6709\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u90fd\u80fd\u8bfb\u61c2\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e0d\u61c2 Ruby: Ruby require `redis' if ARGV.length == 0 puts \"Please specify a consumer name\" exit 1 end ConsumerName = ARGV[0] GroupName = \"mygroup\" r = Redis.new def process_message(id,msg) puts \"[ #{ ConsumerName } ] #{ id } = #{ msg . inspect } \" end $lastid =` 0 - 0 ' puts \"Consumer #{ ConsumerName } starting...\" check_backlog = true while true # Pick the ID based on the iteration: the first time we want to # read our pending messages, in case we crashed and are recovering. # Once we consumed our history, we can start getting new messages. if check_backlog myid = $lastid else myid =`>' end items = r . xreadgroup ( 'GROUP' , GroupName , ConsumerName , 'BLOCK' , '2000' , 'COUNT' , '10' , 'STREAMS' , :my_stream_key , myid ) if items == nil puts \"Timeout!\" next end # If we receive an empty reply, it means we were consuming our history # and that the history is now empty. Let's start to consume new messages. check_backlog = false if items [ 0 ][ 1 ]. length == 0 items [ 0 ][ 1 ]. each { | i | id , fields = i # Process the message process_message ( id , fields ) # Acknowledge the message as processed r . xack ( :my_stream_key , GroupName , id ) $lastid = id } end \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 Ruby \u8bed\u8a00\u7f16\u5199\u7684\u4f7f\u7528\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\u5b9e\u73b0\u793a\u4f8b\u3002 Ruby \u4ee3\u7801\u7684\u76ee\u6807\u662f\u8ba9\u51e0\u4e4e\u6240\u6709\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u90fd\u80fd\u8bfb\u61c2\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e0d\u61c2 Ruby: \u4e00\u65e6\u4f7f\u7528\u4e86\u5386\u53f2\u8bb0\u5f55\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u7684\u6d88\u606f\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5207\u6362\u5230\u4f7f\u7528 > \u7279\u6b8a ID \u6765\u4f7f\u7528\u65b0\u6d88\u606f\u3002 \u4ece\u6c38\u4e45\u5931\u8d25\u4e2d\u6062\u590d \u4e0a\u9762\u7684\u793a\u4f8b\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u53c2\u4e0e\u540c\u4e00\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u90fd\u6709\u4e00\u4e2a\u6d88\u606f\u5b50\u96c6\u8981\u5904\u7406\uff0c\u5f53\u4ece\u5931\u8d25\u4e2d\u6062\u590d\u65f6\uff0c\u91cd\u65b0\u8bfb\u53d6\u4ec5\u4ea4\u4ed8\u7ed9\u4ed6\u4eec\u7684\u6302\u8d77\u6d88\u606f\u3002\u7136\u800c\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u6d88\u8d39\u8005\u53ef\u80fd\u6c38\u8fdc\u5931\u8d25\uff0c\u6c38\u8fdc\u65e0\u6cd5\u6062\u590d\u3002\u6d88\u8d39\u8005\u7684\u6302\u8d77\u7684\u6d88\u606f\u5728\u56e0\u4efb\u4f55\u539f\u56e0\u505c\u6b62\u540e\u4ece\u672a\u6062\u590d\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48? Redis \u6d88\u8d39\u7ec4\u63d0\u4f9b\u4e86\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u7279\u6027\uff0c\u4ee5\u58f0\u660e\u7ed9\u5b9a\u6d88\u8d39\u8005\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u4ee5\u4fbf\u8fd9\u4e9b\u6d88\u606f\u5c06\u6539\u53d8\u6240\u6709\u6743\u5e76\u5c06\u88ab\u91cd\u65b0\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u3002\u8fd9\u4e2a\u529f\u80fd\u975e\u5e38\u660e\u786e\u3002\u4f7f\u7528\u8005\u5fc5\u987b\u68c0\u67e5\u6302\u8d77\u7684\u6d88\u606f\u5217\u8868\uff0c\u5e76\u5fc5\u987b\u4f7f\u7528\u7279\u6b8a\u547d\u4ee4\u58f0\u660e\u7279\u5b9a\u7684\u6d88\u606f\uff0c\u5426\u5219\u670d\u52a1\u5668\u5c06\u6c38\u8fdc\u4fdd\u7559\u6302\u8d77\u7684\u6d88\u606f\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u65e7\u7684\u4f7f\u7528\u8005\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u8fd9\u79cd\u529f\u80fd\uff0c\u4ee5\u53ca\u5177\u4f53\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u6b64\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65\u53ea\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u63d0\u4f9b\u6d88\u8d39\u7ec4\u4e2d\u6302\u8d77\u6761\u76ee\u7684\u53ef\u89c2\u6d4b\u6027\uff0c\u79f0\u4e3a XPENDING \u3002 \u8fd9\u662f\u4e00\u4e2a\u53ea\u8bfb\u547d\u4ee4\uff0c\u8c03\u7528\u5b83\u603b\u662f\u5b89\u5168\u7684\uff0c\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u6d88\u606f\u7684\u6240\u6709\u6743\u3002 \u5728\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u4e2d\uff0c\u8c03\u7528\u8be5\u547d\u4ee4\u65f6\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6d41\u7684\u540d\u79f0\uff0c\u53e6\u4e00\u4e2a\u662f\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u3002 Text Only > XPENDING mystream mygroup 1) (integer) 2 2) 1526569498055-0 3) 1526569506935-0 4) 1) 1) \"Bob\" 2) \"2\" \u5f53\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8c03\u7528\u65f6\uff0c\u8be5\u547d\u4ee4\u8f93\u51fa\u6d88\u8d39\u7ec4\u4e2d\u5f85\u5b9a\u6d88\u606f\u7684\u603b\u6570(\u672c\u4f8b\u4e2d\u4e3a\u4e24\u4e2a)\u3001\u5f85\u5b9a\u6d88\u606f\u4e2d\u8f83\u4f4e\u548c\u8f83\u9ad8\u7684\u6d88\u606f ID\uff0c\u6700\u540e\u8f93\u51fa\u6d88\u8d39\u8005\u7684\u5217\u8868\u548c\u4ed6\u4eec\u62e5\u6709\u7684\u5f85\u5b9a\u6d88\u606f\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ea\u6709 Bob \u548c\u4e24\u4e2a\u6302\u8d77\u7684\u6d88\u606f\uff0c\u56e0\u4e3a Alice \u8bf7\u6c42\u7684\u5355\u4e2a\u6d88\u606f\u662f\u4f7f\u7528 XACK \u786e\u8ba4\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9 XPENDING \u66f4\u591a\u7684\u53c2\u6570\u6765\u8bf7\u6c42\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u5b8c\u6574\u7684\u547d\u4ee4\u7b7e\u540d\u5982\u4e0b: Text Only XPENDING <key> <groupname> [[IDLE <min-idle-time>] <start-id> <end-id> <count> [<consumer-name>]] \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5f00\u59cb\u548c\u7ed3\u675f ID(\u53ef\u4ee5\u662f - \u548c + \uff0c\u5c31\u50cf XRANGE \u4e2d\u90a3\u6837)\u548c\u4e00\u4e2a\u8ba1\u6570\u6765\u63a7\u5236\u547d\u4ee4\u8fd4\u56de\u7684\u4fe1\u606f\u91cf\uff0c\u6211\u4eec\u80fd\u591f\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6302\u8d77\u6d88\u606f\u7684\u4fe1\u606f\u3002\u5982\u679c\u5e0c\u671b\u5c06\u8f93\u51fa\u9650\u5236\u4e3a\u4ec5\u4e3a\u7ed9\u5b9a\u6d88\u8d39\u8005\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u5219\u4f7f\u7528\u53ef\u9009\u7684\u6700\u7ec8\u53c2\u6570\u6d88\u8d39\u8005\u540d\uff0c\u4f46\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u4e0d\u4f7f\u7528\u6b64\u7279\u6027\u3002 Text Only > XPENDING mystream mygroup - + 10 1) 1) 1526569498055-0 2) \"Bob\" 3) (integer) 74170458 4) (integer) 1 2) 1) 1526569506935-0 2) \"Bob\" 3) (integer) 74170458 4) (integer) 1 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u6bcf\u6761\u6d88\u606f\u7684\u8be6\u7ec6\u4fe1\u606f:ID\u3001\u6d88\u8d39\u8005\u540d\u3001 idle time (\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\uff0c\u8fd9\u662f\u81ea\u6d88\u606f\u6700\u540e\u4e00\u6b21\u88ab\u4f20\u9012\u7ed9\u67d0\u4e2a\u6d88\u8d39\u8005\u4ee5\u6765\u7ecf\u8fc7\u4e86\u591a\u5c11\u6beb\u79d2\uff0c\u6700\u540e\u662f\u7ed9\u5b9a\u6d88\u606f\u88ab\u4f20\u9012\u7684\u6b21\u6570\u3002 \u6211\u4eec\u6709\u4e24\u4e2a\u6765\u81ea Bob \u7684\u6d88\u606f\uff0c\u5b83\u4eec\u7a7a\u95f2\u65f6\u95f4\u4e3a 74170458 \u6beb\u79d2\uff0c\u5927\u7ea6 20 \u5c0f\u65f6\u3002 \u6ce8\u610f\uff0c\u6ca1\u6709\u4eba\u963b\u6b62\u6211\u4eec\u901a\u8fc7\u4f7f\u7528 XRANGE \u6765\u68c0\u67e5\u7b2c\u4e00\u4e2a\u6d88\u606f\u5185\u5bb9\u662f\u4ec0\u4e48\u3002 Text Only > XRANGE mystream 1526569498055-0 1526569498055-0 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" \u6211\u4eec\u53ea\u9700\u8981\u5728\u53c2\u6570\u4e2d\u91cd\u590d\u76f8\u540c\u7684 ID \u4e24\u6b21\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u60f3\u6cd5\uff0c\u90a3\u4e48 Alice \u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u5728 20 \u5c0f\u65f6\u4e0d\u5904\u7406\u6d88\u606f\u4e4b\u540e\uff0cBob \u53ef\u80fd\u65e0\u6cd5\u53ca\u65f6\u6062\u590d\uff0c\u73b0\u5728\u662f\u65f6\u5019\u8bf7\u6c42\u5904\u7406\u8fd9\u4e9b\u6d88\u606f\u5e76\u4ee3\u66ff Bob \u6062\u590d\u5904\u7406\u4e86\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 XCLAIM \u547d\u4ee4\u3002 \u8fd9\u4e2a\u547d\u4ee4\u975e\u5e38\u590d\u6742\uff0c\u5b83\u7684\u5b8c\u6574\u5f62\u5f0f\u5145\u6ee1\u4e86\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u7528\u4e8e\u590d\u5236\u6d88\u8d39\u7ec4\u66f4\u6539\uff0c\u4f46\u662f\u6211\u4eec\u5c06\u53ea\u4f7f\u7528\u901a\u5e38\u9700\u8981\u7684\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5f88\u7b80\u5355: Text Only XCLAIM <key> <group> <consumer> <min-idle-time> <ID-1> <ID-2> ... <ID-N> \u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u8bf4\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7279\u5b9a\u7684\u952e\u548c\u7ec4\uff0c\u6211\u5e0c\u671b\u6307\u5b9a\u7684\u6d88\u606f id \u5c06\u6539\u53d8\u6240\u6709\u6743\uff0c\u5e76\u5c06\u88ab\u5206\u914d\u7ed9\u6307\u5b9a\u7684\u6d88\u8d39\u8005\u540d <consumer> \u3002\u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6700\u5c0f\u7a7a\u95f2\u65f6\u95f4\uff0c\u8fd9\u6837\uff0c\u53ea\u6709\u5f53\u63d0\u5230\u7684\u6d88\u606f\u7684\u7a7a\u95f2\u65f6\u95f4\u5927\u4e8e\u6307\u5b9a\u7684\u7a7a\u95f2\u65f6\u95f4\u65f6\uff0c\u64cd\u4f5c\u624d\u4f1a\u5de5\u4f5c\u3002\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u4e24\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u8bd5\u56fe\u91cd\u65b0\u58f0\u660e\u4e00\u6761\u6d88\u606f: Text Only Client 1: XCLAIM mystream mygroup Alice 3600000 1526569498055-0 Client 2: XCLAIM mystream mygroup Lora 3600000 1526569498055-0 \u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u526f\u4f5c\u7528\uff0c\u58f0\u660e\u6d88\u606f\u5c06\u91cd\u7f6e\u5176\u7a7a\u95f2\u65f6\u95f4\u5e76\u589e\u52a0\u5176\u4ea4\u4ed8\u8ba1\u6570\u5668\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5ba2\u6237\u673a\u5c06\u65e0\u6cd5\u58f0\u660e\u5b83\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u907f\u514d\u4e86\u7410\u788e\u7684\u6d88\u606f\u518d\u5904\u7406(\u5373\u4f7f\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u80fd\u7cbe\u786e\u5730\u83b7\u5f97\u4e00\u6b21\u5904\u7406)\u3002 \u547d\u4ee4\u6267\u884c\u7684\u7ed3\u679c\u5982\u4e0b: Text Only > XCLAIM mystream mygroup Alice 3600000 1526569498055-0 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" Alice \u6210\u529f\u5730\u8ba4\u9886\u4e86\u6d88\u606f\uff0c\u5979\u73b0\u5728\u53ef\u4ee5\u5904\u7406\u6d88\u606f\u5e76\u786e\u8ba4\u5b83\uff0c\u5e76\u5411\u524d\u63a8\u8fdb\uff0c\u5373\u4f7f\u539f\u59cb\u6d88\u8d39\u8005\u6ca1\u6709\u6062\u590d\u3002 \u4ece\u4e0a\u9762\u7684\u793a\u4f8b\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\u4f5c\u4e3a\u6210\u529f\u58f0\u660e\u7ed9\u5b9a\u6d88\u606f\u7684\u526f\u4f5c\u7528\uff0c XCLAIM \u547d\u4ee4\u4e5f\u4f1a\u8fd4\u56de\u8be5\u6d88\u606f\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u53ef\u4ee5\u4f7f\u7528 JUSTID \u9009\u9879\u4ec5\u8fd4\u56de\u6210\u529f\u8ba4\u9886\u7684\u6d88\u606f\u7684 id\u3002\u5982\u679c\u60a8\u5e0c\u671b\u51cf\u5c11\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f7f\u7528\u7684\u5e26\u5bbd(\u4ee5\u53ca\u547d\u4ee4\u7684\u6027\u80fd)\uff0c\u5e76\u4e14\u60a8\u5bf9\u6d88\u606f\u4e0d\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u60a8\u7684\u4f7f\u7528\u8005\u7684\u5b9e\u73b0\u65b9\u5f0f\u5c06\u4e0d\u65f6\u91cd\u65b0\u626b\u63cf\u6302\u8d77\u7684\u6d88\u606f\u7684\u5386\u53f2\uff0c\u90a3\u4e48\u8fd9\u662f\u5f88\u6709\u7528\u7684\u3002 \u8ba4\u9886\u4e5f\u53ef\u4ee5\u7531\u5355\u72ec\u7684\u6d41\u7a0b\u5b9e\u73b0:\u8be5\u6d41\u7a0b\u53ea\u68c0\u67e5\u6302\u8d77\u7684\u6d88\u606f\u5217\u8868\uff0c\u5e76\u5c06\u7a7a\u95f2\u6d88\u606f\u5206\u914d\u7ed9\u770b\u8d77\u6765\u6d3b\u8dc3\u7684\u4f7f\u7528\u8005\u3002\u4f7f\u7528 Redis \u6d41\u7684\u53ef\u89c2\u6d4b\u6027\u7279\u5f81\u4e4b\u4e00\u53ef\u4ee5\u83b7\u5f97\u6d3b\u52a8\u6d88\u8d39\u8005\u3002\u8fd9\u662f\u4e0b\u4e00\u8282\u7684\u4e3b\u9898\u3002 \u81ea\u52a8\u8ba4\u9886 \u5728 Redis 6.2 \u4e2d\u6dfb\u52a0\u7684 XAUTOCLAIM \u547d\u4ee4\u5b9e\u73b0\u4e86\u6211\u4eec\u4e0a\u9762\u63cf\u8ff0\u7684\u8ba4\u9886\u8fc7\u7a0b\u3002 XPENDING \u548c XCLAIM \u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6062\u590d\u673a\u5236\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u6784\u5efa\u5757\u3002 \u8be5\u547d\u4ee4\u901a\u8fc7\u8ba9 Redis \u7ba1\u7406\u901a\u7528\u6d41\u7a0b\u6765\u4f18\u5316\u5b83\uff0c\u5e76\u4e3a\u5927\u591a\u6570\u6062\u590d\u9700\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002 XAUTOCLAIM \u8bc6\u522b\u7a7a\u95f2\u7684\u6302\u8d77\u6d88\u606f\u5e76\u5c06\u5176\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u4f7f\u7528\u8005\u3002 \u547d\u4ee4\u7684\u7b7e\u540d\u5982\u4e0b\u6240\u793a: `XAUTOCLAIM <key> <group> <consumer> <min-idle-time> <start> [COUNT COUNT] [JUSTID] ' \u6240\u4ee5\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u58f0\u660e\u6765\u58f0\u660e\u4e00\u6761\u6d88\u606f\uff0c\u5c31\u50cf\u8fd9\u6837: Text Only > XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 1 1) 1526569498055-0 2) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" \u4e0e XCLAIM \u7c7b\u4f3c\uff0c\u8be5\u547d\u4ee4\u7528\u58f0\u660e\u7684\u6d88\u606f\u6570\u7ec4\u8fdb\u884c\u54cd\u5e94\uff0c\u4f46\u5b83\u4e5f\u8fd4\u56de\u4e00\u4e2a\u6d41 ID\uff0c\u5141\u8bb8\u8fed\u4ee3\u6302\u8d77\u7684\u6761\u76ee\u3002 \u6d41 ID \u662f\u4e00\u4e2a\u6e38\u6807\uff0c\u6211\u53ef\u4ee5\u5728\u4e0b\u4e00\u4e2a\u8c03\u7528\u4e2d\u4f7f\u7528\u5b83\u6765\u7ee7\u7eed\u58f0\u660e\u7a7a\u95f2\u7684\u6302\u8d77\u6d88\u606f: Text Only > XAUTOCLAIM mystream mygroup Lora 3600000 1526569498055-0 COUNT 1 1) 0-0 2) 1) 1526569506935-0 2) 1) \"message\" 2) \"strawberry\" \u5f53 XAUTOCLAIM \u8fd4\u56de 0-0 \u6d41 ID \u4f5c\u4e3a\u6e38\u6807\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5230\u8fbe\u4e86\u6d88\u8d39\u7ec4\u5f85\u5904\u7406\u6761\u76ee\u5217\u8868\u7684\u672b\u5c3e\u3002 \u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6ca1\u6709\u65b0\u7684\u7a7a\u95f2\u6302\u8d77\u6d88\u606f\uff0c\u56e0\u6b64\u6d41\u7a0b\u4ece\u6d41\u7684\u5f00\u59cb\u8c03\u7528 XAUTOCLAIM \u7ee7\u7eed\u3002 \u8ba4\u9886\u548c\u4ea4\u4ed8\u8ba1\u6570 \u60a8\u5728 XPENDING \u8f93\u51fa\u4e2d\u89c2\u6d4b\u5230\u7684\u8ba1\u6570\u5668\u662f\u6bcf\u6761\u6d88\u606f\u7684\u4ea4\u4ed8\u6570\u91cf\u3002\u8ba1\u6570\u5668\u4ee5\u4e24\u79cd\u65b9\u5f0f\u9012\u589e:\u5f53\u901a\u8fc7 XCLAIM \u6210\u529f\u58f0\u660e\u6d88\u606f\u65f6\uff0c\u6216\u5f53\u4f7f\u7528 XREADGROUP \u8c03\u7528\u4ee5\u8bbf\u95ee\u6302\u8d77\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\u65f6\u3002 \u5f53\u51fa\u73b0\u5931\u8d25\u65f6\uff0c\u901a\u5e38\u4f1a\u591a\u6b21\u4f20\u9012\u6d88\u606f\uff0c\u4f46\u6700\u7ec8\u5b83\u4eec\u901a\u5e38\u4f1a\u5f97\u5230\u5904\u7406\u548c\u786e\u8ba4\u3002\u7136\u800c\uff0c\u5728\u5904\u7406\u67d0\u4e9b\u7279\u5b9a\u6d88\u606f\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u88ab\u635f\u574f\u6216\u4ee5\u89e6\u53d1\u5904\u7406\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u7684\u65b9\u5f0f\u5236\u4f5c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u7684\u60c5\u51b5\u662f\u6d88\u8d39\u8005\u5c06\u4e0d\u65ad\u5730\u65e0\u6cd5\u5904\u7406\u8fd9\u6761\u7279\u5b9a\u7684\u6d88\u606f\u3002\u56e0\u4e3a\u6211\u4eec\u6709\u4f20\u9012\u5c1d\u8bd5\u7684\u8ba1\u6570\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5\u8ba1\u6570\u5668\u6765\u68c0\u6d4b\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4e0d\u53ef\u5904\u7406\u7684\u6d88\u606f\u3002\u56e0\u6b64\uff0c\u4e00\u65e6\u4ea4\u4ed8\u8ba1\u6570\u5668\u8fbe\u5230\u60a8\u6240\u9009\u62e9\u7684\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5927\u6570\u5b57\uff0c\u53ef\u80fd\u66f4\u660e\u667a\u7684\u505a\u6cd5\u662f\u5c06\u8fd9\u4e9b\u6d88\u606f\u653e\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\uff0c\u5e76\u5411\u7cfb\u7edf\u7ba1\u7406\u5458\u53d1\u9001\u901a\u77e5\u3002\u8fd9\u57fa\u672c\u4e0a\u662f Redis Streams \u5b9e\u73b0 dead letter \u6982\u5ff5\u7684\u65b9\u5f0f\u3002 \u6d41\u53ef\u89c2\u6d4b\u6027 \u7f3a\u4e4f\u53ef\u89c2\u6d4b\u6027\u7684\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u975e\u5e38\u96be\u4ee5\u4f7f\u7528\u3002 \u4e0d\u77e5\u9053\u8c01\u5728\u4f7f\u7528\u6d88\u606f\u3001\u4ec0\u4e48\u6d88\u606f\u6302\u8d77\u3001\u7ed9\u5b9a\u6d41\u4e2d\u6d3b\u52a8\u7684\u6d88\u8d39\u7ec4\uff0c\u8fd9\u4f7f\u5f97\u4e00\u5207\u90fd\u53d8\u5f97\u4e0d\u900f\u660e\u3002 \u56e0\u6b64\uff0cRedis Streams \u548c\u6d88\u8d39\u7ec4\u6709\u4e0d\u540c\u7684\u89c2\u6d4b\u65b9\u5f0f\u3002 \u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86 XPENDING \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u68c0\u67e5\u5728\u7ed9\u5b9a\u65f6\u523b\u6b63\u5728\u5904\u7406\u7684\u6d88\u606f\u5217\u8868\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u7a7a\u95f2\u65f6\u95f4\u548c\u4f20\u9012\u6570\u91cf\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c XINFO \u547d\u4ee4\u662f\u4e00\u4e2a\u53ef\u89c2\u6d4b\u6027\u63a5\u53e3\uff0c\u53ef\u4ee5\u4e0e\u5b50\u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u83b7\u53d6\u5173\u4e8e\u6d41\u6216\u6d88\u8d39\u7ec4\u7684\u4fe1\u606f\u3002 \u8fd9\u4e2a\u547d\u4ee4\u4f7f\u7528\u5b50\u547d\u4ee4\u6765\u663e\u793a\u5173\u4e8e\u6d41\u53ca\u5176\u6d88\u8d39\u7ec4\u72b6\u6001\u7684\u4e0d\u540c\u4fe1\u606f\u3002\u4f8b\u5982\uff0c XINFO STREAM \u62a5\u544a\u6d41\u672c\u8eab\u7684\u4fe1\u606f\u3002 Text Only > XINFO STREAM mystream 1) \"length\" 2) (integer) 2 3) \"radix-tree-keys\" 4) (integer) 1 5) \"radix-tree-nodes\" 6) (integer) 2 7) \"last-generated-id\" 8) \"1638125141232-0\" 9) \"max-deleted-entryid\" 10) \"0-0\" 11) \"entries-added\" 12) (integer) 2 13) \"groups\" 14) (integer) 1 15) \"first-entry\" 16) 1) \"1638125133432-0\" 2) 1) \"message\" 2) \"apple\" 17) \"last-entry\" 18) 1) \"1638125141232-0\" 2) 1) \"message\" 2) \"banana\" \u8f93\u51fa\u663e\u793a\u4e86\u5173\u4e8e\u6d41\u5185\u90e8\u5982\u4f55\u7f16\u7801\u7684\u4fe1\u606f\uff0c\u8fd8\u663e\u793a\u4e86\u6d41\u4e2d\u7684\u7b2c\u4e00\u6761\u548c\u6700\u540e\u4e00\u6761\u6d88\u606f\u3002 \u53e6\u4e00\u4e2a\u53ef\u7528\u7684\u4fe1\u606f\u662f\u4e0e\u6b64\u6d41\u76f8\u5173\u8054\u7684\u6d88\u8d39\u7ec4\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u8be2\u95ee\u66f4\u591a\u5173\u4e8e\u6d88\u8d39\u7ec4\u7684\u4fe1\u606f\u3002 Text Only > XINFO GROUPS mystream 1) 1) \"name\" 2) \"mygroup\" 3) \"consumers\" 4) (integer) 2 5) \"pending\" 6) (integer) 2 7) \"last-delivered-id\" 8) \"1638126030001-0\" 9) \"entries-read\" 10) (integer) 2 11) \"lag\" 12) (integer) 0 2) 1) \"name\" 2) \"some-other-group\" 3) \"consumers\" 4) (integer) 1 5) \"pending\" 6) (integer) 0 7) \"last-delivered-id\" 8) \"1638126028070-0\" 9) \"entries-read\" 10) (integer) 1 11) \"lag\" 12) (integer) 1 \u6b63\u5982\u60a8\u5728\u6b64\u8f93\u51fa\u548c\u524d\u9762\u7684\u8f93\u51fa\u4e2d\u6240\u770b\u5230\u7684\uff0c XINFO \u547d\u4ee4\u8f93\u51fa\u4e00\u7cfb\u5217\u5b57\u6bb5\u503c\u9879\u3002 \u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u53ef\u89c2\u6d4b\u6027\u547d\u4ee4\uff0c\u8fd9\u5141\u8bb8\u4eba\u7c7b\u7528\u6237\u7acb\u5373\u4e86\u89e3\u62a5\u544a\u4e86\u4ec0\u4e48\u4fe1\u606f\uff0c\u5e76\u5141\u8bb8\u8be5\u547d\u4ee4\u5728\u672a\u6765\u901a\u8fc7\u6dfb\u52a0\u66f4\u591a\u5b57\u6bb5\u6765\u62a5\u544a\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u7834\u574f\u4e0e\u65e7\u5ba2\u6237\u673a\u7684\u517c\u5bb9\u6027\u3002 \u5176\u4ed6\u4e00\u4e9b\u5e26\u5bbd\u6548\u7387\u66f4\u9ad8\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 XPENDING \uff0c\u53ea\u62a5\u544a\u6ca1\u6709\u5b57\u6bb5\u540d\u7684\u4fe1\u606f\u3002 \u4e0a\u9762\u7684\u793a\u4f8b(\u5176\u4e2d\u4f7f\u7528\u4e86 GROUPS \u5b50\u547d\u4ee4)\u7684\u8f93\u51fa\u5e94\u8be5\u5f88\u6e05\u695a\uff0c\u53ef\u4ee5\u89c2\u6d4b\u5b57\u6bb5\u540d\u3002 \u901a\u8fc7\u68c0\u67e5\u5728\u7ec4\u4e2d\u6ce8\u518c\u7684\u6d88\u8d39\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u8be6\u7ec6\u5730\u68c0\u67e5\u7279\u5b9a\u6d88\u8d39\u7ec4\u7684\u72b6\u6001\u3002 Text Only > XINFO CONSUMERS mystream mygroup 1) 1) name 2) \"Alice\" 3) pending 4) (integer) 1 5) idle 6) (integer) 9104628 2) 1) name 2) \"Bob\" 3) pending 4) (integer) 1 5) idle 6) (integer) 83841983 \u5982\u679c\u4f60\u4e0d\u8bb0\u5f97\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u5c31\u5411\u547d\u4ee4\u672c\u8eab\u5bfb\u6c42\u5e2e\u52a9: Text Only > XINFO HELP 1) XINFO <subcommand> [<arg> [value] [opt] ...]. Subcommands are: 2) CONSUMERS <key> <groupname> 3) Show consumers of <groupname>. 4) GROUPS <key> 5) Show the stream consumer groups. 6) STREAM <key> [FULL [COUNT <count>] 7) Show information about the stream. 8) HELP 9) Prints this help. \u4e0e Kafka (TM)\u5206\u533a\u7684\u533a\u522b Redis \u6d41\u4e2d\u7684\u6d88\u8d39\u7ec4\u53ef\u80fd\u5728\u67d0\u4e9b\u65b9\u9762\u7c7b\u4f3c\u4e8e\u57fa\u4e8e Kafka (TM)\u5206\u533a\u7684\u6d88\u8d39\u7ec4\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\uff0cRedis \u6d41\u5728\u5b9e\u9645\u4e2d\u662f\u975e\u5e38\u4e0d\u540c\u7684\u3002 \u5206\u533a\u53ea\u6709 logical \uff0c\u6d88\u606f\u53ea\u662f\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684 Redis \u952e\u4e2d\uff0c\u56e0\u6b64\u4e0d\u540c\u5ba2\u6237\u673a\u7684\u670d\u52a1\u65b9\u5f0f\u53d6\u51b3\u4e8e\u8c01\u51c6\u5907\u5904\u7406\u65b0\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u673a\u4ece\u54ea\u4e2a\u5206\u533a\u8bfb\u53d6\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6d88\u8d39\u8005 C3 \u5728\u67d0\u4e2a\u65f6\u523b\u6c38\u4e45\u5931\u6548\uff0cRedis \u5c06\u7ee7\u7eed\u4e3a\u5230\u8fbe\u7684\u6240\u6709\u65b0\u6d88\u606f\u63d0\u4f9b C1 \u548c C2 \u670d\u52a1\uff0c\u5c31\u50cf\u73b0\u5728\u53ea\u6709\u4e24\u4e2a logical \u5206\u533a\u4e00\u6837\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f\u7684\u901f\u5ea6\u6bd4\u5176\u4ed6\u6d88\u8d39\u8005\u5feb\u5f97\u591a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6d88\u8d39\u8005\u5728\u76f8\u540c\u7684\u65f6\u95f4\u5355\u4f4d\u5185\u5c06\u6309\u6bd4\u4f8b\u6536\u5230\u66f4\u591a\u7684\u6d88\u606f\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a Redis \u663e\u5f0f\u5730\u8ddf\u8e2a\u6240\u6709\u672a\u786e\u8ba4\u7684\u6d88\u606f\uff0c\u5e76\u8bb0\u4f4f\u8c01\u6536\u5230\u4e86\u54ea\u6761\u6d88\u606f\uff0c\u4ee5\u53ca\u7b2c\u4e00\u6761\u6d88\u606f\u7684 ID \u4ece\u672a\u4ea4\u4ed8\u7ed9\u4efb\u4f55\u6d88\u8d39\u8005\u3002 \u7136\u800c\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5728 Redis \u4e2d\uff0c\u5982\u679c\u4f60\u771f\u7684\u60f3\u5c06\u540c\u4e00\u6d41\u4e2d\u7684\u6d88\u606f\u5212\u5206\u5230\u591a\u4e2a Redis \u5b9e\u4f8b\u4e2d\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u591a\u4e2a\u952e\u548c\u4e00\u4e9b\u5206\u7247\u7cfb\u7edf\uff0c\u5982 Redis Cluster \u6216\u5176\u4ed6\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u7247\u7cfb\u7edf\u3002 \u5355\u4e2a Redis \u6d41\u4e0d\u4f1a\u81ea\u52a8\u5206\u533a\u5230\u591a\u4e2a\u5b9e\u4f8b\u3002 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8bf4\u4ee5\u4e0b\u662f\u6b63\u786e\u7684: \u5982\u679c\u60a8\u4f7f\u7528 1 \u4e2a\u6d41 -> 1 \u4e2a\u6d88\u8d39\u8005\uff0c\u5219\u60a8\u5c06\u6309\u987a\u5e8f\u5904\u7406\u6d88\u606f\u3002 \u5982\u679c\u4f7f\u7528 N \u4e2a\u6d41\u548c N \u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u89e6\u53ca N \u4e2a\u6d41\u7684\u5b50\u96c6\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u4e0a\u9762\u7684 1 \u4e2a\u6d41\u6a21\u578b -> 1 \u6d88\u8d39\u8005\u3002 \u5982\u679c\u60a8\u4f7f\u7528 1 \u4e2a\u6d41 -> N \u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u60a8\u5c06\u8d1f\u8f7d\u5747\u8861\u5230 N \u4e2a\u6d88\u8d39\u8005\uff0c\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5173\u4e8e\u76f8\u540c\u903b\u8f91\u9879\u7684\u6d88\u606f\u53ef\u80fd\u4f1a\u88ab\u6253\u4e71\u987a\u5e8f\u4f7f\u7528\uff0c\u56e0\u4e3a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f 3 \u7684\u901f\u5ea6\u53ef\u80fd\u6bd4\u53e6\u4e00\u4e2a\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f 4 \u7684\u901f\u5ea6\u5feb\u3002 \u56e0\u6b64\uff0c\u57fa\u672c\u4e0a Kafka \u5206\u533a\u66f4\u7c7b\u4f3c\u4e8e\u4f7f\u7528 N \u4e2a\u4e0d\u540c\u7684 Redis \u952e\uff0c\u800c Redis \u6d88\u8d39\u7ec4\u662f\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u8d1f\u8f7d\u5e73\u8861\u7cfb\u7edf\uff0c\u5c06\u6d88\u606f\u4ece\u7ed9\u5b9a\u6d41\u53d1\u9001\u5230 N \u4e2a\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u3002 \u9650\u5236\u6d41 \u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5e0c\u671b\u6c38\u8fdc\u5c06\u6570\u636e\u6536\u96c6\u5230\u6d41\u4e2d\u3002 \u6709\u65f6\uff0c\u5728\u6d41\u4e2d\u62e5\u6709\u6700\u591a\u7ed9\u5b9a\u6570\u91cf\u7684\u6761\u76ee\u662f\u6709\u7528\u7684\uff0c\u5176\u4ed6\u65f6\u5019\uff0c\u4e00\u65e6\u8fbe\u5230\u4e86\u7ed9\u5b9a\u7684\u5927\u5c0f\uff0c\u5c06\u6570\u636e\u4ece Redis \u79fb\u52a8\u5230\u4e00\u4e2a\u4e0d\u5728\u5185\u5b58\u4e2d\u3001\u901f\u5ea6\u4e0d\u90a3\u4e48\u5feb\u4f46\u9002\u5408\u5b58\u50a8\u5386\u53f2\u7684\u5b58\u50a8\u7a7a\u95f4\u662f\u6709\u7528\u7684\uff0c\u53ef\u80fd\u662f\u672a\u6765\u51e0\u5341\u5e74\u3002 Redis \u6d41\u5bf9\u6b64\u6709\u4e00\u4e9b\u652f\u6301\u3002 \u4e00\u4e2a\u662f XADD \u547d\u4ee4\u7684 MAXLEN \u9009\u9879\u3002\u8fd9\u4e2a\u9009\u9879\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355: Text Only > XADD mystream MAXLEN 2 * value 1 1526654998691-0 > XADD mystream MAXLEN 2 * value 2 1526654999635-0 > XADD mystream MAXLEN 2 * value 3 1526655000369-0 > XLEN mystream (integer) 2 > XRANGE mystream - + 1) 1) 1526654999635-0 2) 1) \"value\" 2) \"2\" 2) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" \u4f7f\u7528 MAXLEN \uff0c\u5f53\u8fbe\u5230\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u65e7\u7684\u6761\u76ee\u5c06\u88ab\u81ea\u52a8\u5220\u9664\uff0c\u56e0\u6b64\u6d41\u5c06\u4fdd\u6301\u6052\u5b9a\u7684\u5927\u5c0f\u3002 \u76ee\u524d\u8fd8\u6ca1\u6709\u9009\u9879\u544a\u8bc9\u6d41\u53ea\u4fdd\u7559\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u5468\u671f\u7684\u9879\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u547d\u4ee4\uff0c\u4e3a\u4e86\u4e00\u81f4\u5730\u8fd0\u884c\uff0c\u53ef\u80fd\u4f1a\u963b\u585e\u5f88\u957f\u65f6\u95f4\u4ee5\u9a71\u9010\u9879\u76ee\u3002 \u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u63d2\u5165\u9ad8\u5cf0\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u6682\u505c\uff0c\u7136\u540e\u662f\u53e6\u4e00\u4e2a\u63d2\u5165\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u76f8\u540c\u7684\u6700\u957f\u65f6\u95f4\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u6d41\u5c06\u963b\u585e\u4ee5\u9a71\u9010\u5728\u6682\u505c\u671f\u95f4\u53d8\u5f97\u592a\u65e7\u7684\u6570\u636e\u3002 \u56e0\u6b64\uff0c\u7528\u6237\u9700\u8981\u505a\u4e00\u4e9b\u8ba1\u5212\uff0c\u5e76\u4e86\u89e3\u6240\u9700\u7684\u6700\u5927\u6d41\u957f\u5ea6\u3002 \u6b64\u5916\uff0c\u5c3d\u7ba1\u6d41\u7684\u957f\u5ea6\u4e0e\u6240\u4f7f\u7528\u7684\u5185\u5b58\u6210\u6b63\u6bd4\uff0c\u4f46\u6309\u65f6\u95f4\u8fdb\u884c\u4fee\u526a\u5c31\u4e0d\u90a3\u4e48\u5bb9\u6613\u63a7\u5236\u548c\u9884\u6d4b\u4e86:\u5b83\u53d6\u51b3\u4e8e\u63d2\u5165\u7387\uff0c\u800c\u63d2\u5165\u7387\u901a\u5e38\u4f1a\u968f\u65f6\u95f4\u53d8\u5316(\u5f53\u5b83\u4e0d\u53d8\u5316\u65f6\uff0c\u90a3\u4e48\u4ec5\u6309\u5927\u5c0f\u8fdb\u884c\u4fee\u526a\u662f\u5fae\u4e0d\u8db3\u9053\u7684)\u3002 \u7136\u800c\uff0c\u4f7f\u7528 MAXLEN \u8fdb\u884c\u4fee\u526a\u53ef\u80fd\u4f1a\u975e\u5e38\u6602\u8d35:\u6d41\u901a\u8fc7\u5b8f\u8282\u70b9\u8868\u793a\u4e3a\u57fa\u6811\uff0c\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u5185\u5b58\u3002 \u6539\u53d8\u7531\u51e0\u5341\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5355\u4e2a\u5b8f\u8282\u70b9\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u4ee5\u4ee5\u4e0b\u7279\u6b8a\u5f62\u5f0f\u4f7f\u7528\u8be5\u547d\u4ee4: Text Only XADD mystream MAXLEN ~ 1000 * ... entry fields here ... MAXLEN \u9009\u9879\u548c\u5b9e\u9645\u8ba1\u6570\u4e4b\u95f4\u7684 ~ \u53c2\u6570\u610f\u5473\u7740\uff0c\u6211\u5e76\u4e0d\u771f\u7684\u9700\u8981\u5b83\u6070\u597d\u662f 1000 \u9879\u3002\u5b83\u53ef\u4ee5\u662f 1000 \u6216 1010 \u6216 1030\uff0c\u53ea\u8981\u786e\u4fdd\u81f3\u5c11\u4fdd\u5b58 1000 \u4e2a\u9879\u76ee\u3002 \u4f7f\u7528\u6b64\u53c2\u6570\uff0c\u53ea\u6709\u5728\u53ef\u4ee5\u5220\u9664\u6574\u4e2a\u8282\u70b9\u65f6\u624d\u6267\u884c\u4fee\u526a\u3002 \u8fd9\u4f7f\u5b83\u66f4\u6709\u6548\uff0c\u8fd9\u901a\u5e38\u662f\u60a8\u60f3\u8981\u7684\u3002 \u8fd8\u6709 XTRIM \u547d\u4ee4\uff0c\u5b83\u6267\u884c\u7684\u64cd\u4f5c\u4e0e\u4e0a\u9762\u7684 MAXLEN \u9009\u9879\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u53ef\u4ee5\u81ea\u5df1\u8fd0\u884c: Text Only > XTRIM mystream MAXLEN 10 \u6216\u8005\uff0c\u5bf9\u4e8e XADD \u9009\u9879: Text Only > XTRIM mystream MAXLEN ~ 10 \u7136\u800c\uff0c XTRIM \u88ab\u8bbe\u8ba1\u4e3a\u63a5\u53d7\u4e0d\u540c\u7684\u4fee\u526a\u7b56\u7565\u3002 \u53e6\u4e00\u79cd\u5220\u9664\u7b56\u7565\u662f MINID \uff0c\u5b83\u5220\u9664 id \u4f4e\u4e8e\u6307\u5b9a\u503c\u7684\u9879\u3002 \u7531\u4e8e XTRIM \u662f\u4e00\u4e2a\u663e\u5f0f\u547d\u4ee4\uff0c\u7528\u6237\u5e94\u8be5\u77e5\u9053\u4e0d\u540c\u7684\u88c1\u526a\u7b56\u7565\u53ef\u80fd\u5b58\u5728\u7684\u7f3a\u70b9\u3002 \u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5220\u9664\u7b56\u7565\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u6dfb\u52a0\u5230 XTRIM \uff0c\u662f\u901a\u8fc7\u4e00\u7cfb\u5217 id \u5220\u9664\uff0c\u4ee5\u65b9\u4fbf\u4f7f\u7528 XRANGE \u548c XTRIM \u5c06\u6570\u636e\u4ece Redis \u79fb\u52a8\u5230\u5176\u4ed6\u5b58\u50a8\u7cfb\u7edf\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\u3002 \u6d41 API \u4e2d\u7684\u7279\u6b8a id \u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u5728 Redis API \u4e2d\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u7279\u6b8a\u7684 id\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u77ed\u7684\u56de\u987e\uff0c\u4ee5\u4fbf\u5c06\u6765\u80fd\u66f4\u6709\u610f\u4e49\u3002 \u524d\u4e24\u4e2a\u7279\u6b8a id \u662f - \u548c + \uff0c\u5728\u4f7f\u7528 XRANGE \u547d\u4ee4\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\u65f6\u4f7f\u7528\u3002 \u8fd9\u4e24\u4e2a ID \u5206\u522b\u8868\u793a\u53ef\u80fd\u7684\u6700\u5c0f ID(\u57fa\u672c\u4e0a\u662f 0-1 )\u548c\u53ef\u80fd\u7684\u6700\u5927 ID(\u5373 18446744073709551615-18446744073709551615 )\u3002 \u5982\u4f60\u6240\u89c1\uff0c\u5199 - \u548c + \u6bd4\u5199\u90a3\u4e9b\u6570\u5b57\u8981\u7b80\u6d01\u5f97\u591a\u3002 \u8fd8\u6709\u4e00\u4e9b api\uff0c\u6211\u4eec\u60f3\u8bf4\uff0c\u6d41\u4e2d ID \u6700\u5927\u7684\u9879\u7684 ID\u3002 \u8fd9\u5c31\u662f $ \u7684\u542b\u4e49\u3002 \u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6211\u53ea\u60f3\u8981\u6709 XREADGROUP \u7684\u65b0\u6761\u76ee\uff0c\u6211\u4f7f\u7528\u8fd9\u4e2a ID \u6765\u8868\u793a\u6211\u5df2\u7ecf\u6709\u4e86\u6240\u6709\u73b0\u6709\u7684\u6761\u76ee\uff0c\u800c\u4e0d\u662f\u672a\u6765\u5c06\u63d2\u5165\u7684\u65b0\u6761\u76ee\u3002 \u7c7b\u4f3c\u5730\uff0c\u5f53\u6211\u521b\u5efa\u6216\u8bbe\u7f6e\u6d88\u8d39\u7ec4\u7684 ID \u65f6\uff0c\u6211\u53ef\u4ee5\u5c06\u6700\u540e\u4ea4\u4ed8\u7684\u9879\u76ee\u8bbe\u7f6e\u4e3a $ \uff0c\u4ee5\u4fbf\u53ea\u5411\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u4ea4\u4ed8\u65b0\u6761\u76ee\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c $ \u5e76\u4e0d\u610f\u5473\u7740 + \uff0c\u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a + \u662f\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u6d41\u4e2d\u53ef\u80fd\u7684\u6700\u5927 ID\uff0c\u800c $ \u662f\u5305\u542b\u7ed9\u5b9a\u6761\u76ee\u7684\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6700\u5927 ID\u3002 \u6b64\u5916\uff0capi \u901a\u5e38\u53ea\u7406\u89e3 + \u6216 $ \uff0c\u4f46\u907f\u514d\u52a0\u8f7d\u5177\u6709\u591a\u79cd\u542b\u4e49\u7684\u7ed9\u5b9a\u7b26\u53f7\u662f\u6709\u7528\u7684\u3002 \u53e6\u4e00\u4e2a\u7279\u6b8a ID \u662f > \uff0c\u8fd9\u662f\u4e00\u4e2a\u4ec5\u4e0e\u6d88\u8d39\u7ec4\u76f8\u5173\u7684\u7279\u6b8a\u542b\u4e49\uff0c\u4e14\u4ec5\u5f53\u4f7f\u7528 XREADGROUP \u547d\u4ee4\u65f6\u3002 \u8fd9\u4e2a\u7279\u6b8a ID \u610f\u5473\u7740\u6211\u4eec\u53ea\u60f3\u8981\u5230\u76ee\u524d\u4e3a\u6b62\u4ece\u672a\u4ea4\u4ed8\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005\u7684\u6761\u76ee\u3002 \u6240\u4ee5\u57fa\u672c\u4e0a > ID \u662f\u6d88\u8d39\u7ec4\u7684 \u6700\u540e\u4e00\u4e2a\u53d1\u9001\u7684 ID \u3002 \u6700\u540e\uff0c\u7279\u6b8a ID * \u53ea\u80fd\u4e0e XADD \u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u5b83\u610f\u5473\u7740\u4e3a\u65b0\u6761\u76ee\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a ID\u3002 \u6240\u4ee5\u6211\u4eec\u6709 - \uff0c + \uff0c $ \uff0c > \u548c * \uff0c\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002 \u6301\u4e45\u6027\u3001\u590d\u5236\u548c\u6d88\u606f\u5b89\u5168\u6027 \u50cf\u4efb\u4f55\u5176\u4ed6 Redis \u6570\u636e\u7ed3\u6784\u4e00\u6837\uff0c\u6d41\u88ab\u5f02\u6b65\u590d\u5236\u5230\u526f\u672c\u5e76\u6301\u4e45\u4fdd\u5b58\u5230 AOF \u548c RDB \u6587\u4ef6\u4e2d\u3002 \u7136\u800c\uff0c\u53ef\u80fd\u4e0d\u90a3\u4e48\u660e\u663e\u7684\u662f\uff0c\u6d88\u8d39\u7ec4\u7684\u5b8c\u6574\u72b6\u6001\u4e5f\u88ab\u4f20\u64ad\u5230 AOF\u3001RDB \u548c\u526f\u672c\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u6761\u6d88\u606f\u5728\u4e3b\u670d\u52a1\u5668\u4e2d\u6302\u8d77\uff0c\u526f\u672c\u4e5f\u5c06\u5177\u6709\u76f8\u540c\u7684\u4fe1\u606f\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u91cd\u65b0\u542f\u52a8\u4e4b\u540e\uff0cAOF \u5c06\u6062\u590d\u6d88\u8d39\u7ec4\u7684\u72b6\u6001\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0cRedis \u6d41\u548c\u6d88\u8d39\u7ec4\u662f\u4f7f\u7528 Redis \u9ed8\u8ba4\u590d\u5236\u6301\u4e45\u5316\u548c\u590d\u5236\u7684\uff0c\u6240\u4ee5: \u5982\u679c\u6d88\u606f\u7684\u6301\u4e45\u6027\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5f88\u91cd\u8981\uff0cAOF \u5fc5\u987b\u4e0e\u5f3a fsync \u7b56\u7565\u4e00\u8d77\u4f7f\u7528\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u590d\u5236\u4e0d\u4f1a\u4fdd\u8bc1\u590d\u5236 XADD \u547d\u4ee4\u6216\u6d88\u8d39\u7ec4\u72b6\u6001\u66f4\u6539:\u5728\u6545\u969c\u8f6c\u79fb\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e9b\u4e1c\u897f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u526f\u672c\u4ece\u4e3b\u670d\u52a1\u5668\u63a5\u6536\u6570\u636e\u7684\u80fd\u529b\u3002 \u53ef\u4ee5\u4f7f\u7528 WAIT \u547d\u4ee4\u5f3a\u5236\u5c06\u66f4\u6539\u4f20\u64ad\u5230\u4e00\u7ec4\u526f\u672c\u3002 \u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u8fd9\u4f7f\u5f97\u6570\u636e\u4e0d\u592a\u53ef\u80fd\u4e22\u5931\uff0c\u4f46\u7531 Sentinel \u6216 Redis Cluster \u64cd\u4f5c\u7684 Redis \u6545\u969c\u8f6c\u79fb\u8fc7\u7a0b\u53ea\u6267\u884c \u6700\u5927\u52aa\u529b\u68c0\u67e5 \uff0c\u4ee5\u6545\u969c\u8f6c\u79fb\u5230\u66f4\u65b0\u6700\u5feb\u7684\u526f\u672c\uff0c\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u6545\u969c\u6761\u4ef6\u4e0b\uff0c\u53ef\u80fd\u4f1a\u4fc3\u4f7f\u7f3a\u4e4f\u4e00\u4e9b\u6570\u636e\u7684\u526f\u672c\u3002 \u56e0\u6b64\uff0c\u5f53\u4f7f\u7528 Redis \u6d41\u548c\u6d88\u8d39\u7ec4\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u786e\u4fdd\u7406\u89e3\u5e94\u7528\u7a0b\u5e8f\u5728\u6545\u969c\u671f\u95f4\u5e94\u8be5\u5177\u6709\u7684\u8bed\u4e49\u5c5e\u6027\uff0c\u5e76\u76f8\u5e94\u5730\u8fdb\u884c\u914d\u7f6e\uff0c\u8bc4\u4f30\u5b83\u662f\u5426\u8db3\u591f\u5b89\u5168\u3002 \u4ece\u6d41\u4e2d\u5220\u9664\u5355\u4e2a\u9879 \u6d41\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u4ece\u6d41\u4e2d\u95f4\u5220\u9664\u9879\u7684\u7279\u6b8a\u547d\u4ee4\uff0c\u4ec5\u901a\u8fc7 ID\u3002 \u901a\u5e38\uff0c\u5bf9\u4e8e\u4ec5\u9644\u52a0\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5947\u602a\u7684\u7279\u6027\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u5bf9\u6d89\u53ca(\u4f8b\u5982\u9690\u79c1\u89c4\u5219)\u7684\u5e94\u7528\u7a0b\u5e8f\u5f88\u6709\u7528\u3002 \u8be5\u547d\u4ee4\u88ab\u79f0\u4e3a XDEL \uff0c\u63a5\u6536\u6d41\u7684\u540d\u79f0\u548c\u8981\u5220\u9664\u7684 id: Text Only > XRANGE mystream - + COUNT 2 1) 1) 1526654999635-0 2) 1) \"value\" 2) \"2\" 2) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" > XDEL mystream 1526654999635-0 (integer) 1 > XRANGE mystream - + COUNT 2 1) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" \u7136\u800c\uff0c\u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u76f4\u5230\u5b8f\u8282\u70b9\u5b8c\u5168\u4e3a\u7a7a\u65f6\u624d\u771f\u6b63\u56de\u6536\u5185\u5b58\uff0c\u56e0\u6b64\u4e0d\u5e94\u6ee5\u7528\u6b64\u7279\u6027\u3002 \u96f6\u957f\u5ea6\u6d41 \u6d41\u548c\u5176\u4ed6 Redis \u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5f53\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e0d\u518d\u6709\u4efb\u4f55\u5143\u7d20\u65f6\uff0c\u4f5c\u4e3a\u8c03\u7528\u5220\u9664\u5143\u7d20\u547d\u4ee4\u7684\u526f\u4f5c\u7528\uff0c\u952e\u672c\u8eab\u5c06\u88ab\u5220\u9664\u3002 \u4f8b\u5982\uff0c\u5f53\u8c03\u7528 ZREM \u5c06\u5220\u9664\u6392\u5e8f\u96c6\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6392\u5e8f\u96c6\u5c06\u88ab\u5b8c\u5168\u5220\u9664\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d41\u88ab\u5141\u8bb8\u4fdd\u6301\u96f6\u5143\u7d20\uff0c\u8fd9\u662f\u4f7f\u7528\u8ba1\u6570\u4e3a\u96f6\u7684 MAXLEN \u9009\u9879( XADD \u548c XTRIM \u547d\u4ee4)\u7684\u7ed3\u679c\uff0c\u6216\u8005\u662f\u56e0\u4e3a\u8c03\u7528\u4e86 XDEL \u3002 \u5b58\u5728\u8fd9\u79cd\u4e0d\u5bf9\u79f0\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6d41\u53ef\u80fd\u6709\u5173\u8054\u7684\u6d88\u8d39\u7ec4\uff0c\u800c\u6211\u4eec\u4e0d\u5e0c\u671b\u4ec5\u4ec5\u56e0\u4e3a\u6d41\u4e2d\u4e0d\u518d\u6709\u4efb\u4f55\u9879\u76ee\u800c\u5931\u53bb\u6d88\u8d39\u7ec4\u5b9a\u4e49\u7684\u72b6\u6001\u3002 \u76ee\u524d\uff0c\u5373\u4f7f\u6d41\u6ca1\u6709\u5173\u8054\u7684\u6d88\u8d39\u7ec4\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5220\u9664\u3002 \u4f7f\u7528\u6d88\u606f\u7684\u603b\u5ef6\u8fdf \u50cf XRANGE \u548c XREAD \u6216 XREADGROUP \u8fd9\u6837\u6ca1\u6709 BLOCK \u9009\u9879\u7684\u975e\u963b\u585e\u6d41\u547d\u4ee4\u50cf\u5176\u4ed6\u4efb\u4f55 Redis \u547d\u4ee4\u4e00\u6837\u662f\u540c\u6b65\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u8ba8\u8bba\u6b64\u7c7b\u547d\u4ee4\u7684\u5ef6\u8fdf\u662f\u6ca1\u6709\u610f\u4e49\u7684:\u5728 Redis \u6587\u6863\u4e2d\u68c0\u67e5\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u6709\u8da3\u3002 \u53ef\u4ee5\u8fd9\u6837\u8bf4\uff0c\u5728\u63d0\u53d6\u8303\u56f4\u65f6\uff0c\u6d41\u547d\u4ee4\u81f3\u5c11\u548c\u6392\u5e8f\u7684\u96c6\u5408\u547d\u4ee4\u4e00\u6837\u5feb\uff0c\u800c XADD \u975e\u5e38\u5feb\uff0c\u5982\u679c\u4f7f\u7528\u6d41\uff0c\u5b83\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u4e00\u53f0\u666e\u901a\u673a\u5668\u4e2d\u6bcf\u79d2\u63d2\u5165 50 \u4e07\u5230 100 \u4e07\u9879\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4e86\u89e3\u5728\u963b\u585e\u6d88\u8d39\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u901a\u8fc7 XADD \u4ea7\u751f\u6d88\u606f\u7684\u65f6\u523b\u5230\u7531\u4e8e XREADGROUP \u4e0e\u6d88\u606f\u4e00\u8d77\u8fd4\u56de\u800c\u7531\u6d88\u8d39\u8005\u83b7\u53d6\u6d88\u606f\u7684\u65f6\u523b\uff0c\u5ef6\u8fdf\u5c31\u6210\u4e3a\u4e00\u4e2a\u6709\u8da3\u7684\u53c2\u6570\u3002 \u5982\u4f55\u670d\u52a1\u88ab\u5c4f\u853d\u7684\u6d88\u8d39\u8005 \u5728\u63d0\u4f9b\u6240\u6267\u884c\u6d4b\u8bd5\u7684\u7ed3\u679c\u4e4b\u524d\uff0c\u4e86\u89e3 Redis \u4f7f\u7528\u4ec0\u4e48\u6a21\u578b\u6765\u8def\u7531\u6d41\u6d88\u606f\u662f\u5f88\u6709\u8da3\u7684(\u5b9e\u9645\u4e0a\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u7b49\u5f85\u6570\u636e\u7684\u963b\u585e\u64cd\u4f5c\u662f\u5982\u4f55\u7ba1\u7406\u7684)\u3002 \u88ab\u963b\u585e\u7684\u5ba2\u6237\u7aef\u5728\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\u88ab\u5f15\u7528\uff0c\u8be5\u54c8\u5e0c\u8868\u5c06\u81f3\u5c11\u6709\u4e00\u4e2a\u963b\u585e\u6d88\u8d39\u8005\u7684\u952e\u6620\u5c04\u5230\u4e00\u4e2a\u6b63\u5728\u7b49\u5f85\u8be5\u952e\u7684\u6d88\u8d39\u8005\u5217\u8868\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u63a5\u6536\u6570\u636e\u7684\u952e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u6790\u6b63\u5728\u7b49\u5f85\u6b64\u7c7b\u6570\u636e\u7684\u6240\u6709\u5ba2\u6237\u673a\u3002 \u5f53\u5199\u5165\u53d1\u751f\u65f6\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u5f53 XADD \u547d\u4ee4\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u8c03\u7528 signalKeyAsReady() \u51fd\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5c06\u628a\u952e\u653e\u5165\u9700\u8981\u5904\u7406\u7684\u952e\u5217\u8868\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u952e\u53ef\u80fd\u6709\u88ab\u963b\u585e\u7684\u4f7f\u7528\u8005\u7684\u65b0\u6570\u636e\u3002 \u6ce8\u610f\uff0c\u8fd9\u6837\u7684 \u5c31\u7eea \u952e\u7a0d\u540e\u5c06\u88ab\u5904\u7406\uff0c\u56e0\u6b64\u5728\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u5468\u671f\u4e2d\uff0c\u952e\u53ef\u80fd\u4f1a\u63a5\u6536\u5230\u5176\u4ed6\u5199\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5728\u8fd4\u56de\u5230\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\uff0c\u6700\u540e\u5904\u7406 \u5c31\u7eea \u952e\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u952e\uff0c\u5c06\u626b\u63cf\u7b49\u5f85\u6570\u636e\u7684\u5ba2\u6237\u7aef\u5217\u8868\uff0c\u5982\u679c\u9002\u7528\uff0c\u8fd9\u6837\u7684\u5ba2\u6237\u7aef\u5c06\u63a5\u6536\u5230\u8fbe\u7684\u65b0\u6570\u636e\u3002 \u5728\u6d41\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u662f\u6d88\u8d39\u8005\u8bf7\u6c42\u7684\u9002\u7528\u8303\u56f4\u5185\u7684\u6d88\u606f\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u57fa\u672c\u4e0a\uff0c\u5728\u8fd4\u56de\u5230\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\uff0c\u8c03\u7528 XADD \u7684\u5ba2\u6237\u7aef\u548c\u88ab\u963b\u585e\u6d88\u8d39\u6d88\u606f\u7684\u5ba2\u6237\u7aef\u90fd\u5c06\u5728\u8f93\u51fa\u7f13\u51b2\u533a\u4e2d\u6709\u5b83\u4eec\u7684\u56de\u590d\uff0c\u6240\u4ee5 XADD \u7684\u8c03\u7528\u8005\u5e94\u8be5\u5728\u6d88\u8d39\u8005\u5c06\u6536\u5230\u65b0\u6d88\u606f\u7684\u540c\u65f6\u4ece Redis \u6536\u5230\u56de\u590d\u3002 \u8be5\u6a21\u578b\u662f \u57fa\u4e8e\u63a8 \u7684\uff0c\u56e0\u4e3a\u5411\u6d88\u8d39\u8005\u7f13\u51b2\u533a\u6dfb\u52a0\u6570\u636e\u5c06\u7531\u8c03\u7528 XADD \u7684\u64cd\u4f5c\u76f4\u63a5\u6267\u884c\uff0c\u56e0\u6b64\u5ef6\u8fdf\u5f80\u5f80\u662f\u76f8\u5f53\u53ef\u9884\u6d4b\u7684\u3002 \u5ef6\u8fdf\u6d4b\u8bd5\u7ed3\u679c \u4e3a\u4e86\u68c0\u67e5\u8fd9\u4e9b\u5ef6\u8fdf\u7279\u5f81\uff0c\u6211\u4eec\u4f7f\u7528\u591a\u4e2a Ruby \u7a0b\u5e8f\u5b9e\u4f8b\u6765\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u8fd9\u4e9b Ruby \u7a0b\u5e8f\u63a8\u9001\u7684\u6d88\u606f\u6709\u4e00\u4e2a\u9644\u52a0\u5b57\u6bb5\uff0c\u5373\u8ba1\u7b97\u673a\u6beb\u79d2\u65f6\u95f4\uff0cRuby \u7a0b\u5e8f\u4ece\u6d88\u8d39\u7ec4\u8bfb\u53d6\u6d88\u606f\u5e76\u5904\u7406\u5b83\u4eec\u3002 \u6d88\u606f\u5904\u7406\u6b65\u9aa4\u5305\u62ec\u6bd4\u8f83\u5f53\u524d\u8ba1\u7b97\u673a\u65f6\u95f4\u548c\u6d88\u606f\u65f6\u95f4\u6233\uff0c\u4ee5\u4fbf\u4e86\u89e3\u603b\u5ef6\u8fdf\u3002 \u7ed3\u679c: Text Only Processed between 0 and 1 ms -> 74.11% Processed between 1 and 2 ms -> 25.80% Processed between 2 and 3 ms -> 0.06% Processed between 3 and 4 ms -> 0.01% Processed between 4 and 5 ms -> 0.02% \u6240\u4ee5 99.9%\u7684\u8bf7\u6c42\u5ef6\u8fdf<= 2 \u6beb\u79d2\uff0c\u5f02\u5e38\u503c\u4ecd\u7136\u975e\u5e38\u63a5\u8fd1\u5e73\u5747\u503c\u3002 \u5411\u6d41\u4e2d\u6dfb\u52a0\u51e0\u767e\u4e07\u6761\u672a\u786e\u8ba4\u7684\u6d88\u606f\u5e76\u4e0d\u4f1a\u6539\u53d8\u57fa\u51c6\u6d4b\u8bd5\u7684\u8981\u70b9\uff0c\u5927\u591a\u6570\u67e5\u8be2\u4ecd\u7136\u4ee5\u975e\u5e38\u77ed\u7684\u5ef6\u8fdf\u5904\u7406\u3002 \u51e0\u70b9\u5907\u6ce8: \u8fd9\u91cc\u6211\u4eec\u6bcf\u6b21\u8fed\u4ee3\u6700\u591a\u5904\u7406 10k \u6d88\u606f\uff0c\u8fd9\u610f\u5473\u7740 XREADGROUP \u7684 COUNT \u53c2\u6570\u88ab\u8bbe\u7f6e\u4e3a 10000\u3002 \u8fd9\u589e\u52a0\u4e86\u5927\u91cf\u7684\u5ef6\u8fdf\uff0c\u4f46\u8fd9\u662f\u4e3a\u4e86\u5141\u8bb8\u901f\u5ea6\u8f83\u6162\u7684\u4f7f\u7528\u8005\u80fd\u591f\u8ddf\u4e0a\u6d88\u606f\u6d41\u800c\u9700\u8981\u7684\u3002 \u6240\u4ee5\u73b0\u5b9e\u4e16\u754c\u7684\u5ef6\u8fdf\u4f1a\u5c0f\u5f97\u591a\u3002 \u4e0e\u4eca\u5929\u7684\u6807\u51c6\u76f8\u6bd4\uff0c\u7528\u4e8e\u6b64\u57fa\u51c6\u6d4b\u8bd5\u7684\u7cfb\u7edf\u975e\u5e38\u6162\u3002","title":"Redis Streams\u6559\u7a0b"},{"location":"docs/streams/streams-tutorial/#_1","text":"Redis 5.0 \u4e2d\u5f15\u5165\u4e86 Redis \u6d41\u6570\u636e\u7c7b\u578b\u3002 Streams \u5bf9\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u5efa\u6a21\uff0c\u4f46\u4e5f\u5b9e\u73b0\u4e86\u4e00\u4e9b\u64cd\u4f5c\uff0c\u4ee5\u514b\u670d\u5178\u578b\u7684\u4ec5\u8ffd\u52a0\u65e5\u5fd7\u7684\u4e00\u4e9b\u9650\u5236\u3002 \u8fd9\u5305\u62ec O(1)\u65f6\u95f4\u5185\u7684\u968f\u673a\u8bbf\u95ee\u548c\u590d\u6742\u7684\u6d88\u8d39\u7b56\u7565\uff0c\u5982\u6d88\u8d39\u96c6\u7fa4\u3002","title":"\u7b80\u4ecb"},{"location":"docs/streams/streams-tutorial/#_2","text":"\u6d41\u662f\u4e00\u79cd\u53ea\u80fd\u8ffd\u52a0\u7684\u6570\u636e\u7ed3\u6784\u3002\u540d\u4e3a XADD \u7684\u57fa\u672c\u5199\u547d\u4ee4\u5c06\u4e00\u4e2a\u65b0\u6761\u76ee\u8ffd\u52a0\u5230\u6307\u5b9a\u7684\u6d41\u3002 \u6bcf\u4e2a\u6d41\u6761\u76ee\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bb5\u503c\u5bf9\u7ec4\u6210\uff0c\u6709\u70b9\u50cf\u8bb0\u5f55\u6216 Redis \u6563\u5217: Text Only > XADD mystream * sensor-id 1234 temperature 19.8 1518951480106-0 \u4e0a\u8ff0\u5bf9 XADD \u547d\u4ee4\u7684\u8c03\u7528\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u6761\u76ee ID(\u5373\u547d\u4ee4\u8fd4\u56de\u7684\u6761\u76ee ID)\u5c06\u6761\u76ee sensor-id: 1234, temperature: 19.8 \u6dfb\u52a0\u5230\u952e mystream \u5904\u7684\u6d41\u4e2d\uff0c\u5177\u4f53\u4e3a 1518951480106-0 \u3002 \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u952e\u540d mystream \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6807\u8bc6\u6d41\u4e2d\u6bcf\u4e2a\u6761\u76ee\u7684\u6761\u76ee ID\u3002 \u7136\u800c\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e86 * \uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u670d\u52a1\u5668\u4e3a\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u65b0\u7684 ID\u3002\u6bcf\u4e2a\u65b0 ID \u90fd\u662f\u5355\u8c03\u589e\u52a0\u7684\uff0c\u6240\u4ee5\u66f4\u7b80\u5355\u5730\u8bf4\uff0c\u4e0e\u6240\u6709\u8fc7\u53bb\u7684\u6761\u76ee\u76f8\u6bd4\uff0c\u6bcf\u4e2a\u65b0\u6dfb\u52a0\u7684\u6761\u76ee\u5c06\u5177\u6709\u66f4\u9ad8\u7684 ID\u3002 \u7531\u670d\u52a1\u5668\u81ea\u52a8\u751f\u6210 ID \u51e0\u4e4e\u603b\u662f\u60a8\u60f3\u8981\u7684\uff0c\u800c\u663e\u5f0f\u6307\u5b9a ID \u7684\u539f\u56e0\u5f88\u5c11\u3002 \u6211\u4eec\u7a0d\u540e\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u6bcf\u4e2a Stream \u6761\u76ee\u90fd\u6709\u4e00\u4e2a ID\uff0c\u8fd9\u662f\u4e0e\u65e5\u5fd7\u6587\u4ef6\u7684\u53e6\u4e00\u4e2a\u76f8\u4f3c\u4e4b\u5904\uff0c\u5176\u4e2d\u53ef\u4ee5\u4f7f\u7528\u884c\u53f7\u6216\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\u91cf\u6765\u6807\u8bc6\u7ed9\u5b9a\u7684\u6761\u76ee\u3002 \u56de\u5230\u6211\u4eec\u7684 XADD \u793a\u4f8b\uff0c\u5728\u952e\u540d\u548c ID \u4e4b\u540e\uff0c\u4e0b\u4e00\u4e2a\u53c2\u6570\u662f\u7ec4\u6210\u6d41\u6761\u76ee\u7684\u5b57\u6bb5\u503c\u5bf9\u3002 \u53ef\u4ee5\u4f7f\u7528 XLEN \u547d\u4ee4\u6765\u83b7\u53d6\u6d41\u4e2d\u9879\u76ee\u7684\u6570\u91cf: Text Only > XLEN mystream (integer) 1","title":"\u6d41\u57fa\u7840\u77e5\u8bc6"},{"location":"docs/streams/streams-tutorial/#id","text":"\u7531 XADD \u547d\u4ee4\u8fd4\u56de\u7684\u6761\u76ee ID\uff0c\u4ee5\u53ca\u552f\u4e00\u6807\u8bc6\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210: Text Only <millisecondsTime>-<sequenceNumber> \u6beb\u79d2\u65f6\u95f4\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u751f\u6210\u6d41 ID \u7684\u672c\u5730 Redis \u8282\u70b9\u4e2d\u7684\u672c\u5730\u65f6\u95f4\uff0c\u4f46\u662f\uff0c\u5982\u679c\u5f53\u524d\u7684\u6beb\u79d2\u65f6\u95f4\u6070\u597d\u5c0f\u4e8e\u4e4b\u524d\u7684\u8f93\u5165\u65f6\u95f4\uff0c\u5219\u4f7f\u7528\u4e4b\u524d\u7684\u8f93\u5165\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u65f6\u949f\u5411\u540e\u8df3\u8f6c\uff0c\u5355\u8c03\u9012\u589e\u7684 ID \u5c5e\u6027\u4ecd\u7136\u4fdd\u6301\u3002 \u5e8f\u5217\u53f7\u7528\u4e8e\u5728\u540c\u4e00\u6beb\u79d2\u5185\u521b\u5efa\u7684\u6761\u76ee\u3002 \u7531\u4e8e\u5e8f\u5217\u53f7\u662f 64 \u4f4d\u5bbd\u7684\uff0c\u5b9e\u9645\u4e0a\u5728\u540c\u4e00\u6beb\u79d2\u5185\u53ef\u4ee5\u751f\u6210\u7684\u6761\u76ee\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u8fd9\u79cd ID \u7684\u683c\u5f0f\u4e4d\u4e00\u770b\u53ef\u80fd\u5f88\u5947\u602a\uff0c\u6e29\u548c\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u60f3\uff0c\u4e3a\u4ec0\u4e48\u65f6\u95f4\u662f ID \u7684\u4e00\u90e8\u5206\u3002 \u539f\u56e0\u662f Redis \u6d41\u652f\u6301 ID \u8303\u56f4\u67e5\u8be2\u3002 \u56e0\u4e3a ID \u4e0e\u6761\u76ee\u751f\u6210\u7684\u65f6\u95f4\u76f8\u5173\uff0c\u8fd9\u63d0\u4f9b\u4e86\u67e5\u8be2\u65f6\u95f4\u8303\u56f4\u7684\u80fd\u529b\uff0c\u57fa\u672c\u4e0a\u662f\u514d\u8d39\u7684\u3002\u6211\u4eec\u5c06\u5f88\u5feb\u5728\u4ecb\u7ecd XRANGE \u547d\u4ee4\u65f6\u770b\u5230\u8fd9\u4e00\u70b9\u3002 \u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u7528\u6237\u9700\u8981\u589e\u91cf ID\uff0c\u8fd9\u4e9b ID \u4e0e\u65f6\u95f4\u65e0\u5173\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u5916\u90e8\u7cfb\u7edf ID \u76f8\u5173\uff0c\u5982\u524d\u6240\u8ff0\uff0c XADD \u547d\u4ee4\u53ef\u4ee5\u91c7\u7528\u663e\u5f0f ID\uff0c\u800c\u4e0d\u662f\u89e6\u53d1\u81ea\u52a8\u751f\u6210\u7684 * \u901a\u914d\u7b26 ID\uff0c\u5982\u4ee5\u4e0b\u793a\u4f8b\u6240\u793a: Text Only > XADD somestream 0-1 field value 0-1 > XADD somestream 0-2 foo bar 0-2 \u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u5c0f ID \u662f 0-1\uff0c\u547d\u4ee4\u4e0d\u63a5\u53d7\u7b49\u4e8e\u6216\u5c0f\u4e8e\u524d\u4e00\u4e2a ID \u7684 ID: Text Only > XADD somestream 0-1 foo bar (error) ERR The ID specified in XADD is equal or smaller than the target stream top item \u5982\u679c\u4f60\u8fd0\u884c\u7684\u662f Redis 7 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u4f60\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u7531\u6beb\u79d2\u90e8\u5206\u7ec4\u6210\u7684\u663e\u5f0f ID\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cID \u7684\u5e8f\u5217\u90e8\u5206\u5c06\u81ea\u52a8\u751f\u6210\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5: Text Only > XADD somestream 0-* baz qux 0-3","title":"\u6761\u76ee ID"},{"location":"docs/streams/streams-tutorial/#_3","text":"\u73b0\u5728\u6211\u4eec\u7ec8\u4e8e\u80fd\u591f\u901a\u8fc7 XADD \u5728\u6d41\u4e2d\u6dfb\u52a0\u6761\u76ee\u4e86\u3002 \u7136\u800c\uff0c\u867d\u7136\u5411\u6d41\u8ffd\u52a0\u6570\u636e\u662f\u5f88\u660e\u663e\u7684\uff0c\u4f46\u4e3a\u4e86\u63d0\u53d6\u6570\u636e\u800c\u67e5\u8be2\u6d41\u7684\u65b9\u6cd5\u5374\u4e0d\u90a3\u4e48\u660e\u663e\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u4ee5\u65e5\u5fd7\u6587\u4ef6\u4e3a\u4f8b\uff0c\u4e00\u4e2a\u660e\u663e\u7684\u65b9\u6cd5\u662f\u6a21\u4eff\u6211\u4eec\u901a\u5e38\u4f7f\u7528 Unix \u547d\u4ee4 tail -f \u6240\u505a\u7684\u4e8b\u60c5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u76d1\u542c\uff0c\u4ee5\u4fbf\u83b7\u5f97\u9644\u52a0\u5230\u6d41\u4e2d\u7684\u65b0\u6d88\u606f\u3002 \u6ce8\u610f\uff0c\u4e0e Redis \u7684\u963b\u585e\u5217\u8868\u64cd\u4f5c\u4e0d\u540c\uff0c\u5728 Redis \u4e2d\uff0c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5143\u7d20\u5c06\u5230\u8fbe\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8be5\u5ba2\u6237\u7aef\u5728 pop style \u64cd\u4f5c\u4e2d\u963b\u585e\uff0c\u5982 BLPOP \uff0c\u5bf9\u4e8e\u6d41\uff0c\u6211\u4eec\u5e0c\u671b\u591a\u4e2a\u6d88\u8d39\u8005\u770b\u5230\u65b0\u6d88\u606f\u8ffd\u52a0\u5230\u6d41\u4e2d(\u4e0e\u8bb8\u591a tail -f \u8fdb\u7a0b\u53ef\u4ee5\u770b\u5230\u6dfb\u52a0\u5230\u65e5\u5fd7\u4e2d\u7684\u5185\u5bb9\u76f8\u540c)\u3002 \u4f7f\u7528\u4f20\u7edf\u672f\u8bed\uff0c\u6211\u4eec\u5e0c\u671b\u6d41\u80fd\u591f\u5c06\u6d88\u606f\u6247\u51fa\u5230\u591a\u4e2a\u5ba2\u6237\u7aef\u3002 \u7136\u800c\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u6f5c\u5728\u7684\u8bbf\u95ee\u6a21\u5f0f\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4ee5\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u770b\u5f85\u6d41:\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\u5b58\u50a8\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9644\u52a0\u65b0\u6d88\u606f\u4e5f\u5f88\u6709\u7528\uff0c\u4f46\u53e6\u4e00\u79cd\u81ea\u7136\u7684\u67e5\u8be2\u6a21\u5f0f\u662f\u6309\u65f6\u95f4\u8303\u56f4\u83b7\u53d6\u6d88\u606f\uff0c\u6216\u8005\u4f7f\u7528\u6e38\u6807\u8fed\u4ee3\u6d88\u606f\u4ee5\u589e\u91cf\u5730\u68c0\u67e5\u6240\u6709\u5386\u53f2\u8bb0\u5f55\u3002 \u8fd9\u7edd\u5bf9\u662f\u53e6\u4e00\u79cd\u6709\u7528\u7684\u8bbf\u95ee\u6a21\u5f0f\u3002 \u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ece\u6d88\u8d39\u8005\u7684\u89d2\u5ea6\u6765\u770b\u4e00\u4e2a\u6d41\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u8bbf\u95ee\u8be5\u6d41\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6d88\u606f\u6d41\uff0c\u8be5\u6d88\u606f\u6d41\u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u6b63\u5728\u5904\u7406\u6b64\u7c7b\u6d88\u606f\u7684\u6d88\u8d39\u8005\uff0c\u4ee5\u4fbf\u6d88\u8d39\u7ec4\u53ea\u80fd\u770b\u5230\u5230\u8fbe\u5355\u4e2a\u6d41\u4e2d\u7684\u6d88\u606f\u7684\u5b50\u96c6\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8de8\u4e0d\u540c\u7684\u4f7f\u7528\u8005\u6269\u5c55\u6d88\u606f\u5904\u7406\uff0c\u800c\u4e0d\u9700\u8981\u5355\u4e2a\u4f7f\u7528\u8005\u5904\u7406\u6240\u6709\u6d88\u606f:\u6bcf\u4e2a\u4f7f\u7528\u8005\u53ea\u9700\u8981\u5904\u7406\u4e0d\u540c\u7684\u6d88\u606f\u3002 \u8fd9\u57fa\u672c\u4e0a\u5c31\u662f Kafka (TM)\u5bf9\u6d88\u8d39\u7ec4\u6240\u505a\u7684\u3002 \u901a\u8fc7\u6d88\u8d39\u7ec4\u9605\u8bfb\u4fe1\u606f\u662f\u53e6\u4e00\u79cd\u4ece Redis \u6d41\u4e2d\u9605\u8bfb\u7684\u6709\u8da3\u6a21\u5f0f\u3002 Redis Streams \u901a\u8fc7\u4e0d\u540c\u7684\u547d\u4ee4\u652f\u6301\u4e0a\u8ff0\u6240\u6709\u4e09\u79cd\u67e5\u8be2\u6a21\u5f0f\u3002 \u4e0b\u4e00\u8282\u5c06\u5c55\u793a\u6240\u6709\u8fd9\u4e9b\u67e5\u8be2\uff0c\u4ece\u6700\u7b80\u5355\u3001\u6700\u76f4\u63a5\u7684\u7528\u6cd5\u5f00\u59cb:\u8303\u56f4\u67e5\u8be2\u3002","title":"\u4ece\u6d41\u4e2d\u83b7\u53d6\u6570\u636e"},{"location":"docs/streams/streams-tutorial/#xrange-xrevrange","text":"\u8981\u6309\u8303\u56f4\u67e5\u8be2\u6d41\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e24\u4e2a id\uff0c start \u548c end \u3002 \u8fd4\u56de\u7684\u8303\u56f4\u5c06\u5305\u62ec\u8d77\u59cb\u6216\u7ed3\u675f\u4e3a ID \u7684\u5143\u7d20\uff0c\u56e0\u6b64\u8303\u56f4\u662f\u5305\u542b\u7684\u3002 \u4e24\u4e2a\u7279\u6b8a ID - \u548c + \u5206\u522b\u8868\u793a\u53ef\u80fd\u7684\u6700\u5c0f ID \u548c\u6700\u5927 ID\u3002 Text Only > XRANGE mystream - + 1) 1) 1518951480106-0 2) 1) \"sensor-id\" 2) \"1234\" 3) \"temperature\" 4) \"19.8\" 2) 1) 1518951482479-0 2) 1) \"sensor-id\" 2) \"9999\" 3) \"temperature\" 4) \"18.2\" \u8fd4\u56de\u7684\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f\u7531\u4e24\u4e2a\u9879\u7ec4\u6210\u7684\u6570\u7ec4:ID \u548c\u5b57\u6bb5\u503c\u5bf9\u5217\u8868\u3002 \u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0c\u6761\u76ee id \u4e0e\u65f6\u95f4\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a - \u5b57\u7b26\u5de6\u4fa7\u7684\u90e8\u5206\u662f\u521b\u5efa\u6d41\u6761\u76ee\u7684\u672c\u5730\u8282\u70b9\u5728\u6761\u76ee\u88ab\u521b\u5efa\u65f6\u7684 Unix \u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)(\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u6d41\u662f\u901a\u8fc7\u5b8c\u5168\u6307\u5b9a\u7684 XADD \u547d\u4ee4\u590d\u5236\u7684\uff0c\u56e0\u6b64\u526f\u672c\u5c06\u5177\u6709\u4e0e\u4e3b\u8282\u70b9\u76f8\u540c\u7684 id)\u3002 \u8fd9\u610f\u5473\u7740\u6211\u53ef\u4ee5\u4f7f\u7528 XRANGE \u67e5\u8be2\u4e00\u4e2a\u65f6\u95f4\u8303\u56f4\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u53ef\u80fd\u60f3\u8981\u7701\u7565 ID \u7684\u5e8f\u5217\u90e8\u5206:\u5982\u679c\u7701\u7565\uff0c\u5728\u8303\u56f4\u7684\u5f00\u59cb\u90e8\u5206\u5b83\u5c06\u88ab\u5047\u8bbe\u4e3a 0\uff0c\u800c\u5728\u7ed3\u675f\u90e8\u5206\u5b83\u5c06\u88ab\u5047\u8bbe\u4e3a\u53ef\u7528\u7684\u6700\u5927\u5e8f\u5217\u53f7\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ea\u9700\u4f7f\u7528 Unix \u65f6\u95f4\u7684\u4e24\u6beb\u79d2\u67e5\u8be2\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u4e00\u79cd\u5305\u5bb9\u7684\u65b9\u5f0f\u83b7\u5f97\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u751f\u6210\u7684\u6240\u6709\u6761\u76ee\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u60f3\u67e5\u8be2\u4e00\u4e2a 2 \u6beb\u79d2\u7684\u5468\u671f\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528: Text Only > XRANGE mystream 1518951480106 1518951480107 1) 1) 1518951480106-0 2) 1) \"sensor-id\" 2) \"1234\" 3) \"temperature\" 4) \"19.8\" \u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u6211\u53ea\u6709\u4e00\u4e2a\u6761\u76ee\uff0c\u4f46\u662f\u5728\u771f\u5b9e\u7684\u6570\u636e\u96c6\u4e2d\uff0c\u6211\u53ef\u4ee5\u67e5\u8be2\u5c0f\u65f6\u7684\u8303\u56f4\uff0c\u6216\u8005\u5728\u4ec5\u4ec5\u4e24\u6beb\u79d2\u5185\u6709\u8bb8\u591a\u9879\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c XRANGE \u5728\u672b\u5c3e\u652f\u6301\u53ef\u9009\u7684 COUNT \u9009\u9879\u3002 \u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u8ba1\u6570\uff0c\u6211\u53ef\u4ee5\u53ea\u83b7\u53d6\u524d N \u9879\u3002\u5982\u679c\u6211\u60f3\u8981\u66f4\u591a\uff0c\u6211\u53ef\u4ee5\u8fd4\u56de\u6700\u540e\u4e00\u4e2a ID\uff0c\u5c06\u5e8f\u5217\u90e8\u5206\u589e\u52a0 1\uff0c\u7136\u540e\u518d\u6b21\u67e5\u8be2\u3002 \u8ba9\u6211\u4eec\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u770b\u770b\u3002 \u6211\u4eec\u5f00\u59cb\u7528 XADD \u6dfb\u52a0 10 \u4e2a\u6761\u76ee(\u6211\u4e0d\u4f1a\u5c55\u793a\u8fd9\u4e2a\uff0c\u5047\u8bbe\u6d41 mystream \u586b\u5145\u4e86 10 \u4e2a\u6761\u76ee)\u3002 \u4e3a\u4e86\u5f00\u59cb\u6211\u7684\u8fed\u4ee3\uff0c\u6bcf\u4e2a\u547d\u4ee4\u83b7\u5f97 2 \u4e2a\u9879\u76ee\uff0c\u6211\u4ece\u5b8c\u6574\u7684\u8303\u56f4\u5f00\u59cb\uff0c\u4f46\u8ba1\u6570\u4e3a 2\u3002 Text Only > XRANGE mystream - + COUNT 2 1) 1) 1519073278252-0 2) 1) \"foo\" 2) \"value_1\" 2) 1) 1519073279157-0 2) 1) \"foo\" 2) \"value_2\" \u4e3a\u4e86\u7ee7\u7eed\u8fed\u4ee3\u63a5\u4e0b\u6765\u7684\u4e24\u9879\uff0c\u6211\u5fc5\u987b\u9009\u62e9\u8fd4\u56de\u7684\u6700\u540e\u4e00\u4e2a ID\uff0c\u5373 1519073279157-0 \uff0c\u5e76\u5728\u5b83\u524d\u9762\u6dfb\u52a0\u524d\u7f00 ( \u3002 \u4ea7\u751f\u7684\u72ec\u5360\u8303\u56f4\u95f4\u9694\uff0c\u5728\u672c\u4f8b\u4e2d\u662f (1519073279157-0 \uff0c\u73b0\u5728\u53ef\u4ee5\u7528\u4f5c\u4e0b\u4e00\u4e2a XRANGE \u8c03\u7528\u7684\u65b0\u7684 start \u53c2\u6570: Text Only > XRANGE mystream (1519073279157-0 + COUNT 2 1) 1) 1519073280281-0 2) 1) \"foo\" 2) \"value_3\" 2) 1) 1519073281432-0 2) 1) \"foo\" 2) \"value_4\" \u7b49\u7b49\u3002\u7531\u4e8e XRANGE \u7684\u590d\u6742\u5ea6\u662f O(log(N)) \u6765\u5bfb\u627e\uff0c\u7136\u540e O(M) \u6765\u8fd4\u56de M \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u5728\u6570\u91cf\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5bf9\u6570\uff0c\u8fd9\u610f\u5473\u7740\u8fed\u4ee3\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u5feb\u901f\u7684\u3002 \u56e0\u6b64 XRANGE \u5b9e\u9645\u4e0a\u4e5f\u662f streams iterator \uff0c\u4e0d\u9700\u8981 XSCAN \u547d\u4ee4\u3002 \u547d\u4ee4 XREVRANGE \u76f8\u5f53\u4e8e XRANGE \uff0c\u4f46\u6309\u5012\u5e8f\u8fd4\u56de\u5143\u7d20\uff0c\u56e0\u6b64 XREVRANGE \u7684\u5b9e\u9645\u7528\u9014\u662f\u68c0\u67e5\u6d41\u4e2d\u7684\u6700\u540e\u4e00\u9879\u662f\u4ec0\u4e48: Text Only > XREVRANGE mystream + - COUNT 1 1) 1) 1519073287312-0 2) 1) \"foo\" 2) \"value_10\" \u6ce8\u610f\uff0c XREVRANGE \u547d\u4ee4\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u63a5\u53d7 start \u548c stop \u53c2\u6570\u3002","title":"\u6309\u8303\u56f4\u67e5\u8be2:XRANGE \u548c XREVRANGE"},{"location":"docs/streams/streams-tutorial/#xread","text":"\u5f53\u6211\u4eec\u4e0d\u60f3\u5728\u6d41\u4e2d\u6309\u8303\u56f4\u8bbf\u95ee\u9879\u65f6\uff0c\u901a\u5e38\u6211\u4eec\u60f3\u8981\u7684\u662f\u8ba2\u9605\u5230\u8fbe\u6d41\u7684\u65b0\u9879\u3002 \u8fd9\u4e2a\u6982\u5ff5\u53ef\u80fd\u51fa\u73b0\u4e0e Redis Pub/Sub \u76f8\u5173\uff0c\u5728\u90a3\u91cc\u4f60\u8ba2\u9605\u4e00\u4e2a\u9891\u9053\uff0c\u6216 Redis \u963b\u585e\u5217\u8868\uff0c\u5728\u90a3\u91cc\u4f60\u7b49\u5f85\u4e00\u4e2a\u952e\u83b7\u5f97\u65b0\u7684\u5143\u7d20\u6765\u83b7\u53d6\uff0c\u4f46\u5728\u4f60\u6d88\u8d39\u6d41\u7684\u65b9\u5f0f\u6709\u57fa\u672c\u7684\u533a\u522b: \u4e00\u4e2a\u6d41\u53ef\u4ee5\u6709\u591a\u4e2a\u5ba2\u6237\u7aef(\u6d88\u8d39\u8005)\u7b49\u5f85\u6570\u636e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u65b0\u9879\u76ee\u5c06\u88ab\u4ea4\u4ed8\u7ed9\u6b63\u5728\u7b49\u5f85\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6570\u636e\u7684 \u6bcf\u4e2a\u6d88\u8d39\u8005 \u3002 \u8fd9\u79cd\u884c\u4e3a\u4e0d\u540c\u4e8e\u963b\u585e\u5217\u8868\uff0c\u5728\u963b\u585e\u5217\u8868\u4e2d\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u5c06\u83b7\u5f97\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u7136\u800c\uff0c\u5411\u591a\u4e2a\u6d88\u8d39\u8005\u5c55\u5f00\u7684\u80fd\u529b\u7c7b\u4f3c\u4e8e Pub/Sub\u3002 \u5728 Pub/Sub \u6a21\u5f0f\u4e0b\uff0c\u6d88\u606f\u88ab\u89e6\u53d1\u540e\u5c31\u4f1a\u88ab \u5fd8\u8bb0 \uff0c\u800c\u4e14\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u88ab\u5b58\u50a8\uff0c\u800c\u5728\u4f7f\u7528\u963b\u585e\u5217\u8868\u65f6\uff0c\u5f53\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u6d88\u606f\u65f6\u5c31\u4f1a\u4ece\u5217\u8868\u4e2d \u5f39\u51fa (\u6709\u6548\u5730\u5220\u9664)\uff0c\u6d41\u4ee5\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002 \u6240\u6709\u6d88\u606f\u90fd\u65e0\u9650\u671f\u5730\u8ffd\u52a0\u5230\u6d41\u4e2d(\u9664\u975e\u7528\u6237\u663e\u5f0f\u5730\u8981\u6c42\u5220\u9664\u6761\u76ee):\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u5c06\u901a\u8fc7\u8bb0\u4f4f\u6240\u63a5\u6536\u5230\u7684\u6700\u540e\u4e00\u6761\u6d88\u606f\u7684 ID \u4ece\u5176\u89d2\u5ea6\u77e5\u9053\u4ec0\u4e48\u662f\u65b0\u6d88\u606f\u3002 \u6d41\u6d88\u8d39\u7ec4\u63d0\u4f9b\u4e86 Pub/Sub \u6216\u963b\u585e\u5217\u8868\u65e0\u6cd5\u5b9e\u73b0\u7684\u63a7\u5236\u7ea7\u522b\uff0c\u901a\u8fc7\u5bf9\u540c\u4e00\u6d41\u7684\u4e0d\u540c\u7ec4\u3001\u5df2\u5904\u7406\u9879\u76ee\u7684\u660e\u786e\u786e\u8ba4\u3001\u68c0\u67e5\u5f85\u5904\u7406\u9879\u76ee\u7684\u80fd\u529b\u3001\u58f0\u660e\u672a\u5904\u7406\u6d88\u606f\u7684\u80fd\u529b\u4ee5\u53ca\u6bcf\u4e2a\u5ba2\u6237\u673a\u7684\u4e00\u81f4\u5386\u53f2\u53ef\u89c1\u6027(\u4ec5\u80fd\u67e5\u770b\u6d88\u606f\u7684\u79c1\u6709\u8fc7\u53bb\u5386\u53f2)\u3002 \u63d0\u4f9b\u76d1\u542c\u5230\u8fbe\u6d41\u7684\u65b0\u6d88\u606f\u80fd\u529b\u7684\u547d\u4ee4\u79f0\u4e3a XREAD \u3002 \u5b83\u6bd4 XRANGE \u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5f00\u59cb\u5c55\u793a\u7b80\u5355\u7684\u8868\u5355\uff0c\u7a0d\u540e\u5c06\u63d0\u4f9b\u6574\u4e2a\u547d\u4ee4\u5e03\u5c40\u3002 Bash > XREAD COUNT 2 STREAMS mystream 0 1 ) 1 ) \"mystream\" 2 ) 1 ) 1 ) 1519073278252 -0 2 ) 1 ) \"foo\" 2 ) \"value_1\" 2 ) 1 ) 1519073279157 -0 2 ) 1 ) \"foo\" 2 ) \"value_2\" \u4ee5\u4e0a\u662f XREAD \u7684\u975e\u963b\u585e\u5f62\u5f0f\u3002 \u6ce8\u610f\uff0c COUNT \u9009\u9879\u4e0d\u662f\u5fc5\u9009\u7684\uff0c\u5b9e\u9645\u4e0a\u8be5\u547d\u4ee4\u7684\u552f\u4e00\u5fc5\u9009\u9009\u9879\u662f STREAMS \u9009\u9879\uff0c\u5b83\u6307\u5b9a\u952e\u7684\u5217\u8868\u4ee5\u53ca\u8c03\u7528\u65b9\u5df2\u7ecf\u770b\u5230\u7684\u6bcf\u4e2a\u6d41\u7684\u76f8\u5e94\u6700\u5927 ID\uff0c\u56e0\u6b64\u8be5\u547d\u4ee4\u5c06\u53ea\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b ID \u5927\u4e8e\u6211\u4eec\u6307\u5b9a\u7684\u6d88\u606f\u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6211\u4eec\u5199\u4e86 STREAMS mystream 0 \uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b mystream \u4e2d\u7684\u6240\u6709\u6d88\u606f\u7684 ID \u5927\u4e8e 0-0 \u3002 \u6b63\u5982\u60a8\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u6240\u770b\u5230\u7684\uff0c\u8be5\u547d\u4ee4\u8fd4\u56de\u952e\u540d\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u952e\u8c03\u7528\u6b64\u547d\u4ee4\uff0c\u4ee5\u4fbf\u540c\u65f6\u4ece\u4e0d\u540c\u7684\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u6211\u53ef\u4ee5\u5199\uff0c\u4f8b\u5982: STREAMS mystream otherstream 0 0 \u3002 \u6ce8\u610f\uff0c\u5728 STREAMS \u9009\u9879\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u952e\u540d\uff0c\u7136\u540e\u662f id\u3002 \u56e0\u6b64\uff0c STREAMS \u9009\u9879\u5fc5\u987b\u603b\u662f\u6700\u540e\u4e00\u4e2a\u3002 \u9664\u4e86 XREAD \u53ef\u4ee5\u4e00\u6b21\u8bbf\u95ee\u591a\u4e2a\u6d41\uff0c\u5e76\u4e14\u6211\u4eec\u80fd\u591f\u6307\u5b9a\u6211\u4eec\u62e5\u6709\u7684\u6700\u540e\u4e00\u4e2a ID \u6765\u83b7\u53d6\u66f4\u65b0\u7684\u6d88\u606f\u4e4b\u5916\uff0c\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u5f62\u5f0f\u4e2d\uff0c\u547d\u4ee4\u6240\u505a\u7684\u4e8b\u60c5\u4e0e XRANGE \u5e76\u6ca1\u6709\u592a\u5927\u7684\u4e0d\u540c\u3002 \u7136\u800c\uff0c\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a BLOCK \u53c2\u6570\uff0c\u8f7b\u677e\u5730\u5c06 XREAD \u8f6c\u6362\u4e3a blocking \u547d\u4ee4 : Bash > XREAD BLOCK 0 STREAMS mystream $ \u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9664\u4e86\u5220\u9664 COUNT \u4e4b\u5916\uff0c\u6211\u8fd8\u6307\u5b9a\u4e86\u65b0\u7684 BLOCK \u9009\u9879\uff0c\u5176\u8d85\u65f6\u65f6\u95f4\u4e3a 0 \u6beb\u79d2(\u8fd9\u610f\u5473\u7740\u6c38\u4e0d\u8d85\u65f6)\u3002 \u6b64\u5916\uff0c\u6211\u6ca1\u6709\u4e3a\u6d41 mystream \u4f20\u9012\u666e\u901a ID\uff0c\u800c\u662f\u4f20\u9012\u4e86\u7279\u6b8a ID $ \u3002 \u8fd9\u4e2a\u7279\u6b8a\u7684 ID \u610f\u5473\u7740 XREAD \u5e94\u8be5\u4f7f\u7528 mystream \u6d41\u4e2d\u5df2\u7ecf\u5b58\u50a8\u7684\u6700\u5927 ID \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a ID\uff0c\u8fd9\u6837\u6211\u4eec\u5c06\u53ea\u4ece\u5f00\u59cb\u76d1\u542c\u7684\u65f6\u95f4\u5f00\u59cb\u63a5\u6536 \u65b0 \u6d88\u606f\u3002 \u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u7c7b\u4f3c\u4e8e Unix \u7684 tail -f \u547d\u4ee4\u3002 Note \u6ce8\u610f\uff0c\u5f53\u4f7f\u7528 BLOCK \u9009\u9879\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u7279\u6b8a ID $ \u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6709\u6548\u7684 ID\u3002 \u5982\u679c\u547d\u4ee4\u80fd\u591f\u7acb\u5373\u5904\u7406\u6211\u4eec\u7684\u8bf7\u6c42\u800c\u4e0d\u963b\u585e\uff0c\u5b83\u5c31\u4f1a\u8fd9\u6837\u505a\uff0c\u5426\u5219\u5c31\u4f1a\u963b\u585e\u3002 \u901a\u5e38\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4ece\u65b0\u7684\u6761\u76ee\u5f00\u59cb\u4f7f\u7528\u6d41\uff0c\u6211\u4eec\u4ece ID $ \u5f00\u59cb\uff0c\u7136\u540e\u7ee7\u7eed\u4f7f\u7528\u63a5\u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u6d88\u606f\u7684 ID \u8fdb\u884c\u4e0b\u4e00\u4e2a\u8c03\u7528\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u963b\u585e\u5f62\u5f0f\u7684 XREAD \u4e5f\u80fd\u591f\u76d1\u542c\u591a\u4e2a\u6d41\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u591a\u4e2a\u952e\u540d\u3002 \u5982\u679c\u56e0\u4e3a\u81f3\u5c11\u6709\u4e00\u4e2a\u6d41\u7684\u5143\u7d20\u5927\u4e8e\u6211\u4eec\u6307\u5b9a\u7684\u5bf9\u5e94 ID\uff0c\u6240\u4ee5\u53ef\u4ee5\u540c\u6b65\u670d\u52a1\u8bf7\u6c42\uff0c\u90a3\u4e48\u5b83\u5c06\u8fd4\u56de\u7ed3\u679c\u3002 \u5426\u5219\uff0c\u8be5\u547d\u4ee4\u5c06\u963b\u585e\u5e76\u8fd4\u56de\u83b7\u53d6\u65b0\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u6d41\u7684\u9879(\u6839\u636e\u6307\u5b9a\u7684 ID)\u3002 \u4e0e\u963b\u585e\u5217\u8868\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u4ece\u7b49\u5f85\u6570\u636e\u7684\u5ba2\u6237\u673a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u963b\u585e\u6d41\u8bfb\u53d6\u662f\u516c\u5e73\u7684\uff0c\u56e0\u4e3a\u8bed\u4e49\u662f FIFO \u98ce\u683c\u7684\u3002 \u5f53\u6709\u65b0\u9879\u53ef\u7528\u65f6\uff0c\u4e3a\u7ed9\u5b9a\u6d41\u963b\u585e\u7684\u7b2c\u4e00\u4e2a\u5ba2\u6237\u7aef\u5c06\u6700\u5148\u88ab\u89e3\u9664\u963b\u585e\u3002 XREAD \u9664\u4e86 COUNT \u548c BLOCK \u4e4b\u5916\u6ca1\u6709\u5176\u4ed6\u9009\u9879\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u547d\u4ee4\uff0c\u5177\u6709\u5c06\u6d88\u8d39\u8005\u9644\u52a0\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u6d41\u7684\u7279\u5b9a\u76ee\u7684\u3002 \u4f7f\u7528\u6d88\u8d39\u7ec4 API \u53ef\u4ee5\u4f7f\u7528\u66f4\u5f3a\u5927\u7684\u529f\u80fd\u6765\u6d88\u8d39\u6d41\uff0c\u4f46\u662f\u901a\u8fc7\u6d88\u8d39\u7ec4\u8bfb\u53d6\u662f\u7531\u53e6\u4e00\u4e2a\u540d\u4e3a XREADGROUP \u7684\u547d\u4ee4\u5b9e\u73b0\u7684\uff0c\u8fd9\u5c06\u5728\u672c\u6307\u5357\u7684\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002","title":"\u7528 XREAD \u76d1\u542c\u65b0\u9879"},{"location":"docs/streams/streams-tutorial/#_4","text":"\u5f53\u624b\u5934\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u6765\u81ea\u4e0d\u540c\u5ba2\u6237\u673a\u7684\u76f8\u540c\u6d41\u65f6\uff0c\u90a3\u4e48 XREAD \u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u79cd fan-out \u5230 N \u4e2a\u5ba2\u6237\u673a\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u8fd8\u4f7f\u7528\u526f\u672c\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u8bfb\u53d6\u53ef\u4f38\u7f29\u6027\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u505a\u7684\u4e0d\u662f\u5411\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u76f8\u540c\u7684\u6d88\u606f\u6d41\uff0c\u800c\u662f\u5411\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u6765\u81ea\u540c\u4e00\u6d88\u606f\u6d41\u7684\u4e0d\u540c\u7684\u6d88\u606f\u5b50\u96c6\u3002 \u4e00\u4e2a\u5f88\u660e\u663e\u7684\u4f8b\u5b50\u662f\u5904\u7406\u901f\u5ea6\u8f83\u6162\u7684\u6d88\u606f:\u8ba9 N \u4e2a\u4e0d\u540c\u7684\u5de5\u4f5c\u8005\u63a5\u6536\u6d41\u7684\u4e0d\u540c\u90e8\u5206\u7684\u80fd\u529b\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u5c06\u4e0d\u540c\u7684\u6d88\u606f\u8def\u7531\u5230\u51c6\u5907\u505a\u66f4\u591a\u5de5\u4f5c\u7684\u4e0d\u540c\u5de5\u4f5c\u8005\u6765\u6269\u5c55\u6d88\u606f\u5904\u7406\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8c61\u6709\u4e09\u4e2a\u6d88\u8d39\u8005 C1\u3001C2\u3001C3 \u548c\u4e00\u4e2a\u5305\u542b\u6d88\u606f 1\u30012\u30013\u30014\u30015\u30016\u30017 \u7684\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\u8981\u7684\u662f\u6309\u7167\u4e0b\u9762\u7684\u56fe\u8868\u63d0\u4f9b\u6d88\u606f: Text Only 1 -> C1 2 -> C2 3 -> C3 4 -> C1 5 -> C2 6 -> C3 7 -> C1 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0cRedis \u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505a \u6d88\u8d39\u7ec4 \u7684\u6982\u5ff5\u3002 \u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u770b\uff0cRedis \u6d88\u8d39\u7ec4\u4e0e Kafka (TM)\u6d88\u8d39\u7ec4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u7406\u89e3\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002 \u7136\u800c\u5b83\u4eec\u5728\u529f\u80fd\u4e0a\u662f\u76f8\u4f3c\u7684\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u4fdd\u7559 Kafka (TM)\u7684\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u6700\u521d\u666e\u53ca\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u4e00\u4e2a\u6d88\u8d39\u7ec4\u5c31\u50cf\u4e00\u4e2a\u4ece\u6d41\u4e2d\u83b7\u53d6\u6570\u636e\u7684 \u4f2a\u6d88\u8d39\u8005 \uff0c\u5b9e\u9645\u4e0a\u670d\u52a1\u4e8e\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u63d0\u4f9b\u4e00\u5b9a\u7684\u4fdd\u8bc1: \u6bcf\u4e2a\u6d88\u606f\u90fd\u63d0\u4f9b\u7ed9\u4e0d\u540c\u7684\u4f7f\u7528\u8005\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u5c06\u76f8\u540c\u7684\u6d88\u606f\u4f20\u9012\u7ed9\u591a\u4e2a\u4f7f\u7528\u8005\u3002 \u5728\u6d88\u8d39\u7ec4\u4e2d\uff0c\u6d88\u8d39\u8005\u662f\u901a\u8fc7\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\uff0c\u5ba2\u6237\u7aef\u5b9e\u73b0\u6d88\u8d39\u8005\u5fc5\u987b\u9009\u62e9\u8be5\u5b57\u7b26\u4e32\u3002 \u8fd9\u610f\u5473\u7740\u5373\u4f7f\u5728\u65ad\u5f00\u8fde\u63a5\u4e4b\u540e\uff0c\u6d41\u6d88\u8d39\u7ec4\u4ecd\u7136\u4fdd\u7559\u6240\u6709\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5ba2\u6237\u673a\u5c06\u518d\u6b21\u58f0\u660e\u81ea\u5df1\u662f\u540c\u4e00\u4e2a\u6d88\u8d39\u8005\u3002 \u7136\u800c\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u7531\u5ba2\u6237\u673a\u63d0\u4f9b\u552f\u4e00\u7684\u6807\u8bc6\u7b26\u3002 \u6bcf\u4e2a\u6d88\u8d39\u7ec4\u90fd\u6709 \u7b2c\u4e00\u4e2a ID \u4ece\u672a\u4f7f\u7528 \u7684\u6982\u5ff5\uff0c\u56e0\u6b64\uff0c\u5f53\u6d88\u8d39\u8005\u8bf7\u6c42\u65b0\u6d88\u606f\u65f6\uff0c\u5b83\u53ef\u4ee5\u53ea\u63d0\u4f9b\u4ee5\u524d\u6ca1\u6709\u4f20\u9012\u7684\u6d88\u606f\u3002 \u7136\u800c\uff0c\u4f7f\u7528\u6d88\u606f\u9700\u8981\u4f7f\u7528\u7279\u5b9a\u547d\u4ee4\u663e\u5f0f\u786e\u8ba4\u3002 Redis \u5c06\u786e\u8ba4\u89e3\u91ca\u4e3a:\u6b64\u6d88\u606f\u5df2\u88ab\u6b63\u786e\u5904\u7406\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5176\u4ece\u6d88\u8d39\u7ec4\u4e2d\u5220\u9664\u3002 \u4e00\u4e2a\u6d88\u8d39\u7ec4\u8ddf\u8e2a\u5f53\u524d\u6302\u8d77\u7684\u6240\u6709\u6d88\u606f\uff0c\u5373\u4ea4\u4ed8\u7ed9\u6d88\u8d39\u7ec4\u4e2d\u7684\u67d0\u4e2a\u6d88\u8d39\u8005\u4f46\u5c1a\u672a\u88ab\u786e\u8ba4\u4e3a\u5df2\u5904\u7406\u7684\u6d88\u606f\u3002 \u7531\u4e8e\u8fd9\u4e2a\u7279\u6027\uff0c\u5728\u8bbf\u95ee\u6d41\u7684\u6d88\u606f\u5386\u53f2\u8bb0\u5f55\u65f6\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005 \u5c06\u53ea\u770b\u5230\u4ea4\u4ed8\u7ed9\u5b83\u7684\u6d88\u606f \u3002 \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u6d88\u8d39\u7ec4\u53ef\u4ee5\u88ab\u60f3\u8c61\u6210\u6d41\u7684 \u67d0\u79cd\u72b6\u6001 : Text Only +----------------------------------------+ | consumer_group_name: mygroup | | consumer_group_stream: somekey | | last_delivered_id: 1292309234234-92 | | | | consumers: | | \"consumer-1\" with pending messages | | 1292309234234-4 | | 1292309234232-8 | | \"consumer-42\" with pending messages | | ... (and so forth) | +----------------------------------------+ \u5982\u679c\u60a8\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e00\u4e2a\u6d88\u8d39\u7ec4\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u5b83\u5982\u4f55\u80fd\u591f\u53ea\u5411\u6d88\u8d39\u8005\u63d0\u4f9b\u4ed6\u4eec\u7684\u5f85\u5b9a\u6d88\u606f\u7684\u5386\u53f2\uff0c\u4ee5\u53ca\u6d88\u8d39\u8005\u8bf7\u6c42\u65b0\u6d88\u606f\u65f6\u5982\u4f55\u53ea\u5f97\u5230\u5927\u4e8e last_delivered_id \u7684\u6d88\u606f id\u3002 \u540c\u65f6\uff0c\u5982\u679c\u60a8\u5c06\u6d88\u8d39\u7ec4\u89c6\u4e3a Redis \u6d41\u7684\u8f85\u52a9\u6570\u636e\u7ed3\u6784\uff0c\u5f88\u660e\u663e\uff0c\u5355\u4e2a\u6d41\u53ef\u4ee5\u6709\u591a\u4e2a\u6d88\u8d39\u7ec4\uff0c\u8fd9\u4e9b\u6d88\u8d39\u7ec4\u5177\u6709\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u96c6\u3002 \u5b9e\u9645\u4e0a\uff0c\u540c\u4e00\u4e2a\u6d41\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 XREAD \u8ba9\u5ba2\u6237\u7aef\u5728\u6ca1\u6709\u6d88\u8d39\u7ec4\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u9605\u8bfb\uff0c\u5e76\u8ba9\u5ba2\u6237\u7aef\u5728\u4e0d\u540c\u6d88\u8d39\u7ec4\u4e2d\u901a\u8fc7 XREADGROUP \u8fdb\u884c\u9605\u8bfb\u3002 \u73b0\u5728\u662f\u65f6\u5019\u653e\u5927\u770b\u770b\u57fa\u672c\u7684\u6d88\u8d39\u7ec4\u547d\u4ee4\u4e86\u3002\u5b83\u4eec\u5982\u4e0b: XGROUP \u7528\u4e8e\u521b\u5efa\u3001\u9500\u6bc1\u548c\u7ba1\u7406\u6d88\u8d39\u7ec4\u3002 XREADGROUP \u7528\u4e8e\u901a\u8fc7\u6d88\u8d39\u7ec4\u4ece\u6d41\u4e2d\u8bfb\u53d6\u3002 XACK \u5141\u8bb8\u4f7f\u7528\u8005\u5c06\u6302\u8d77\u7684\u6d88\u606f\u6807\u8bb0\u4e3a\u5df2\u6b63\u786e\u5904\u7406\u7684\u547d\u4ee4\u3002","title":"\u6d88\u8d39\u7ec4"},{"location":"docs/streams/streams-tutorial/#_5","text":"\u5047\u8bbe\u6211\u6709\u4e00\u4e2a\u6d41\u7c7b\u578b\u7684 mystream \u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u7ec4\uff0c\u6211\u53ea\u9700\u8981\u505a\u4ee5\u4e0b: Text Only > XGROUP CREATE mystream mygroup $ OK \u6b63\u5982\u4f60\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\u770b\u5230\u7684\uff0c\u5f53\u521b\u5efa\u6d88\u8d39\u7ec4\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a ID\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f $ \u3002 \u8fd9\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5728\u5176\u4ed6\u72b6\u6001\u4e2d\uff0c\u6d88\u8d39\u7ec4\u5fc5\u987b\u77e5\u9053\u5728\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u8fde\u63a5\u65f6\u4e0b\u4e00\u6b65\u8981\u670d\u52a1\u4ec0\u4e48\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u521a\u521b\u5efa\u7ec4\u65f6\uff0c \u6700\u540e\u4e00\u4e2a\u6d88\u606f ID \u662f\u4ec0\u4e48\u3002 \u5982\u679c\u6211\u4eec\u50cf\u4ee5\u524d\u90a3\u6837\u63d0\u4f9b $ \uff0c\u90a3\u4e48\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u53ea\u6709\u5230\u8fbe\u6d41\u7684\u65b0\u6d88\u606f\u624d\u4f1a\u63d0\u4f9b\u7ed9\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u3002 \u5982\u679c\u6211\u4eec\u6307\u5b9a 0 \uff0c\u6d88\u8d39\u7ec4\u5c06\u4f7f\u7528\u6d41\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u6240\u6709\u6d88\u606f\u3002 \u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u5176\u4ed6\u6709\u6548 ID\u3002 \u60a8\u6240\u77e5\u9053\u7684\u662f\uff0c\u6d88\u8d39\u7ec4\u5c06\u5f00\u59cb\u4f20\u9012\u5927\u4e8e\u60a8\u6307\u5b9a\u7684 ID \u7684\u6d88\u606f\u3002 \u56e0\u4e3a $ \u610f\u5473\u7740\u6d41\u4e2d\u5f53\u524d\u6700\u5927\u7684 ID\uff0c\u56e0\u6b64\u6307\u5b9a $ \u5c06\u53ea\u4ea7\u751f\u4f7f\u7528\u65b0\u6d88\u606f\u7684\u6548\u679c\u3002 XGROUP CREATE \u4e5f\u652f\u6301\u81ea\u52a8\u521b\u5efa\u6d41\uff0c\u5982\u679c\u5b83\u4e0d\u5b58\u5728\uff0c\u4f7f\u7528\u53ef\u9009\u7684 MKSTREAM \u5b50\u547d\u4ee4\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u53c2\u6570: Text Only > XGROUP CREATE newstream mygroup $ MKSTREAM OK \u65e2\u7136\u5df2\u7ecf\u521b\u5efa\u4e86\u6d88\u8d39\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5c1d\u8bd5\u4f7f\u7528 XREADGROUP \u547d\u4ee4\u901a\u8fc7\u6d88\u8d39\u7ec4\u8bfb\u53d6\u6d88\u606f\u3002 \u6211\u4eec\u5c06\u8bfb\u53d6\u6765\u81ea\u6d88\u8d39\u8005\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5c06\u8c03\u7528 Alice \u548c Bob\uff0c\u4ee5\u67e5\u770b\u7cfb\u7edf\u5c06\u5982\u4f55\u5411 Alice \u6216 Bob \u8fd4\u56de\u4e0d\u540c\u7684\u6d88\u606f\u3002 XREADGROUP \u975e\u5e38\u7c7b\u4f3c\u4e8e XREAD \uff0c\u5e76\u63d0\u4f9b\u76f8\u540c\u7684 BLOCK \u9009\u9879\uff0c\u5426\u5219\u5b83\u662f\u4e00\u4e2a\u540c\u6b65\u547d\u4ee4\u3002 \u4f46\u662f\uff0c\u6709\u4e00\u4e2a\u5fc5\u987b\u59cb\u7ec8\u6307\u5b9a\u7684\u5f3a\u5236\u9009\u9879\uff0c\u5373 GROUP \uff0c\u5b83\u6709\u4e24\u4e2a\u53c2\u6570:\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u548c\u8bd5\u56fe\u8bfb\u53d6\u7684\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u3002 \u9009\u9879 COUNT \u4e5f\u88ab\u652f\u6301\uff0c\u5b83\u4e0e XREAD \u4e2d\u7684\u9009\u9879\u76f8\u540c\u3002 \u5728\u4ece\u6d41\u4e2d\u8bfb\u53d6\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5728\u91cc\u9762\u653e\u5165\u4e00\u4e9b\u6d88\u606f: Text Only > XADD mystream * message apple 1526569495631-0 > XADD mystream * message orange 1526569498055-0 > XADD mystream * message strawberry 1526569506935-0 > XADD mystream * message apricot 1526569535168-0 > XADD mystream * message banana 1526569544280-0 Note \u8fd9\u91cc message \u662f\u5b57\u6bb5\u540d\uff0cfruit \u662f\u76f8\u5173\u503c\uff0c\u8bb0\u4f4f\u6d41\u9879\u662f\u5c0f\u578b\u5b57\u5178\u3002 \u662f\u65f6\u5019\u8bd5\u7740\u7528\u6d88\u8d39\u7fa4\u6765\u9605\u8bfb\u4e00\u4e9b\u4e1c\u897f\u4e86: Text Only > XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream > 1) 1) \"mystream\" 2) 1) 1) 1526569495631-0 2) 1) \"message\" 2) \"apple\" XREADGROUP \u7684\u56de\u590d\u5c31\u50cf XREAD \u7684\u56de\u590d\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\u4e0a\u9762\u63d0\u4f9b\u7684 GROUP <group-name> <consumer-name> \u3002 \u5b83\u58f0\u660e\u6211\u60f3\u4f7f\u7528\u6d88\u8d39\u7ec4 mygroup \u4ece\u6d41\u4e2d\u8bfb\u53d6\uff0c\u6211\u662f\u6d88\u8d39\u7ec4 Alice \u3002 \u6bcf\u5f53\u4f7f\u7528\u8005\u5bf9\u6d88\u8d39\u7ec4\u6267\u884c\u64cd\u4f5c\u65f6\uff0c\u5b83\u5fc5\u987b\u6307\u5b9a\u5b83\u7684\u540d\u79f0\uff0c\u5728\u7ec4\u4e2d\u552f\u4e00\u6807\u8bc6\u8fd9\u4e2a\u4f7f\u7528\u8005\u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u884c\u4e2d\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7ec6\u8282\uff0c\u5728\u5f3a\u5236\u6027\u7684 STREAMS \u9009\u9879\u4e4b\u540e\uff0c\u952e mystream \u8bf7\u6c42\u7684 ID \u662f\u7279\u6b8a ID > \u3002 \u8fd9\u4e2a\u7279\u6b8a ID \u53ea\u5728\u6d88\u8d39\u7ec4\u7684\u4e0a\u4e0b\u6587\u4e2d\u6709\u6548\uff0c\u5b83\u7684\u610f\u601d\u662f: \u6d88\u606f\u8fc4\u4eca\u4e3a\u6b62\u4ece\u672a\u4f20\u9012\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005 \u3002 \u8fd9\u51e0\u4e4e\u603b\u662f\u60a8\u60f3\u8981\u7684\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u771f\u5b9e\u7684 ID\uff0c\u4f8b\u5982 0 \u6216\u4efb\u4f55\u5176\u4ed6\u6709\u6548\u7684 ID\uff0c\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u7684\u60c5\u51b5\u662f\u6211\u4eec\u4ece XREADGROUP \u8bf7\u6c42\u53ea\u5411\u6211\u4eec\u63d0\u4f9b\u6302\u8d77\u6d88\u606f \u7684 \u5386\u53f2\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u5728\u7ec4\u4e2d\u770b\u5230\u65b0\u6d88\u606f\u3002\u6240\u4ee5\u57fa\u672c\u4e0a XREADGROUP \u57fa\u4e8e\u6211\u4eec\u6307\u5b9a\u7684 ID \u6709\u4ee5\u4e0b\u884c\u4e3a: \u5982\u679c ID \u662f\u7279\u6b8a ID > \uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u5c06\u53ea\u8fd4\u56de\u8fc4\u4eca\u4e3a\u6b62\u4ece\u672a\u4ea4\u4ed8\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005\u7684\u65b0\u6d88\u606f\uff0c\u5e76\u4e14\u4f5c\u4e3a\u526f\u4f5c\u7528\uff0c\u5c06\u66f4\u65b0\u6d88\u8d39\u7ec4\u7684 \u6700\u540e\u4e00\u4e2a ID \u3002 \u5982\u679c\u8be5 ID \u662f\u4efb\u4f55\u5176\u4ed6\u6709\u6548\u7684\u6570\u5b57 ID\uff0c\u5219\u8be5\u547d\u4ee4\u5c06\u5141\u8bb8\u6211\u4eec\u8bbf\u95ee\u6302\u8d77\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4f20\u9012\u5230\u6307\u5b9a\u6d88\u8d39\u8005(\u901a\u8fc7\u63d0\u4f9b\u7684\u540d\u79f0\u6807\u8bc6)\u7684\u6d88\u606f\u96c6\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0cXACK \u4ece\u672a\u786e\u8ba4\u8fc7\u8fd9\u4e9b\u6d88\u606f\u3002 \u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u6d4b\u8bd5\u6b64\u884c\u4e3a\uff0c\u6307\u5b9a ID \u4e3a 0\uff0c\u4e0d\u5e26\u4efb\u4f55 COUNT \u9009\u9879:\u6211\u4eec\u53ea\u4f1a\u770b\u5230\u552f\u4e00\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u5173\u4e8e\u82f9\u679c\u7684\u6d88\u606f: Text Only > XREADGROUP GROUP mygroup Alice STREAMS mystream 0 1) 1) \"mystream\" 1) 1) 1) 1526569495631-0 1) 1) \"message\" 1) \"apple\" \u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u786e\u8ba4\u6d88\u606f\u5df2\u88ab\u5904\u7406\uff0c\u5b83\u5c06\u4e0d\u518d\u662f\u5f85\u5904\u7406\u6d88\u606f\u5386\u53f2\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u7cfb\u7edf\u5c06\u4e0d\u518d\u62a5\u544a\u4efb\u4f55\u5185\u5bb9: Text Only > XACK mystream mygroup 1526569495631-0 (integer) 1 > XREADGROUP GROUP mygroup Alice STREAMS mystream 0 1) 1) \"mystream\" 2) (empty list or set) \u5982\u679c\u4f60\u8fd8\u4e0d\u77e5\u9053 XACK \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4e0d\u8981\u62c5\u5fc3\uff0c\u5b83\u7684\u601d\u60f3\u53ea\u662f\u5904\u7406\u8fc7\u7684\u6d88\u606f\u4e0d\u518d\u662f\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u7684\u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206\u3002 \u73b0\u5728\u8f6e\u5230\u9c8d\u52c3\u8bfb\u4e86: Text Only > XREADGROUP GROUP mygroup Bob COUNT 2 STREAMS mystream > 1) 1) \"mystream\" 2) 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" 2) 1) 1526569506935-0 2) 1) \"message\" 2) \"strawberry\" Bob \u6700\u591a\u8bf7\u6c42\u4e24\u6761\u6d88\u606f\uff0c\u5e76\u4e14\u6b63\u5728\u901a\u8fc7\u540c\u4e00\u4e2a\u7ec4 mygroup \u8fdb\u884c\u9605\u8bfb\u3002 \u6240\u4ee5 Redis \u53ea\u62a5\u544a\u65b0\u6d88\u606f\u3002 \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c apple \u6d88\u606f\u6ca1\u6709\u88ab\u4f20\u9012\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\u4f20\u9012\u7ed9\u4e86 Alice\uff0c\u6240\u4ee5 Bob \u5f97\u5230\u4e86\u6a58\u5b50\u548c\u8349\u8393\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u8fd9\u6837\uff0cAlice\u3001Bob \u548c\u7ec4\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u6d88\u8d39\u8005\u90fd\u80fd\u591f\u4ece\u540c\u4e00\u6d41\u4e2d\u8bfb\u53d6\u4e0d\u540c\u7684\u6d88\u606f\uff0c\u8bfb\u53d6\u5c1a\u672a\u5904\u7406\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u6216\u8005\u5c06\u6d88\u606f\u6807\u8bb0\u4e3a\u5df2\u5904\u7406\u3002 \u8fd9\u5141\u8bb8\u521b\u5efa\u4e0d\u540c\u7684\u62d3\u6251\u548c\u8bed\u4e49\u6765\u4f7f\u7528\u6765\u81ea\u6d41\u7684\u6d88\u606f\u3002 \u6709\u51e0\u4ef6\u4e8b\u9700\u8981\u8bb0\u4f4f: \u6d88\u8d39\u8005\u5728\u7b2c\u4e00\u6b21\u88ab\u63d0\u53ca\u65f6\u5c31\u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u521b\u5efa\u3002 \u5373\u4f7f\u4f7f\u7528 XREADGROUP \uff0c\u60a8\u4e5f\u53ef\u4ee5\u540c\u65f6\u4ece\u591a\u4e2a\u952e\u4e2d\u8bfb\u53d6\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u60a8\u9700\u8981\u5728\u6bcf\u4e2a\u6d41\u4e2d\u521b\u5efa\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u6d88\u8d39\u7ec4\u3002\u8fd9\u4e0d\u662f\u5e38\u89c1\u7684\u9700\u6c42\uff0c\u4f46\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8be5\u7279\u6027\u5728\u6280\u672f\u4e0a\u662f\u53ef\u7528\u7684\u3002 XREADGROUP \u662f\u4e00\u4e2a\u5199\u547d\u4ee4\uff0c\u56e0\u4e3a\u5373\u4f7f\u5b83\u4ece\u6d41\u4e2d\u8bfb\u53d6\uff0c\u4f5c\u4e3a\u8bfb\u53d6\u7684\u526f\u4f5c\u7528\uff0c\u6d88\u8d39\u7ec4\u4e5f\u4f1a\u88ab\u4fee\u6539\uff0c\u56e0\u6b64\u53ea\u80fd\u5728\u4e3b\u5b9e\u4f8b\u4e0a\u8c03\u7528\u5b83\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 Ruby \u8bed\u8a00\u7f16\u5199\u7684\u4f7f\u7528\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\u5b9e\u73b0\u793a\u4f8b\u3002 Ruby \u4ee3\u7801\u7684\u76ee\u6807\u662f\u8ba9\u51e0\u4e4e\u6240\u6709\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u90fd\u80fd\u8bfb\u61c2\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e0d\u61c2 Ruby: Ruby require `redis' if ARGV.length == 0 puts \"Please specify a consumer name\" exit 1 end ConsumerName = ARGV[0] GroupName = \"mygroup\" r = Redis.new def process_message(id,msg) puts \"[ #{ ConsumerName } ] #{ id } = #{ msg . inspect } \" end $lastid =` 0 - 0 ' puts \"Consumer #{ ConsumerName } starting...\" check_backlog = true while true # Pick the ID based on the iteration: the first time we want to # read our pending messages, in case we crashed and are recovering. # Once we consumed our history, we can start getting new messages. if check_backlog myid = $lastid else myid =`>' end items = r . xreadgroup ( 'GROUP' , GroupName , ConsumerName , 'BLOCK' , '2000' , 'COUNT' , '10' , 'STREAMS' , :my_stream_key , myid ) if items == nil puts \"Timeout!\" next end # If we receive an empty reply, it means we were consuming our history # and that the history is now empty. Let's start to consume new messages. check_backlog = false if items [ 0 ][ 1 ]. length == 0 items [ 0 ][ 1 ]. each { | i | id , fields = i # Process the message process_message ( id , fields ) # Acknowledge the message as processed r . xack ( :my_stream_key , GroupName , id ) $lastid = id } end \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 Ruby \u8bed\u8a00\u7f16\u5199\u7684\u4f7f\u7528\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\u5b9e\u73b0\u793a\u4f8b\u3002 Ruby \u4ee3\u7801\u7684\u76ee\u6807\u662f\u8ba9\u51e0\u4e4e\u6240\u6709\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u90fd\u80fd\u8bfb\u61c2\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e0d\u61c2 Ruby: \u4e00\u65e6\u4f7f\u7528\u4e86\u5386\u53f2\u8bb0\u5f55\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u7684\u6d88\u606f\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5207\u6362\u5230\u4f7f\u7528 > \u7279\u6b8a ID \u6765\u4f7f\u7528\u65b0\u6d88\u606f\u3002","title":"\u521b\u5efa\u6d88\u8d39\u7ec4"},{"location":"docs/streams/streams-tutorial/#_6","text":"\u4e0a\u9762\u7684\u793a\u4f8b\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u53c2\u4e0e\u540c\u4e00\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u90fd\u6709\u4e00\u4e2a\u6d88\u606f\u5b50\u96c6\u8981\u5904\u7406\uff0c\u5f53\u4ece\u5931\u8d25\u4e2d\u6062\u590d\u65f6\uff0c\u91cd\u65b0\u8bfb\u53d6\u4ec5\u4ea4\u4ed8\u7ed9\u4ed6\u4eec\u7684\u6302\u8d77\u6d88\u606f\u3002\u7136\u800c\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u6d88\u8d39\u8005\u53ef\u80fd\u6c38\u8fdc\u5931\u8d25\uff0c\u6c38\u8fdc\u65e0\u6cd5\u6062\u590d\u3002\u6d88\u8d39\u8005\u7684\u6302\u8d77\u7684\u6d88\u606f\u5728\u56e0\u4efb\u4f55\u539f\u56e0\u505c\u6b62\u540e\u4ece\u672a\u6062\u590d\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48? Redis \u6d88\u8d39\u7ec4\u63d0\u4f9b\u4e86\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u7279\u6027\uff0c\u4ee5\u58f0\u660e\u7ed9\u5b9a\u6d88\u8d39\u8005\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u4ee5\u4fbf\u8fd9\u4e9b\u6d88\u606f\u5c06\u6539\u53d8\u6240\u6709\u6743\u5e76\u5c06\u88ab\u91cd\u65b0\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u3002\u8fd9\u4e2a\u529f\u80fd\u975e\u5e38\u660e\u786e\u3002\u4f7f\u7528\u8005\u5fc5\u987b\u68c0\u67e5\u6302\u8d77\u7684\u6d88\u606f\u5217\u8868\uff0c\u5e76\u5fc5\u987b\u4f7f\u7528\u7279\u6b8a\u547d\u4ee4\u58f0\u660e\u7279\u5b9a\u7684\u6d88\u606f\uff0c\u5426\u5219\u670d\u52a1\u5668\u5c06\u6c38\u8fdc\u4fdd\u7559\u6302\u8d77\u7684\u6d88\u606f\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u65e7\u7684\u4f7f\u7528\u8005\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u8fd9\u79cd\u529f\u80fd\uff0c\u4ee5\u53ca\u5177\u4f53\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u6b64\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b65\u53ea\u662f\u4e00\u4e2a\u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u63d0\u4f9b\u6d88\u8d39\u7ec4\u4e2d\u6302\u8d77\u6761\u76ee\u7684\u53ef\u89c2\u6d4b\u6027\uff0c\u79f0\u4e3a XPENDING \u3002 \u8fd9\u662f\u4e00\u4e2a\u53ea\u8bfb\u547d\u4ee4\uff0c\u8c03\u7528\u5b83\u603b\u662f\u5b89\u5168\u7684\uff0c\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u6d88\u606f\u7684\u6240\u6709\u6743\u3002 \u5728\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u4e2d\uff0c\u8c03\u7528\u8be5\u547d\u4ee4\u65f6\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6d41\u7684\u540d\u79f0\uff0c\u53e6\u4e00\u4e2a\u662f\u6d88\u8d39\u7ec4\u7684\u540d\u79f0\u3002 Text Only > XPENDING mystream mygroup 1) (integer) 2 2) 1526569498055-0 3) 1526569506935-0 4) 1) 1) \"Bob\" 2) \"2\" \u5f53\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8c03\u7528\u65f6\uff0c\u8be5\u547d\u4ee4\u8f93\u51fa\u6d88\u8d39\u7ec4\u4e2d\u5f85\u5b9a\u6d88\u606f\u7684\u603b\u6570(\u672c\u4f8b\u4e2d\u4e3a\u4e24\u4e2a)\u3001\u5f85\u5b9a\u6d88\u606f\u4e2d\u8f83\u4f4e\u548c\u8f83\u9ad8\u7684\u6d88\u606f ID\uff0c\u6700\u540e\u8f93\u51fa\u6d88\u8d39\u8005\u7684\u5217\u8868\u548c\u4ed6\u4eec\u62e5\u6709\u7684\u5f85\u5b9a\u6d88\u606f\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ea\u6709 Bob \u548c\u4e24\u4e2a\u6302\u8d77\u7684\u6d88\u606f\uff0c\u56e0\u4e3a Alice \u8bf7\u6c42\u7684\u5355\u4e2a\u6d88\u606f\u662f\u4f7f\u7528 XACK \u786e\u8ba4\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9 XPENDING \u66f4\u591a\u7684\u53c2\u6570\u6765\u8bf7\u6c42\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u5b8c\u6574\u7684\u547d\u4ee4\u7b7e\u540d\u5982\u4e0b: Text Only XPENDING <key> <groupname> [[IDLE <min-idle-time>] <start-id> <end-id> <count> [<consumer-name>]] \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5f00\u59cb\u548c\u7ed3\u675f ID(\u53ef\u4ee5\u662f - \u548c + \uff0c\u5c31\u50cf XRANGE \u4e2d\u90a3\u6837)\u548c\u4e00\u4e2a\u8ba1\u6570\u6765\u63a7\u5236\u547d\u4ee4\u8fd4\u56de\u7684\u4fe1\u606f\u91cf\uff0c\u6211\u4eec\u80fd\u591f\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6302\u8d77\u6d88\u606f\u7684\u4fe1\u606f\u3002\u5982\u679c\u5e0c\u671b\u5c06\u8f93\u51fa\u9650\u5236\u4e3a\u4ec5\u4e3a\u7ed9\u5b9a\u6d88\u8d39\u8005\u7684\u5f85\u5904\u7406\u6d88\u606f\uff0c\u5219\u4f7f\u7528\u53ef\u9009\u7684\u6700\u7ec8\u53c2\u6570\u6d88\u8d39\u8005\u540d\uff0c\u4f46\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u4e0d\u4f7f\u7528\u6b64\u7279\u6027\u3002 Text Only > XPENDING mystream mygroup - + 10 1) 1) 1526569498055-0 2) \"Bob\" 3) (integer) 74170458 4) (integer) 1 2) 1) 1526569506935-0 2) \"Bob\" 3) (integer) 74170458 4) (integer) 1 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u6bcf\u6761\u6d88\u606f\u7684\u8be6\u7ec6\u4fe1\u606f:ID\u3001\u6d88\u8d39\u8005\u540d\u3001 idle time (\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\uff0c\u8fd9\u662f\u81ea\u6d88\u606f\u6700\u540e\u4e00\u6b21\u88ab\u4f20\u9012\u7ed9\u67d0\u4e2a\u6d88\u8d39\u8005\u4ee5\u6765\u7ecf\u8fc7\u4e86\u591a\u5c11\u6beb\u79d2\uff0c\u6700\u540e\u662f\u7ed9\u5b9a\u6d88\u606f\u88ab\u4f20\u9012\u7684\u6b21\u6570\u3002 \u6211\u4eec\u6709\u4e24\u4e2a\u6765\u81ea Bob \u7684\u6d88\u606f\uff0c\u5b83\u4eec\u7a7a\u95f2\u65f6\u95f4\u4e3a 74170458 \u6beb\u79d2\uff0c\u5927\u7ea6 20 \u5c0f\u65f6\u3002 \u6ce8\u610f\uff0c\u6ca1\u6709\u4eba\u963b\u6b62\u6211\u4eec\u901a\u8fc7\u4f7f\u7528 XRANGE \u6765\u68c0\u67e5\u7b2c\u4e00\u4e2a\u6d88\u606f\u5185\u5bb9\u662f\u4ec0\u4e48\u3002 Text Only > XRANGE mystream 1526569498055-0 1526569498055-0 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" \u6211\u4eec\u53ea\u9700\u8981\u5728\u53c2\u6570\u4e2d\u91cd\u590d\u76f8\u540c\u7684 ID \u4e24\u6b21\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u60f3\u6cd5\uff0c\u90a3\u4e48 Alice \u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u5728 20 \u5c0f\u65f6\u4e0d\u5904\u7406\u6d88\u606f\u4e4b\u540e\uff0cBob \u53ef\u80fd\u65e0\u6cd5\u53ca\u65f6\u6062\u590d\uff0c\u73b0\u5728\u662f\u65f6\u5019\u8bf7\u6c42\u5904\u7406\u8fd9\u4e9b\u6d88\u606f\u5e76\u4ee3\u66ff Bob \u6062\u590d\u5904\u7406\u4e86\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 XCLAIM \u547d\u4ee4\u3002 \u8fd9\u4e2a\u547d\u4ee4\u975e\u5e38\u590d\u6742\uff0c\u5b83\u7684\u5b8c\u6574\u5f62\u5f0f\u5145\u6ee1\u4e86\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u7528\u4e8e\u590d\u5236\u6d88\u8d39\u7ec4\u66f4\u6539\uff0c\u4f46\u662f\u6211\u4eec\u5c06\u53ea\u4f7f\u7528\u901a\u5e38\u9700\u8981\u7684\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5f88\u7b80\u5355: Text Only XCLAIM <key> <group> <consumer> <min-idle-time> <ID-1> <ID-2> ... <ID-N> \u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u8bf4\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u7279\u5b9a\u7684\u952e\u548c\u7ec4\uff0c\u6211\u5e0c\u671b\u6307\u5b9a\u7684\u6d88\u606f id \u5c06\u6539\u53d8\u6240\u6709\u6743\uff0c\u5e76\u5c06\u88ab\u5206\u914d\u7ed9\u6307\u5b9a\u7684\u6d88\u8d39\u8005\u540d <consumer> \u3002\u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6700\u5c0f\u7a7a\u95f2\u65f6\u95f4\uff0c\u8fd9\u6837\uff0c\u53ea\u6709\u5f53\u63d0\u5230\u7684\u6d88\u606f\u7684\u7a7a\u95f2\u65f6\u95f4\u5927\u4e8e\u6307\u5b9a\u7684\u7a7a\u95f2\u65f6\u95f4\u65f6\uff0c\u64cd\u4f5c\u624d\u4f1a\u5de5\u4f5c\u3002\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u4e24\u4e2a\u5ba2\u6237\u7aef\u540c\u65f6\u8bd5\u56fe\u91cd\u65b0\u58f0\u660e\u4e00\u6761\u6d88\u606f: Text Only Client 1: XCLAIM mystream mygroup Alice 3600000 1526569498055-0 Client 2: XCLAIM mystream mygroup Lora 3600000 1526569498055-0 \u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u526f\u4f5c\u7528\uff0c\u58f0\u660e\u6d88\u606f\u5c06\u91cd\u7f6e\u5176\u7a7a\u95f2\u65f6\u95f4\u5e76\u589e\u52a0\u5176\u4ea4\u4ed8\u8ba1\u6570\u5668\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5ba2\u6237\u673a\u5c06\u65e0\u6cd5\u58f0\u660e\u5b83\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u907f\u514d\u4e86\u7410\u788e\u7684\u6d88\u606f\u518d\u5904\u7406(\u5373\u4f7f\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u80fd\u7cbe\u786e\u5730\u83b7\u5f97\u4e00\u6b21\u5904\u7406)\u3002 \u547d\u4ee4\u6267\u884c\u7684\u7ed3\u679c\u5982\u4e0b: Text Only > XCLAIM mystream mygroup Alice 3600000 1526569498055-0 1) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" Alice \u6210\u529f\u5730\u8ba4\u9886\u4e86\u6d88\u606f\uff0c\u5979\u73b0\u5728\u53ef\u4ee5\u5904\u7406\u6d88\u606f\u5e76\u786e\u8ba4\u5b83\uff0c\u5e76\u5411\u524d\u63a8\u8fdb\uff0c\u5373\u4f7f\u539f\u59cb\u6d88\u8d39\u8005\u6ca1\u6709\u6062\u590d\u3002 \u4ece\u4e0a\u9762\u7684\u793a\u4f8b\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\u4f5c\u4e3a\u6210\u529f\u58f0\u660e\u7ed9\u5b9a\u6d88\u606f\u7684\u526f\u4f5c\u7528\uff0c XCLAIM \u547d\u4ee4\u4e5f\u4f1a\u8fd4\u56de\u8be5\u6d88\u606f\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u662f\u5f3a\u5236\u6027\u7684\u3002\u53ef\u4ee5\u4f7f\u7528 JUSTID \u9009\u9879\u4ec5\u8fd4\u56de\u6210\u529f\u8ba4\u9886\u7684\u6d88\u606f\u7684 id\u3002\u5982\u679c\u60a8\u5e0c\u671b\u51cf\u5c11\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f7f\u7528\u7684\u5e26\u5bbd(\u4ee5\u53ca\u547d\u4ee4\u7684\u6027\u80fd)\uff0c\u5e76\u4e14\u60a8\u5bf9\u6d88\u606f\u4e0d\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u60a8\u7684\u4f7f\u7528\u8005\u7684\u5b9e\u73b0\u65b9\u5f0f\u5c06\u4e0d\u65f6\u91cd\u65b0\u626b\u63cf\u6302\u8d77\u7684\u6d88\u606f\u7684\u5386\u53f2\uff0c\u90a3\u4e48\u8fd9\u662f\u5f88\u6709\u7528\u7684\u3002 \u8ba4\u9886\u4e5f\u53ef\u4ee5\u7531\u5355\u72ec\u7684\u6d41\u7a0b\u5b9e\u73b0:\u8be5\u6d41\u7a0b\u53ea\u68c0\u67e5\u6302\u8d77\u7684\u6d88\u606f\u5217\u8868\uff0c\u5e76\u5c06\u7a7a\u95f2\u6d88\u606f\u5206\u914d\u7ed9\u770b\u8d77\u6765\u6d3b\u8dc3\u7684\u4f7f\u7528\u8005\u3002\u4f7f\u7528 Redis \u6d41\u7684\u53ef\u89c2\u6d4b\u6027\u7279\u5f81\u4e4b\u4e00\u53ef\u4ee5\u83b7\u5f97\u6d3b\u52a8\u6d88\u8d39\u8005\u3002\u8fd9\u662f\u4e0b\u4e00\u8282\u7684\u4e3b\u9898\u3002","title":"\u4ece\u6c38\u4e45\u5931\u8d25\u4e2d\u6062\u590d"},{"location":"docs/streams/streams-tutorial/#_7","text":"\u5728 Redis 6.2 \u4e2d\u6dfb\u52a0\u7684 XAUTOCLAIM \u547d\u4ee4\u5b9e\u73b0\u4e86\u6211\u4eec\u4e0a\u9762\u63cf\u8ff0\u7684\u8ba4\u9886\u8fc7\u7a0b\u3002 XPENDING \u548c XCLAIM \u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6062\u590d\u673a\u5236\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u6784\u5efa\u5757\u3002 \u8be5\u547d\u4ee4\u901a\u8fc7\u8ba9 Redis \u7ba1\u7406\u901a\u7528\u6d41\u7a0b\u6765\u4f18\u5316\u5b83\uff0c\u5e76\u4e3a\u5927\u591a\u6570\u6062\u590d\u9700\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002 XAUTOCLAIM \u8bc6\u522b\u7a7a\u95f2\u7684\u6302\u8d77\u6d88\u606f\u5e76\u5c06\u5176\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u4f7f\u7528\u8005\u3002 \u547d\u4ee4\u7684\u7b7e\u540d\u5982\u4e0b\u6240\u793a: `XAUTOCLAIM <key> <group> <consumer> <min-idle-time> <start> [COUNT COUNT] [JUSTID] ' \u6240\u4ee5\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u81ea\u52a8\u58f0\u660e\u6765\u58f0\u660e\u4e00\u6761\u6d88\u606f\uff0c\u5c31\u50cf\u8fd9\u6837: Text Only > XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 1 1) 1526569498055-0 2) 1) 1526569498055-0 2) 1) \"message\" 2) \"orange\" \u4e0e XCLAIM \u7c7b\u4f3c\uff0c\u8be5\u547d\u4ee4\u7528\u58f0\u660e\u7684\u6d88\u606f\u6570\u7ec4\u8fdb\u884c\u54cd\u5e94\uff0c\u4f46\u5b83\u4e5f\u8fd4\u56de\u4e00\u4e2a\u6d41 ID\uff0c\u5141\u8bb8\u8fed\u4ee3\u6302\u8d77\u7684\u6761\u76ee\u3002 \u6d41 ID \u662f\u4e00\u4e2a\u6e38\u6807\uff0c\u6211\u53ef\u4ee5\u5728\u4e0b\u4e00\u4e2a\u8c03\u7528\u4e2d\u4f7f\u7528\u5b83\u6765\u7ee7\u7eed\u58f0\u660e\u7a7a\u95f2\u7684\u6302\u8d77\u6d88\u606f: Text Only > XAUTOCLAIM mystream mygroup Lora 3600000 1526569498055-0 COUNT 1 1) 0-0 2) 1) 1526569506935-0 2) 1) \"message\" 2) \"strawberry\" \u5f53 XAUTOCLAIM \u8fd4\u56de 0-0 \u6d41 ID \u4f5c\u4e3a\u6e38\u6807\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5230\u8fbe\u4e86\u6d88\u8d39\u7ec4\u5f85\u5904\u7406\u6761\u76ee\u5217\u8868\u7684\u672b\u5c3e\u3002 \u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6ca1\u6709\u65b0\u7684\u7a7a\u95f2\u6302\u8d77\u6d88\u606f\uff0c\u56e0\u6b64\u6d41\u7a0b\u4ece\u6d41\u7684\u5f00\u59cb\u8c03\u7528 XAUTOCLAIM \u7ee7\u7eed\u3002","title":"\u81ea\u52a8\u8ba4\u9886"},{"location":"docs/streams/streams-tutorial/#_8","text":"\u60a8\u5728 XPENDING \u8f93\u51fa\u4e2d\u89c2\u6d4b\u5230\u7684\u8ba1\u6570\u5668\u662f\u6bcf\u6761\u6d88\u606f\u7684\u4ea4\u4ed8\u6570\u91cf\u3002\u8ba1\u6570\u5668\u4ee5\u4e24\u79cd\u65b9\u5f0f\u9012\u589e:\u5f53\u901a\u8fc7 XCLAIM \u6210\u529f\u58f0\u660e\u6d88\u606f\u65f6\uff0c\u6216\u5f53\u4f7f\u7528 XREADGROUP \u8c03\u7528\u4ee5\u8bbf\u95ee\u6302\u8d77\u6d88\u606f\u7684\u5386\u53f2\u8bb0\u5f55\u65f6\u3002 \u5f53\u51fa\u73b0\u5931\u8d25\u65f6\uff0c\u901a\u5e38\u4f1a\u591a\u6b21\u4f20\u9012\u6d88\u606f\uff0c\u4f46\u6700\u7ec8\u5b83\u4eec\u901a\u5e38\u4f1a\u5f97\u5230\u5904\u7406\u548c\u786e\u8ba4\u3002\u7136\u800c\uff0c\u5728\u5904\u7406\u67d0\u4e9b\u7279\u5b9a\u6d88\u606f\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u88ab\u635f\u574f\u6216\u4ee5\u89e6\u53d1\u5904\u7406\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u7684\u65b9\u5f0f\u5236\u4f5c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u7684\u60c5\u51b5\u662f\u6d88\u8d39\u8005\u5c06\u4e0d\u65ad\u5730\u65e0\u6cd5\u5904\u7406\u8fd9\u6761\u7279\u5b9a\u7684\u6d88\u606f\u3002\u56e0\u4e3a\u6211\u4eec\u6709\u4f20\u9012\u5c1d\u8bd5\u7684\u8ba1\u6570\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5\u8ba1\u6570\u5668\u6765\u68c0\u6d4b\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4e0d\u53ef\u5904\u7406\u7684\u6d88\u606f\u3002\u56e0\u6b64\uff0c\u4e00\u65e6\u4ea4\u4ed8\u8ba1\u6570\u5668\u8fbe\u5230\u60a8\u6240\u9009\u62e9\u7684\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5927\u6570\u5b57\uff0c\u53ef\u80fd\u66f4\u660e\u667a\u7684\u505a\u6cd5\u662f\u5c06\u8fd9\u4e9b\u6d88\u606f\u653e\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\uff0c\u5e76\u5411\u7cfb\u7edf\u7ba1\u7406\u5458\u53d1\u9001\u901a\u77e5\u3002\u8fd9\u57fa\u672c\u4e0a\u662f Redis Streams \u5b9e\u73b0 dead letter \u6982\u5ff5\u7684\u65b9\u5f0f\u3002","title":"\u8ba4\u9886\u548c\u4ea4\u4ed8\u8ba1\u6570"},{"location":"docs/streams/streams-tutorial/#_9","text":"\u7f3a\u4e4f\u53ef\u89c2\u6d4b\u6027\u7684\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u975e\u5e38\u96be\u4ee5\u4f7f\u7528\u3002 \u4e0d\u77e5\u9053\u8c01\u5728\u4f7f\u7528\u6d88\u606f\u3001\u4ec0\u4e48\u6d88\u606f\u6302\u8d77\u3001\u7ed9\u5b9a\u6d41\u4e2d\u6d3b\u52a8\u7684\u6d88\u8d39\u7ec4\uff0c\u8fd9\u4f7f\u5f97\u4e00\u5207\u90fd\u53d8\u5f97\u4e0d\u900f\u660e\u3002 \u56e0\u6b64\uff0cRedis Streams \u548c\u6d88\u8d39\u7ec4\u6709\u4e0d\u540c\u7684\u89c2\u6d4b\u65b9\u5f0f\u3002 \u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86 XPENDING \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u68c0\u67e5\u5728\u7ed9\u5b9a\u65f6\u523b\u6b63\u5728\u5904\u7406\u7684\u6d88\u606f\u5217\u8868\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u7a7a\u95f2\u65f6\u95f4\u548c\u4f20\u9012\u6570\u91cf\u3002 \u7136\u800c\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c XINFO \u547d\u4ee4\u662f\u4e00\u4e2a\u53ef\u89c2\u6d4b\u6027\u63a5\u53e3\uff0c\u53ef\u4ee5\u4e0e\u5b50\u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u83b7\u53d6\u5173\u4e8e\u6d41\u6216\u6d88\u8d39\u7ec4\u7684\u4fe1\u606f\u3002 \u8fd9\u4e2a\u547d\u4ee4\u4f7f\u7528\u5b50\u547d\u4ee4\u6765\u663e\u793a\u5173\u4e8e\u6d41\u53ca\u5176\u6d88\u8d39\u7ec4\u72b6\u6001\u7684\u4e0d\u540c\u4fe1\u606f\u3002\u4f8b\u5982\uff0c XINFO STREAM \u62a5\u544a\u6d41\u672c\u8eab\u7684\u4fe1\u606f\u3002 Text Only > XINFO STREAM mystream 1) \"length\" 2) (integer) 2 3) \"radix-tree-keys\" 4) (integer) 1 5) \"radix-tree-nodes\" 6) (integer) 2 7) \"last-generated-id\" 8) \"1638125141232-0\" 9) \"max-deleted-entryid\" 10) \"0-0\" 11) \"entries-added\" 12) (integer) 2 13) \"groups\" 14) (integer) 1 15) \"first-entry\" 16) 1) \"1638125133432-0\" 2) 1) \"message\" 2) \"apple\" 17) \"last-entry\" 18) 1) \"1638125141232-0\" 2) 1) \"message\" 2) \"banana\" \u8f93\u51fa\u663e\u793a\u4e86\u5173\u4e8e\u6d41\u5185\u90e8\u5982\u4f55\u7f16\u7801\u7684\u4fe1\u606f\uff0c\u8fd8\u663e\u793a\u4e86\u6d41\u4e2d\u7684\u7b2c\u4e00\u6761\u548c\u6700\u540e\u4e00\u6761\u6d88\u606f\u3002 \u53e6\u4e00\u4e2a\u53ef\u7528\u7684\u4fe1\u606f\u662f\u4e0e\u6b64\u6d41\u76f8\u5173\u8054\u7684\u6d88\u8d39\u7ec4\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u8be2\u95ee\u66f4\u591a\u5173\u4e8e\u6d88\u8d39\u7ec4\u7684\u4fe1\u606f\u3002 Text Only > XINFO GROUPS mystream 1) 1) \"name\" 2) \"mygroup\" 3) \"consumers\" 4) (integer) 2 5) \"pending\" 6) (integer) 2 7) \"last-delivered-id\" 8) \"1638126030001-0\" 9) \"entries-read\" 10) (integer) 2 11) \"lag\" 12) (integer) 0 2) 1) \"name\" 2) \"some-other-group\" 3) \"consumers\" 4) (integer) 1 5) \"pending\" 6) (integer) 0 7) \"last-delivered-id\" 8) \"1638126028070-0\" 9) \"entries-read\" 10) (integer) 1 11) \"lag\" 12) (integer) 1 \u6b63\u5982\u60a8\u5728\u6b64\u8f93\u51fa\u548c\u524d\u9762\u7684\u8f93\u51fa\u4e2d\u6240\u770b\u5230\u7684\uff0c XINFO \u547d\u4ee4\u8f93\u51fa\u4e00\u7cfb\u5217\u5b57\u6bb5\u503c\u9879\u3002 \u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u53ef\u89c2\u6d4b\u6027\u547d\u4ee4\uff0c\u8fd9\u5141\u8bb8\u4eba\u7c7b\u7528\u6237\u7acb\u5373\u4e86\u89e3\u62a5\u544a\u4e86\u4ec0\u4e48\u4fe1\u606f\uff0c\u5e76\u5141\u8bb8\u8be5\u547d\u4ee4\u5728\u672a\u6765\u901a\u8fc7\u6dfb\u52a0\u66f4\u591a\u5b57\u6bb5\u6765\u62a5\u544a\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u7834\u574f\u4e0e\u65e7\u5ba2\u6237\u673a\u7684\u517c\u5bb9\u6027\u3002 \u5176\u4ed6\u4e00\u4e9b\u5e26\u5bbd\u6548\u7387\u66f4\u9ad8\u7684\u547d\u4ee4\uff0c\u6bd4\u5982 XPENDING \uff0c\u53ea\u62a5\u544a\u6ca1\u6709\u5b57\u6bb5\u540d\u7684\u4fe1\u606f\u3002 \u4e0a\u9762\u7684\u793a\u4f8b(\u5176\u4e2d\u4f7f\u7528\u4e86 GROUPS \u5b50\u547d\u4ee4)\u7684\u8f93\u51fa\u5e94\u8be5\u5f88\u6e05\u695a\uff0c\u53ef\u4ee5\u89c2\u6d4b\u5b57\u6bb5\u540d\u3002 \u901a\u8fc7\u68c0\u67e5\u5728\u7ec4\u4e2d\u6ce8\u518c\u7684\u6d88\u8d39\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u8be6\u7ec6\u5730\u68c0\u67e5\u7279\u5b9a\u6d88\u8d39\u7ec4\u7684\u72b6\u6001\u3002 Text Only > XINFO CONSUMERS mystream mygroup 1) 1) name 2) \"Alice\" 3) pending 4) (integer) 1 5) idle 6) (integer) 9104628 2) 1) name 2) \"Bob\" 3) pending 4) (integer) 1 5) idle 6) (integer) 83841983 \u5982\u679c\u4f60\u4e0d\u8bb0\u5f97\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u5c31\u5411\u547d\u4ee4\u672c\u8eab\u5bfb\u6c42\u5e2e\u52a9: Text Only > XINFO HELP 1) XINFO <subcommand> [<arg> [value] [opt] ...]. Subcommands are: 2) CONSUMERS <key> <groupname> 3) Show consumers of <groupname>. 4) GROUPS <key> 5) Show the stream consumer groups. 6) STREAM <key> [FULL [COUNT <count>] 7) Show information about the stream. 8) HELP 9) Prints this help.","title":"\u6d41\u53ef\u89c2\u6d4b\u6027"},{"location":"docs/streams/streams-tutorial/#kafka-tm","text":"Redis \u6d41\u4e2d\u7684\u6d88\u8d39\u7ec4\u53ef\u80fd\u5728\u67d0\u4e9b\u65b9\u9762\u7c7b\u4f3c\u4e8e\u57fa\u4e8e Kafka (TM)\u5206\u533a\u7684\u6d88\u8d39\u7ec4\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\uff0cRedis \u6d41\u5728\u5b9e\u9645\u4e2d\u662f\u975e\u5e38\u4e0d\u540c\u7684\u3002 \u5206\u533a\u53ea\u6709 logical \uff0c\u6d88\u606f\u53ea\u662f\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684 Redis \u952e\u4e2d\uff0c\u56e0\u6b64\u4e0d\u540c\u5ba2\u6237\u673a\u7684\u670d\u52a1\u65b9\u5f0f\u53d6\u51b3\u4e8e\u8c01\u51c6\u5907\u5904\u7406\u65b0\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u5ba2\u6237\u673a\u4ece\u54ea\u4e2a\u5206\u533a\u8bfb\u53d6\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6d88\u8d39\u8005 C3 \u5728\u67d0\u4e2a\u65f6\u523b\u6c38\u4e45\u5931\u6548\uff0cRedis \u5c06\u7ee7\u7eed\u4e3a\u5230\u8fbe\u7684\u6240\u6709\u65b0\u6d88\u606f\u63d0\u4f9b C1 \u548c C2 \u670d\u52a1\uff0c\u5c31\u50cf\u73b0\u5728\u53ea\u6709\u4e24\u4e2a logical \u5206\u533a\u4e00\u6837\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f\u7684\u901f\u5ea6\u6bd4\u5176\u4ed6\u6d88\u8d39\u8005\u5feb\u5f97\u591a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6d88\u8d39\u8005\u5728\u76f8\u540c\u7684\u65f6\u95f4\u5355\u4f4d\u5185\u5c06\u6309\u6bd4\u4f8b\u6536\u5230\u66f4\u591a\u7684\u6d88\u606f\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a Redis \u663e\u5f0f\u5730\u8ddf\u8e2a\u6240\u6709\u672a\u786e\u8ba4\u7684\u6d88\u606f\uff0c\u5e76\u8bb0\u4f4f\u8c01\u6536\u5230\u4e86\u54ea\u6761\u6d88\u606f\uff0c\u4ee5\u53ca\u7b2c\u4e00\u6761\u6d88\u606f\u7684 ID \u4ece\u672a\u4ea4\u4ed8\u7ed9\u4efb\u4f55\u6d88\u8d39\u8005\u3002 \u7136\u800c\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5728 Redis \u4e2d\uff0c\u5982\u679c\u4f60\u771f\u7684\u60f3\u5c06\u540c\u4e00\u6d41\u4e2d\u7684\u6d88\u606f\u5212\u5206\u5230\u591a\u4e2a Redis \u5b9e\u4f8b\u4e2d\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u591a\u4e2a\u952e\u548c\u4e00\u4e9b\u5206\u7247\u7cfb\u7edf\uff0c\u5982 Redis Cluster \u6216\u5176\u4ed6\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u7247\u7cfb\u7edf\u3002 \u5355\u4e2a Redis \u6d41\u4e0d\u4f1a\u81ea\u52a8\u5206\u533a\u5230\u591a\u4e2a\u5b9e\u4f8b\u3002 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8bf4\u4ee5\u4e0b\u662f\u6b63\u786e\u7684: \u5982\u679c\u60a8\u4f7f\u7528 1 \u4e2a\u6d41 -> 1 \u4e2a\u6d88\u8d39\u8005\uff0c\u5219\u60a8\u5c06\u6309\u987a\u5e8f\u5904\u7406\u6d88\u606f\u3002 \u5982\u679c\u4f7f\u7528 N \u4e2a\u6d41\u548c N \u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u89e6\u53ca N \u4e2a\u6d41\u7684\u5b50\u96c6\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u4e0a\u9762\u7684 1 \u4e2a\u6d41\u6a21\u578b -> 1 \u6d88\u8d39\u8005\u3002 \u5982\u679c\u60a8\u4f7f\u7528 1 \u4e2a\u6d41 -> N \u4e2a\u6d88\u8d39\u8005\uff0c\u90a3\u4e48\u60a8\u5c06\u8d1f\u8f7d\u5747\u8861\u5230 N \u4e2a\u6d88\u8d39\u8005\uff0c\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5173\u4e8e\u76f8\u540c\u903b\u8f91\u9879\u7684\u6d88\u606f\u53ef\u80fd\u4f1a\u88ab\u6253\u4e71\u987a\u5e8f\u4f7f\u7528\uff0c\u56e0\u4e3a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f 3 \u7684\u901f\u5ea6\u53ef\u80fd\u6bd4\u53e6\u4e00\u4e2a\u6d88\u8d39\u8005\u5904\u7406\u6d88\u606f 4 \u7684\u901f\u5ea6\u5feb\u3002 \u56e0\u6b64\uff0c\u57fa\u672c\u4e0a Kafka \u5206\u533a\u66f4\u7c7b\u4f3c\u4e8e\u4f7f\u7528 N \u4e2a\u4e0d\u540c\u7684 Redis \u952e\uff0c\u800c Redis \u6d88\u8d39\u7ec4\u662f\u4e00\u4e2a\u670d\u52a1\u5668\u7aef\u8d1f\u8f7d\u5e73\u8861\u7cfb\u7edf\uff0c\u5c06\u6d88\u606f\u4ece\u7ed9\u5b9a\u6d41\u53d1\u9001\u5230 N \u4e2a\u4e0d\u540c\u7684\u6d88\u8d39\u8005\u3002","title":"\u4e0e Kafka (TM)\u5206\u533a\u7684\u533a\u522b"},{"location":"docs/streams/streams-tutorial/#_10","text":"\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5e0c\u671b\u6c38\u8fdc\u5c06\u6570\u636e\u6536\u96c6\u5230\u6d41\u4e2d\u3002 \u6709\u65f6\uff0c\u5728\u6d41\u4e2d\u62e5\u6709\u6700\u591a\u7ed9\u5b9a\u6570\u91cf\u7684\u6761\u76ee\u662f\u6709\u7528\u7684\uff0c\u5176\u4ed6\u65f6\u5019\uff0c\u4e00\u65e6\u8fbe\u5230\u4e86\u7ed9\u5b9a\u7684\u5927\u5c0f\uff0c\u5c06\u6570\u636e\u4ece Redis \u79fb\u52a8\u5230\u4e00\u4e2a\u4e0d\u5728\u5185\u5b58\u4e2d\u3001\u901f\u5ea6\u4e0d\u90a3\u4e48\u5feb\u4f46\u9002\u5408\u5b58\u50a8\u5386\u53f2\u7684\u5b58\u50a8\u7a7a\u95f4\u662f\u6709\u7528\u7684\uff0c\u53ef\u80fd\u662f\u672a\u6765\u51e0\u5341\u5e74\u3002 Redis \u6d41\u5bf9\u6b64\u6709\u4e00\u4e9b\u652f\u6301\u3002 \u4e00\u4e2a\u662f XADD \u547d\u4ee4\u7684 MAXLEN \u9009\u9879\u3002\u8fd9\u4e2a\u9009\u9879\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355: Text Only > XADD mystream MAXLEN 2 * value 1 1526654998691-0 > XADD mystream MAXLEN 2 * value 2 1526654999635-0 > XADD mystream MAXLEN 2 * value 3 1526655000369-0 > XLEN mystream (integer) 2 > XRANGE mystream - + 1) 1) 1526654999635-0 2) 1) \"value\" 2) \"2\" 2) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" \u4f7f\u7528 MAXLEN \uff0c\u5f53\u8fbe\u5230\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u65e7\u7684\u6761\u76ee\u5c06\u88ab\u81ea\u52a8\u5220\u9664\uff0c\u56e0\u6b64\u6d41\u5c06\u4fdd\u6301\u6052\u5b9a\u7684\u5927\u5c0f\u3002 \u76ee\u524d\u8fd8\u6ca1\u6709\u9009\u9879\u544a\u8bc9\u6d41\u53ea\u4fdd\u7559\u4e0d\u8d85\u8fc7\u7ed9\u5b9a\u5468\u671f\u7684\u9879\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u547d\u4ee4\uff0c\u4e3a\u4e86\u4e00\u81f4\u5730\u8fd0\u884c\uff0c\u53ef\u80fd\u4f1a\u963b\u585e\u5f88\u957f\u65f6\u95f4\u4ee5\u9a71\u9010\u9879\u76ee\u3002 \u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u63d2\u5165\u9ad8\u5cf0\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u6682\u505c\uff0c\u7136\u540e\u662f\u53e6\u4e00\u4e2a\u63d2\u5165\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u76f8\u540c\u7684\u6700\u957f\u65f6\u95f4\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u6d41\u5c06\u963b\u585e\u4ee5\u9a71\u9010\u5728\u6682\u505c\u671f\u95f4\u53d8\u5f97\u592a\u65e7\u7684\u6570\u636e\u3002 \u56e0\u6b64\uff0c\u7528\u6237\u9700\u8981\u505a\u4e00\u4e9b\u8ba1\u5212\uff0c\u5e76\u4e86\u89e3\u6240\u9700\u7684\u6700\u5927\u6d41\u957f\u5ea6\u3002 \u6b64\u5916\uff0c\u5c3d\u7ba1\u6d41\u7684\u957f\u5ea6\u4e0e\u6240\u4f7f\u7528\u7684\u5185\u5b58\u6210\u6b63\u6bd4\uff0c\u4f46\u6309\u65f6\u95f4\u8fdb\u884c\u4fee\u526a\u5c31\u4e0d\u90a3\u4e48\u5bb9\u6613\u63a7\u5236\u548c\u9884\u6d4b\u4e86:\u5b83\u53d6\u51b3\u4e8e\u63d2\u5165\u7387\uff0c\u800c\u63d2\u5165\u7387\u901a\u5e38\u4f1a\u968f\u65f6\u95f4\u53d8\u5316(\u5f53\u5b83\u4e0d\u53d8\u5316\u65f6\uff0c\u90a3\u4e48\u4ec5\u6309\u5927\u5c0f\u8fdb\u884c\u4fee\u526a\u662f\u5fae\u4e0d\u8db3\u9053\u7684)\u3002 \u7136\u800c\uff0c\u4f7f\u7528 MAXLEN \u8fdb\u884c\u4fee\u526a\u53ef\u80fd\u4f1a\u975e\u5e38\u6602\u8d35:\u6d41\u901a\u8fc7\u5b8f\u8282\u70b9\u8868\u793a\u4e3a\u57fa\u6811\uff0c\u4ee5\u975e\u5e38\u9ad8\u6548\u7684\u5185\u5b58\u3002 \u6539\u53d8\u7531\u51e0\u5341\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5355\u4e2a\u5b8f\u8282\u70b9\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u4ee5\u4ee5\u4e0b\u7279\u6b8a\u5f62\u5f0f\u4f7f\u7528\u8be5\u547d\u4ee4: Text Only XADD mystream MAXLEN ~ 1000 * ... entry fields here ... MAXLEN \u9009\u9879\u548c\u5b9e\u9645\u8ba1\u6570\u4e4b\u95f4\u7684 ~ \u53c2\u6570\u610f\u5473\u7740\uff0c\u6211\u5e76\u4e0d\u771f\u7684\u9700\u8981\u5b83\u6070\u597d\u662f 1000 \u9879\u3002\u5b83\u53ef\u4ee5\u662f 1000 \u6216 1010 \u6216 1030\uff0c\u53ea\u8981\u786e\u4fdd\u81f3\u5c11\u4fdd\u5b58 1000 \u4e2a\u9879\u76ee\u3002 \u4f7f\u7528\u6b64\u53c2\u6570\uff0c\u53ea\u6709\u5728\u53ef\u4ee5\u5220\u9664\u6574\u4e2a\u8282\u70b9\u65f6\u624d\u6267\u884c\u4fee\u526a\u3002 \u8fd9\u4f7f\u5b83\u66f4\u6709\u6548\uff0c\u8fd9\u901a\u5e38\u662f\u60a8\u60f3\u8981\u7684\u3002 \u8fd8\u6709 XTRIM \u547d\u4ee4\uff0c\u5b83\u6267\u884c\u7684\u64cd\u4f5c\u4e0e\u4e0a\u9762\u7684 MAXLEN \u9009\u9879\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u53ef\u4ee5\u81ea\u5df1\u8fd0\u884c: Text Only > XTRIM mystream MAXLEN 10 \u6216\u8005\uff0c\u5bf9\u4e8e XADD \u9009\u9879: Text Only > XTRIM mystream MAXLEN ~ 10 \u7136\u800c\uff0c XTRIM \u88ab\u8bbe\u8ba1\u4e3a\u63a5\u53d7\u4e0d\u540c\u7684\u4fee\u526a\u7b56\u7565\u3002 \u53e6\u4e00\u79cd\u5220\u9664\u7b56\u7565\u662f MINID \uff0c\u5b83\u5220\u9664 id \u4f4e\u4e8e\u6307\u5b9a\u503c\u7684\u9879\u3002 \u7531\u4e8e XTRIM \u662f\u4e00\u4e2a\u663e\u5f0f\u547d\u4ee4\uff0c\u7528\u6237\u5e94\u8be5\u77e5\u9053\u4e0d\u540c\u7684\u88c1\u526a\u7b56\u7565\u53ef\u80fd\u5b58\u5728\u7684\u7f3a\u70b9\u3002 \u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5220\u9664\u7b56\u7565\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u6dfb\u52a0\u5230 XTRIM \uff0c\u662f\u901a\u8fc7\u4e00\u7cfb\u5217 id \u5220\u9664\uff0c\u4ee5\u65b9\u4fbf\u4f7f\u7528 XRANGE \u548c XTRIM \u5c06\u6570\u636e\u4ece Redis \u79fb\u52a8\u5230\u5176\u4ed6\u5b58\u50a8\u7cfb\u7edf\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\u3002","title":"\u9650\u5236\u6d41"},{"location":"docs/streams/streams-tutorial/#api-id","text":"\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u5728 Redis API \u4e2d\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a\u7279\u6b8a\u7684 id\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u77ed\u7684\u56de\u987e\uff0c\u4ee5\u4fbf\u5c06\u6765\u80fd\u66f4\u6709\u610f\u4e49\u3002 \u524d\u4e24\u4e2a\u7279\u6b8a id \u662f - \u548c + \uff0c\u5728\u4f7f\u7528 XRANGE \u547d\u4ee4\u8fdb\u884c\u8303\u56f4\u67e5\u8be2\u65f6\u4f7f\u7528\u3002 \u8fd9\u4e24\u4e2a ID \u5206\u522b\u8868\u793a\u53ef\u80fd\u7684\u6700\u5c0f ID(\u57fa\u672c\u4e0a\u662f 0-1 )\u548c\u53ef\u80fd\u7684\u6700\u5927 ID(\u5373 18446744073709551615-18446744073709551615 )\u3002 \u5982\u4f60\u6240\u89c1\uff0c\u5199 - \u548c + \u6bd4\u5199\u90a3\u4e9b\u6570\u5b57\u8981\u7b80\u6d01\u5f97\u591a\u3002 \u8fd8\u6709\u4e00\u4e9b api\uff0c\u6211\u4eec\u60f3\u8bf4\uff0c\u6d41\u4e2d ID \u6700\u5927\u7684\u9879\u7684 ID\u3002 \u8fd9\u5c31\u662f $ \u7684\u542b\u4e49\u3002 \u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6211\u53ea\u60f3\u8981\u6709 XREADGROUP \u7684\u65b0\u6761\u76ee\uff0c\u6211\u4f7f\u7528\u8fd9\u4e2a ID \u6765\u8868\u793a\u6211\u5df2\u7ecf\u6709\u4e86\u6240\u6709\u73b0\u6709\u7684\u6761\u76ee\uff0c\u800c\u4e0d\u662f\u672a\u6765\u5c06\u63d2\u5165\u7684\u65b0\u6761\u76ee\u3002 \u7c7b\u4f3c\u5730\uff0c\u5f53\u6211\u521b\u5efa\u6216\u8bbe\u7f6e\u6d88\u8d39\u7ec4\u7684 ID \u65f6\uff0c\u6211\u53ef\u4ee5\u5c06\u6700\u540e\u4ea4\u4ed8\u7684\u9879\u76ee\u8bbe\u7f6e\u4e3a $ \uff0c\u4ee5\u4fbf\u53ea\u5411\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u4ea4\u4ed8\u65b0\u6761\u76ee\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c $ \u5e76\u4e0d\u610f\u5473\u7740 + \uff0c\u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a + \u662f\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u6d41\u4e2d\u53ef\u80fd\u7684\u6700\u5927 ID\uff0c\u800c $ \u662f\u5305\u542b\u7ed9\u5b9a\u6761\u76ee\u7684\u7ed9\u5b9a\u6d41\u4e2d\u7684\u6700\u5927 ID\u3002 \u6b64\u5916\uff0capi \u901a\u5e38\u53ea\u7406\u89e3 + \u6216 $ \uff0c\u4f46\u907f\u514d\u52a0\u8f7d\u5177\u6709\u591a\u79cd\u542b\u4e49\u7684\u7ed9\u5b9a\u7b26\u53f7\u662f\u6709\u7528\u7684\u3002 \u53e6\u4e00\u4e2a\u7279\u6b8a ID \u662f > \uff0c\u8fd9\u662f\u4e00\u4e2a\u4ec5\u4e0e\u6d88\u8d39\u7ec4\u76f8\u5173\u7684\u7279\u6b8a\u542b\u4e49\uff0c\u4e14\u4ec5\u5f53\u4f7f\u7528 XREADGROUP \u547d\u4ee4\u65f6\u3002 \u8fd9\u4e2a\u7279\u6b8a ID \u610f\u5473\u7740\u6211\u4eec\u53ea\u60f3\u8981\u5230\u76ee\u524d\u4e3a\u6b62\u4ece\u672a\u4ea4\u4ed8\u7ed9\u5176\u4ed6\u6d88\u8d39\u8005\u7684\u6761\u76ee\u3002 \u6240\u4ee5\u57fa\u672c\u4e0a > ID \u662f\u6d88\u8d39\u7ec4\u7684 \u6700\u540e\u4e00\u4e2a\u53d1\u9001\u7684 ID \u3002 \u6700\u540e\uff0c\u7279\u6b8a ID * \u53ea\u80fd\u4e0e XADD \u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u5b83\u610f\u5473\u7740\u4e3a\u65b0\u6761\u76ee\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a ID\u3002 \u6240\u4ee5\u6211\u4eec\u6709 - \uff0c + \uff0c $ \uff0c > \u548c * \uff0c\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002","title":"\u6d41 API \u4e2d\u7684\u7279\u6b8a id"},{"location":"docs/streams/streams-tutorial/#_11","text":"\u50cf\u4efb\u4f55\u5176\u4ed6 Redis \u6570\u636e\u7ed3\u6784\u4e00\u6837\uff0c\u6d41\u88ab\u5f02\u6b65\u590d\u5236\u5230\u526f\u672c\u5e76\u6301\u4e45\u4fdd\u5b58\u5230 AOF \u548c RDB \u6587\u4ef6\u4e2d\u3002 \u7136\u800c\uff0c\u53ef\u80fd\u4e0d\u90a3\u4e48\u660e\u663e\u7684\u662f\uff0c\u6d88\u8d39\u7ec4\u7684\u5b8c\u6574\u72b6\u6001\u4e5f\u88ab\u4f20\u64ad\u5230 AOF\u3001RDB \u548c\u526f\u672c\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u6761\u6d88\u606f\u5728\u4e3b\u670d\u52a1\u5668\u4e2d\u6302\u8d77\uff0c\u526f\u672c\u4e5f\u5c06\u5177\u6709\u76f8\u540c\u7684\u4fe1\u606f\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u91cd\u65b0\u542f\u52a8\u4e4b\u540e\uff0cAOF \u5c06\u6062\u590d\u6d88\u8d39\u7ec4\u7684\u72b6\u6001\u3002 \u4f46\u662f\u8bf7\u6ce8\u610f\uff0cRedis \u6d41\u548c\u6d88\u8d39\u7ec4\u662f\u4f7f\u7528 Redis \u9ed8\u8ba4\u590d\u5236\u6301\u4e45\u5316\u548c\u590d\u5236\u7684\uff0c\u6240\u4ee5: \u5982\u679c\u6d88\u606f\u7684\u6301\u4e45\u6027\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5f88\u91cd\u8981\uff0cAOF \u5fc5\u987b\u4e0e\u5f3a fsync \u7b56\u7565\u4e00\u8d77\u4f7f\u7528\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u590d\u5236\u4e0d\u4f1a\u4fdd\u8bc1\u590d\u5236 XADD \u547d\u4ee4\u6216\u6d88\u8d39\u7ec4\u72b6\u6001\u66f4\u6539:\u5728\u6545\u969c\u8f6c\u79fb\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e9b\u4e1c\u897f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u526f\u672c\u4ece\u4e3b\u670d\u52a1\u5668\u63a5\u6536\u6570\u636e\u7684\u80fd\u529b\u3002 \u53ef\u4ee5\u4f7f\u7528 WAIT \u547d\u4ee4\u5f3a\u5236\u5c06\u66f4\u6539\u4f20\u64ad\u5230\u4e00\u7ec4\u526f\u672c\u3002 \u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u8fd9\u4f7f\u5f97\u6570\u636e\u4e0d\u592a\u53ef\u80fd\u4e22\u5931\uff0c\u4f46\u7531 Sentinel \u6216 Redis Cluster \u64cd\u4f5c\u7684 Redis \u6545\u969c\u8f6c\u79fb\u8fc7\u7a0b\u53ea\u6267\u884c \u6700\u5927\u52aa\u529b\u68c0\u67e5 \uff0c\u4ee5\u6545\u969c\u8f6c\u79fb\u5230\u66f4\u65b0\u6700\u5feb\u7684\u526f\u672c\uff0c\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u6545\u969c\u6761\u4ef6\u4e0b\uff0c\u53ef\u80fd\u4f1a\u4fc3\u4f7f\u7f3a\u4e4f\u4e00\u4e9b\u6570\u636e\u7684\u526f\u672c\u3002 \u56e0\u6b64\uff0c\u5f53\u4f7f\u7528 Redis \u6d41\u548c\u6d88\u8d39\u7ec4\u8bbe\u8ba1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u786e\u4fdd\u7406\u89e3\u5e94\u7528\u7a0b\u5e8f\u5728\u6545\u969c\u671f\u95f4\u5e94\u8be5\u5177\u6709\u7684\u8bed\u4e49\u5c5e\u6027\uff0c\u5e76\u76f8\u5e94\u5730\u8fdb\u884c\u914d\u7f6e\uff0c\u8bc4\u4f30\u5b83\u662f\u5426\u8db3\u591f\u5b89\u5168\u3002","title":"\u6301\u4e45\u6027\u3001\u590d\u5236\u548c\u6d88\u606f\u5b89\u5168\u6027"},{"location":"docs/streams/streams-tutorial/#_12","text":"\u6d41\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u4ece\u6d41\u4e2d\u95f4\u5220\u9664\u9879\u7684\u7279\u6b8a\u547d\u4ee4\uff0c\u4ec5\u901a\u8fc7 ID\u3002 \u901a\u5e38\uff0c\u5bf9\u4e8e\u4ec5\u9644\u52a0\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5947\u602a\u7684\u7279\u6027\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u5bf9\u6d89\u53ca(\u4f8b\u5982\u9690\u79c1\u89c4\u5219)\u7684\u5e94\u7528\u7a0b\u5e8f\u5f88\u6709\u7528\u3002 \u8be5\u547d\u4ee4\u88ab\u79f0\u4e3a XDEL \uff0c\u63a5\u6536\u6d41\u7684\u540d\u79f0\u548c\u8981\u5220\u9664\u7684 id: Text Only > XRANGE mystream - + COUNT 2 1) 1) 1526654999635-0 2) 1) \"value\" 2) \"2\" 2) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" > XDEL mystream 1526654999635-0 (integer) 1 > XRANGE mystream - + COUNT 2 1) 1) 1526655000369-0 2) 1) \"value\" 2) \"3\" \u7136\u800c\uff0c\u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u76f4\u5230\u5b8f\u8282\u70b9\u5b8c\u5168\u4e3a\u7a7a\u65f6\u624d\u771f\u6b63\u56de\u6536\u5185\u5b58\uff0c\u56e0\u6b64\u4e0d\u5e94\u6ee5\u7528\u6b64\u7279\u6027\u3002","title":"\u4ece\u6d41\u4e2d\u5220\u9664\u5355\u4e2a\u9879"},{"location":"docs/streams/streams-tutorial/#_13","text":"\u6d41\u548c\u5176\u4ed6 Redis \u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5f53\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e0d\u518d\u6709\u4efb\u4f55\u5143\u7d20\u65f6\uff0c\u4f5c\u4e3a\u8c03\u7528\u5220\u9664\u5143\u7d20\u547d\u4ee4\u7684\u526f\u4f5c\u7528\uff0c\u952e\u672c\u8eab\u5c06\u88ab\u5220\u9664\u3002 \u4f8b\u5982\uff0c\u5f53\u8c03\u7528 ZREM \u5c06\u5220\u9664\u6392\u5e8f\u96c6\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u6392\u5e8f\u96c6\u5c06\u88ab\u5b8c\u5168\u5220\u9664\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d41\u88ab\u5141\u8bb8\u4fdd\u6301\u96f6\u5143\u7d20\uff0c\u8fd9\u662f\u4f7f\u7528\u8ba1\u6570\u4e3a\u96f6\u7684 MAXLEN \u9009\u9879( XADD \u548c XTRIM \u547d\u4ee4)\u7684\u7ed3\u679c\uff0c\u6216\u8005\u662f\u56e0\u4e3a\u8c03\u7528\u4e86 XDEL \u3002 \u5b58\u5728\u8fd9\u79cd\u4e0d\u5bf9\u79f0\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6d41\u53ef\u80fd\u6709\u5173\u8054\u7684\u6d88\u8d39\u7ec4\uff0c\u800c\u6211\u4eec\u4e0d\u5e0c\u671b\u4ec5\u4ec5\u56e0\u4e3a\u6d41\u4e2d\u4e0d\u518d\u6709\u4efb\u4f55\u9879\u76ee\u800c\u5931\u53bb\u6d88\u8d39\u7ec4\u5b9a\u4e49\u7684\u72b6\u6001\u3002 \u76ee\u524d\uff0c\u5373\u4f7f\u6d41\u6ca1\u6709\u5173\u8054\u7684\u6d88\u8d39\u7ec4\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5220\u9664\u3002","title":"\u96f6\u957f\u5ea6\u6d41"},{"location":"docs/streams/streams-tutorial/#_14","text":"\u50cf XRANGE \u548c XREAD \u6216 XREADGROUP \u8fd9\u6837\u6ca1\u6709 BLOCK \u9009\u9879\u7684\u975e\u963b\u585e\u6d41\u547d\u4ee4\u50cf\u5176\u4ed6\u4efb\u4f55 Redis \u547d\u4ee4\u4e00\u6837\u662f\u540c\u6b65\u670d\u52a1\u7684\uff0c\u6240\u4ee5\u8ba8\u8bba\u6b64\u7c7b\u547d\u4ee4\u7684\u5ef6\u8fdf\u662f\u6ca1\u6709\u610f\u4e49\u7684:\u5728 Redis \u6587\u6863\u4e2d\u68c0\u67e5\u547d\u4ee4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u6709\u8da3\u3002 \u53ef\u4ee5\u8fd9\u6837\u8bf4\uff0c\u5728\u63d0\u53d6\u8303\u56f4\u65f6\uff0c\u6d41\u547d\u4ee4\u81f3\u5c11\u548c\u6392\u5e8f\u7684\u96c6\u5408\u547d\u4ee4\u4e00\u6837\u5feb\uff0c\u800c XADD \u975e\u5e38\u5feb\uff0c\u5982\u679c\u4f7f\u7528\u6d41\uff0c\u5b83\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u4e00\u53f0\u666e\u901a\u673a\u5668\u4e2d\u6bcf\u79d2\u63d2\u5165 50 \u4e07\u5230 100 \u4e07\u9879\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u4e86\u89e3\u5728\u963b\u585e\u6d88\u8d39\u7ec4\u4e2d\u7684\u6d88\u8d39\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u901a\u8fc7 XADD \u4ea7\u751f\u6d88\u606f\u7684\u65f6\u523b\u5230\u7531\u4e8e XREADGROUP \u4e0e\u6d88\u606f\u4e00\u8d77\u8fd4\u56de\u800c\u7531\u6d88\u8d39\u8005\u83b7\u53d6\u6d88\u606f\u7684\u65f6\u523b\uff0c\u5ef6\u8fdf\u5c31\u6210\u4e3a\u4e00\u4e2a\u6709\u8da3\u7684\u53c2\u6570\u3002","title":"\u4f7f\u7528\u6d88\u606f\u7684\u603b\u5ef6\u8fdf"},{"location":"docs/streams/streams-tutorial/#_15","text":"\u5728\u63d0\u4f9b\u6240\u6267\u884c\u6d4b\u8bd5\u7684\u7ed3\u679c\u4e4b\u524d\uff0c\u4e86\u89e3 Redis \u4f7f\u7528\u4ec0\u4e48\u6a21\u578b\u6765\u8def\u7531\u6d41\u6d88\u606f\u662f\u5f88\u6709\u8da3\u7684(\u5b9e\u9645\u4e0a\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55\u7b49\u5f85\u6570\u636e\u7684\u963b\u585e\u64cd\u4f5c\u662f\u5982\u4f55\u7ba1\u7406\u7684)\u3002 \u88ab\u963b\u585e\u7684\u5ba2\u6237\u7aef\u5728\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\u88ab\u5f15\u7528\uff0c\u8be5\u54c8\u5e0c\u8868\u5c06\u81f3\u5c11\u6709\u4e00\u4e2a\u963b\u585e\u6d88\u8d39\u8005\u7684\u952e\u6620\u5c04\u5230\u4e00\u4e2a\u6b63\u5728\u7b49\u5f85\u8be5\u952e\u7684\u6d88\u8d39\u8005\u5217\u8868\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u63a5\u6536\u6570\u636e\u7684\u952e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u6790\u6b63\u5728\u7b49\u5f85\u6b64\u7c7b\u6570\u636e\u7684\u6240\u6709\u5ba2\u6237\u673a\u3002 \u5f53\u5199\u5165\u53d1\u751f\u65f6\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u5f53 XADD \u547d\u4ee4\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u8c03\u7528 signalKeyAsReady() \u51fd\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5c06\u628a\u952e\u653e\u5165\u9700\u8981\u5904\u7406\u7684\u952e\u5217\u8868\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u952e\u53ef\u80fd\u6709\u88ab\u963b\u585e\u7684\u4f7f\u7528\u8005\u7684\u65b0\u6570\u636e\u3002 \u6ce8\u610f\uff0c\u8fd9\u6837\u7684 \u5c31\u7eea \u952e\u7a0d\u540e\u5c06\u88ab\u5904\u7406\uff0c\u56e0\u6b64\u5728\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u5468\u671f\u4e2d\uff0c\u952e\u53ef\u80fd\u4f1a\u63a5\u6536\u5230\u5176\u4ed6\u5199\u64cd\u4f5c\u3002 \u6700\u540e\uff0c\u5728\u8fd4\u56de\u5230\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\uff0c\u6700\u540e\u5904\u7406 \u5c31\u7eea \u952e\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u952e\uff0c\u5c06\u626b\u63cf\u7b49\u5f85\u6570\u636e\u7684\u5ba2\u6237\u7aef\u5217\u8868\uff0c\u5982\u679c\u9002\u7528\uff0c\u8fd9\u6837\u7684\u5ba2\u6237\u7aef\u5c06\u63a5\u6536\u5230\u8fbe\u7684\u65b0\u6570\u636e\u3002 \u5728\u6d41\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u662f\u6d88\u8d39\u8005\u8bf7\u6c42\u7684\u9002\u7528\u8303\u56f4\u5185\u7684\u6d88\u606f\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u57fa\u672c\u4e0a\uff0c\u5728\u8fd4\u56de\u5230\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\uff0c\u8c03\u7528 XADD \u7684\u5ba2\u6237\u7aef\u548c\u88ab\u963b\u585e\u6d88\u8d39\u6d88\u606f\u7684\u5ba2\u6237\u7aef\u90fd\u5c06\u5728\u8f93\u51fa\u7f13\u51b2\u533a\u4e2d\u6709\u5b83\u4eec\u7684\u56de\u590d\uff0c\u6240\u4ee5 XADD \u7684\u8c03\u7528\u8005\u5e94\u8be5\u5728\u6d88\u8d39\u8005\u5c06\u6536\u5230\u65b0\u6d88\u606f\u7684\u540c\u65f6\u4ece Redis \u6536\u5230\u56de\u590d\u3002 \u8be5\u6a21\u578b\u662f \u57fa\u4e8e\u63a8 \u7684\uff0c\u56e0\u4e3a\u5411\u6d88\u8d39\u8005\u7f13\u51b2\u533a\u6dfb\u52a0\u6570\u636e\u5c06\u7531\u8c03\u7528 XADD \u7684\u64cd\u4f5c\u76f4\u63a5\u6267\u884c\uff0c\u56e0\u6b64\u5ef6\u8fdf\u5f80\u5f80\u662f\u76f8\u5f53\u53ef\u9884\u6d4b\u7684\u3002","title":"\u5982\u4f55\u670d\u52a1\u88ab\u5c4f\u853d\u7684\u6d88\u8d39\u8005"},{"location":"docs/streams/streams-tutorial/#_16","text":"\u4e3a\u4e86\u68c0\u67e5\u8fd9\u4e9b\u5ef6\u8fdf\u7279\u5f81\uff0c\u6211\u4eec\u4f7f\u7528\u591a\u4e2a Ruby \u7a0b\u5e8f\u5b9e\u4f8b\u6765\u6267\u884c\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u8fd9\u4e9b Ruby \u7a0b\u5e8f\u63a8\u9001\u7684\u6d88\u606f\u6709\u4e00\u4e2a\u9644\u52a0\u5b57\u6bb5\uff0c\u5373\u8ba1\u7b97\u673a\u6beb\u79d2\u65f6\u95f4\uff0cRuby \u7a0b\u5e8f\u4ece\u6d88\u8d39\u7ec4\u8bfb\u53d6\u6d88\u606f\u5e76\u5904\u7406\u5b83\u4eec\u3002 \u6d88\u606f\u5904\u7406\u6b65\u9aa4\u5305\u62ec\u6bd4\u8f83\u5f53\u524d\u8ba1\u7b97\u673a\u65f6\u95f4\u548c\u6d88\u606f\u65f6\u95f4\u6233\uff0c\u4ee5\u4fbf\u4e86\u89e3\u603b\u5ef6\u8fdf\u3002 \u7ed3\u679c: Text Only Processed between 0 and 1 ms -> 74.11% Processed between 1 and 2 ms -> 25.80% Processed between 2 and 3 ms -> 0.06% Processed between 3 and 4 ms -> 0.01% Processed between 4 and 5 ms -> 0.02% \u6240\u4ee5 99.9%\u7684\u8bf7\u6c42\u5ef6\u8fdf<= 2 \u6beb\u79d2\uff0c\u5f02\u5e38\u503c\u4ecd\u7136\u975e\u5e38\u63a5\u8fd1\u5e73\u5747\u503c\u3002 \u5411\u6d41\u4e2d\u6dfb\u52a0\u51e0\u767e\u4e07\u6761\u672a\u786e\u8ba4\u7684\u6d88\u606f\u5e76\u4e0d\u4f1a\u6539\u53d8\u57fa\u51c6\u6d4b\u8bd5\u7684\u8981\u70b9\uff0c\u5927\u591a\u6570\u67e5\u8be2\u4ecd\u7136\u4ee5\u975e\u5e38\u77ed\u7684\u5ef6\u8fdf\u5904\u7406\u3002 \u51e0\u70b9\u5907\u6ce8: \u8fd9\u91cc\u6211\u4eec\u6bcf\u6b21\u8fed\u4ee3\u6700\u591a\u5904\u7406 10k \u6d88\u606f\uff0c\u8fd9\u610f\u5473\u7740 XREADGROUP \u7684 COUNT \u53c2\u6570\u88ab\u8bbe\u7f6e\u4e3a 10000\u3002 \u8fd9\u589e\u52a0\u4e86\u5927\u91cf\u7684\u5ef6\u8fdf\uff0c\u4f46\u8fd9\u662f\u4e3a\u4e86\u5141\u8bb8\u901f\u5ea6\u8f83\u6162\u7684\u4f7f\u7528\u8005\u80fd\u591f\u8ddf\u4e0a\u6d88\u606f\u6d41\u800c\u9700\u8981\u7684\u3002 \u6240\u4ee5\u73b0\u5b9e\u4e16\u754c\u7684\u5ef6\u8fdf\u4f1a\u5c0f\u5f97\u591a\u3002 \u4e0e\u4eca\u5929\u7684\u6807\u51c6\u76f8\u6bd4\uff0c\u7528\u4e8e\u6b64\u57fa\u51c6\u6d4b\u8bd5\u7684\u7cfb\u7edf\u975e\u5e38\u6162\u3002","title":"\u5ef6\u8fdf\u6d4b\u8bd5\u7ed3\u679c"}]}